Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_pass_the_stress_test,Cyclomatic complexity of the method is 8
Complex Method,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,CheckMaterialized,Cyclomatic complexity of the method is 8
Long Parameter List,Akka.Streams.Tests.Implementation,StressTestCursor,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,StressTestCursor,The method has 5 parameters. Parameters: cursorNr' run' log' counterLimit' sb
Long Statement,Akka.Streams.Tests,ActorMaterializerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\ActorMaterializerSpec.cs,ActorMaterializer_should_handle_properly_broken_Props,The length of the statement  "            Action action = () => Source.ActorPublisher<object>(Props.Create(typeof(TestActor)' "wrong"' "args")).RunWith(Sink.First<object>()' m); " is 135.
Long Statement,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_work_with_OneByOneRequestStrategy,The length of the statement  "                .RunWith(Sink.ActorSubscriber<int>(RequestStrategySubscriber.Props(TestActor' OneByOneRequestStrategy.Instance))' Sys.Materializer()); " is 134.
Long Statement,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_should_work_with_WatermarkRequestStrategy,The length of the statement  "                .RunWith(Sink.ActorSubscriber<int>(RequestStrategySubscriber.Props(TestActor' new WatermarkRequestStrategy(highWatermark: 10)))' Sys.Materializer()); " is 149.
Long Statement,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_use_dispatcher_from_props,The length of the statement  "            var actorRef = Source.ActorPublisher<string>(TestPublisher.Props(TestActor' useTestDispatcher: false).WithDispatcher("my-dispatcher1")) " is 135.
Long Statement,Akka.Streams.Tests.Actor,TestPublisher,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,Receive,The length of the statement  "                .With<ThreadName>(()=>_probe.Tell(Context.Props.Dispatcher /*Thread.CurrentThread.Name*/)) // TODO fix me when thread name is set by dispatcher " is 143.
Long Statement,Akka.Streams.Tests.Dsl,FlowCollectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowCollectSpec.cs,A_Collect_must_collect,The length of the statement  "            RandomTestRange(Sys).ForEach(_=>RunScript(script' Materializer.Settings'flow => flow.Collect(x => x%2 == 0 ? (x*x).ToString() : null))); " is 136.
Long Statement,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_work_with_many_concurrently_queued_events,The length of the statement  "            var elems = p.Within(TimeSpan.FromSeconds(1)' () => Enumerable.Range(1' noOfSources * 10).Select(_ => p.RequestNext()).ToArray()); " is 130.
Long Statement,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_fail_when_exceeding_maxSubstreams,The length of the statement  "                    .RunWith(TestSource.SourceProbe<int>(this)' TestSink.SinkProbe<Tuple<IImmutableList<int>' Source<int' NotUsed>>>(this)' Materializer); " is 134.
Long Statement,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_concat_cycle,The length of the statement  "                var flow = Flow.FromGraph(GraphDsl.Create(TestSource.SourceProbe<string>(this)' Sink.First<string>()' Keep.Both' (b' source' sink) => " is 133.
Long Statement,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_source_must_allow_configuring_log_levels_via_Attributes,The length of the statement  "            error.Message.ToString().Should().Be("[flow-6e] Upstream failed' cause: Akka.Streams.TestKit.Tests.TestException test"); " is 120.
Long Statement,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_support_incoming_subscriber_while_elements_were_requested_before,The length of the statement  "            downstream2.ExpectNoMsg(Dilated(TimeSpan.FromMilliseconds(100))); // as nothing was requested yet' fanOutBox needs to cache element in this case " is 144.
Long Statement,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_call_future_subscribers_OnError_after_OnSubscribe_if_initial_upstream_was_completed,The length of the statement  "            downstream2.ExpectNoMsg(Dilated(TimeSpan.FromMilliseconds(100))); // as nothing was requested yet' fanOutBox needs to cache element in this case " is 144.
Long Statement,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,FaultyFlow,The length of the statement  "                var assembly = new GraphAssembly(new IGraphStageWithMaterializedValue<Shape' object>[] { stage }' new[] { Attributes.None }' " is 124.
Long Statement,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_with_single_element_splits,The length of the statement  "                    .SelectAsync(1' s => s.RunWith(Sink.First<int>()' Materializer)) // Please note that this line *also* implicitly asserts nonempty substreams " is 140.
Long Statement,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The length of the statement  "                        var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null); " is 208.
Long Statement,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_fairly_balance_between_three_outputs,The length of the statement  "                                .MapMaterializedValue<Tuple<TestSubscriber.Probe<int>' TestSubscriber.Probe<int>' TestSubscriber.Probe<int>>>(_ => null); " is 121.
Long Statement,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_with_22_way_braodcast,The length of the statement  "                //var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' headSink' Tuple.Create' " is 283.
Long Statement,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_with_22_way_braodcast,The length of the statement  "                //var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5' t.Item6' t.Item7' t.Item8' t.Item9' t.Item10' t.Item11' t.Item12' t.Item13' t.Item14' t.Item15' t.Item16' t.Item17' t.Item18' t.Item19' t.Item20' t.Item21' t.Item22); " is 237.
Long Statement,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The length of the statement  "                                .MapMaterializedValue<Tuple<Tuple<Task<int>' Task<int>>' Tuple<Task<int>' Task<int>>' Task<IEnumerable<int>>>>(_ => null); " is 122.
Long Statement,Akka.Streams.Tests.Dsl,LiftExtensions,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\LiftExtensions.cs,Lift,The length of the statement  "                source.PrefixAndTail(1).Select(p => Tuple.Create(key(p.Item1.First())' Source.Single(p.Item1.First()).Concat(p.Item2))).ConcatSubstream(); " is 138.
Long Statement,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_complete_stream_with_ArgumentNullException_when_null_is_emitted,The length of the statement  "            var task = Source.From(new[] {"a"' "b"}).Select(x => null as string).Limit(1000).RunWith(Sink.Seq<string>()' Materializer); " is 123.
Long Statement,Akka.Streams.Tests.Dsl,FlowTakeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeSpec.cs,A_Take_must_take,The length of the statement  "                d => Script.Create(RandomTestRange(Sys).Select(n => new Tuple<ICollection<int>' ICollection<int>>(new[] {n}' n > d ? new int[]{} : new[] {n})).ToArray()); " is 154.
Long Statement,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_for_graph,The length of the statement  "                //var second = Source.From(Enumerable.Range(2' 4)).MapMaterializedValue(new Func<NotUsed' Tuple<TestPublisher.Probe<int>' Task>>(_ => null)); " is 141.
Long Statement,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_ignore_and_log_warnings_for_PoisonPill_and_Kill_messages,The length of the statement  "                    "<PoisonPill> message sent to StageActorRef\\(akka\\://test/user/StreamSupervisor-[0-9]+/StageActorRef-[0-9]\\) will be ignored' since it is not a real Actor. Use a custom message type to communicate with it instead."); " is 219.
Long Statement,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_ignore_and_log_warnings_for_PoisonPill_and_Kill_messages,The length of the statement  "                    "<Kill> message sent to StageActorRef\\(akka\\://test/user/StreamSupervisor-[0-9]+/StageActorRef-[0-9]\\) will be ignored' since it is not a real Actor. Use a custom message type to communicate with it instead."); " is 213.
Long Statement,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Source_must_measure_time_it_takes_between_elements_matching_a_predicate,The length of the statement  "            var expectedNrOfOnIntervalCalls = testRuns.Length*((n/measureBetweenEvery) - 1); // first time has no value to compare to' so skips calling onInterval " is 150.
Long Statement,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_and_reuse_a_simple_bidi_stage,The length of the statement  "                var identity = identityBidiFlow.Atop(identityBidiFlow).Atop(identityBidiFlow).Join(Flow.Identity<int>().Select(x => x)); " is 120.
Long Statement,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_Expand_seed_throws,The length of the statement  "            WithOneBoundedSetup<int>(new Expand<int' int>(x => { if (x == 2) throw TE(); return new List<int> {x}.Concat(Enumerable.Repeat(-Math.Abs(x)' 100)).GetEnumerator(); })' " is 167.
Long Statement,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_Expand_extrapolate_throws,The length of the statement  "            WithOneBoundedSetup<int>(new Expand<int' int>(x => { if (x == 2) return ContinuallyThrow(); return new List<int> {x}.Concat(Enumerable.Repeat(-Math.Abs(x)' 100)).GetEnumerator(); })' " is 182.
Long Statement,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_maps,The length of the statement  "                    _helper?.WriteLine($"Chain finished in {time} seconds {ChainLength * Repetition} maps in total and {(ChainLength * Repetition) / (time * 1000 * 1000)} million maps/s"); " is 168.
Long Statement,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_maps_with_early_complete,The length of the statement  "                    $"Chain finished in {time} seconds {ChainLength*Repetition} maps in total and {(ChainLength*Repetition)/(time*1000*1000)} million maps/s"); " is 139.
Long Statement,Akka.Streams.Tests.Implementation.Fusing,LifecycleInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\LifecycleInterpreterSpec.cs,Interpreter_must_call_PostStop_in_order_on_stages_when_upstream_completes,The length of the statement  "                new PreStartAndPostStopIdentity<string>(onUpstreamCompleted: () => TestActor.Tell("complete-a")' onStop: ()=> TestActor.Tell("stop-a"))' " is 136.
Long Statement,Akka.Streams.Tests.Implementation.Fusing,LifecycleInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\LifecycleInterpreterSpec.cs,Interpreter_must_call_PostStop_in_order_on_stages_when_upstream_completes,The length of the statement  "                new PreStartAndPostStopIdentity<string>(onUpstreamCompleted: () => TestActor.Tell("complete-b")' onStop: ()=> TestActor.Tell("stop-b"))' " is 136.
Long Statement,Akka.Streams.Tests.Implementation.Fusing,LifecycleInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\LifecycleInterpreterSpec.cs,Interpreter_must_call_PostStop_in_order_on_stages_when_upstream_completes,The length of the statement  "                new PreStartAndPostStopIdentity<string>(onUpstreamCompleted: () => TestActor.Tell("complete-c")' onStop: ()=> TestActor.Tell("stop-c"))' " is 136.
Long Statement,Akka.Streams.Tests.Implementation.Fusing,BaseBuilder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpecKit.cs,ManualInit,The length of the statement  "                _interpreter = new GraphInterpreter(assembly' NoMaterializer.Instance' _logger' inHandlers' outHandlers' logics' (l' o' a) => {}' false); " is 137.
Long Statement,Akka.Streams.Tests.Implementation.Fusing,AssemblyBuilder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpecKit.cs,Init,The length of the statement  "                    var interpreter = new GraphInterpreter(assembly' NoMaterializer.Instance' _logger' inHandlers' outHandlers' logics' (l' o' a) => {}' false); " is 140.
Long Statement,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_be_able_to_model_simple_linear_stages,The length of the statement  "            var flow12 = stage1.Compose<object' object' NotUsed>(stage2' Keep.None).Wire(stage1.OutPorts.First()' stage2.InPorts.First()); " is 126.
Long Statement,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_be_able_to_model_simple_linear_stages,The length of the statement  "            var source012 = source0.Compose<object' object' NotUsed>(flow12' Keep.None).Wire(source0.OutPorts.First()' flow12.InPorts.First()); " is 131.
Long Statement,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_be_able_to_model_simple_linear_stages,The length of the statement  "            var sink123 = flow12.Compose<object' object' NotUsed>(sink3' Keep.None).Wire(flow12.OutPorts.First()' sink3.InPorts.First()); " is 125.
Long Statement,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_be_able_to_model_simple_linear_stages,The length of the statement  "            var runnable0123a = source0.Compose<object' object' NotUsed>(sink123' Keep.None).Wire(source0.OutPorts.First()' sink123.InPorts.First()); " is 137.
Long Statement,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_be_able_to_model_simple_linear_stages,The length of the statement  "            var runnable0123b = source012.Compose<object' object' NotUsed>(sink3' Keep.None).Wire(source012.OutPorts.First()' sink3.InPorts.First()); " is 137.
Long Statement,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_use_dedicated_blocking_io_dispatcher_by_default,The length of the statement  "                        //NOTE: Akka uses "fileSource" as name for DefaultAttributes.FileSink - I think it's mistake on the JVM implementation side " is 123.
Long Statement,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_fail_to_materialize_with_zero_sized_input_buffer,The length of the statement  "            Action a = () => Source.Single(_byteString).RunWith(StreamConverters.AsInputStream(Timeout).WithAttributes(Attributes.CreateInputBuffer(0' 0))' _materializer); " is 159.
Virtual Method Call from Constructor,Akka.Streams.Tests.Implementation.Fusing,OneBoundedSetup<TIn;TOut>,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpecKit.cs,OneBoundedSetup,The constructor "OneBoundedSetup" calls a virtual method "Run".
Empty Catch Block,Akka.Streams.Tests.Implementation.Fusing,KeepGoingStageSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\KeepGoingStageSpec.cs,A_stage_with_keep_going_must_still_be_alive_after_all_ports_have_been_closed_until_implicity_failed_via_exception,The method has an empty catch block.
Magic Number,Akka.Streams.Tests,ActorMaterializerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\ActorMaterializerSpec.cs,ActorMaterializer_should_properly_shut_down_actors_associated_with_it,The following statement contains a magic number: Action action = () => f.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Streams.Tests,ActorMaterializerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\ActorMaterializerSpec.cs,ActorMaterializer_should_refuse_materialization_after_shutdown,The following statement contains a magic number: Action action = () => Source.From(Enumerable.Range(1' 5)).RunForeach(Console.Write' m);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,Graph,The following statement contains a magic number: return                  Source.Unfold(1' x => Tuple.Create(x' x))                      .Where(x => x%2 == 1)                      .AlsoTo(                          Flow.Create<int>()                              .Aggregate(0' (sum' i) => sum + i)                              .To(Sink.First<int>().Named("otherSink"))                              .AddAttributes(async ? Attributes.CreateAsyncBoundary() : Attributes.None))                      .Via(Flow.Create<int>().Aggregate(1' (sum' i) => sum + i).Named("mainSink"));
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,Fusing_must_fuse_a_moderately_complex_graph,The following statement contains a magic number: Verify(fused' modules: 1' downstreams: 5);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,Fusing_must_not_fuse_accross_AsyncBoundary,The following statement contains a magic number: Verify(fused' modules: 2' downstreams: 5);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,Fusing_must_not_fuse_accross_AsyncBoundary,The following statement contains a magic number: Verify(fused' modules: 2' downstreams: 5);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,Fusing_must_properly_fuse_a_FusedGraph_that_has_been_extended_no_AsyncBoundary,The following statement contains a magic number: Verify(fused' modules: 1' downstreams: 6);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,Fusing_must_properly_fuse_a_FusedGraph_that_has_been_extended_with_AsyncBoundary,The following statement contains a magic number: Verify(fused' modules: 2' downstreams: 6);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,Fusing_must_properly_fuse_a_FusedGraph_that_has_been_extended_with_AsyncBoundary,The following statement contains a magic number: Verify(fused' modules: 2' downstreams: 6);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_work_with_asynchronous_boundaries_in_the_subflows,The following statement contains a magic number: var async = Flow.Create<int>().Select(x => x*2).Async();
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_work_with_asynchronous_boundaries_in_the_subflows,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x => x*10)                  .MergeMany(5' i => Source.From(Enumerable.Range(i' 10)).Via(async))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_work_with_asynchronous_boundaries_in_the_subflows,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x => x*10)                  .MergeMany(5' i => Source.From(Enumerable.Range(i' 10)).Via(async))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_work_with_asynchronous_boundaries_in_the_subflows,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x => x*10)                  .MergeMany(5' i => Source.From(Enumerable.Range(i' 10)).Via(async))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_work_with_asynchronous_boundaries_in_the_subflows,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x => x*10)                  .MergeMany(5' i => Source.From(Enumerable.Range(i' 10)).Via(async))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_work_with_asynchronous_boundaries_in_the_subflows,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x => x*10)                  .MergeMany(5' i => Source.From(Enumerable.Range(i' 10)).Via(async))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_work_with_asynchronous_boundaries_in_the_subflows,The following statement contains a magic number: t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_work_with_asynchronous_boundaries_in_the_subflows,The following statement contains a magic number: t.Result.Distinct().OrderBy(i => i).ShouldAllBeEquivalentTo(Enumerable.Range(0' 199).Where(i => i%2 == 0));
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_work_with_asynchronous_boundaries_in_the_subflows,The following statement contains a magic number: t.Result.Distinct().OrderBy(i => i).ShouldAllBeEquivalentTo(Enumerable.Range(0' 199).Where(i => i%2 == 0));
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_manual,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x =>                  {                      TestActor.Tell(refFunc());                      return x;                  })                  .MergeMany(5' i => Source.Single(i).Via(async))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_manual,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x =>                  {                      TestActor.Tell(refFunc());                      return x;                  })                  .MergeMany(5' i => Source.Single(i).Via(async))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_manual,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x =>                  {                      TestActor.Tell(refFunc());                      return x;                  })                  .MergeMany(5' i => Source.Single(i).Via(async))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_manual,The following statement contains a magic number: t.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_manual,The following statement contains a magic number: t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(0' 10));
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_manual,The following statement contains a magic number: var refs = ReceiveN(20);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_manual,The following statement contains a magic number: refs.Distinct().Should().HaveCount(11);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_combinator,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x =>                  {                      TestActor.Tell(refFunc());                      return x;                  })                  .MergeMany(5' i => Source.Single(i).Via(flow.Async()))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_combinator,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x =>                  {                      TestActor.Tell(refFunc());                      return x;                  })                  .MergeMany(5' i => Source.Single(i).Via(flow.Async()))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_combinator,The following statement contains a magic number: var t = Source.From(Enumerable.Range(0' 10))                  .Select(x =>                  {                      TestActor.Tell(refFunc());                      return x;                  })                  .MergeMany(5' i => Source.Single(i).Via(flow.Async()))                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_combinator,The following statement contains a magic number: t.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_combinator,The following statement contains a magic number: t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(0' 10));
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_combinator,The following statement contains a magic number: var refs = ReceiveN(20);
Magic Number,Akka.Streams.Tests,FusingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\FusingSpec.cs,A_SubFusingActorMaterializer_must_use_multiple_actors_when_there_are_asynchronous_boundaries_in_the_subflows_combinator,The following statement contains a magic number: refs.Distinct().Should().HaveCount(11);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriber_should_receive_requested_elements,The following statement contains a magic number: var actorRef = Source.From(new[] { 1' 2' 3 })                      .RunWith(Sink.ActorSubscriber<int>(ManualSubscriber.Props(TestActor))' Sys.Materializer());
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriber_should_receive_requested_elements,The following statement contains a magic number: var actorRef = Source.From(new[] { 1' 2' 3 })                      .RunWith(Sink.ActorSubscriber<int>(ManualSubscriber.Props(TestActor))' Sys.Materializer());
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriber_should_receive_requested_elements,The following statement contains a magic number: ExpectNoMsg(200);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriber_should_receive_requested_elements,The following statement contains a magic number: ExpectMsg<OnNext>().Element.Should().Be(2);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriber_should_receive_requested_elements,The following statement contains a magic number: ExpectNoMsg(200);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriber_should_receive_requested_elements,The following statement contains a magic number: ExpectMsg<OnNext>().Element.Should().Be(3);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_remember_requested_after_restart,The following statement contains a magic number: Source.From(Enumerable.Range(1' 7))                  .RunWith(Sink.FromSubscriber(new ActorSubscriberImpl<int>(actorRef))' Sys.Materializer());
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_remember_requested_after_restart,The following statement contains a magic number: ExpectMsg<OnNext>().Element.Should().Be(2);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_remember_requested_after_restart,The following statement contains a magic number: ExpectNoMsg(200);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_remember_requested_after_restart,The following statement contains a magic number: Enumerable.Range(3' 4).ForEach(n => ExpectMsg<OnNext>().Element.Should().Be(n));
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_remember_requested_after_restart,The following statement contains a magic number: Enumerable.Range(3' 4).ForEach(n => ExpectMsg<OnNext>().Element.Should().Be(n));
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_remember_requested_after_restart,The following statement contains a magic number: ExpectNoMsg(200);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_remember_requested_after_restart,The following statement contains a magic number: ExpectMsg<OnNext>().Element.Should().Be(7);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_not_deliver_more_after_cancel,The following statement contains a magic number: var actorRef = Source.From(Enumerable.Range(1' 5))                      .RunWith(Sink.ActorSubscriber<int>(ManualSubscriber.Props(TestActor))' Sys.Materializer());
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_not_deliver_more_after_cancel,The following statement contains a magic number: ExpectMsg<OnNext>().Element.Should().Be(2);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_not_deliver_more_after_cancel,The following statement contains a magic number: ExpectNoMsg(200);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_terminate_after_cancel,The following statement contains a magic number: var actorRef = Source.From(Enumerable.Range(1' 5))                      .RunWith(Sink.ActorSubscriber<int>(ManualSubscriber.Props(TestActor))' Sys.Materializer());
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_terminate_after_cancel,The following statement contains a magic number: ExpectTerminated(actorRef' TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_cancel_incoming_subscription_when_cancel_was_called_before_it_arrived,The following statement contains a magic number: ExpectNoMsg(200);
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_cancel_incoming_subscription_when_cancel_was_called_before_it_arrived,The following statement contains a magic number: ExpectTerminated(actorRef' TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_work_with_OneByOneRequestStrategy,The following statement contains a magic number: Source.From(Enumerable.Range(1' 17))                  .RunWith(Sink.ActorSubscriber<int>(RequestStrategySubscriber.Props(TestActor' OneByOneRequestStrategy.Instance))' Sys.Materializer());
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_work_with_OneByOneRequestStrategy,The following statement contains a magic number: Enumerable.Range(1' 17).ForEach(n => ExpectMsg<OnNext>().Element.Should().Be(n));
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_should_work_with_WatermarkRequestStrategy,The following statement contains a magic number: Source.From(Enumerable.Range(1' 17))                  .RunWith(Sink.ActorSubscriber<int>(RequestStrategySubscriber.Props(TestActor' new WatermarkRequestStrategy(highWatermark: 10)))' Sys.Materializer());
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_should_work_with_WatermarkRequestStrategy,The following statement contains a magic number: Source.From(Enumerable.Range(1' 17))                  .RunWith(Sink.ActorSubscriber<int>(RequestStrategySubscriber.Props(TestActor' new WatermarkRequestStrategy(highWatermark: 10)))' Sys.Materializer());
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_should_work_with_WatermarkRequestStrategy,The following statement contains a magic number: Enumerable.Range(1' 17).ForEach(n => ExpectMsg<OnNext>().Element.Should().Be(n));
Magic Number,Akka.Streams.Tests.Actor,ActorSubscriberSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,ActorSubscriberSpec_should_support_custom_max_in_flight_request_strategy_with_child_workers,The following statement contains a magic number: var n = 117;
Magic Number,Akka.Streams.Tests.Actor,ManualSubscriber,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,Receive,The following statement contains a magic number: return message.Match()                  .With<OnNext>(_probe.Tell)                  .With<OnComplete>(_probe.Tell)                  .With<OnError>(_probe.Tell)                  .With<string>(s =>                  {                      if (s.Equals("ready"))                          Request(2);                      else if (s.Equals("boom"))                          throw new SystemException(s);                      else if (s.Equals("requestAndCancel"))                      {                          Request(1);                          Cancel();                      }                      else if (s.Equals("cancel"))                          Cancel();                  })                  .WasHandled;
Magic Number,Akka.Streams.Tests.Actor,Streamer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorSubscriberSpec.cs,Receive,The following statement contains a magic number: return message.Match()                  .With<OnNext>(next =>                  {                      var msg = (Msg)next.Element;                      _queue.Add(msg.Id' msg.ReplyTo);                      if (_queue.Count > 10)                          throw new InvalidOperationException($"queued too many: {_queue.Count}");                      _router.Route(new Work(msg.Id)' Self);                  })                  .With<Reply>(reply =>                  {                      _queue[reply.Id].Tell(new Done(reply.Id));                      _queue.Remove(reply.Id);                  })                  .WasHandled;
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_OneByOne_correctly,The following statement contains a magic number: strat.RequestDemand(2).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_Zero_correctly,The following statement contains a magic number: strat.RequestDemand(2).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_Watermark_correctly,The following statement contains a magic number: var strat = new WatermarkRequestStrategy(highWatermark: 10);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_Watermark_correctly,The following statement contains a magic number: strat.RequestDemand(0).Should().Be(10);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_Watermark_correctly,The following statement contains a magic number: strat.RequestDemand(9).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_Watermark_correctly,The following statement contains a magic number: strat.RequestDemand(6).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_Watermark_correctly,The following statement contains a magic number: strat.RequestDemand(5).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_Watermark_correctly,The following statement contains a magic number: strat.RequestDemand(4).Should().Be(6);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_Watermark_correctly,The following statement contains a magic number: strat.RequestDemand(4).Should().Be(6);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_1_correctly,The following statement contains a magic number: var strat = new InFlightWithBatchSize(10' queue' 1);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_1_correctly,The following statement contains a magic number: strat.RequestDemand(0).Should().Be(10);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_1_correctly,The following statement contains a magic number: strat.RequestDemand(9).Should().Be(1);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_1_correctly,The following statement contains a magic number: strat.RequestDemand(0).Should().Be(9);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_1_correctly,The following statement contains a magic number: strat.RequestDemand(8).Should().Be(1);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_1_correctly,The following statement contains a magic number: strat.RequestDemand(9).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_1_correctly,The following statement contains a magic number: strat.RequestDemand(5).Should().Be(2);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_1_correctly,The following statement contains a magic number: strat.RequestDemand(5).Should().Be(2);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_1_correctly,The following statement contains a magic number: queue.Count.Should().Be(10);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: var strat = new InFlightWithBatchSize(10' queue' 3);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: var strat = new InFlightWithBatchSize(10' queue' 3);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: strat.RequestDemand(0).Should().Be(10);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: strat.RequestDemand(9).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: strat.RequestDemand(8).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: strat.RequestDemand(7).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: strat.RequestDemand(6).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: strat.RequestDemand(6).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: strat.RequestDemand(6).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: strat.RequestDemand(6).Should().Be(3);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_3_correctly,The following statement contains a magic number: strat.RequestDemand(6).Should().Be(3);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_max_correctly,The following statement contains a magic number: var strat = new InFlightWithBatchSize(max: 3' queue: queue' batchSize: 5 );
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_max_correctly,The following statement contains a magic number: var strat = new InFlightWithBatchSize(max: 3' queue: queue' batchSize: 5 );
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_max_correctly,The following statement contains a magic number: strat.RequestDemand(0).Should().Be(3);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_max_correctly,The following statement contains a magic number: strat.RequestDemand(2).Should().Be(0);
Magic Number,Akka.Streams.Tests.Actor,RequestStrategySpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\RequestStrategySpecs.cs,Provided_RequestStragies_should_implement_MaxInFlight_with_batchSize_max_correctly,The following statement contains a magic number: strat.RequestDemand(0).Should().Be(3);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_accumulate_demand,The following statement contains a magic number: s.Request(2);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_accumulate_demand,The following statement contains a magic number: probe.ExpectMsg<TotalDemand>().Elements.Should().Be(2);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_accumulate_demand,The following statement contains a magic number: s.Request(3);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_accumulate_demand,The following statement contains a magic number: probe.ExpectMsg<TotalDemand>().Elements.Should().Be(5);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_allow_onNext_up_to_requested_elements_but_not_more,The following statement contains a magic number: s.Request(2);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_allow_onNext_up_to_requested_elements_but_not_more,The following statement contains a magic number: s.ExpectNoMsg(TimeSpan.FromMilliseconds(300));
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_not_terminate_after_signaling_onError,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_terminate_after_signalling_OnErrorThenStop,The following statement contains a magic number: probe.ExpectTerminated(actorRef' TimeSpan.FromSeconds(3));
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_drop_onNext_elements_after_cancel,The following statement contains a magic number: s.Request(2);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_drop_onNext_elements_after_cancel,The following statement contains a magic number: s.ExpectNoMsg(TimeSpan.FromMilliseconds(300));
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_remember_requested_after_restart,The following statement contains a magic number: s.Request(3);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_remember_requested_after_restart,The following statement contains a magic number: probe.ExpectMsg<TotalDemand>().Elements.Should().Be(3);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_remember_requested_after_restart,The following statement contains a magic number: s.Request(5);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_remember_requested_after_restart,The following statement contains a magic number: probe.ExpectMsg<TotalDemand>().Elements.Should().Be(6);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_signal_onComplete,The following statement contains a magic number: s.Request(3);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_not_terminate_after_signalling_onComplete,The following statement contains a magic number: sub.Request(3);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_not_terminate_after_signalling_onComplete,The following statement contains a magic number: probe.ExpectMsg<TotalDemand>().Elements.Should().Be(3);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_not_terminate_after_signalling_onComplete,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_terminate_after_signalling_onCompleteThenStop,The following statement contains a magic number: sub.Request(3);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_terminate_after_signalling_onCompleteThenStop,The following statement contains a magic number: probe.ExpectMsg<TotalDemand>().Elements.Should().Be(3);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_terminate_after_signalling_onCompleteThenStop,The following statement contains a magic number: probe.ExpectTerminated(actorRef'TimeSpan.FromSeconds(3));
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_together_with_Flow_and_ActorSubscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var source = Source.ActorPublisher<int>(Sender.Props);                  var sink = Sink.ActorSubscriber<string>(Receiver.Props(probe.Ref));                                    var t = source.Collect(n =>                  {                      if (n%2 == 0)                          return "elem-" + n;                      return null;                  }).ToMaterialized(sink' Keep.Both).Run(materializer);                  var snd = t.Item1;                  var rcv = t.Item2;                    for (var i = 1; i <= 3; i++)                      snd.Tell(i);                  probe.ExpectMsg("elem-2");                    for (var n = 4; n <= 500; n++)                  {                      if (n%19 == 0)                          Thread.Sleep(50); // simulate bursts                      snd.Tell(n);                  }                    for (var n = 4; n <= 500; n += 2)                      probe.ExpectMsg("elem-" + n);                    Watch(snd);                  rcv.Tell(PoisonPill.Instance);                  ExpectTerminated(snd);              }' materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_together_with_Flow_and_ActorSubscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var source = Source.ActorPublisher<int>(Sender.Props);                  var sink = Sink.ActorSubscriber<string>(Receiver.Props(probe.Ref));                                    var t = source.Collect(n =>                  {                      if (n%2 == 0)                          return "elem-" + n;                      return null;                  }).ToMaterialized(sink' Keep.Both).Run(materializer);                  var snd = t.Item1;                  var rcv = t.Item2;                    for (var i = 1; i <= 3; i++)                      snd.Tell(i);                  probe.ExpectMsg("elem-2");                    for (var n = 4; n <= 500; n++)                  {                      if (n%19 == 0)                          Thread.Sleep(50); // simulate bursts                      snd.Tell(n);                  }                    for (var n = 4; n <= 500; n += 2)                      probe.ExpectMsg("elem-" + n);                    Watch(snd);                  rcv.Tell(PoisonPill.Instance);                  ExpectTerminated(snd);              }' materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_together_with_Flow_and_ActorSubscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var source = Source.ActorPublisher<int>(Sender.Props);                  var sink = Sink.ActorSubscriber<string>(Receiver.Props(probe.Ref));                                    var t = source.Collect(n =>                  {                      if (n%2 == 0)                          return "elem-" + n;                      return null;                  }).ToMaterialized(sink' Keep.Both).Run(materializer);                  var snd = t.Item1;                  var rcv = t.Item2;                    for (var i = 1; i <= 3; i++)                      snd.Tell(i);                  probe.ExpectMsg("elem-2");                    for (var n = 4; n <= 500; n++)                  {                      if (n%19 == 0)                          Thread.Sleep(50); // simulate bursts                      snd.Tell(n);                  }                    for (var n = 4; n <= 500; n += 2)                      probe.ExpectMsg("elem-" + n);                    Watch(snd);                  rcv.Tell(PoisonPill.Instance);                  ExpectTerminated(snd);              }' materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_together_with_Flow_and_ActorSubscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var source = Source.ActorPublisher<int>(Sender.Props);                  var sink = Sink.ActorSubscriber<string>(Receiver.Props(probe.Ref));                                    var t = source.Collect(n =>                  {                      if (n%2 == 0)                          return "elem-" + n;                      return null;                  }).ToMaterialized(sink' Keep.Both).Run(materializer);                  var snd = t.Item1;                  var rcv = t.Item2;                    for (var i = 1; i <= 3; i++)                      snd.Tell(i);                  probe.ExpectMsg("elem-2");                    for (var n = 4; n <= 500; n++)                  {                      if (n%19 == 0)                          Thread.Sleep(50); // simulate bursts                      snd.Tell(n);                  }                    for (var n = 4; n <= 500; n += 2)                      probe.ExpectMsg("elem-" + n);                    Watch(snd);                  rcv.Tell(PoisonPill.Instance);                  ExpectTerminated(snd);              }' materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_together_with_Flow_and_ActorSubscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var source = Source.ActorPublisher<int>(Sender.Props);                  var sink = Sink.ActorSubscriber<string>(Receiver.Props(probe.Ref));                                    var t = source.Collect(n =>                  {                      if (n%2 == 0)                          return "elem-" + n;                      return null;                  }).ToMaterialized(sink' Keep.Both).Run(materializer);                  var snd = t.Item1;                  var rcv = t.Item2;                    for (var i = 1; i <= 3; i++)                      snd.Tell(i);                  probe.ExpectMsg("elem-2");                    for (var n = 4; n <= 500; n++)                  {                      if (n%19 == 0)                          Thread.Sleep(50); // simulate bursts                      snd.Tell(n);                  }                    for (var n = 4; n <= 500; n += 2)                      probe.ExpectMsg("elem-" + n);                    Watch(snd);                  rcv.Tell(PoisonPill.Instance);                  ExpectTerminated(snd);              }' materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_together_with_Flow_and_ActorSubscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var source = Source.ActorPublisher<int>(Sender.Props);                  var sink = Sink.ActorSubscriber<string>(Receiver.Props(probe.Ref));                                    var t = source.Collect(n =>                  {                      if (n%2 == 0)                          return "elem-" + n;                      return null;                  }).ToMaterialized(sink' Keep.Both).Run(materializer);                  var snd = t.Item1;                  var rcv = t.Item2;                    for (var i = 1; i <= 3; i++)                      snd.Tell(i);                  probe.ExpectMsg("elem-2");                    for (var n = 4; n <= 500; n++)                  {                      if (n%19 == 0)                          Thread.Sleep(50); // simulate bursts                      snd.Tell(n);                  }                    for (var n = 4; n <= 500; n += 2)                      probe.ExpectMsg("elem-" + n);                    Watch(snd);                  rcv.Tell(PoisonPill.Instance);                  ExpectTerminated(snd);              }' materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_together_with_Flow_and_ActorSubscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var source = Source.ActorPublisher<int>(Sender.Props);                  var sink = Sink.ActorSubscriber<string>(Receiver.Props(probe.Ref));                                    var t = source.Collect(n =>                  {                      if (n%2 == 0)                          return "elem-" + n;                      return null;                  }).ToMaterialized(sink' Keep.Both).Run(materializer);                  var snd = t.Item1;                  var rcv = t.Item2;                    for (var i = 1; i <= 3; i++)                      snd.Tell(i);                  probe.ExpectMsg("elem-2");                    for (var n = 4; n <= 500; n++)                  {                      if (n%19 == 0)                          Thread.Sleep(50); // simulate bursts                      snd.Tell(n);                  }                    for (var n = 4; n <= 500; n += 2)                      probe.ExpectMsg("elem-" + n);                    Watch(snd);                  rcv.Tell(PoisonPill.Instance);                  ExpectTerminated(snd);              }' materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_together_with_Flow_and_ActorSubscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var source = Source.ActorPublisher<int>(Sender.Props);                  var sink = Sink.ActorSubscriber<string>(Receiver.Props(probe.Ref));                                    var t = source.Collect(n =>                  {                      if (n%2 == 0)                          return "elem-" + n;                      return null;                  }).ToMaterialized(sink' Keep.Both).Run(materializer);                  var snd = t.Item1;                  var rcv = t.Item2;                    for (var i = 1; i <= 3; i++)                      snd.Tell(i);                  probe.ExpectMsg("elem-2");                    for (var n = 4; n <= 500; n++)                  {                      if (n%19 == 0)                          Thread.Sleep(50); // simulate bursts                      snd.Tell(n);                  }                    for (var n = 4; n <= 500; n += 2)                      probe.ExpectMsg("elem-" + n);                    Watch(snd);                  rcv.Tell(PoisonPill.Instance);                  ExpectTerminated(snd);              }' materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_together_with_Flow_and_ActorSubscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var source = Source.ActorPublisher<int>(Sender.Props);                  var sink = Sink.ActorSubscriber<string>(Receiver.Props(probe.Ref));                                    var t = source.Collect(n =>                  {                      if (n%2 == 0)                          return "elem-" + n;                      return null;                  }).ToMaterialized(sink' Keep.Both).Run(materializer);                  var snd = t.Item1;                  var rcv = t.Item2;                    for (var i = 1; i <= 3; i++)                      snd.Tell(i);                  probe.ExpectMsg("elem-2");                    for (var n = 4; n <= 500; n++)                  {                      if (n%19 == 0)                          Thread.Sleep(50); // simulate bursts                      snd.Tell(n);                  }                    for (var n = 4; n <= 500; n += 2)                      probe.ExpectMsg("elem-" + n);                    Watch(snd);                  rcv.Tell(PoisonPill.Instance);                  ExpectTerminated(snd);              }' materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_in_a_GraphDsl,The following statement contains a magic number: var senderRef2 = RunnableGraph.FromGraph(GraphDsl.Create(                  Source.ActorPublisher<int>(Sender.Props)'                  (builder' source2) =>                  {                      var merge = builder.Add(new Merge<int' int>(2));                      var bcast = builder.Add(new Broadcast<string>(2));                        builder.From(source1).To(merge.In(0));                      builder.From(source2.Outlet).To(merge.In(1));                                            builder.From(merge.Out).Via(Flow.Create<int>().Select(i => i.ToString())).To(bcast.In);                                            builder.From(bcast.Out(0)).Via(Flow.Create<string>().Select(s => s + "mark")).To(sink1);                      builder.From(bcast.Out(1)).To(sink2);                        return ClosedShape.Instance;                  })).Run(materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_in_a_GraphDsl,The following statement contains a magic number: var senderRef2 = RunnableGraph.FromGraph(GraphDsl.Create(                  Source.ActorPublisher<int>(Sender.Props)'                  (builder' source2) =>                  {                      var merge = builder.Add(new Merge<int' int>(2));                      var bcast = builder.Add(new Broadcast<string>(2));                        builder.From(source1).To(merge.In(0));                      builder.From(source2.Outlet).To(merge.In(1));                                            builder.From(merge.Out).Via(Flow.Create<int>().Select(i => i.ToString())).To(bcast.In);                                            builder.From(bcast.Out(0)).Via(Flow.Create<string>().Select(s => s + "mark")).To(sink1);                      builder.From(bcast.Out(1)).To(sink2);                        return ClosedShape.Instance;                  })).Run(materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_in_a_GraphDsl,The following statement contains a magic number: const int noOfMessages = 10;
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_in_a_GraphDsl,The following statement contains a magic number: var probe1Messages = new List<string>(noOfMessages*2);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_in_a_GraphDsl,The following statement contains a magic number: var probe2Messages = new List<string>(noOfMessages*2);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_in_a_GraphDsl,The following statement contains a magic number: i < noOfMessages * 2
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_in_a_GraphDsl,The following statement contains a magic number: probe1Messages.Should().BeEquivalentTo(Enumerable.Range(0' noOfMessages * 2).Select(i => i + "mark"));
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_work_in_a_GraphDsl,The following statement contains a magic number: probe2Messages.Should().BeEquivalentTo(Enumerable.Range(0' noOfMessages * 2).Select(i => i.ToString()));
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_be_able_to_define_a_subscription_timeout_after_which_it_should_shut_down,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var timeout = TimeSpan.FromMilliseconds(150);                  var a = ActorOf(TimeoutingPublisher.Props(TestActor' timeout));                  var pub = ActorPublisher.Create<int>(a);                    // don't subscribe for `timeout` millis' so it will shut itself down                  ExpectMsg("timed-out");                    // now subscribers will already be rejected' while the actor could perform some clean-up                  var sub = this.CreateManualProbe<int>();                  pub.Subscribe(sub);                  sub.ExpectSubscriptionAndError();                    ExpectMsg("cleaned-up");                  // termination is tiggered by user code                  Watch(a);                  ExpectTerminated(a);              }' materializer);
Magic Number,Akka.Streams.Tests.Actor,ActorPublisherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Actor\ActorPublisherSpec.cs,ActorPublisher_should_be_able_to_define_a_subscription_timeout_which_is_cancelled_by_the_first_incoming_Subscriber,The following statement contains a magic number: var timeout = TimeSpan.FromMilliseconds(500);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_emit_received_messages_to_the_stream,The following statement contains a magic number: var actorRef = Source.ActorRef<int>(10' OverflowStrategy.Fail)                  .To(Sink.FromSubscriber(s))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_emit_received_messages_to_the_stream,The following statement contains a magic number: sub.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_emit_received_messages_to_the_stream,The following statement contains a magic number: actorRef.Tell(2);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_emit_received_messages_to_the_stream,The following statement contains a magic number: s.ExpectNext(2);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_emit_received_messages_to_the_stream,The following statement contains a magic number: actorRef.Tell(3);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_emit_received_messages_to_the_stream,The following statement contains a magic number: s.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: var actorRef = Source.ActorRef<int>(100' OverflowStrategy.DropHead)                  .To(Sink.FromSubscriber(s))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: Enumerable.Range(1' 20).ForEach(x => actorRef.Tell(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: Enumerable.Range(1' 10).ForEach(x => s.ExpectNext(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: Enumerable.Range(11' 10).ForEach(x => s.ExpectNext(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: Enumerable.Range(11' 10).ForEach(x => s.ExpectNext(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: Enumerable.Range(200' 200).ForEach(x => actorRef.Tell(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: Enumerable.Range(200' 200).ForEach(x => actorRef.Tell(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: sub.Request(100);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: Enumerable.Range(300' 100).ForEach(x => s.ExpectNext(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_buffer_when_needed,The following statement contains a magic number: Enumerable.Range(300' 100).ForEach(x => s.ExpectNext(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: var t = Source.ActorRef<int>(100' OverflowStrategy.DropNew)                  .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: Enumerable.Range(1' 20).ForEach(x => actorRef.Tell(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: Enumerable.Range(1' 10).ForEach(x => sub.ExpectNext(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: Enumerable.Range(11' 10).ForEach(x => sub.ExpectNext(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: Enumerable.Range(11' 10).ForEach(x => sub.ExpectNext(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: Enumerable.Range(200' 200).ForEach(x => actorRef.Tell(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: Enumerable.Range(200' 200).ForEach(x => actorRef.Tell(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: sub.Request(100);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: Enumerable.Range(200' 100).ForEach(x => sub.ExpectNext(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_drop_new_when_full_and_with_DropNew_strategy,The following statement contains a magic number: Enumerable.Range(200' 100).ForEach(x => sub.ExpectNext(x));
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_not_fail_when_0_buffer_space_and_demand_is_signalled,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(0' OverflowStrategy.DropHead)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  Watch(actorRef);                  var sub = s.ExpectSubscription();                  sub.Request(100);                  sub.Cancel();                  ExpectTerminated(actorRef);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_completes_the_stream_immediatly_when_receiving_PoisonPill,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(10' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  s.ExpectSubscription();                  actorRef.Tell(PoisonPill.Instance);                  s.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_signal_buffered_elements_and_complete_the_stream_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(10' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_signal_buffered_elements_and_complete_the_stream_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(10' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_signal_buffered_elements_and_complete_the_stream_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(10' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_signal_buffered_elements_and_complete_the_stream_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(10' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_signal_buffered_elements_and_complete_the_stream_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(10' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_signal_buffered_elements_and_complete_the_stream_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(10' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_not_buffer_elements_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  actorRef.Tell(100);                  actorRef.Tell(100);                  actorRef.Tell(100);                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_not_buffer_elements_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  actorRef.Tell(100);                  actorRef.Tell(100);                  actorRef.Tell(100);                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_not_buffer_elements_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  actorRef.Tell(100);                  actorRef.Tell(100);                  actorRef.Tell(100);                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_not_buffer_elements_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  actorRef.Tell(100);                  actorRef.Tell(100);                  actorRef.Tell(100);                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_not_buffer_elements_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  actorRef.Tell(100);                  actorRef.Tell(100);                  actorRef.Tell(100);                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_not_buffer_elements_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  actorRef.Tell(100);                  actorRef.Tell(100);                  actorRef.Tell(100);                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_not_buffer_elements_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  actorRef.Tell(100);                  actorRef.Tell(100);                  actorRef.Tell(100);                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_not_buffer_elements_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  actorRef.Tell(100);                  actorRef.Tell(100);                  actorRef.Tell(100);                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_not_buffer_elements_after_receiving_Status_Success,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  actorRef.Tell(100);                  actorRef.Tell(100);                  actorRef.Tell(100);                  sub.Request(10);                  s.ExpectNext(1' 2' 3);                  s.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_after_receiving_Status_Success_allow_for_earliner_completion_with_PoisonPill,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(2); // not all elements drained yet                  s.ExpectNext(1' 2);                  actorRef.Tell(PoisonPill.Instance);                  s.ExpectComplete(); // element `3` not signaled              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_after_receiving_Status_Success_allow_for_earliner_completion_with_PoisonPill,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(2); // not all elements drained yet                  s.ExpectNext(1' 2);                  actorRef.Tell(PoisonPill.Instance);                  s.ExpectComplete(); // element `3` not signaled              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_after_receiving_Status_Success_allow_for_earliner_completion_with_PoisonPill,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(2); // not all elements drained yet                  s.ExpectNext(1' 2);                  actorRef.Tell(PoisonPill.Instance);                  s.ExpectComplete(); // element `3` not signaled              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_after_receiving_Status_Success_allow_for_earliner_completion_with_PoisonPill,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(2); // not all elements drained yet                  s.ExpectNext(1' 2);                  actorRef.Tell(PoisonPill.Instance);                  s.ExpectComplete(); // element `3` not signaled              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_after_receiving_Status_Success_allow_for_earliner_completion_with_PoisonPill,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(3' OverflowStrategy.DropBuffer)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  var sub = s.ExpectSubscription();                  actorRef.Tell(1);                  actorRef.Tell(2);                  actorRef.Tell(3);                  actorRef.Tell(new Status.Success("ok"));                  sub.Request(2); // not all elements drained yet                  s.ExpectNext(1' 2);                  actorRef.Tell(PoisonPill.Instance);                  s.ExpectComplete(); // element `3` not signaled              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_fail_the_stream_when_receiving_Status_Failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  var actorRef = Source.ActorRef<int>(10' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  s.ExpectSubscription();                  var ex = new TestException("testfailure");                  actorRef.Tell(new Status.Failure(ex));                  s.ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSourceSpec.cs,A_ActorRefSource_must_set_actor_name_equal_to_stage_name,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = TestSubscriber.CreateManualProbe<int>(this);                  const string name = "SomeCustomName";                  var actorRef = Source.ActorRef<int>(10' OverflowStrategy.Fail)                      .WithAttributes(Attributes.CreateName(name))                      .To(Sink.FromSubscriber(s))                      .Run(Materializer);                  actorRef.Path.ToString().Should().Contain(name);                  actorRef.Tell(PoisonPill.Instance);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AttributesSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\AttributesSpec.cs,AttributesSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,AttributesSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\AttributesSpec.cs,AttributesSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,AttributesSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\AttributesSpec.cs,Attributes_must_be_overridable_on_a_module_basis,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,AttributesSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\AttributesSpec.cs,Attributes_must_keep_the_outermost_attribute_as_the_least_specific,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,Bidi,The following statement contains a magic number: return                  BidiFlow.FromFlows(                      Flow.Create<int>().Select(x => ((long) x) + 2).WithAttributes(Attributes.CreateName("top"))'                      Flow.Create<ByteString>()                          .Select(x => x.DecodeString(Encoding.UTF8))                          .WithAttributes(Attributes.CreateName("bottom")));
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,Inverse,The following statement contains a magic number: return                  BidiFlow.FromFlows(                      Flow.Create<long>().Select(x => ((int)x) + 2).WithAttributes(Attributes.CreateName("top"))'                      Flow.Create<string>()                          .Select(ByteString.FromString)                          .WithAttributes(Attributes.CreateName("bottom")));
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,BidiMaterialized,The following statement contains a magic number: return BidiFlow.FromGraph(GraphDsl.Create(Sink.First<int>()' (b' s) =>              {                  b.From(Source.Single(42).MapMaterializedValue(_=>Task.FromResult(0))).To(s);                    var top = b.Add(Flow.Create<int>().Select(x => ((long) x) + 2));                  var bottom = b.Add(Flow.Create<ByteString>().Select(x => x.DecodeString(Encoding.UTF8)));                  return new BidiShape<int'long'ByteString' string>(top.Inlet' top.Outlet' bottom.Inlet' bottom.Outlet);              }));
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,BidiMaterialized,The following statement contains a magic number: return BidiFlow.FromGraph(GraphDsl.Create(Sink.First<int>()' (b' s) =>              {                  b.From(Source.Single(42).MapMaterializedValue(_=>Task.FromResult(0))).To(s);                    var top = b.Add(Flow.Create<int>().Select(x => ((long) x) + 2));                  var bottom = b.Add(Flow.Create<ByteString>().Select(x => x.DecodeString(Encoding.UTF8)));                  return new BidiShape<int'long'ByteString' string>(top.Inlet' top.Outlet' bottom.Inlet' bottom.Outlet);              }));
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_top_and_bottom_in_isolation,The following statement contains a magic number: top.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_top_and_bottom_in_isolation,The following statement contains a magic number: bottom.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_top_and_bottom_in_isolation,The following statement contains a magic number: top.Result.Should().Be(3);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_as_a_Flow_that_is_open_to_the_left,The following statement contains a magic number: var result = Source.From(Enumerable.Range(1' 3)).Via(f).Limit(10).RunWith(Sink.Seq<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_as_a_Flow_that_is_open_to_the_left,The following statement contains a magic number: var result = Source.From(Enumerable.Range(1' 3)).Via(f).Limit(10).RunWith(Sink.Seq<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_as_a_Flow_that_is_open_to_the_left,The following statement contains a magic number: result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_as_a_Flow_that_is_open_on_the_right,The following statement contains a magic number: var result =                  Source.From(new[] {ByteString.FromString("1")' ByteString.FromString("2")})                      .Via(f)                      .Limit(10)                      .RunWith(Sink.Seq<long>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_as_a_Flow_that_is_open_on_the_right,The following statement contains a magic number: result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_as_a_Flow_that_is_open_on_the_right,The following statement contains a magic number: result.Result.ShouldAllBeEquivalentTo(new[] {3L' 4L});
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_as_a_Flow_that_is_open_on_the_right,The following statement contains a magic number: result.Result.ShouldAllBeEquivalentTo(new[] {3L' 4L});
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_when_atop_its_iverse,The following statement contains a magic number: var result = Source.From(Enumerable.Range(1' 3)).Via(f).Limit(10).RunWith(Sink.Seq<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_when_atop_its_iverse,The following statement contains a magic number: var result = Source.From(Enumerable.Range(1' 3)).Via(f).Limit(10).RunWith(Sink.Seq<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_when_atop_its_iverse,The following statement contains a magic number: result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_when_reversed,The following statement contains a magic number: var result = Source.From(Enumerable.Range(1' 3)).Via(f).Limit(10).RunWith(Sink.Seq<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_when_reversed,The following statement contains a magic number: var result = Source.From(Enumerable.Range(1' 3)).Via(f).Limit(10).RunWith(Sink.Seq<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_work_when_reversed,The following statement contains a magic number: result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_materialize_its_value,The following statement contains a magic number: f.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_materialize_its_value,The following statement contains a magic number: f.Result.Should().Be(42);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_combine_materialization_values,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var left = Flow.FromGraph(GraphDsl.Create(Sink.First<int>()' (b' sink) =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var merge = b.Add(new Merge<int>(2));                      var flow = b.Add(Flow.Create<string>().Select(int.Parse));                      b.From(broadcast).To(sink);                      b.From(Source.Single(1).MapMaterializedValue(_ => Task.FromResult(0))).Via(broadcast).To(merge);                      b.From(flow).To(merge);                      return new FlowShape<string' int>(flow.Inlet' merge.Out);                  }));                    var right = Flow.FromGraph(GraphDsl.Create(Sink.First<List<long>>()' (b' sink) =>                  {                      var flow = b.Add(Flow.Create<long>().Grouped(10));                      var source = b.Add(Source.Single(ByteString.FromString("10")));                      b.From(flow).To(sink);                        return new FlowShape<long' ByteString>(flow.Inlet' source.Outlet);                  }));                    var tt = left.JoinMaterialized(BidiMaterialized()' Keep.Both)                      .JoinMaterialized(right' Keep.Both)                      .Run(Materializer);                  var t = tt.Item1;                  var l = t.Item1;                  var m = t.Item2;                  var r = tt.Item2;                    Task.WhenAll(l' m' r).Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  l.Result.Should().Be(1);                  m.Result.Should().Be(42);                  r.Result.ShouldAllBeEquivalentTo(new [] {3L' 12L});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_combine_materialization_values,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var left = Flow.FromGraph(GraphDsl.Create(Sink.First<int>()' (b' sink) =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var merge = b.Add(new Merge<int>(2));                      var flow = b.Add(Flow.Create<string>().Select(int.Parse));                      b.From(broadcast).To(sink);                      b.From(Source.Single(1).MapMaterializedValue(_ => Task.FromResult(0))).Via(broadcast).To(merge);                      b.From(flow).To(merge);                      return new FlowShape<string' int>(flow.Inlet' merge.Out);                  }));                    var right = Flow.FromGraph(GraphDsl.Create(Sink.First<List<long>>()' (b' sink) =>                  {                      var flow = b.Add(Flow.Create<long>().Grouped(10));                      var source = b.Add(Source.Single(ByteString.FromString("10")));                      b.From(flow).To(sink);                        return new FlowShape<long' ByteString>(flow.Inlet' source.Outlet);                  }));                    var tt = left.JoinMaterialized(BidiMaterialized()' Keep.Both)                      .JoinMaterialized(right' Keep.Both)                      .Run(Materializer);                  var t = tt.Item1;                  var l = t.Item1;                  var m = t.Item2;                  var r = tt.Item2;                    Task.WhenAll(l' m' r).Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  l.Result.Should().Be(1);                  m.Result.Should().Be(42);                  r.Result.ShouldAllBeEquivalentTo(new [] {3L' 12L});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_combine_materialization_values,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var left = Flow.FromGraph(GraphDsl.Create(Sink.First<int>()' (b' sink) =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var merge = b.Add(new Merge<int>(2));                      var flow = b.Add(Flow.Create<string>().Select(int.Parse));                      b.From(broadcast).To(sink);                      b.From(Source.Single(1).MapMaterializedValue(_ => Task.FromResult(0))).Via(broadcast).To(merge);                      b.From(flow).To(merge);                      return new FlowShape<string' int>(flow.Inlet' merge.Out);                  }));                    var right = Flow.FromGraph(GraphDsl.Create(Sink.First<List<long>>()' (b' sink) =>                  {                      var flow = b.Add(Flow.Create<long>().Grouped(10));                      var source = b.Add(Source.Single(ByteString.FromString("10")));                      b.From(flow).To(sink);                        return new FlowShape<long' ByteString>(flow.Inlet' source.Outlet);                  }));                    var tt = left.JoinMaterialized(BidiMaterialized()' Keep.Both)                      .JoinMaterialized(right' Keep.Both)                      .Run(Materializer);                  var t = tt.Item1;                  var l = t.Item1;                  var m = t.Item2;                  var r = tt.Item2;                    Task.WhenAll(l' m' r).Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  l.Result.Should().Be(1);                  m.Result.Should().Be(42);                  r.Result.ShouldAllBeEquivalentTo(new [] {3L' 12L});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_combine_materialization_values,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var left = Flow.FromGraph(GraphDsl.Create(Sink.First<int>()' (b' sink) =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var merge = b.Add(new Merge<int>(2));                      var flow = b.Add(Flow.Create<string>().Select(int.Parse));                      b.From(broadcast).To(sink);                      b.From(Source.Single(1).MapMaterializedValue(_ => Task.FromResult(0))).Via(broadcast).To(merge);                      b.From(flow).To(merge);                      return new FlowShape<string' int>(flow.Inlet' merge.Out);                  }));                    var right = Flow.FromGraph(GraphDsl.Create(Sink.First<List<long>>()' (b' sink) =>                  {                      var flow = b.Add(Flow.Create<long>().Grouped(10));                      var source = b.Add(Source.Single(ByteString.FromString("10")));                      b.From(flow).To(sink);                        return new FlowShape<long' ByteString>(flow.Inlet' source.Outlet);                  }));                    var tt = left.JoinMaterialized(BidiMaterialized()' Keep.Both)                      .JoinMaterialized(right' Keep.Both)                      .Run(Materializer);                  var t = tt.Item1;                  var l = t.Item1;                  var m = t.Item2;                  var r = tt.Item2;                    Task.WhenAll(l' m' r).Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  l.Result.Should().Be(1);                  m.Result.Should().Be(42);                  r.Result.ShouldAllBeEquivalentTo(new [] {3L' 12L});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_combine_materialization_values,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var left = Flow.FromGraph(GraphDsl.Create(Sink.First<int>()' (b' sink) =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var merge = b.Add(new Merge<int>(2));                      var flow = b.Add(Flow.Create<string>().Select(int.Parse));                      b.From(broadcast).To(sink);                      b.From(Source.Single(1).MapMaterializedValue(_ => Task.FromResult(0))).Via(broadcast).To(merge);                      b.From(flow).To(merge);                      return new FlowShape<string' int>(flow.Inlet' merge.Out);                  }));                    var right = Flow.FromGraph(GraphDsl.Create(Sink.First<List<long>>()' (b' sink) =>                  {                      var flow = b.Add(Flow.Create<long>().Grouped(10));                      var source = b.Add(Source.Single(ByteString.FromString("10")));                      b.From(flow).To(sink);                        return new FlowShape<long' ByteString>(flow.Inlet' source.Outlet);                  }));                    var tt = left.JoinMaterialized(BidiMaterialized()' Keep.Both)                      .JoinMaterialized(right' Keep.Both)                      .Run(Materializer);                  var t = tt.Item1;                  var l = t.Item1;                  var m = t.Item2;                  var r = tt.Item2;                    Task.WhenAll(l' m' r).Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  l.Result.Should().Be(1);                  m.Result.Should().Be(42);                  r.Result.ShouldAllBeEquivalentTo(new [] {3L' 12L});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_combine_materialization_values,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var left = Flow.FromGraph(GraphDsl.Create(Sink.First<int>()' (b' sink) =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var merge = b.Add(new Merge<int>(2));                      var flow = b.Add(Flow.Create<string>().Select(int.Parse));                      b.From(broadcast).To(sink);                      b.From(Source.Single(1).MapMaterializedValue(_ => Task.FromResult(0))).Via(broadcast).To(merge);                      b.From(flow).To(merge);                      return new FlowShape<string' int>(flow.Inlet' merge.Out);                  }));                    var right = Flow.FromGraph(GraphDsl.Create(Sink.First<List<long>>()' (b' sink) =>                  {                      var flow = b.Add(Flow.Create<long>().Grouped(10));                      var source = b.Add(Source.Single(ByteString.FromString("10")));                      b.From(flow).To(sink);                        return new FlowShape<long' ByteString>(flow.Inlet' source.Outlet);                  }));                    var tt = left.JoinMaterialized(BidiMaterialized()' Keep.Both)                      .JoinMaterialized(right' Keep.Both)                      .Run(Materializer);                  var t = tt.Item1;                  var l = t.Item1;                  var m = t.Item2;                  var r = tt.Item2;                    Task.WhenAll(l' m' r).Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  l.Result.Should().Be(1);                  m.Result.Should().Be(42);                  r.Result.ShouldAllBeEquivalentTo(new [] {3L' 12L});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,BidiFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\BidiFlowSpec.cs,A_BidiFlow_must_combine_materialization_values,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var left = Flow.FromGraph(GraphDsl.Create(Sink.First<int>()' (b' sink) =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var merge = b.Add(new Merge<int>(2));                      var flow = b.Add(Flow.Create<string>().Select(int.Parse));                      b.From(broadcast).To(sink);                      b.From(Source.Single(1).MapMaterializedValue(_ => Task.FromResult(0))).Via(broadcast).To(merge);                      b.From(flow).To(merge);                      return new FlowShape<string' int>(flow.Inlet' merge.Out);                  }));                    var right = Flow.FromGraph(GraphDsl.Create(Sink.First<List<long>>()' (b' sink) =>                  {                      var flow = b.Add(Flow.Create<long>().Grouped(10));                      var source = b.Add(Source.Single(ByteString.FromString("10")));                      b.From(flow).To(sink);                        return new FlowShape<long' ByteString>(flow.Inlet' source.Outlet);                  }));                    var tt = left.JoinMaterialized(BidiMaterialized()' Keep.Both)                      .JoinMaterialized(right' Keep.Both)                      .Run(Materializer);                  var t = tt.Item1;                  var l = t.Item1;                  var m = t.Item2;                  var r = tt.Item2;                    Task.WhenAll(l' m' r).Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  l.Result.Should().Be(1);                  m.Result.Should().Be(42);                  r.Result.ShouldAllBeEquivalentTo(new [] {3L' 12L});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,FlowBatchSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,FlowBatchSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_pass_through_elements_unchanged_when_there_is_no_rate_difference,The following statement contains a magic number: Source.FromPublisher(publisher)                  .Batch(max: 2' seed: i => i' aggregate: (sum' i) => sum + i)                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_pass_through_elements_unchanged_when_there_is_no_rate_difference,The following statement contains a magic number: i <= 100
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_aggregate_elements_while_downstream_is_silent,The following statement contains a magic number: i <= 10
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_aggregate_elements_while_downstream_is_silent,The following statement contains a magic number: subscriber.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 2' 3' 4' 5' 6' 7' 8' 9' 10});
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_aggregate_elements_while_downstream_is_silent,The following statement contains a magic number: subscriber.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 2' 3' 4' 5' 6' 7' 8' 9' 10});
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_aggregate_elements_while_downstream_is_silent,The following statement contains a magic number: subscriber.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 2' 3' 4' 5' 6' 7' 8' 9' 10});
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_aggregate_elements_while_downstream_is_silent,The following statement contains a magic number: subscriber.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 2' 3' 4' 5' 6' 7' 8' 9' 10});
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_aggregate_elements_while_downstream_is_silent,The following statement contains a magic number: subscriber.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 2' 3' 4' 5' 6' 7' 8' 9' 10});
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_aggregate_elements_while_downstream_is_silent,The following statement contains a magic number: subscriber.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 2' 3' 4' 5' 6' 7' 8' 9' 10});
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_aggregate_elements_while_downstream_is_silent,The following statement contains a magic number: subscriber.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 2' 3' 4' 5' 6' 7' 8' 9' 10});
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_aggregate_elements_while_downstream_is_silent,The following statement contains a magic number: subscriber.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 2' 3' 4' 5' 6' 7' 8' 9' 10});
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_aggregate_elements_while_downstream_is_silent,The following statement contains a magic number: subscriber.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 2' 3' 4' 5' 6' 7' 8' 9' 10});
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).Batch(100' i => i' (sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 1)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (i' i1) => i + i1' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).Batch(100' i => i' (sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 1)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (i' i1) => i + i1' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).Batch(100' i => i' (sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 1)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (i' i1) => i + i1' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).Batch(100' i => i' (sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 1)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (i' i1) => i + i1' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_work_on_a_variable_rate_chain,The following statement contains a magic number: future.Wait(TimeSpan.FromSeconds(10)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_work_on_a_variable_rate_chain,The following statement contains a magic number: future.Result.Should().Be(500500);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: Source.FromPublisher(publisher)                  .Batch(2' i => i' (sum' i) => sum + i)                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: publisher.SendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: subscriber.ExpectNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: publisher.SendNext(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: publisher.SendNext(4);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: subscriber.ExpectNext(7);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_work_with_a_buffer_and_aggregate,The following statement contains a magic number: var future =                  Source.From(Enumerable.Range(1' 50))                      .Batch(long.MaxValue' i => i' (sum' i) => sum + i)                      .Buffer(50' OverflowStrategy.Backpressure)                      .RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_work_with_a_buffer_and_aggregate,The following statement contains a magic number: var future =                  Source.From(Enumerable.Range(1' 50))                      .Batch(long.MaxValue' i => i' (sum' i) => sum + i)                      .Buffer(50' OverflowStrategy.Backpressure)                      .RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_work_with_a_buffer_and_aggregate,The following statement contains a magic number: future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchSpec.cs,Batch_must_work_with_a_buffer_and_aggregate,The following statement contains a magic number: future.Result.Should().Be(Enumerable.Range(1' 50).Sum());
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchWeightedSpec.cs,FlowBatchWeightedSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchWeightedSpec.cs,FlowBatchWeightedSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchWeightedSpec.cs,BatchWeighted_must_not_aggregate_heavy_elements,The following statement contains a magic number: Source.FromPublisher(publisher)                  .BatchWeighted(3' _ => 4' i => i' (sum' i) => sum + i)                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchWeightedSpec.cs,BatchWeighted_must_not_aggregate_heavy_elements,The following statement contains a magic number: Source.FromPublisher(publisher)                  .BatchWeighted(3' _ => 4' i => i' (sum' i) => sum + i)                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchWeightedSpec.cs,BatchWeighted_must_not_aggregate_heavy_elements,The following statement contains a magic number: publisher.SendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchWeightedSpec.cs,BatchWeighted_must_not_aggregate_heavy_elements,The following statement contains a magic number: publisher.SendNext(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchWeightedSpec.cs,BatchWeighted_must_not_aggregate_heavy_elements,The following statement contains a magic number: sub.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchWeightedSpec.cs,BatchWeighted_must_not_aggregate_heavy_elements,The following statement contains a magic number: subscriber.ExpectNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowBatchWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBatchWeightedSpec.cs,BatchWeighted_must_not_aggregate_heavy_elements,The following statement contains a magic number: subscriber.ExpectNext(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowCollectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowCollectSpec.cs,A_Collect_must_collect,The following statement contains a magic number: Script<int'string> script = Script.Create(RandomTestRange(Sys).Select(_ =>              {                  var x = random.Next(0' 10000);                  return new Tuple<ICollection<int>' ICollection<string>>(new[] {x}'                      (x & 1) == 0 ? new[] {(x*x).ToString()} : new string[] {});              }).ToArray());
Magic Number,Akka.Streams.Tests.Dsl,FlowCollectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowCollectSpec.cs,A_Collect_must_collect,The following statement contains a magic number: RandomTestRange(Sys).ForEach(_=>RunScript(script' Materializer.Settings'flow => flow.Collect(x => x%2 == 0 ? (x*x).ToString() : null)));
Magic Number,Akka.Streams.Tests.Dsl,FlowCollectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowCollectSpec.cs,A_Collect_must_restart_when_Collect_throws,The following statement contains a magic number: Func<int' int> throwOnTwo = x =>              {                  if (x == 2)                      throw new TestException("");                  return x;              };
Magic Number,Akka.Streams.Tests.Dsl,FlowCollectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowCollectSpec.cs,A_Collect_must_restart_when_Collect_throws,The following statement contains a magic number: var probe =                  Source.From(Enumerable.Range(1' 3))                      .Collect(throwOnTwo)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.RestartingDecider))                      .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowCollectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowCollectSpec.cs,A_Collect_must_restart_when_Collect_throws,The following statement contains a magic number: probe.ExpectNext(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,FlowConcatAllSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,FlowConcatAllSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = Source.From(new[] {1' 2});                  var s2 = Source.From(new int[] {});                  var s3 = Source.From(new[] {3});                  var s4 = Source.From(new[] {4' 5' 6});                  var s5 = Source.From(new[] {7' 8' 9' 10});                    var main = Source.From(new[] {s1' s2' s3' s4' s5});                    var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  main.ConcatMany(s => s).To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  var subscription = subscriber.ExpectSubscription();                  subscription.Request(10);                  for (var i = 1; i <= 10; i++)                      subscriber.ExpectNext(i);                    subscription.Request(1);                  subscriber.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_together_with_SplitWhen,The following statement contains a magic number: var source = Source.From(Enumerable.Range(1' 10))                  .SplitWhen(x => x%2 == 0)                  .PrefixAndTail(0)                  .Select(x => x.Item2)                  .ConcatSubstream()                  .ConcatMany(x => x);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_together_with_SplitWhen,The following statement contains a magic number: var source = Source.From(Enumerable.Range(1' 10))                  .SplitWhen(x => x%2 == 0)                  .PrefixAndTail(0)                  .Select(x => x.Item2)                  .ConcatSubstream()                  .ConcatMany(x => x);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_work_together_with_SplitWhen,The following statement contains a magic number: i <= 10
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_on_OnError_on_master_stream_cancel_the_current_open_substream_and_signal_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateManualProbe<Source<int' NotUsed>>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  Source.FromPublisher(publisher)                      .ConcatMany(x => x)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var upstream = publisher.ExpectSubscription();                  var downstream = subscriber.ExpectSubscription();                  downstream.Request(1000);                    var substreamPublisher = TestPublisher.CreateManualProbe<int>(this);                  var substreamFlow = Source.FromPublisher(substreamPublisher);                  upstream.ExpectRequest();                  upstream.SendNext(substreamFlow);                  var subUpstream = substreamPublisher.ExpectSubscription();                    upstream.SendError(TestException);                  subscriber.ExpectError().Should().Be(TestException);                  subUpstream.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_on_OnError_on_master_stream_cancel_the_currently_opening_substream_and_signal_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateManualProbe<Source<int' NotUsed>>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  Source.FromPublisher(publisher)                      .ConcatMany(x => x)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var upstream = publisher.ExpectSubscription();                  var downstream = subscriber.ExpectSubscription();                  downstream.Request(1000);                    var substreamPublisher = TestPublisher.CreateManualProbe<int>(this' false);                  var substreamFlow = Source.FromPublisher(substreamPublisher);                  upstream.ExpectRequest();                  upstream.SendNext(substreamFlow);                  var subUpstream = substreamPublisher.ExpectSubscription();                    upstream.SendError(TestException);                    subUpstream.SendOnSubscribe();                    subscriber.ExpectError().Should().Be(TestException);                  subUpstream.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_on_OnError_on_opening_substream_cancel_the_master_stream_and_signal_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateManualProbe<Source<int' NotUsed>>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  Source.FromPublisher(publisher)                      .ConcatMany<Source<int'NotUsed>'int'NotUsed>(x => { throw TestException; })                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var upstream = publisher.ExpectSubscription();                  var downstream = subscriber.ExpectSubscription();                  downstream.Request(1000);                    var substreamPublisher = TestPublisher.CreateManualProbe<int>(this);                  var substreamFlow = Source.FromPublisher(substreamPublisher);                  upstream.ExpectRequest();                  upstream.SendNext(substreamFlow);                  subscriber.ExpectError().Should().Be(TestException);                  upstream.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_on_OnError_on_open_substream_cancel_the_master_stream_and_signal_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateManualProbe<Source<int' NotUsed>>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  Source.FromPublisher(publisher)                      .ConcatMany(x => x)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var upstream = publisher.ExpectSubscription();                  var downstream = subscriber.ExpectSubscription();                  downstream.Request(1000);                    var substreamPublisher = TestPublisher.CreateManualProbe<int>(this);                  var substreamFlow = Source.FromPublisher(substreamPublisher);                  upstream.ExpectRequest();                  upstream.SendNext(substreamFlow);                    var subUpstream = substreamPublisher.ExpectSubscription();                  subUpstream.SendError(TestException);                  subscriber.ExpectError().Should().Be(TestException);                  upstream.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_on_cancellation_cancel_the_current_open_substream_and_the_master_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateManualProbe<Source<int' NotUsed>>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  Source.FromPublisher(publisher)                      .ConcatMany(x => x)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var upstream = publisher.ExpectSubscription();                  var downstream = subscriber.ExpectSubscription();                  downstream.Request(1000);                    var substreamPublisher = TestPublisher.CreateManualProbe<int>(this);                  var substreamFlow = Source.FromPublisher(substreamPublisher);                  upstream.ExpectRequest();                  upstream.SendNext(substreamFlow);                  var subUpstream = substreamPublisher.ExpectSubscription();                    downstream.Cancel();                    subUpstream.ExpectCancellation();                  upstream.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatAllSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatAllSpec.cs,ConcatAll_must_on_cancellation_cancel_the_currently_opening_substream_and_the_master_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateManualProbe<Source<int' NotUsed>>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  Source.FromPublisher(publisher)                      .ConcatMany(x => x)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var upstream = publisher.ExpectSubscription();                  var downstream = subscriber.ExpectSubscription();                  downstream.Request(1000);                    var substreamPublisher = TestPublisher.CreateManualProbe<int>(this' false);                  var substreamFlow = Source.FromPublisher(substreamPublisher);                  upstream.ExpectRequest();                  upstream.SendNext(substreamFlow);                  var subUpstream = substreamPublisher.ExpectSubscription();                    downstream.Cancel();                    subUpstream.SendOnSubscribe();                    subUpstream.ExpectCancellation();                  upstream.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,River,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowAppendSpec.cs,RiverOf,The following statement contains a magic number: var elements = Enumerable.Range(1' 10).ToList();
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_concat_Flow_with_Source,The following statement contains a magic number: var s1 = Source.From(new[] {1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_concat_Flow_with_Source,The following statement contains a magic number: var s1 = Source.From(new[] {1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_concat_Flow_with_Source,The following statement contains a magic number: var s2 = Source.From(new[] { 4'5'6 }).Select(x=> x + "-s");
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_concat_Flow_with_Source,The following statement contains a magic number: var s2 = Source.From(new[] { 4'5'6 }).Select(x=> x + "-s");
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_concat_Flow_with_Source,The following statement contains a magic number: var s2 = Source.From(new[] { 4'5'6 }).Select(x=> x + "-s");
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_concat_Flow_with_Source,The following statement contains a magic number: sub.Request(9);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_concat_Flow_with_Source,The following statement contains a magic number: Enumerable.Range(1' 6).ForEach(e=>subs.ExpectNext(e + "-s"));
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_prepend_a_Source_to_a_Flow,The following statement contains a magic number: var s1 = Source.From(new[] { 1' 2' 3 }).Select(x => x + "-s");
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_prepend_a_Source_to_a_Flow,The following statement contains a magic number: var s1 = Source.From(new[] { 1' 2' 3 }).Select(x => x + "-s");
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_prepend_a_Source_to_a_Flow,The following statement contains a magic number: var s2 = Source.From(new[] { 4' 5' 6 });
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_prepend_a_Source_to_a_Flow,The following statement contains a magic number: var s2 = Source.From(new[] { 4' 5' 6 });
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_prepend_a_Source_to_a_Flow,The following statement contains a magic number: var s2 = Source.From(new[] { 4' 5' 6 });
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_prepend_a_Source_to_a_Flow,The following statement contains a magic number: sub.Request(9);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_be_able_to_prepend_a_Source_to_a_Flow,The following statement contains a magic number: Enumerable.Range(1' 6).ForEach(e => subs.ExpectNext(e + "-s"));
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber1.ExpectNext(x));                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber2.ExpectNext(x));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber1.ExpectNext(x));                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber2.ExpectNext(x));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber1.ExpectNext(x));                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber2.ExpectNext(x));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber1.ExpectNext(x));                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber2.ExpectNext(x));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber1.ExpectNext(x));                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber2.ExpectNext(x));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber1.ExpectNext(x));                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(5);                  Enumerable.Range(1' 4).ForEach(x => subscriber2.ExpectNext(x));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber.ExpectSubscriptionAndError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_nonempty_and_one_immediately_failed_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());                  subscriber.ExpectSubscription().Request(5);                    var errorSignalled = Enumerable.Range(1' 4)                      .Aggregate(false' (b' e) => b || subscriber.ExpectNextOrError() is TestException);                  if (!errorSignalled)                      subscriber.ExpectSubscriptionAndError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_nonempty_and_one_immediately_failed_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());                  subscriber.ExpectSubscription().Request(5);                    var errorSignalled = Enumerable.Range(1' 4)                      .Aggregate(false' (b' e) => b || subscriber.ExpectNextOrError() is TestException);                  if (!errorSignalled)                      subscriber.ExpectSubscriptionAndError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_nonempty_and_one_immediately_failed_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());                  subscriber.ExpectSubscription().Request(5);                    var errorSignalled = Enumerable.Range(1' 4)                      .Aggregate(false' (b' e) => b || subscriber.ExpectNextOrError() is TestException);                  if (!errorSignalled)                      subscriber.ExpectSubscriptionAndError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_delayed_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(SoonToFailPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber.ExpectSubscriptionAndError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_nonempty_and_one_delayed_failed_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());                  subscriber.ExpectSubscription().Request(5);                    var errorSignalled = Enumerable.Range(1' 4)                      .Aggregate(false' (b' e) => b || subscriber.ExpectNextOrError() is TestException);                  if (!errorSignalled)                      subscriber.ExpectSubscriptionAndError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_nonempty_and_one_delayed_failed_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());                  subscriber.ExpectSubscription().Request(5);                    var errorSignalled = Enumerable.Range(1' 4)                      .Aggregate(false' (b' e) => b || subscriber.ExpectNextOrError() is TestException);                  if (!errorSignalled)                      subscriber.ExpectSubscriptionAndError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_one_nonempty_and_one_delayed_failed_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());                  subscriber.ExpectSubscription().Request(5);                    var errorSignalled = Enumerable.Range(1' 4)                      .Aggregate(false' (b' e) => b || subscriber.ExpectNextOrError() is TestException);                  if (!errorSignalled)                      subscriber.ExpectSubscriptionAndError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_correctly_handle_async_errors_in_secondary_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var promise = new TaskCompletionSource<int>();                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .Concat(Source.FromTask(promise.Task))                      .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var subscription = subscriber.ExpectSubscription();                  subscription.Request(4);                  Enumerable.Range(1' 3).ForEach(x => subscriber.ExpectNext(x));                  promise.SetException(TestException());                  subscriber.ExpectError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_correctly_handle_async_errors_in_secondary_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var promise = new TaskCompletionSource<int>();                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .Concat(Source.FromTask(promise.Task))                      .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var subscription = subscriber.ExpectSubscription();                  subscription.Request(4);                  Enumerable.Range(1' 3).ForEach(x => subscriber.ExpectNext(x));                  promise.SetException(TestException());                  subscriber.ExpectError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_correctly_handle_async_errors_in_secondary_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var promise = new TaskCompletionSource<int>();                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .Concat(Source.FromTask(promise.Task))                      .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var subscription = subscriber.ExpectSubscription();                  subscription.Request(4);                  Enumerable.Range(1' 3).ForEach(x => subscriber.ExpectNext(x));                  promise.SetException(TestException());                  subscriber.ExpectError().Should().BeOfType<TestException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Source_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testSource =                      Source.From(Enumerable.Range(1' 5))                          .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                          .Grouped(1000);                  var task = testSource.RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                    var runnable = testSource.ToMaterialized(Sink.Ignore<IEnumerable<int>>()' Keep.Left);                  var t = runnable.Run(Materializer);                  t.Item1.Should().BeOfType<NotUsed>();                  t.Item2.Should().BeOfType<NotUsed>();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Source_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testSource =                      Source.From(Enumerable.Range(1' 5))                          .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                          .Grouped(1000);                  var task = testSource.RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                    var runnable = testSource.ToMaterialized(Sink.Ignore<IEnumerable<int>>()' Keep.Left);                  var t = runnable.Run(Materializer);                  t.Item1.Should().BeOfType<NotUsed>();                  t.Item2.Should().BeOfType<NotUsed>();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Source_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testSource =                      Source.From(Enumerable.Range(1' 5))                          .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                          .Grouped(1000);                  var task = testSource.RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                    var runnable = testSource.ToMaterialized(Sink.Ignore<IEnumerable<int>>()' Keep.Left);                  var t = runnable.Run(Materializer);                  t.Item1.Should().BeOfType<NotUsed>();                  t.Item2.Should().BeOfType<NotUsed>();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Source_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testSource =                      Source.From(Enumerable.Range(1' 5))                          .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                          .Grouped(1000);                  var task = testSource.RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                    var runnable = testSource.ToMaterialized(Sink.Ignore<IEnumerable<int>>()' Keep.Left);                  var t = runnable.Run(Materializer);                  t.Item1.Should().BeOfType<NotUsed>();                  t.Item2.Should().BeOfType<NotUsed>();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Source_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testSource =                      Source.From(Enumerable.Range(1' 5))                          .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                          .Grouped(1000);                  var task = testSource.RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                    var runnable = testSource.ToMaterialized(Sink.Ignore<IEnumerable<int>>()' Keep.Left);                  var t = runnable.Run(Materializer);                  t.Item1.Should().BeOfType<NotUsed>();                  t.Item2.Should().BeOfType<NotUsed>();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Source_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testSource =                      Source.From(Enumerable.Range(1' 5))                          .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                          .Grouped(1000);                  var task = testSource.RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                    var runnable = testSource.ToMaterialized(Sink.Ignore<IEnumerable<int>>()' Keep.Left);                  var t = runnable.Run(Materializer);                  t.Item1.Should().BeOfType<NotUsed>();                  t.Item2.Should().BeOfType<NotUsed>();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    var runnable =                      Source.From(Enumerable.Range(1' 5))                          .ViaMaterialized(testFlow' Keep.Both)                          .To(Sink.Ignore<IEnumerable<int>>());                  runnable.Invoking(r => r.Run(Materializer)).ShouldNotThrow();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    var runnable =                      Source.From(Enumerable.Range(1' 5))                          .ViaMaterialized(testFlow' Keep.Both)                          .To(Sink.Ignore<IEnumerable<int>>());                  runnable.Invoking(r => r.Run(Materializer)).ShouldNotThrow();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    var runnable =                      Source.From(Enumerable.Range(1' 5))                          .ViaMaterialized(testFlow' Keep.Both)                          .To(Sink.Ignore<IEnumerable<int>>());                  runnable.Invoking(r => r.Run(Materializer)).ShouldNotThrow();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    var runnable =                      Source.From(Enumerable.Range(1' 5))                          .ViaMaterialized(testFlow' Keep.Both)                          .To(Sink.Ignore<IEnumerable<int>>());                  runnable.Invoking(r => r.Run(Materializer)).ShouldNotThrow();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    var runnable =                      Source.From(Enumerable.Range(1' 5))                          .ViaMaterialized(testFlow' Keep.Both)                          .To(Sink.Ignore<IEnumerable<int>>());                  runnable.Invoking(r => r.Run(Materializer)).ShouldNotThrow();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    var runnable =                      Source.From(Enumerable.Range(1' 5))                          .ViaMaterialized(testFlow' Keep.Both)                          .To(Sink.Ignore<IEnumerable<int>>());                  runnable.Invoking(r => r.Run(Materializer)).ShouldNotThrow();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    var runnable =                      Source.From(Enumerable.Range(1' 5))                          .ViaMaterialized(testFlow' Keep.Both)                          .To(Sink.Ignore<IEnumerable<int>>());                  runnable.Invoking(r => r.Run(Materializer)).ShouldNotThrow();                    runnable.MapMaterializedValue(_ => "boo").Run(Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    //var sink = testFlow.ConcatMaterialized(Source.From(Enumerable.Range(1' 5))' Keep.Both)                  //    .To(Sink.Ignore<IEnumerable<int>>())                  //    .MapMaterializedValue(                  //        x =>                  //        {                  //            x.Item1.Item1.Should().BeOfType<NotUsed>();                  //            x.Item1.Item2.Should().BeOfType<NotUsed>();                  //            x.Item2.Should().BeOfType<NotUsed>();                  //            return "boo";                  //        });                    //Source.From(Enumerable.Range(10' 6)).RunWith(sink' Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    //var sink = testFlow.ConcatMaterialized(Source.From(Enumerable.Range(1' 5))' Keep.Both)                  //    .To(Sink.Ignore<IEnumerable<int>>())                  //    .MapMaterializedValue(                  //        x =>                  //        {                  //            x.Item1.Item1.Should().BeOfType<NotUsed>();                  //            x.Item1.Item2.Should().BeOfType<NotUsed>();                  //            x.Item2.Should().BeOfType<NotUsed>();                  //            return "boo";                  //        });                    //Source.From(Enumerable.Range(10' 6)).RunWith(sink' Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    //var sink = testFlow.ConcatMaterialized(Source.From(Enumerable.Range(1' 5))' Keep.Both)                  //    .To(Sink.Ignore<IEnumerable<int>>())                  //    .MapMaterializedValue(                  //        x =>                  //        {                  //            x.Item1.Item1.Should().BeOfType<NotUsed>();                  //            x.Item1.Item2.Should().BeOfType<NotUsed>();                  //            x.Item2.Should().BeOfType<NotUsed>();                  //            return "boo";                  //        });                    //Source.From(Enumerable.Range(10' 6)).RunWith(sink' Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    //var sink = testFlow.ConcatMaterialized(Source.From(Enumerable.Range(1' 5))' Keep.Both)                  //    .To(Sink.Ignore<IEnumerable<int>>())                  //    .MapMaterializedValue(                  //        x =>                  //        {                  //            x.Item1.Item1.Should().BeOfType<NotUsed>();                  //            x.Item1.Item2.Should().BeOfType<NotUsed>();                  //            x.Item2.Should().BeOfType<NotUsed>();                  //            return "boo";                  //        });                    //Source.From(Enumerable.Range(10' 6)).RunWith(sink' Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    //var sink = testFlow.ConcatMaterialized(Source.From(Enumerable.Range(1' 5))' Keep.Both)                  //    .To(Sink.Ignore<IEnumerable<int>>())                  //    .MapMaterializedValue(                  //        x =>                  //        {                  //            x.Item1.Item1.Should().BeOfType<NotUsed>();                  //            x.Item1.Item2.Should().BeOfType<NotUsed>();                  //            x.Item2.Should().BeOfType<NotUsed>();                  //            return "boo";                  //        });                    //Source.From(Enumerable.Range(10' 6)).RunWith(sink' Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_work_with_Flow_DSL2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testFlow = Flow.Create<int>()                      .ConcatMaterialized(Source.From(Enumerable.Range(6' 5))' Keep.Both)                      .Grouped(1000);                  var task = Source.From(Enumerable.Range(1' 5))                      .ViaMaterialized(testFlow' Keep.Both)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                    //var sink = testFlow.ConcatMaterialized(Source.From(Enumerable.Range(1' 5))' Keep.Both)                  //    .To(Sink.Ignore<IEnumerable<int>>())                  //    .MapMaterializedValue(                  //        x =>                  //        {                  //            x.Item1.Item1.Should().BeOfType<NotUsed>();                  //            x.Item1.Item2.Should().BeOfType<NotUsed>();                  //            x.Item2.Should().BeOfType<NotUsed>();                  //            return "boo";                  //        });                    //Source.From(Enumerable.Range(10' 6)).RunWith(sink' Materializer).Should().Be("boo");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_subscribe_at_one_to_initial_source_and_to_one_that_it_is_concat_to,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher1 = TestPublisher.CreateProbe<int>(this);                  var publisher2 = TestPublisher.CreateProbe<int>(this);                  var probeSink =                      Source.FromPublisher(publisher1)                          .Concat(Source.FromPublisher(publisher2))                          .RunWith(this.SinkProbe<int>()' Materializer);                    var sub1 = publisher1.ExpectSubscription();                  var sub2 = publisher2.ExpectSubscription();                  var subSink = probeSink.ExpectSubscription();                    sub1.SendNext(1);                  subSink.Request(1);                  probeSink.ExpectNext(1);                  sub1.SendComplete();                    sub2.SendNext(2);                  subSink.Request(1);                  probeSink.ExpectNext(2);                  sub2.SendComplete();                    probeSink.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConcatSpec.cs,A_Concat_for_Flow_must_subscribe_at_one_to_initial_source_and_to_one_that_it_is_concat_to,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher1 = TestPublisher.CreateProbe<int>(this);                  var publisher2 = TestPublisher.CreateProbe<int>(this);                  var probeSink =                      Source.FromPublisher(publisher1)                          .Concat(Source.FromPublisher(publisher2))                          .RunWith(this.SinkProbe<int>()' Materializer);                    var sub1 = publisher1.ExpectSubscription();                  var sub2 = publisher2.ExpectSubscription();                  var subSink = probeSink.ExpectSubscription();                    sub1.SendNext(1);                  subSink.Request(1);                  probeSink.ExpectNext(1);                  sub1.SendComplete();                    sub2.SendNext(2);                  subSink.Request(1);                  probeSink.ExpectNext(2);                  sub2.SendComplete();                    probeSink.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,FlowConflateSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,FlowConflateSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_pass_through_elements_unchanged_when_there_is_no_rate_difference,The following statement contains a magic number: i <= 100
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_pass_through_elements_unchanged_when_there_is_no_rate_difference_simple_conflate,The following statement contains a magic number: i <= 100
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_conflate_elements_while_downstream_is_silent,The following statement contains a magic number: i <= 100
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_conflate_elements_while_downstream_is_silent,The following statement contains a magic number: subscriber.ExpectNext(5050);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_conflate_elements_while_downstream_is_silent_simple_conflate,The following statement contains a magic number: i <= 100
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_conflate_elements_while_downstream_is_silent_simple_conflate,The following statement contains a magic number: subscriber.ExpectNext(5050);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).ConflateWithSeed(i => i' (sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 2)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).ConflateWithSeed(i => i' (sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 2)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).ConflateWithSeed(i => i' (sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 2)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).ConflateWithSeed(i => i' (sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 2)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain,The following statement contains a magic number: future.Wait(TimeSpan.FromSeconds(10)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain,The following statement contains a magic number: future.Result.Should().Be(500500);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain_simple_conflate,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).Conflate((sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 2)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain_simple_conflate,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).Conflate((sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 2)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain_simple_conflate,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).Conflate((sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 2)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain_simple_conflate,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000)).Conflate((sum' i) => sum + i).Select(i =>              {                  if (ThreadLocalRandom.Current.Next(1' 3) == 2)                      Thread.Sleep(10);                  return i;              }).RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain_simple_conflate,The following statement contains a magic number: future.Wait(TimeSpan.FromSeconds(10)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_on_a_variable_rate_chain_simple_conflate,The following statement contains a magic number: future.Result.Should().Be(500500);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: publisher.SendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: subscriber.ExpectNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: publisher.SendNext(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: publisher.SendNext(4);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: subscriber.ExpectNext(7);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_backpressure_subscriber_when_upstream_is_slower,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_with_a_buffer_and_aggregate,The following statement contains a magic number: var future =                  Source.From(Enumerable.Range(1' 50))                      .ConflateWithSeed(i => i' (sum' i) => sum + i)                      .Buffer(50' OverflowStrategy.Backpressure)                      .RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_with_a_buffer_and_aggregate,The following statement contains a magic number: var future =                  Source.From(Enumerable.Range(1' 50))                      .ConflateWithSeed(i => i' (sum' i) => sum + i)                      .Buffer(50' OverflowStrategy.Backpressure)                      .RunAggregate(0' (sum' i) => sum + i' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_with_a_buffer_and_aggregate,The following statement contains a magic number: future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_work_with_a_buffer_and_aggregate,The following statement contains a magic number: future.Result.Should().Be(Enumerable.Range(1' 50).Sum());
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_seed_throws_and_a_RestartDescider_is_used,The following statement contains a magic number: var graph = Source.FromPublisher(sourceProbe).ConflateWithSeed(i =>              {                  if (i%2 == 0)                  {                      exceptionlath.Open();                      throw new TestException("I hate even seed numbers");                  }                  return i;              }' (sum' i) => sum + i)                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.RestartingDecider))                  .To(Sink.FromSubscriber(sinkProbe))                  .WithAttributes(Attributes.CreateInputBuffer(1' 1));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_seed_throws_and_a_RestartDescider_is_used,The following statement contains a magic number: sub.SendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_seed_throws_and_a_RestartDescider_is_used,The following statement contains a magic number: exceptionlath.Ready(TimeSpan.FromSeconds(3));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_seed_throws_and_a_RestartDescider_is_used,The following statement contains a magic number: sub.SendNext(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_seed_throws_and_a_RestartDescider_is_used,The following statement contains a magic number: sinkProbe.ExpectNext(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_RestartingDecider_is_used,The following statement contains a magic number: var graph = Source.FromPublisher(sourceProbe)                  .Via(conflate)                  .To(Sink.FromSubscriber(sinkProbe))                  .WithAttributes(Attributes.CreateInputBuffer(4' 4));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_RestartingDecider_is_used,The following statement contains a magic number: var graph = Source.FromPublisher(sourceProbe)                  .Via(conflate)                  .To(Sink.FromSubscriber(sinkProbe))                  .WithAttributes(Attributes.CreateInputBuffer(4' 4));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_RestartingDecider_is_used,The following statement contains a magic number: sub.ExpectRequest(4);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_RestartingDecider_is_used,The following statement contains a magic number: latch.Ready(TimeSpan.FromSeconds(3));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_ResumingDecider_is_used,The following statement contains a magic number: var graph = Source.FromPublisher(sourceProbe).ConflateWithSeed(i => new List<int> { i }'                  (state' elem) =>                  {                      if (elem == 2)                          throw new TestException("three is a four letter word");                        if (elem == 4)                          saw4Latch.Open();                        state.Add(elem);                      return state;                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .To(Sink.FromSubscriber(sinkProbe))                  .WithAttributes(Attributes.CreateInputBuffer(1' 1));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_ResumingDecider_is_used,The following statement contains a magic number: var graph = Source.FromPublisher(sourceProbe).ConflateWithSeed(i => new List<int> { i }'                  (state' elem) =>                  {                      if (elem == 2)                          throw new TestException("three is a four letter word");                        if (elem == 4)                          saw4Latch.Open();                        state.Add(elem);                      return state;                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .To(Sink.FromSubscriber(sinkProbe))                  .WithAttributes(Attributes.CreateInputBuffer(1' 1));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_ResumingDecider_is_used,The following statement contains a magic number: sub.SendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_ResumingDecider_is_used,The following statement contains a magic number: sub.SendNext(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_ResumingDecider_is_used,The following statement contains a magic number: sub.SendNext(4);
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_ResumingDecider_is_used,The following statement contains a magic number: saw4Latch.Ready(TimeSpan.FromSeconds(3));
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_ResumingDecider_is_used,The following statement contains a magic number: sinkProbe.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 3' 4});
Magic Number,Akka.Streams.Tests.Dsl,FlowConflateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowConflateSpec.cs,Conflate_must_restart_when_aggregate_throws_and_a_ResumingDecider_is_used,The following statement contains a magic number: sinkProbe.ExpectNext().ShouldAllBeEquivalentTo(new [] {1' 3' 4});
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_elements_with_some_time_shift,The following statement contains a magic number: var task =                  Source.From(Enumerable.Range(1' 10))                      .Delay(TimeSpan.FromSeconds(1))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_elements_with_some_time_shift,The following statement contains a magic number: var task =                  Source.From(Enumerable.Range(1' 10))                      .Delay(TimeSpan.FromSeconds(1))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_elements_with_some_time_shift,The following statement contains a magic number: task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_elements_with_some_time_shift,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_add_delay_to_initialDelay_if_exists_upstream,The following statement contains a magic number: var probe = Source.From(Enumerable.Range(1' 10))                  .InitialDelay(TimeSpan.FromSeconds(1))                  .Delay(TimeSpan.FromSeconds(1))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_add_delay_to_initialDelay_if_exists_upstream,The following statement contains a magic number: probe.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_add_delay_to_initialDelay_if_exists_upstream,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(1800));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_add_delay_to_initialDelay_if_exists_upstream,The following statement contains a magic number: probe.ExpectNext(1' TimeSpan.FromMilliseconds(300));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_add_delay_to_initialDelay_if_exists_upstream,The following statement contains a magic number: probe.ExpectNextN(Enumerable.Range(2' 9));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_add_delay_to_initialDelay_if_exists_upstream,The following statement contains a magic number: probe.ExpectNextN(Enumerable.Range(2' 9));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_element_after_time_passed_from_actual_receiving_element,The following statement contains a magic number: var probe = Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_element_after_time_passed_from_actual_receiving_element,The following statement contains a magic number: var probe = Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_element_after_time_passed_from_actual_receiving_element,The following statement contains a magic number: probe.Request(2)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200)) //delay                  .ExpectNext(1' TimeSpan.FromMilliseconds(200)) //delayed element                  .ExpectNext(2' TimeSpan.FromMilliseconds(100)) //buffered element                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_element_after_time_passed_from_actual_receiving_element,The following statement contains a magic number: probe.Request(2)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200)) //delay                  .ExpectNext(1' TimeSpan.FromMilliseconds(200)) //delayed element                  .ExpectNext(2' TimeSpan.FromMilliseconds(100)) //buffered element                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_element_after_time_passed_from_actual_receiving_element,The following statement contains a magic number: probe.Request(2)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200)) //delay                  .ExpectNext(1' TimeSpan.FromMilliseconds(200)) //delayed element                  .ExpectNext(2' TimeSpan.FromMilliseconds(100)) //buffered element                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_element_after_time_passed_from_actual_receiving_element,The following statement contains a magic number: probe.Request(2)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200)) //delay                  .ExpectNext(1' TimeSpan.FromMilliseconds(200)) //delayed element                  .ExpectNext(2' TimeSpan.FromMilliseconds(100)) //buffered element                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_element_after_time_passed_from_actual_receiving_element,The following statement contains a magic number: probe.Request(2)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200)) //delay                  .ExpectNext(1' TimeSpan.FromMilliseconds(200)) //delayed element                  .ExpectNext(2' TimeSpan.FromMilliseconds(100)) //buffered element                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_element_after_time_passed_from_actual_receiving_element,The following statement contains a magic number: probe.Request(2)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200)) //delay                  .ExpectNext(1' TimeSpan.FromMilliseconds(200)) //delayed element                  .ExpectNext(2' TimeSpan.FromMilliseconds(100)) //buffered element                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_element_after_time_passed_from_actual_receiving_element,The following statement contains a magic number: probe.Request(1)                  .ExpectNext(3) //buffered element                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_elements_with_delay_for_slow_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromMilliseconds(300))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(100);                  pSub.SendNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(1);                  pSub.SendNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  pSub.SendComplete();                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_elements_with_delay_for_slow_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromMilliseconds(300))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(100);                  pSub.SendNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(1);                  pSub.SendNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  pSub.SendComplete();                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_elements_with_delay_for_slow_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromMilliseconds(300))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(100);                  pSub.SendNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(1);                  pSub.SendNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  pSub.SendComplete();                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_elements_with_delay_for_slow_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromMilliseconds(300))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(100);                  pSub.SendNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(1);                  pSub.SendNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  pSub.SendComplete();                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_elements_with_delay_for_slow_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromMilliseconds(300))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(100);                  pSub.SendNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(1);                  pSub.SendNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  pSub.SendComplete();                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_deliver_elements_with_delay_for_slow_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromMilliseconds(300))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(100);                  pSub.SendNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(1);                  pSub.SendNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  pSub.SendComplete();                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_tail_for_internal_buffer_if_it_is_full_in_DropTail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropTail)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  var expected = Enumerable.Range(1' 15).ToList();                  expected.Add(20);                  task.Result.ShouldAllBeEquivalentTo(expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_tail_for_internal_buffer_if_it_is_full_in_DropTail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropTail)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  var expected = Enumerable.Range(1' 15).ToList();                  expected.Add(20);                  task.Result.ShouldAllBeEquivalentTo(expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_tail_for_internal_buffer_if_it_is_full_in_DropTail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropTail)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  var expected = Enumerable.Range(1' 15).ToList();                  expected.Add(20);                  task.Result.ShouldAllBeEquivalentTo(expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_tail_for_internal_buffer_if_it_is_full_in_DropTail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropTail)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  var expected = Enumerable.Range(1' 15).ToList();                  expected.Add(20);                  task.Result.ShouldAllBeEquivalentTo(expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_tail_for_internal_buffer_if_it_is_full_in_DropTail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropTail)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  var expected = Enumerable.Range(1' 15).ToList();                  expected.Add(20);                  task.Result.ShouldAllBeEquivalentTo(expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_tail_for_internal_buffer_if_it_is_full_in_DropTail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropTail)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  var expected = Enumerable.Range(1' 15).ToList();                  expected.Add(20);                  task.Result.ShouldAllBeEquivalentTo(expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_tail_for_internal_buffer_if_it_is_full_in_DropTail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropTail)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  var expected = Enumerable.Range(1' 15).ToList();                  expected.Add(20);                  task.Result.ShouldAllBeEquivalentTo(expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_head_for_internal_buffer_if_it_is_full_in_DropHead_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropHead)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(5' 16));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_head_for_internal_buffer_if_it_is_full_in_DropHead_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropHead)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(5' 16));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_head_for_internal_buffer_if_it_is_full_in_DropHead_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropHead)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(5' 16));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_head_for_internal_buffer_if_it_is_full_in_DropHead_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropHead)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(5' 16));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_head_for_internal_buffer_if_it_is_full_in_DropHead_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropHead)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(5' 16));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_head_for_internal_buffer_if_it_is_full_in_DropHead_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropHead)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(5' 16));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_drop_head_for_internal_buffer_if_it_is_full_in_DropHead_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                      .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropHead)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(5' 16));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_clear_all_for_internal_buffer_if_it_is_full_in_DropBuffer_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropBuffer)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .Grouped(100)                                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(17' 4));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_clear_all_for_internal_buffer_if_it_is_full_in_DropBuffer_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropBuffer)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .Grouped(100)                                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(17' 4));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_clear_all_for_internal_buffer_if_it_is_full_in_DropBuffer_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropBuffer)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .Grouped(100)                                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(17' 4));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_clear_all_for_internal_buffer_if_it_is_full_in_DropBuffer_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropBuffer)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .Grouped(100)                                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(17' 4));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_clear_all_for_internal_buffer_if_it_is_full_in_DropBuffer_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropBuffer)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .Grouped(100)                                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(17' 4));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_clear_all_for_internal_buffer_if_it_is_full_in_DropBuffer_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropBuffer)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .Grouped(100)                                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(17' 4));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_clear_all_for_internal_buffer_if_it_is_full_in_DropBuffer_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromSeconds(1)' DelayOverflowStrategy.DropBuffer)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .Grouped(100)                                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Wait(TimeSpan.FromMilliseconds(1200)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(17' 4));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_pass_elements_with_delay_through_normally_in_backpressured_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Backpressure)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(5)                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(1' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(2' TimeSpan.FromMilliseconds(200))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(200))                  .ExpectNext(3' TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_fail_on_overflow_in_Fail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var actualError = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Fail)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .RunWith(this.SinkProbe<int>()' Materializer)                                  .Request(100)                                  .ExpectError();                    actualError.Should().BeOfType<BufferOverflowException>();                  actualError.Message.Should().Be("Buffer overflow for Delay combinator (max capacity was: 16)!");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_fail_on_overflow_in_Fail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var actualError = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Fail)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .RunWith(this.SinkProbe<int>()' Materializer)                                  .Request(100)                                  .ExpectError();                    actualError.Should().BeOfType<BufferOverflowException>();                  actualError.Message.Should().Be("Buffer overflow for Delay combinator (max capacity was: 16)!");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_fail_on_overflow_in_Fail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var actualError = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Fail)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .RunWith(this.SinkProbe<int>()' Materializer)                                  .Request(100)                                  .ExpectError();                    actualError.Should().BeOfType<BufferOverflowException>();                  actualError.Message.Should().Be("Buffer overflow for Delay combinator (max capacity was: 16)!");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_fail_on_overflow_in_Fail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var actualError = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Fail)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .RunWith(this.SinkProbe<int>()' Materializer)                                  .Request(100)                                  .ExpectError();                    actualError.Should().BeOfType<BufferOverflowException>();                  actualError.Message.Should().Be("Buffer overflow for Delay combinator (max capacity was: 16)!");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_fail_on_overflow_in_Fail_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var actualError = Source.From(Enumerable.Range(1' 20))                                  .Delay(TimeSpan.FromMilliseconds(300)' DelayOverflowStrategy.Fail)                                  .WithAttributes(Attributes.CreateInputBuffer(16' 16))                                  .RunWith(this.SinkProbe<int>()' Materializer)                                  .Request(100)                                  .ExpectError();                    actualError.Should().BeOfType<BufferOverflowException>();                  actualError.Message.Should().Be("Buffer overflow for Delay combinator (max capacity was: 16)!");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_emit_early_when_buffer_is_full_and_in_EmitEarly_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromSeconds(10)' DelayOverflowStrategy.EmitEarly)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(20);                    Enumerable.Range(1' 16).ForEach(i => pSub.SendNext(i));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.SendNext(17);                  c.ExpectNext(1' TimeSpan.FromMilliseconds(100));                  // fail will terminate despite of non empty internal buffer                  pSub.SendError(new SystemException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_emit_early_when_buffer_is_full_and_in_EmitEarly_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromSeconds(10)' DelayOverflowStrategy.EmitEarly)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(20);                    Enumerable.Range(1' 16).ForEach(i => pSub.SendNext(i));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.SendNext(17);                  c.ExpectNext(1' TimeSpan.FromMilliseconds(100));                  // fail will terminate despite of non empty internal buffer                  pSub.SendError(new SystemException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_emit_early_when_buffer_is_full_and_in_EmitEarly_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromSeconds(10)' DelayOverflowStrategy.EmitEarly)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(20);                    Enumerable.Range(1' 16).ForEach(i => pSub.SendNext(i));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.SendNext(17);                  c.ExpectNext(1' TimeSpan.FromMilliseconds(100));                  // fail will terminate despite of non empty internal buffer                  pSub.SendError(new SystemException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_emit_early_when_buffer_is_full_and_in_EmitEarly_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromSeconds(10)' DelayOverflowStrategy.EmitEarly)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(20);                    Enumerable.Range(1' 16).ForEach(i => pSub.SendNext(i));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.SendNext(17);                  c.ExpectNext(1' TimeSpan.FromMilliseconds(100));                  // fail will terminate despite of non empty internal buffer                  pSub.SendError(new SystemException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_emit_early_when_buffer_is_full_and_in_EmitEarly_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromSeconds(10)' DelayOverflowStrategy.EmitEarly)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(20);                    Enumerable.Range(1' 16).ForEach(i => pSub.SendNext(i));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.SendNext(17);                  c.ExpectNext(1' TimeSpan.FromMilliseconds(100));                  // fail will terminate despite of non empty internal buffer                  pSub.SendError(new SystemException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_emit_early_when_buffer_is_full_and_in_EmitEarly_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromSeconds(10)' DelayOverflowStrategy.EmitEarly)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(20);                    Enumerable.Range(1' 16).ForEach(i => pSub.SendNext(i));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.SendNext(17);                  c.ExpectNext(1' TimeSpan.FromMilliseconds(100));                  // fail will terminate despite of non empty internal buffer                  pSub.SendError(new SystemException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_emit_early_when_buffer_is_full_and_in_EmitEarly_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromSeconds(10)' DelayOverflowStrategy.EmitEarly)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(20);                    Enumerable.Range(1' 16).ForEach(i => pSub.SendNext(i));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.SendNext(17);                  c.ExpectNext(1' TimeSpan.FromMilliseconds(100));                  // fail will terminate despite of non empty internal buffer                  pSub.SendError(new SystemException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDelaySpec.cs,A_Delay_must_emit_early_when_buffer_is_full_and_in_EmitEarly_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = TestPublisher.CreateManualProbe<int>(this);                    Source.FromPublisher(p)                      .Delay(TimeSpan.FromSeconds(10)' DelayOverflowStrategy.EmitEarly)                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  var pSub = p.ExpectSubscription();                  cSub.Request(20);                    Enumerable.Range(1' 16).ForEach(i => pSub.SendNext(i));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.SendNext(17);                  c.ExpectNext(1' TimeSpan.FromMilliseconds(100));                  // fail will terminate despite of non empty internal buffer                  pSub.SendError(new SystemException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDetacherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDetacherSpec.cs,A_Detacher_must_pass_through_all_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 100))                      .Detach()                      .RunWith(Sink.Seq<int>()' Materializer)                      .Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDetacherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDetacherSpec.cs,A_Detacher_must_pass_through_all_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 100))                      .Detach()                      .RunWith(Sink.Seq<int>()' Materializer)                      .Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDetacherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDetacherSpec.cs,A_Detacher_must_pass_through_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var ex = new TestException("buh");                  var result = Source.From(Enumerable.Range(1' 100)).Select(x =>                  {                      if (x == 50)                          throw ex;                      return x;                  }).Detach().RunWith(Sink.Seq<int>()' Materializer);                    result.Invoking(r => r.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<TestException>().And.Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDetacherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDetacherSpec.cs,A_Detacher_must_pass_through_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var ex = new TestException("buh");                  var result = Source.From(Enumerable.Range(1' 100)).Select(x =>                  {                      if (x == 50)                          throw ex;                      return x;                  }).Detach().RunWith(Sink.Seq<int>()' Materializer);                    result.Invoking(r => r.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<TestException>().And.Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDetacherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDetacherSpec.cs,A_Detacher_must_pass_through_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var ex = new TestException("buh");                  var result = Source.From(Enumerable.Range(1' 100)).Select(x =>                  {                      if (x == 50)                          throw ex;                      return x;                  }).Detach().RunWith(Sink.Seq<int>()' Materializer);                    result.Invoking(r => r.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<TestException>().And.Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDetacherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDetacherSpec.cs,A_Detacher_must_emit_the_last_element_when_completed_Without_demand,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.Single(42).Detach().RunWith(this.SinkProbe<int>()' Materializer).EnsureSubscription();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  probe.RequestNext(42);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDetacherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDetacherSpec.cs,A_Detacher_must_emit_the_last_element_when_completed_Without_demand,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.Single(42).Detach().RunWith(this.SinkProbe<int>()' Materializer).EnsureSubscription();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  probe.RequestNext(42);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDetacherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDetacherSpec.cs,A_Detacher_must_emit_the_last_element_when_completed_Without_demand,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.Single(42).Detach().RunWith(this.SinkProbe<int>()' Materializer).EnsureSubscription();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  probe.RequestNext(42);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDispatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDispatcherSpec.cs,Flow_with_dispatcher_setting_must_use_the_default_dispatcher,The following statement contains a magic number: Source.From(Enumerable.Range(1' 3)).MapMaterializedValue(i =>              {                  probe.Ref.Tell(Thread.CurrentThread.Name);                  return i;              }).To(Sink.Ignore<int>()).Run(materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDispatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDispatcherSpec.cs,Flow_with_dispatcher_setting_must_use_the_default_dispatcher,The following statement contains a magic number: probe.ReceiveN(3).Where(s=>s is string).Cast<string>().ForEach(s =>              {                  s.Should().StartWith(Sys.Name + "-akka.test.stream-dispatcher");              });
Magic Number,Akka.Streams.Tests.Dsl,FlowDispatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDispatcherSpec.cs,Flow_with_dispatcher_setting_must_use_cutstom_dispatcher,The following statement contains a magic number: Source.From(Enumerable.Range(1' 3)).MapMaterializedValue(i =>              {                  probe.Ref.Tell(Thread.CurrentThread.Name);                  return i;              }).To(Sink.Ignore<int>()).Run(materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowDispatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowDispatcherSpec.cs,Flow_with_dispatcher_setting_must_use_cutstom_dispatcher,The following statement contains a magic number: probe.ReceiveN(3).Where(s => s is string).Cast<string>().ForEach(s =>              {                  s.Should().StartWith(Sys.Name + "-my-dispatcher");              });
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,FlowExpandSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,FlowExpandSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_pass_through_elements_unchanged_when_there_is_no_rate_differenc,The following statement contains a magic number: Source.FromPublisher(publisher)                  .Expand(i => Enumerable.Repeat(i' 200).GetEnumerator())                  .To(Sink.FromSubscriber(subscriber))                  .Run(materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_pass_through_elements_unchanged_when_there_is_no_rate_differenc,The following statement contains a magic number: i <= 100
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_expand_elements_while_upstream_is_silent,The following statement contains a magic number: Source.FromPublisher(publisher)                  .Expand(i => Enumerable.Repeat(i' 200).GetEnumerator())                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_expand_elements_while_upstream_is_silent,The following statement contains a magic number: publisher.SendNext(42);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_expand_elements_while_upstream_is_silent,The following statement contains a magic number: subscriber.RequestNext(42);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_expand_elements_while_upstream_is_silent,The following statement contains a magic number: i <= 100
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_expand_elements_while_upstream_is_silent,The following statement contains a magic number: publisher.SendNext(-42);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_expand_elements_while_upstream_is_silent,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_expand_elements_while_upstream_is_silent,The following statement contains a magic number: subscriber.RequestNext(-42);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_do_not_drop_last_element,The following statement contains a magic number: Source.FromPublisher(publisher)                  .Expand(i => Enumerable.Repeat(i' 200).GetEnumerator())                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_do_not_drop_last_element,The following statement contains a magic number: publisher.SendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_do_not_drop_last_element,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_do_not_drop_last_element,The following statement contains a magic number: subscriber.RequestNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 100))                  .Select(x =>                  {                      if (ThreadLocalRandom.Current.Next(1' 3) == 2)                          Thread.Sleep(10);                      return x;                  })                  .Expand(i => Enumerable.Repeat(i' 200).GetEnumerator())                  .RunAggregate(new HashSet<int>()' (agg' elem) =>                  {                      agg.Add(elem);                      return agg;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 100))                  .Select(x =>                  {                      if (ThreadLocalRandom.Current.Next(1' 3) == 2)                          Thread.Sleep(10);                      return x;                  })                  .Expand(i => Enumerable.Repeat(i' 200).GetEnumerator())                  .RunAggregate(new HashSet<int>()' (agg' elem) =>                  {                      agg.Add(elem);                      return agg;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 100))                  .Select(x =>                  {                      if (ThreadLocalRandom.Current.Next(1' 3) == 2)                          Thread.Sleep(10);                      return x;                  })                  .Expand(i => Enumerable.Repeat(i' 200).GetEnumerator())                  .RunAggregate(new HashSet<int>()' (agg' elem) =>                  {                      agg.Add(elem);                      return agg;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 100))                  .Select(x =>                  {                      if (ThreadLocalRandom.Current.Next(1' 3) == 2)                          Thread.Sleep(10);                      return x;                  })                  .Expand(i => Enumerable.Repeat(i' 200).GetEnumerator())                  .RunAggregate(new HashSet<int>()' (agg' elem) =>                  {                      agg.Add(elem);                      return agg;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_must_work_on_a_variable_rate_chain,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 100))                  .Select(x =>                  {                      if (ThreadLocalRandom.Current.Next(1' 3) == 2)                          Thread.Sleep(10);                      return x;                  })                  .Expand(i => Enumerable.Repeat(i' 200).GetEnumerator())                  .RunAggregate(new HashSet<int>()' (agg' elem) =>                  {                      agg.Add(elem);                      return agg;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_must_work_on_a_variable_rate_chain,The following statement contains a magic number: future.Wait(TimeSpan.FromSeconds(10)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_must_work_on_a_variable_rate_chain,The following statement contains a magic number: future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_backpressure_publisher_when_subscriber_is_slower,The following statement contains a magic number: Source.FromPublisher(publisher)                  .Expand(i => Enumerable.Repeat(i' 200).GetEnumerator())                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_backpressure_publisher_when_subscriber_is_slower,The following statement contains a magic number: publisher.UnsafeSendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_backpressure_publisher_when_subscriber_is_slower,The following statement contains a magic number: publisher.UnsafeSendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_backpressure_publisher_when_subscriber_is_slower,The following statement contains a magic number: subscriber.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_backpressure_publisher_when_subscriber_is_slower,The following statement contains a magic number: subscriber.ExpectNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_backpressure_publisher_when_subscriber_is_slower,The following statement contains a magic number: subscriber.ExpectNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_work_properly_with_finite_extrapolations,The following statement contains a magic number: var t = TestSource.SourceProbe<int>(this)                  .Expand(i => Enumerable.Range(0' 4).Select(x => Tuple.Create(i' x)).Take(3).GetEnumerator())                  .ToMaterialized(this.SinkProbe<Tuple<int' int>>()' Keep.Both)                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_work_properly_with_finite_extrapolations,The following statement contains a magic number: var t = TestSource.SourceProbe<int>(this)                  .Expand(i => Enumerable.Range(0' 4).Select(x => Tuple.Create(i' x)).Take(3).GetEnumerator())                  .ToMaterialized(this.SinkProbe<Tuple<int' int>>()' Keep.Both)                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_work_properly_with_finite_extrapolations,The following statement contains a magic number: sink.Request(4)                  .ExpectNext(Tuple.Create(1' 0)' Tuple.Create(1' 1)' Tuple.Create(1' 2))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_work_properly_with_finite_extrapolations,The following statement contains a magic number: sink.Request(4)                  .ExpectNext(Tuple.Create(1' 0)' Tuple.Create(1' 1)' Tuple.Create(1' 2))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_work_properly_with_finite_extrapolations,The following statement contains a magic number: sink.Request(4)                  .ExpectNext(Tuple.Create(1' 0)' Tuple.Create(1' 1)' Tuple.Create(1' 2))                  .ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_work_properly_with_finite_extrapolations,The following statement contains a magic number: source.SendNext(2).SendComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowExpandSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowExpandSpec.cs,Expand_musst_work_properly_with_finite_extrapolations,The following statement contains a magic number: sink.ExpectNext(Tuple.Create(2' 0)).ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowWhereSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWhereSpec.cs,FlowWhereSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowWhereSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWhereSpec.cs,FlowWhereSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowWhereSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWhereSpec.cs,A_Where_must_filter,The following statement contains a magic number: RandomTestRange(Sys).ForEach(_ => RunScript(script' Settings' flow => flow.Where(x => x%2 == 0)));
Magic Number,Akka.Streams.Tests.Dsl,FlowWhereSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWhereSpec.cs,A_Where_must_not_blow_up_with_high_request_counts,The following statement contains a magic number: Source.From(Enumerable.Repeat(0' 1000).Concat(new[] {1}))                  .Where(x => x != 0)                  .RunWith(Sink.FromSubscriber(probe)' materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWhereSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWhereSpec.cs,A_Where_must_not_blow_up_with_high_request_counts,The following statement contains a magic number: i <= 1000
Magic Number,Akka.Streams.Tests.Dsl,FlowWhereSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWhereSpec.cs,A_FilterNot_must_filter_based_on_inverted_predicate,The following statement contains a magic number: RandomTestRange(Sys).ForEach(_ => RunScript(script' Settings' flow => flow.WhereNot(x => x % 2 == 0)));
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_work_in_the_nominal_case,The following statement contains a magic number: var task = Source.From(new[] {Src10(0)' Src10(10)' Src10(20)' Src10(30)})                  .MergeMany(4' s => s)                  .RunWith(ToSet' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_work_in_the_nominal_case,The following statement contains a magic number: var task = Source.From(new[] {Src10(0)' Src10(10)' Src10(20)' Src10(30)})                  .MergeMany(4' s => s)                  .RunWith(ToSet' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_work_in_the_nominal_case,The following statement contains a magic number: var task = Source.From(new[] {Src10(0)' Src10(10)' Src10(20)' Src10(30)})                  .MergeMany(4' s => s)                  .RunWith(ToSet' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_work_in_the_nominal_case,The following statement contains a magic number: var task = Source.From(new[] {Src10(0)' Src10(10)' Src10(20)' Src10(30)})                  .MergeMany(4' s => s)                  .RunWith(ToSet' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_work_in_the_nominal_case,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(0' 40));
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_not_be_held_back_by_one_slow_stream,The following statement contains a magic number: var task = Source.From(new[] { Src10(0)' Src10(10)' Blocked' Src10(20)' Src10(30) })                  .MergeMany(3' s => s)                  .Take(40)                  .RunWith(ToSet' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_not_be_held_back_by_one_slow_stream,The following statement contains a magic number: var task = Source.From(new[] { Src10(0)' Src10(10)' Blocked' Src10(20)' Src10(30) })                  .MergeMany(3' s => s)                  .Take(40)                  .RunWith(ToSet' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_not_be_held_back_by_one_slow_stream,The following statement contains a magic number: var task = Source.From(new[] { Src10(0)' Src10(10)' Blocked' Src10(20)' Src10(30) })                  .MergeMany(3' s => s)                  .Take(40)                  .RunWith(ToSet' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_not_be_held_back_by_one_slow_stream,The following statement contains a magic number: var task = Source.From(new[] { Src10(0)' Src10(10)' Blocked' Src10(20)' Src10(30) })                  .MergeMany(3' s => s)                  .Take(40)                  .RunWith(ToSet' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_not_be_held_back_by_one_slow_stream,The following statement contains a magic number: var task = Source.From(new[] { Src10(0)' Src10(10)' Blocked' Src10(20)' Src10(30) })                  .MergeMany(3' s => s)                  .Take(40)                  .RunWith(ToSet' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_not_be_held_back_by_one_slow_stream,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(0' 40));
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_respect_breadth,The following statement contains a magic number: var task = Source.From(new[] { Src10(0)' Src10(10)' Src10(20)' Blocked' Blocked' Src10(30) })                  .MergeMany(3' s => s)                  .Take(40)                  .RunWith(ToSeq' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_respect_breadth,The following statement contains a magic number: var task = Source.From(new[] { Src10(0)' Src10(10)' Src10(20)' Blocked' Blocked' Src10(30) })                  .MergeMany(3' s => s)                  .Take(40)                  .RunWith(ToSeq' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_respect_breadth,The following statement contains a magic number: var task = Source.From(new[] { Src10(0)' Src10(10)' Src10(20)' Blocked' Blocked' Src10(30) })                  .MergeMany(3' s => s)                  .Take(40)                  .RunWith(ToSeq' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_respect_breadth,The following statement contains a magic number: var task = Source.From(new[] { Src10(0)' Src10(10)' Src10(20)' Blocked' Blocked' Src10(30) })                  .MergeMany(3' s => s)                  .Take(40)                  .RunWith(ToSeq' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_respect_breadth,The following statement contains a magic number: var task = Source.From(new[] { Src10(0)' Src10(10)' Src10(20)' Blocked' Blocked' Src10(30) })                  .MergeMany(3' s => s)                  .Take(40)                  .RunWith(ToSeq' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_respect_breadth,The following statement contains a magic number: task.Result.Take(30).ShouldAllBeEquivalentTo(Enumerable.Range(0' 30));
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_respect_breadth,The following statement contains a magic number: task.Result.Take(30).ShouldAllBeEquivalentTo(Enumerable.Range(0' 30));
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_respect_breadth,The following statement contains a magic number: task.Result.Drop(30).ShouldAllBeEquivalentTo(Enumerable.Range(30' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_respect_breadth,The following statement contains a magic number: task.Result.Drop(30).ShouldAllBeEquivalentTo(Enumerable.Range(30' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_respect_breadth,The following statement contains a magic number: task.Result.Drop(30).ShouldAllBeEquivalentTo(Enumerable.Range(30' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_propage_late_failure_from_main_stream,The following statement contains a magic number: var future = Source.Combine(Source.From(new[] {Blocked' Blocked})' Source.Failed<Source<int' NotUsed>>(ex)'                  i => new Merge<Source<int' NotUsed>>(i))                  .MergeMany(10' x => x)                  .RunWith(Sink.First<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_propagate_failure_from_map_function,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 3))                  .MergeMany(10' x =>                  {                      if (x == 3)                          throw ex;                      return Blocked;                  })                  .RunWith(Sink.First<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_propagate_failure_from_map_function,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 3))                  .MergeMany(10' x =>                  {                      if (x == 3)                          throw ex;                      return Blocked;                  })                  .RunWith(Sink.First<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_propagate_failure_from_map_function,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 3))                  .MergeMany(10' x =>                  {                      if (x == 3)                          throw ex;                      return Blocked;                  })                  .RunWith(Sink.First<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_bubble_up_substream_exceptions,The following statement contains a magic number: var future = Source.From(new[] { Blocked' Blocked' Source.Failed<int>(ex) })                  .MergeMany(10' x => x)                  .RunWith(Sink.First<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_cancel_substreams_when_failing_from_main_stream,The following statement contains a magic number: Source.Combine(                  Source.From(new[] {Source.FromPublisher(p1)' Source.FromPublisher(p2)})'                  Source.FromTask(p.Task)' i => new Merge<Source<int' NotUsed>>(i))                  .MergeMany(5' x => x)                  .RunWith(Sink.First<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_cancel_substreams_when_failing_from_substream,The following statement contains a magic number: Source.From(new[]              {Source.FromPublisher(p1)' Source.FromPublisher(p2)' Source.FromTask(p.Task)})                  .MergeMany(5' x => x)                  .RunWith(Sink.First<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_cancel_substreams_when_failing_map_function,The following statement contains a magic number: Source.From(Enumerable.Range(1' 3)).MergeMany(10' i =>              {                  if (i == 1)                      return Source.FromPublisher(p);                    latch.Ready(TimeSpan.FromSeconds(3));                  throw ex;              }).RunWith(Sink.First<int>()' materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_cancel_substreams_when_failing_map_function,The following statement contains a magic number: Source.From(Enumerable.Range(1' 3)).MergeMany(10' i =>              {                  if (i == 1)                      return Source.FromPublisher(p);                    latch.Ready(TimeSpan.FromSeconds(3));                  throw ex;              }).RunWith(Sink.First<int>()' materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_cancel_substreams_when_failing_map_function,The following statement contains a magic number: Source.From(Enumerable.Range(1' 3)).MergeMany(10' i =>              {                  if (i == 1)                      return Source.FromPublisher(p);                    latch.Ready(TimeSpan.FromSeconds(3));                  throw ex;              }).RunWith(Sink.First<int>()' materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_cancel_substreams_when_being_cancelled,The following statement contains a magic number: var sink = Source.From(new[] {Source.FromPublisher(p1)' Source.FromPublisher(p2)})                  .MergeMany(5' x => x)                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_work_with_many_concurrently_queued_events,The following statement contains a magic number: const int noOfSources = 100;
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_work_with_many_concurrently_queued_events,The following statement contains a magic number: var p = Source.From(Enumerable.Range(0' noOfSources).Select(i => Src10(10*i)))                  .MergeMany(int.MaxValue' x => x)                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_work_with_many_concurrently_queued_events,The following statement contains a magic number: var elems = p.Within(TimeSpan.FromSeconds(1)' () => Enumerable.Range(1' noOfSources * 10).Select(_ => p.RequestNext()).ToArray());
Magic Number,Akka.Streams.Tests.Dsl,FlowFlattenMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFlattenMergeSpec.cs,A_FlattenMerge_must_work_with_many_concurrently_queued_events,The following statement contains a magic number: elems.ShouldAllBeEquivalentTo(Enumerable.Range(0' noOfSources * 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowAggregateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowAggregateSpec.cs,A_Aggregate_must_work_when_using_Source_RunFold,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = InputSource.RunAggregate(0' (sum' i) => sum + i' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Be(Expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowAggregateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowAggregateSpec.cs,A_Aggregate_must_work_when_using_Source_Fold,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = FoldSource.RunWith(Sink.First<int>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Be(Expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowAggregateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowAggregateSpec.cs,A_Aggregate_must_work_when_using_Sink_Fold,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = InputSource.RunWith(FoldSink' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Be(Expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowAggregateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowAggregateSpec.cs,A_Aggregate_must_work_when_using_Flow_Fold,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = InputSource.Via(FoldFlow).RunWith(Sink.First<int>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Be(Expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowAggregateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowAggregateSpec.cs,A_Aggregate_must_work_when_using__Source_Aggregate_and_Flow_Aggregate_and_Sink_Fold,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = FoldSource.Via(FoldFlow).RunWith(FoldSink' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Be(Expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowAggregateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowAggregateSpec.cs,A_Aggregate_must_propagate_an_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new TestException("buh");                  var future = InputSource.Select(x =>                  {                      if (x > 50)                          throw error;                      return x;                  }).RunAggregate(NotUsed.Instance' Keep.None' Materializer);                    future.Invoking(f => f.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>()                      .And.Should()                      .Be(error);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowAggregateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowAggregateSpec.cs,A_Aggregate_must_propagate_an_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new TestException("buh");                  var future = InputSource.Select(x =>                  {                      if (x > 50)                          throw error;                      return x;                  }).RunAggregate(NotUsed.Instance' Keep.None' Materializer);                    future.Invoking(f => f.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>()                      .And.Should()                      .Be(error);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowAggregateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowAggregateSpec.cs,A_Aggregate_must_complete_future_with_failure_when_folding_functions_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new TestException("buh");                  var future = InputSource.RunAggregate(0' (x'y) =>                  {                      if (x > 50)                          throw error;                      return x + y;                  }' Materializer);                    future.Invoking(f => f.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>()                      .And.Should()                      .Be(error);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowAggregateSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowAggregateSpec.cs,A_Aggregate_must_complete_future_with_failure_when_folding_functions_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new TestException("buh");                  var future = InputSource.RunAggregate(0' (x'y) =>                  {                      if (x > 50)                          throw error;                      return x + y;                  }' Materializer);                    future.Invoking(f => f.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>()                      .And.Should()                      .Be(error);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowForeachSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowForeachSpec.cs,A_Foreach_must_call_the_procedure_for_each_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3)).RunForeach(i => TestActor.Tell(i)' Materializer).ContinueWith(                      task =>                      {                          if(task.IsCompleted && task.Exception == null)                              TestActor.Tell("done");                      });                    ExpectMsg(1);                  ExpectMsg(2);                  ExpectMsg(3);                  ExpectMsg("done");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowForeachSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowForeachSpec.cs,A_Foreach_must_call_the_procedure_for_each_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3)).RunForeach(i => TestActor.Tell(i)' Materializer).ContinueWith(                      task =>                      {                          if(task.IsCompleted && task.Exception == null)                              TestActor.Tell("done");                      });                    ExpectMsg(1);                  ExpectMsg(2);                  ExpectMsg(3);                  ExpectMsg("done");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowForeachSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowForeachSpec.cs,A_Foreach_must_call_the_procedure_for_each_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3)).RunForeach(i => TestActor.Tell(i)' Materializer).ContinueWith(                      task =>                      {                          if(task.IsCompleted && task.Exception == null)                              TestActor.Tell("done");                      });                    ExpectMsg(1);                  ExpectMsg(2);                  ExpectMsg(3);                  ExpectMsg("done");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowForeachSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowForeachSpec.cs,A_Foreach_must_complete_future_with_failure_when_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new TestException("test");                  var future = Source.Single(1).RunForeach(_ =>                  {                      throw error;                  }' Materializer);                    future.Invoking(f => f.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>()                      .And.Should()                      .Be(error);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFromTaskSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFromTaskSpec.cs,A_Flow_based_on_a_Task_must_produce_one_element_from_already_successful_Future,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {              var c = TestSubscriber.CreateManualProbe<int>(this);              var p = Source.FromTask(Task.FromResult(1)).RunWith(Sink.AsPublisher<int>(true)' Materializer);              p.Subscribe(c);              var sub = c.ExpectSubscription();              c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              sub.Request(1);              c.ExpectNext(1);              c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFromTaskSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFromTaskSpec.cs,A_Flow_based_on_a_Task_must_produce_one_element_when_Task_is_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var promise = new TaskCompletionSource<int>();                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = Source.FromTask(promise.Task).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  p.Subscribe(c);                  var sub = c.ExpectSubscription();                  sub.Request(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  promise.SetResult(1);                  c.ExpectNext(1);                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFromTaskSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFromTaskSpec.cs,A_Flow_based_on_a_Task_must_produce_one_element_when_Task_is_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var promise = new TaskCompletionSource<int>();                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var p = Source.FromTask(promise.Task).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  p.Subscribe(c);                  var sub = c.ExpectSubscription();                  sub.Request(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  promise.SetResult(1);                  c.ExpectNext(1);                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFromTaskSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFromTaskSpec.cs,A_Flow_based_on_a_Task_must_produce_one_element_when_Task_is_completed_but_not_before_request,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowFromTaskSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFromTaskSpec.cs,A_Flow_based_on_a_Task_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var promise = new TaskCompletionSource<int>();                  var p = Source.FromTask(promise.Task).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  promise.SetResult(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowFromTaskSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFromTaskSpec.cs,A_Flow_based_on_a_Task_must_allow_cancel_before_receiving_element,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowFromTaskSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowFromTaskSpec.cs,A_Flow_based_on_a_Task_must_allow_cancel_before_receiving_element,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_simple_merge,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  b.From(In1).Via(F1).To(merge.In(0));                  b.From(In2).Via(F2).To(merge.In(1));                  b.From(merge.Out).Via(F3).To(Out1);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_simple_broadcast,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var broadcast = b.Add(new Broadcast<string>(2));                  b.From(In1).Via(F1).To(broadcast.In);                  b.From(broadcast.Out(0)).Via(F2).To(Out1);                  b.From(broadcast.Out(1)).Via(F3).To(Out2);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_simple_merge_broadcast,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast = b.Add(new Broadcast<string>(2));                  b.From(In1).Via(F1).To(merge.In(0));                  b.From(In2).Via(F2).To(merge.In(1));                  b.From(merge).Via(F3).To(broadcast);                  b.From(broadcast.Out(0)).Via(F4).To(Out1);                  b.From(broadcast.Out(1)).Via(F4).To(Out2);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_simple_merge_broadcast,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast = b.Add(new Broadcast<string>(2));                  b.From(In1).Via(F1).To(merge.In(0));                  b.From(In2).Via(F2).To(merge.In(1));                  b.From(merge).Via(F3).To(broadcast);                  b.From(broadcast.Out(0)).Via(F4).To(Out1);                  b.From(broadcast.Out(1)).Via(F4).To(Out2);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_simple_merge_broadcast_with_implicits,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast = b.Add(new Broadcast<string>(2));                  var i1 = b.Add(In1);                  var i2 = b.Add(In2);                  var o1 = b.Add(Out1);                  var o2 = b.Add(Out2);                    b.From(i1).Via(F1).To(merge.In(0));                  b.From(merge.Out).Via(F2).To(broadcast.In);                  b.From(broadcast.Out(0)).Via(F3).To(o1);                  b.From(i2).Via(F4).To(merge.In(1));                  b.From(broadcast.Out(1)).Via(F5).To(o2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_simple_merge_broadcast_with_implicits,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast = b.Add(new Broadcast<string>(2));                  var i1 = b.Add(In1);                  var i2 = b.Add(In2);                  var o1 = b.Add(Out1);                  var o2 = b.Add(Out2);                    b.From(i1).Via(F1).To(merge.In(0));                  b.From(merge.Out).Via(F2).To(broadcast.In);                  b.From(broadcast.Out(0)).Via(F3).To(o1);                  b.From(i2).Via(F4).To(merge.In(1));                  b.From(broadcast.Out(1)).Via(F5).To(o2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_detect_cycle_in,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast1 = b.Add(new Broadcast<string>(2));                  var broadcast2 = b.Add(new Broadcast<string>(2));                  var feedbackLoopBffer = Flow.Create<string>().Buffer(10' OverflowStrategy.DropBuffer);                    b.From(In1).Via(F1).To(merge.In(0));                  b.From(merge).Via(F2).To(broadcast1);                  b.From(broadcast1.Out(0)).Via(F3).To(Out1);                  b.From(broadcast1.Out(1)).Via(feedbackLoopBffer).To(broadcast2);                  b.From(broadcast2.Out(0)).Via(F5).To(merge.In(1)); // cycle                  b.From(broadcast2.Out(1)).Via(F6).To(Out2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_detect_cycle_in,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast1 = b.Add(new Broadcast<string>(2));                  var broadcast2 = b.Add(new Broadcast<string>(2));                  var feedbackLoopBffer = Flow.Create<string>().Buffer(10' OverflowStrategy.DropBuffer);                    b.From(In1).Via(F1).To(merge.In(0));                  b.From(merge).Via(F2).To(broadcast1);                  b.From(broadcast1.Out(0)).Via(F3).To(Out1);                  b.From(broadcast1.Out(1)).Via(feedbackLoopBffer).To(broadcast2);                  b.From(broadcast2.Out(0)).Via(F5).To(merge.In(1)); // cycle                  b.From(broadcast2.Out(1)).Via(F6).To(Out2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_detect_cycle_in,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast1 = b.Add(new Broadcast<string>(2));                  var broadcast2 = b.Add(new Broadcast<string>(2));                  var feedbackLoopBffer = Flow.Create<string>().Buffer(10' OverflowStrategy.DropBuffer);                    b.From(In1).Via(F1).To(merge.In(0));                  b.From(merge).Via(F2).To(broadcast1);                  b.From(broadcast1.Out(0)).Via(F3).To(Out1);                  b.From(broadcast1.Out(1)).Via(feedbackLoopBffer).To(broadcast2);                  b.From(broadcast2.Out(0)).Via(F5).To(merge.In(1)); // cycle                  b.From(broadcast2.Out(1)).Via(F6).To(Out2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_detect_cycle_in,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast1 = b.Add(new Broadcast<string>(2));                  var broadcast2 = b.Add(new Broadcast<string>(2));                  var feedbackLoopBffer = Flow.Create<string>().Buffer(10' OverflowStrategy.DropBuffer);                    b.From(In1).Via(F1).To(merge.In(0));                  b.From(merge).Via(F2).To(broadcast1);                  b.From(broadcast1.Out(0)).Via(F3).To(Out1);                  b.From(broadcast1.Out(1)).Via(feedbackLoopBffer).To(broadcast2);                  b.From(broadcast2.Out(0)).Via(F5).To(merge.In(1)); // cycle                  b.From(broadcast2.Out(1)).Via(F6).To(Out2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_express_complex_topologies_in_a_readable_way,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast1 = b.Add(new Broadcast<string>(2));                  var broadcast2 = b.Add(new Broadcast<string>(2));                  var feedbackLoopBffer = Flow.Create<string>().Buffer(10' OverflowStrategy.DropBuffer);                  var i1 = b.Add(In1);                  var o1 = b.Add(Out1);                  var o2 = b.Add(Out2);                    b.From(i1).Via(F2).Via(merge).Via(F2).Via(broadcast1).Via(F3).To(o1);                  b.From(broadcast1).Via(feedbackLoopBffer).Via(broadcast2).Via(F5).To(merge);                  b.From(broadcast2).Via(F6).To(o2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_express_complex_topologies_in_a_readable_way,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast1 = b.Add(new Broadcast<string>(2));                  var broadcast2 = b.Add(new Broadcast<string>(2));                  var feedbackLoopBffer = Flow.Create<string>().Buffer(10' OverflowStrategy.DropBuffer);                  var i1 = b.Add(In1);                  var o1 = b.Add(Out1);                  var o2 = b.Add(Out2);                    b.From(i1).Via(F2).Via(merge).Via(F2).Via(broadcast1).Via(F3).To(o1);                  b.From(broadcast1).Via(feedbackLoopBffer).Via(broadcast2).Via(F5).To(merge);                  b.From(broadcast2).Via(F6).To(o2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_express_complex_topologies_in_a_readable_way,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast1 = b.Add(new Broadcast<string>(2));                  var broadcast2 = b.Add(new Broadcast<string>(2));                  var feedbackLoopBffer = Flow.Create<string>().Buffer(10' OverflowStrategy.DropBuffer);                  var i1 = b.Add(In1);                  var o1 = b.Add(Out1);                  var o2 = b.Add(Out2);                    b.From(i1).Via(F2).Via(merge).Via(F2).Via(broadcast1).Via(F3).To(o1);                  b.From(broadcast1).Via(feedbackLoopBffer).Via(broadcast2).Via(F5).To(merge);                  b.From(broadcast2).Via(F6).To(o2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_express_complex_topologies_in_a_readable_way,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast1 = b.Add(new Broadcast<string>(2));                  var broadcast2 = b.Add(new Broadcast<string>(2));                  var feedbackLoopBffer = Flow.Create<string>().Buffer(10' OverflowStrategy.DropBuffer);                  var i1 = b.Add(In1);                  var o1 = b.Add(Out1);                  var o2 = b.Add(Out2);                    b.From(i1).Via(F2).Via(merge).Via(F2).Via(broadcast1).Via(F3).To(o1);                  b.From(broadcast1).Via(feedbackLoopBffer).Via(broadcast2).Via(F5).To(merge);                  b.From(broadcast2).Via(F6).To(o2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_broadcast_merge,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast = b.Add(new Broadcast<string>(2));                    b.From(In1).Via(F1).Via(broadcast).Via(F2).Via(merge).Via(F3).To(Out1);                  b.From(broadcast).Via(F4).To(merge);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_broadcast_merge,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast = b.Add(new Broadcast<string>(2));                    b.From(In1).Via(F1).Via(broadcast).Via(F2).Via(merge).Via(F3).To(Out1);                  b.From(broadcast).Via(F4).To(merge);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_wikipedia_Topological_sorting,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var b3 = b.Add(new Broadcast<string>(2));                  var b7 = b.Add(new Broadcast<string>(2));                  var b11 = b.Add(new Broadcast<string>(3));                  var m8 = b.Add(new Merge<string>(2));                  var m9 = b.Add(new Merge<string>(2));                  var m10 = b.Add(new Merge<string>(2));                  var m11 = b.Add(new Merge<string>(2));                  var in3 = Source.From(new[] { "b" });                  var in5 = Source.From(new[] { "b" });                  var in7 = Source.From(new[] { "a" });                  var out2 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out9 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out10 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  Func<string' Flow<string' string' NotUsed>> f =                      s => Flow.Create<string>().Transform(Op<string' string>).Named(s);                    b.From(in7).Via(f("a")).Via(b7).Via(f("b")).Via(m11).Via(f("c")).Via(b11).Via(f("d")).To(out2);                  b.From(b11).Via(f("e")).Via(m9).Via(f("f")).To(out9);                  b.From(b7).Via(f("g")).Via(m8).Via(f("h")).To(m9);                  b.From(b11).Via(f("i")).Via(m10).Via(f("j")).To(out10);                  b.From(in5).Via(f("k")).To(m11);                  b.From(in3).Via(f("a")).Via(b3).Via(f("m")).To(m8);                  b.From(b3).Via(f("n")).To(m10);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_wikipedia_Topological_sorting,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var b3 = b.Add(new Broadcast<string>(2));                  var b7 = b.Add(new Broadcast<string>(2));                  var b11 = b.Add(new Broadcast<string>(3));                  var m8 = b.Add(new Merge<string>(2));                  var m9 = b.Add(new Merge<string>(2));                  var m10 = b.Add(new Merge<string>(2));                  var m11 = b.Add(new Merge<string>(2));                  var in3 = Source.From(new[] { "b" });                  var in5 = Source.From(new[] { "b" });                  var in7 = Source.From(new[] { "a" });                  var out2 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out9 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out10 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  Func<string' Flow<string' string' NotUsed>> f =                      s => Flow.Create<string>().Transform(Op<string' string>).Named(s);                    b.From(in7).Via(f("a")).Via(b7).Via(f("b")).Via(m11).Via(f("c")).Via(b11).Via(f("d")).To(out2);                  b.From(b11).Via(f("e")).Via(m9).Via(f("f")).To(out9);                  b.From(b7).Via(f("g")).Via(m8).Via(f("h")).To(m9);                  b.From(b11).Via(f("i")).Via(m10).Via(f("j")).To(out10);                  b.From(in5).Via(f("k")).To(m11);                  b.From(in3).Via(f("a")).Via(b3).Via(f("m")).To(m8);                  b.From(b3).Via(f("n")).To(m10);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_wikipedia_Topological_sorting,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var b3 = b.Add(new Broadcast<string>(2));                  var b7 = b.Add(new Broadcast<string>(2));                  var b11 = b.Add(new Broadcast<string>(3));                  var m8 = b.Add(new Merge<string>(2));                  var m9 = b.Add(new Merge<string>(2));                  var m10 = b.Add(new Merge<string>(2));                  var m11 = b.Add(new Merge<string>(2));                  var in3 = Source.From(new[] { "b" });                  var in5 = Source.From(new[] { "b" });                  var in7 = Source.From(new[] { "a" });                  var out2 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out9 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out10 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  Func<string' Flow<string' string' NotUsed>> f =                      s => Flow.Create<string>().Transform(Op<string' string>).Named(s);                    b.From(in7).Via(f("a")).Via(b7).Via(f("b")).Via(m11).Via(f("c")).Via(b11).Via(f("d")).To(out2);                  b.From(b11).Via(f("e")).Via(m9).Via(f("f")).To(out9);                  b.From(b7).Via(f("g")).Via(m8).Via(f("h")).To(m9);                  b.From(b11).Via(f("i")).Via(m10).Via(f("j")).To(out10);                  b.From(in5).Via(f("k")).To(m11);                  b.From(in3).Via(f("a")).Via(b3).Via(f("m")).To(m8);                  b.From(b3).Via(f("n")).To(m10);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_wikipedia_Topological_sorting,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var b3 = b.Add(new Broadcast<string>(2));                  var b7 = b.Add(new Broadcast<string>(2));                  var b11 = b.Add(new Broadcast<string>(3));                  var m8 = b.Add(new Merge<string>(2));                  var m9 = b.Add(new Merge<string>(2));                  var m10 = b.Add(new Merge<string>(2));                  var m11 = b.Add(new Merge<string>(2));                  var in3 = Source.From(new[] { "b" });                  var in5 = Source.From(new[] { "b" });                  var in7 = Source.From(new[] { "a" });                  var out2 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out9 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out10 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  Func<string' Flow<string' string' NotUsed>> f =                      s => Flow.Create<string>().Transform(Op<string' string>).Named(s);                    b.From(in7).Via(f("a")).Via(b7).Via(f("b")).Via(m11).Via(f("c")).Via(b11).Via(f("d")).To(out2);                  b.From(b11).Via(f("e")).Via(m9).Via(f("f")).To(out9);                  b.From(b7).Via(f("g")).Via(m8).Via(f("h")).To(m9);                  b.From(b11).Via(f("i")).Via(m10).Via(f("j")).To(out10);                  b.From(in5).Via(f("k")).To(m11);                  b.From(in3).Via(f("a")).Via(b3).Via(f("m")).To(m8);                  b.From(b3).Via(f("n")).To(m10);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_wikipedia_Topological_sorting,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var b3 = b.Add(new Broadcast<string>(2));                  var b7 = b.Add(new Broadcast<string>(2));                  var b11 = b.Add(new Broadcast<string>(3));                  var m8 = b.Add(new Merge<string>(2));                  var m9 = b.Add(new Merge<string>(2));                  var m10 = b.Add(new Merge<string>(2));                  var m11 = b.Add(new Merge<string>(2));                  var in3 = Source.From(new[] { "b" });                  var in5 = Source.From(new[] { "b" });                  var in7 = Source.From(new[] { "a" });                  var out2 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out9 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out10 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  Func<string' Flow<string' string' NotUsed>> f =                      s => Flow.Create<string>().Transform(Op<string' string>).Named(s);                    b.From(in7).Via(f("a")).Via(b7).Via(f("b")).Via(m11).Via(f("c")).Via(b11).Via(f("d")).To(out2);                  b.From(b11).Via(f("e")).Via(m9).Via(f("f")).To(out9);                  b.From(b7).Via(f("g")).Via(m8).Via(f("h")).To(m9);                  b.From(b11).Via(f("i")).Via(m10).Via(f("j")).To(out10);                  b.From(in5).Via(f("k")).To(m11);                  b.From(in3).Via(f("a")).Via(b3).Via(f("m")).To(m8);                  b.From(b3).Via(f("n")).To(m10);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_wikipedia_Topological_sorting,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var b3 = b.Add(new Broadcast<string>(2));                  var b7 = b.Add(new Broadcast<string>(2));                  var b11 = b.Add(new Broadcast<string>(3));                  var m8 = b.Add(new Merge<string>(2));                  var m9 = b.Add(new Merge<string>(2));                  var m10 = b.Add(new Merge<string>(2));                  var m11 = b.Add(new Merge<string>(2));                  var in3 = Source.From(new[] { "b" });                  var in5 = Source.From(new[] { "b" });                  var in7 = Source.From(new[] { "a" });                  var out2 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out9 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out10 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  Func<string' Flow<string' string' NotUsed>> f =                      s => Flow.Create<string>().Transform(Op<string' string>).Named(s);                    b.From(in7).Via(f("a")).Via(b7).Via(f("b")).Via(m11).Via(f("c")).Via(b11).Via(f("d")).To(out2);                  b.From(b11).Via(f("e")).Via(m9).Via(f("f")).To(out9);                  b.From(b7).Via(f("g")).Via(m8).Via(f("h")).To(m9);                  b.From(b11).Via(f("i")).Via(m10).Via(f("j")).To(out10);                  b.From(in5).Via(f("k")).To(m11);                  b.From(in3).Via(f("a")).Via(b3).Via(f("m")).To(m8);                  b.From(b3).Via(f("n")).To(m10);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_wikipedia_Topological_sorting,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var b3 = b.Add(new Broadcast<string>(2));                  var b7 = b.Add(new Broadcast<string>(2));                  var b11 = b.Add(new Broadcast<string>(3));                  var m8 = b.Add(new Merge<string>(2));                  var m9 = b.Add(new Merge<string>(2));                  var m10 = b.Add(new Merge<string>(2));                  var m11 = b.Add(new Merge<string>(2));                  var in3 = Source.From(new[] { "b" });                  var in5 = Source.From(new[] { "b" });                  var in7 = Source.From(new[] { "a" });                  var out2 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out9 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var out10 = Sink.AsPublisher<string>(false).MapMaterializedValue(_ => NotUsed.Instance);                  Func<string' Flow<string' string' NotUsed>> f =                      s => Flow.Create<string>().Transform(Op<string' string>).Named(s);                    b.From(in7).Via(f("a")).Via(b7).Via(f("b")).Via(m11).Via(f("c")).Via(b11).Via(f("d")).To(out2);                  b.From(b11).Via(f("e")).Via(m9).Via(f("f")).To(out9);                  b.From(b7).Via(f("g")).Via(m8).Via(f("h")).To(m9);                  b.From(b11).Via(f("i")).Via(m10).Via(f("j")).To(out10);                  b.From(in5).Via(f("k")).To(m11);                  b.From(in3).Via(f("a")).Via(b3).Via(f("m")).To(m8);                  b.From(b3).Via(f("n")).To(m10);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_make_it_optional_to_specify_flows,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast = b.Add(new Broadcast<string>(2));                    b.From(In1).Via(merge).Via(broadcast).To(Out1);                  b.From(In2).To(merge);                  b.From(broadcast).To(Out2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_make_it_optional_to_specify_flows,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<string>(2));                  var broadcast = b.Add(new Broadcast<string>(2));                    b.From(In1).Via(merge).Via(broadcast).To(Out1);                  b.From(In2).To(merge);                  b.From(broadcast).To(Out2);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_unzip_zip,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var zip = b.Add(new Zip<int' string>());                  var unzip = b.Add(new UnZip<int' string>());                  var sink = Sink.AsPublisher<Tuple<int' string>>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var source =                      Source.From(new[]                      {                          new KeyValuePair<int' string>(1' "a")' new KeyValuePair<int' string>(2' "b")'                          new KeyValuePair<int' string>(3' "c")                      });                      b.From(source).To(unzip.In);                  b.From(unzip.Out0).Via(Flow.Create<int>().Select(x => x * 2)).To(zip.In0);                  b.From(unzip.Out1).To(zip.In1);                  b.From(zip.Out).To(sink);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_unzip_zip,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var zip = b.Add(new Zip<int' string>());                  var unzip = b.Add(new UnZip<int' string>());                  var sink = Sink.AsPublisher<Tuple<int' string>>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var source =                      Source.From(new[]                      {                          new KeyValuePair<int' string>(1' "a")' new KeyValuePair<int' string>(2' "b")'                          new KeyValuePair<int' string>(3' "c")                      });                      b.From(source).To(unzip.In);                  b.From(unzip.Out0).Via(Flow.Create<int>().Select(x => x * 2)).To(zip.In0);                  b.From(unzip.Out1).To(zip.In1);                  b.From(zip.Out).To(sink);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_unzip_zip,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var zip = b.Add(new Zip<int' string>());                  var unzip = b.Add(new UnZip<int' string>());                  var sink = Sink.AsPublisher<Tuple<int' string>>(false).MapMaterializedValue(_ => NotUsed.Instance);                  var source =                      Source.From(new[]                      {                          new KeyValuePair<int' string>(1' "a")' new KeyValuePair<int' string>(2' "b")'                          new KeyValuePair<int' string>(3' "c")                      });                      b.From(source).To(unzip.In);                  b.From(unzip.Out0).Via(Flow.Create<int>().Select(x => x * 2)).To(zip.In0);                  b.From(unzip.Out1).To(zip.In1);                  b.From(zip.Out).To(sink);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_distinguish_between_input_and_output_ports,The following statement contains a magic number: Action action = () =>              {                  RunnableGraph.FromGraph(GraphDsl.Create(builder =>                  {                      var zip = builder.Add(new Zip<int' string>());                      var unzip = builder.Add(new UnZip<int' string>());                      var wrongOut = Sink.AsPublisher<Tuple<int' int>>(false).MapMaterializedValue(_ => NotUsed.Instance);                      var whatever = Sink.AsPublisher<object>(false).MapMaterializedValue(_ => NotUsed.Instance);                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { 1' 2' 3 })).Via(((dynamic)zip).Left).To(wrongOut))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { "a"' "b"' "c" })).To(((dynamic)zip).Left))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { "a"' "b"' "c" })).To(zip.Out))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(((dynamic)zip).Left).To(((dynamic)zip).Right))                          .ShouldThrow<RuntimeBinderException>();                        var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")' new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                      builder.Invoking(                          b => ((dynamic)b).From(source).Via(unzip.In).To(whatever))                          .ShouldThrow<RuntimeBinderException>();                        return ClosedShape.Instance;                  }));              };
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_distinguish_between_input_and_output_ports,The following statement contains a magic number: Action action = () =>              {                  RunnableGraph.FromGraph(GraphDsl.Create(builder =>                  {                      var zip = builder.Add(new Zip<int' string>());                      var unzip = builder.Add(new UnZip<int' string>());                      var wrongOut = Sink.AsPublisher<Tuple<int' int>>(false).MapMaterializedValue(_ => NotUsed.Instance);                      var whatever = Sink.AsPublisher<object>(false).MapMaterializedValue(_ => NotUsed.Instance);                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { 1' 2' 3 })).Via(((dynamic)zip).Left).To(wrongOut))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { "a"' "b"' "c" })).To(((dynamic)zip).Left))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { "a"' "b"' "c" })).To(zip.Out))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(((dynamic)zip).Left).To(((dynamic)zip).Right))                          .ShouldThrow<RuntimeBinderException>();                        var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")' new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                      builder.Invoking(                          b => ((dynamic)b).From(source).Via(unzip.In).To(whatever))                          .ShouldThrow<RuntimeBinderException>();                        return ClosedShape.Instance;                  }));              };
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_distinguish_between_input_and_output_ports,The following statement contains a magic number: Action action = () =>              {                  RunnableGraph.FromGraph(GraphDsl.Create(builder =>                  {                      var zip = builder.Add(new Zip<int' string>());                      var unzip = builder.Add(new UnZip<int' string>());                      var wrongOut = Sink.AsPublisher<Tuple<int' int>>(false).MapMaterializedValue(_ => NotUsed.Instance);                      var whatever = Sink.AsPublisher<object>(false).MapMaterializedValue(_ => NotUsed.Instance);                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { 1' 2' 3 })).Via(((dynamic)zip).Left).To(wrongOut))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { "a"' "b"' "c" })).To(((dynamic)zip).Left))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { "a"' "b"' "c" })).To(zip.Out))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(((dynamic)zip).Left).To(((dynamic)zip).Right))                          .ShouldThrow<RuntimeBinderException>();                        var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")' new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                      builder.Invoking(                          b => ((dynamic)b).From(source).Via(unzip.In).To(whatever))                          .ShouldThrow<RuntimeBinderException>();                        return ClosedShape.Instance;                  }));              };
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_distinguish_between_input_and_output_ports,The following statement contains a magic number: Action action = () =>              {                  RunnableGraph.FromGraph(GraphDsl.Create(builder =>                  {                      var zip = builder.Add(new Zip<int' string>());                      var unzip = builder.Add(new UnZip<int' string>());                      var wrongOut = Sink.AsPublisher<Tuple<int' int>>(false).MapMaterializedValue(_ => NotUsed.Instance);                      var whatever = Sink.AsPublisher<object>(false).MapMaterializedValue(_ => NotUsed.Instance);                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { 1' 2' 3 })).Via(((dynamic)zip).Left).To(wrongOut))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { "a"' "b"' "c" })).To(((dynamic)zip).Left))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(Source.From(new[] { "a"' "b"' "c" })).To(zip.Out))                          .ShouldThrow<RuntimeBinderException>();                        builder.Invoking(                          b => ((dynamic)b).From(((dynamic)zip).Left).To(((dynamic)zip).Right))                          .ShouldThrow<RuntimeBinderException>();                        var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")' new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                      builder.Invoking(                          b => ((dynamic)b).From(source).Via(unzip.In).To(whatever))                          .ShouldThrow<RuntimeBinderException>();                        return ClosedShape.Instance;                  }));              };
Magic Number,Akka.Streams.Tests.Dsl,FlowGraphCompileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGraphCompileSpec.cs,A_Graph_should_build_with_variance,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<IFruit>(2));                  var s1 = Source.FromEnumerator<IFruit>(Apples);                  var s2 = Source.FromEnumerator<Apple>(Apples);                    b.From(s1).Via(Flow.Create<IFruit>()).To(merge.In(0));                  //b.From(s2).Via(Flow.Create<Apple>()).To(merge.In(1));                    b.From(merge.Out)                      .Via(Flow.Create<IFruit>().Select(x => x))                      .To(Sink.FromSubscriber(TestSubscriber.CreateManualProbe<IFruit>(this)));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,FlowGroupBySpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,FlowGroupBySpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s1.Request(1);                      s1.ExpectNext(1);                      s1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        var s2 = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                      s2.Request(2);                      s2.ExpectNext(2);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(4);                        s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.ExpectNext(3);                        s2.Request(1);                      // Important to request here on the OTHER stream because the buffer space is exactly one without the fanout box                      s1.Request(1);                      s2.ExpectNext(6);                      s2.ExpectComplete();                        s1.ExpectNext(5);                      s1.ExpectComplete();                      masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_normal_user_scenario,The following statement contains a magic number: var source = Source.From(new[] {"Aaa"' "Abb"' "Bcc"' "Cdd"' "Cee"})                  .GroupBy(3' s => s.Substring(0' 1))                  .Grouped(10)                  .MergeSubstreams()                  .Grouped(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_normal_user_scenario,The following statement contains a magic number: var source = Source.From(new[] {"Aaa"' "Abb"' "Bcc"' "Cdd"' "Cee"})                  .GroupBy(3' s => s.Substring(0' 1))                  .Grouped(10)                  .MergeSubstreams()                  .Grouped(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_normal_user_scenario,The following statement contains a magic number: var source = Source.From(new[] {"Aaa"' "Abb"' "Bcc"' "Cdd"' "Cee"})                  .GroupBy(3' s => s.Substring(0' 1))                  .Grouped(10)                  .MergeSubstreams()                  .Grouped(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_in_normal_user_scenario,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this).Cancel();                      var substream = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                            substream.Request(2);                      substream.ExpectNext(2);                      substream.ExpectNext(4);                      substream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        substream.Request(2);                      substream.ExpectNext(6);                      substream.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this).Cancel();                      var substream = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                            substream.Request(2);                      substream.ExpectNext(2);                      substream.ExpectNext(4);                      substream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        substream.Request(2);                      substream.ExpectNext(6);                      substream.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this).Cancel();                      var substream = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                            substream.Request(2);                      substream.ExpectNext(2);                      substream.ExpectNext(4);                      substream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        substream.Request(2);                      substream.ExpectNext(6);                      substream.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this).Cancel();                      var substream = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                            substream.Request(2);                      substream.ExpectNext(2);                      substream.ExpectNext(4);                      substream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        substream.Request(2);                      substream.ExpectNext(6);                      substream.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this).Cancel();                      var substream = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                            substream.Request(2);                      substream.ExpectNext(2);                      substream.ExpectNext(4);                      substream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        substream.Request(2);                      substream.ExpectNext(6);                      substream.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this).Cancel();                      var substream = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                            substream.Request(2);                      substream.ExpectNext(2);                      substream.ExpectNext(4);                      substream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        substream.Request(2);                      substream.ExpectNext(6);                      substream.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(2' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      new StreamPuppet(getSubFlow(1).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this).Cancel();                      var substream = new StreamPuppet(getSubFlow(0).RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                            substream.Request(2);                      substream.ExpectNext(2);                      substream.ExpectNext(4);                      substream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        substream.Request(2);                      substream.ExpectNext(6);                      substream.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_accept_cancellation_of_master_stream_when_not_consume_anything,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x%2)                          .Lift(x => x%2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Cancel();                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_accept_cancellation_of_master_stream_when_not_consume_anything,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x%2)                          .Lift(x => x%2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Cancel();                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_accept_cancellation_of_master_stream_when_not_consume_anything,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x%2)                          .Lift(x => x%2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Cancel();                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_with_empty_input_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher =                      Source.From(new List<int>())                          .GroupBy(2' x => x%2)                          .Lift(x => x%2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    subscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_with_empty_input_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher =                      Source.From(new List<int>())                          .GroupBy(2' x => x%2)                          .Lift(x => x%2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    subscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_work_with_empty_input_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher =                      Source.From(new List<int>())                          .GroupBy(2' x => x%2)                          .Lift(x => x%2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    subscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_abort_onError_from_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    var ex = new TestException("test");                  upstreamSubscription.SendError(ex);                  subscriber.ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_abort_onError_from_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    var ex = new TestException("test");                  upstreamSubscription.SendError(ex);                  subscriber.ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_abort_onError_from_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    var ex = new TestException("test");                  upstreamSubscription.SendError(ex);                  subscriber.ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_abort_onError_from_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    var ex = new TestException("test");                  upstreamSubscription.SendError(ex);                  subscriber.ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_abort_onError_from_upstream_when_substreams_are_running,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                  var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(1);                  substreamPuppet.ExpectNext(1);                    var ex = new TestException("test");                  upstreamSubscription.SendError(ex);                    substreamPuppet.ExpectError(ex);                  subscriber.ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_abort_onError_from_upstream_when_substreams_are_running,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                  var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(1);                  substreamPuppet.ExpectNext(1);                    var ex = new TestException("test");                  upstreamSubscription.SendError(ex);                    substreamPuppet.ExpectError(ex);                  subscriber.ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_abort_onError_from_upstream_when_substreams_are_running,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                  var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(1);                  substreamPuppet.ExpectNext(1);                    var ex = new TestException("test");                  upstreamSubscription.SendError(ex);                    substreamPuppet.ExpectError(ex);                  subscriber.ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_abort_onError_from_upstream_when_substreams_are_running,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2)                          .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                  var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(1);                  substreamPuppet.ExpectNext(1);                    var ex = new TestException("test");                  upstreamSubscription.SendError(ex);                    substreamPuppet.ExpectError(ex);                  subscriber.ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_fail_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                      var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(1);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_fail_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                      var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(1);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_fail_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                      var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(1);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_fail_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                      var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(1);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_fail_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                      var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(1);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_fail_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                      var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(1);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_resume_stream_when_GroupBy_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).GroupBy(2' i =>                  {                      if (i == 2)                          throw ex;                      return i%2;                  })                      .Lift(x => x%2)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.AsPublisher<Tuple<int' Source<int' NotUsed>>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext().Item2;                  var substreamPuppet1 = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet1.Request(10);                  substreamPuppet1.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  upstreamSubscription.SendNext(4);                    var substream2 = subscriber.ExpectNext().Item2;                  var substreamPuppet2 = new StreamPuppet(substream2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                  substreamPuppet2.Request(10);                  substreamPuppet2.ExpectNext(4);                    upstreamSubscription.SendNext(3);                  substreamPuppet1.ExpectNext(3);                    upstreamSubscription.SendNext(6);                  substreamPuppet2.ExpectNext(6);                    upstreamSubscription.SendComplete();                  subscriber.ExpectComplete();                  substreamPuppet1.ExpectComplete();                  substreamPuppet2.ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_pass_along_early_cancellation,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var up = TestPublisher.CreateManualProbe<int>(this);                  var down = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                    var flowSubscriber =                      Source.AsSubscriber<int>()                          .GroupBy(2' x => x%2)                          .Lift(x => x%2)                          .To(Sink.FromSubscriber(down)).Run(Materializer);                                    var downstream = down.ExpectSubscription();                  downstream.Cancel();                  up.Subscribe(flowSubscriber);                  var upSub = up.ExpectSubscription();                  upSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_pass_along_early_cancellation,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var up = TestPublisher.CreateManualProbe<int>(this);                  var down = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                    var flowSubscriber =                      Source.AsSubscriber<int>()                          .GroupBy(2' x => x%2)                          .Lift(x => x%2)                          .To(Sink.FromSubscriber(down)).Run(Materializer);                                    var downstream = down.ExpectSubscription();                  downstream.Cancel();                  up.Subscribe(flowSubscriber);                  var upSub = up.ExpectSubscription();                  upSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_pass_along_early_cancellation,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var up = TestPublisher.CreateManualProbe<int>(this);                  var down = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                    var flowSubscriber =                      Source.AsSubscriber<int>()                          .GroupBy(2' x => x%2)                          .Lift(x => x%2)                          .To(Sink.FromSubscriber(down)).Run(Materializer);                                    var downstream = down.ExpectSubscription();                  downstream.Cancel();                  up.Subscribe(flowSubscriber);                  var upSub = up.ExpectSubscription();                  upSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_fail_when_exceeding_maxSubstreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var f = Flow.Create<int>().GroupBy(1' x => x%2).PrefixAndTail(0).MergeSubstreams();                  var t = ((Flow<int' Tuple<IImmutableList<int>' Source<int' NotUsed>>' NotUsed>) f)                      .RunWith(TestSource.SourceProbe<int>(this)' TestSink.SinkProbe<Tuple<IImmutableList<int>' Source<int' NotUsed>>>(this)' Materializer);                  var up = t.Item1;                  var down = t.Item2;                    down.Request(2);                    up.SendNext(1);                  var first = down.ExpectNext();                  var s1 = new StreamPuppet(first.Item2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    s1.Request(1);                  s1.ExpectNext(1);                    up.SendNext(2);                  var ex = down.ExpectError();                  ex.Message.Should().Contain("too many substreams");                  s1.ExpectError(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_fail_when_exceeding_maxSubstreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var f = Flow.Create<int>().GroupBy(1' x => x%2).PrefixAndTail(0).MergeSubstreams();                  var t = ((Flow<int' Tuple<IImmutableList<int>' Source<int' NotUsed>>' NotUsed>) f)                      .RunWith(TestSource.SourceProbe<int>(this)' TestSink.SinkProbe<Tuple<IImmutableList<int>' Source<int' NotUsed>>>(this)' Materializer);                  var up = t.Item1;                  var down = t.Item2;                    down.Request(2);                    up.SendNext(1);                  var first = down.ExpectNext();                  var s1 = new StreamPuppet(first.Item2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    s1.Request(1);                  s1.ExpectNext(1);                    up.SendNext(2);                  var ex = down.ExpectError();                  ex.Message.Should().Contain("too many substreams");                  s1.ExpectError(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupBySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupBySpec.cs,GroupBy_must_fail_when_exceeding_maxSubstreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var f = Flow.Create<int>().GroupBy(1' x => x%2).PrefixAndTail(0).MergeSubstreams();                  var t = ((Flow<int' Tuple<IImmutableList<int>' Source<int' NotUsed>>' NotUsed>) f)                      .RunWith(TestSource.SourceProbe<int>(this)' TestSink.SinkProbe<Tuple<IImmutableList<int>' Source<int' NotUsed>>>(this)' Materializer);                  var up = t.Item1;                  var down = t.Item2;                    down.Request(2);                    up.SendNext(1);                  var first = down.ExpectNext();                  var s1 = new StreamPuppet(first.Item2.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    s1.Request(1);                  s1.ExpectNext(1);                    up.SendNext(2);                  var ex = down.ExpectError();                  ex.Message.Should().Contain("too many substreams");                  s1.ExpectError(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedSpec.cs,FlowGroupedSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedSpec.cs,FlowGroupedSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedSpec.cs,A_Grouped_must_group_evenly,The following statement contains a magic number: var testLength = Random.Next(1' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedSpec.cs,A_Grouped_must_group_with_rest,The following statement contains a magic number: var testLength = Random.Next(1' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_group_elements_within_the_duration,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var input = new Iterator<int>(Enumerable.Range(1' 10000));                  var p = TestPublisher.CreateManualProbe<int>(this);                  var c = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    Source.FromPublisher(p)                      .GroupedWithin(1000' TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                    var pSub = p.ExpectSubscription();                  var cSub = c.ExpectSubscription();                    cSub.Request(100);                    var demand1 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand1; i++)                      pSub.SendNext(input.Next());                    var demand2 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand2; i++)                      pSub.SendNext(input.Next());                    var demand3 = (int)pSub.ExpectRequest();                  c.ExpectNext().ShouldAllBeEquivalentTo(Enumerable.Range(1' demand1 + demand2));                  for (var i = 1; i <= demand3; i++)                      pSub.SendNext(input.Next());                    c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  c.ExpectNext()                      .ShouldAllBeEquivalentTo(Enumerable.Range(demand1 + demand2 + 1' demand3));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.ExpectRequest();                    var last = input.Next();                  pSub.SendNext(last);                  pSub.SendComplete();                    c.ExpectNext().Should().HaveCount(1).And.HaveElementAt(0' last);                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_group_elements_within_the_duration,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var input = new Iterator<int>(Enumerable.Range(1' 10000));                  var p = TestPublisher.CreateManualProbe<int>(this);                  var c = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    Source.FromPublisher(p)                      .GroupedWithin(1000' TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                    var pSub = p.ExpectSubscription();                  var cSub = c.ExpectSubscription();                    cSub.Request(100);                    var demand1 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand1; i++)                      pSub.SendNext(input.Next());                    var demand2 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand2; i++)                      pSub.SendNext(input.Next());                    var demand3 = (int)pSub.ExpectRequest();                  c.ExpectNext().ShouldAllBeEquivalentTo(Enumerable.Range(1' demand1 + demand2));                  for (var i = 1; i <= demand3; i++)                      pSub.SendNext(input.Next());                    c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  c.ExpectNext()                      .ShouldAllBeEquivalentTo(Enumerable.Range(demand1 + demand2 + 1' demand3));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.ExpectRequest();                    var last = input.Next();                  pSub.SendNext(last);                  pSub.SendComplete();                    c.ExpectNext().Should().HaveCount(1).And.HaveElementAt(0' last);                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_group_elements_within_the_duration,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var input = new Iterator<int>(Enumerable.Range(1' 10000));                  var p = TestPublisher.CreateManualProbe<int>(this);                  var c = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    Source.FromPublisher(p)                      .GroupedWithin(1000' TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                    var pSub = p.ExpectSubscription();                  var cSub = c.ExpectSubscription();                    cSub.Request(100);                    var demand1 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand1; i++)                      pSub.SendNext(input.Next());                    var demand2 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand2; i++)                      pSub.SendNext(input.Next());                    var demand3 = (int)pSub.ExpectRequest();                  c.ExpectNext().ShouldAllBeEquivalentTo(Enumerable.Range(1' demand1 + demand2));                  for (var i = 1; i <= demand3; i++)                      pSub.SendNext(input.Next());                    c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  c.ExpectNext()                      .ShouldAllBeEquivalentTo(Enumerable.Range(demand1 + demand2 + 1' demand3));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.ExpectRequest();                    var last = input.Next();                  pSub.SendNext(last);                  pSub.SendComplete();                    c.ExpectNext().Should().HaveCount(1).And.HaveElementAt(0' last);                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_group_elements_within_the_duration,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var input = new Iterator<int>(Enumerable.Range(1' 10000));                  var p = TestPublisher.CreateManualProbe<int>(this);                  var c = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    Source.FromPublisher(p)                      .GroupedWithin(1000' TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                    var pSub = p.ExpectSubscription();                  var cSub = c.ExpectSubscription();                    cSub.Request(100);                    var demand1 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand1; i++)                      pSub.SendNext(input.Next());                    var demand2 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand2; i++)                      pSub.SendNext(input.Next());                    var demand3 = (int)pSub.ExpectRequest();                  c.ExpectNext().ShouldAllBeEquivalentTo(Enumerable.Range(1' demand1 + demand2));                  for (var i = 1; i <= demand3; i++)                      pSub.SendNext(input.Next());                    c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  c.ExpectNext()                      .ShouldAllBeEquivalentTo(Enumerable.Range(demand1 + demand2 + 1' demand3));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.ExpectRequest();                    var last = input.Next();                  pSub.SendNext(last);                  pSub.SendComplete();                    c.ExpectNext().Should().HaveCount(1).And.HaveElementAt(0' last);                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_group_elements_within_the_duration,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var input = new Iterator<int>(Enumerable.Range(1' 10000));                  var p = TestPublisher.CreateManualProbe<int>(this);                  var c = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    Source.FromPublisher(p)                      .GroupedWithin(1000' TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                    var pSub = p.ExpectSubscription();                  var cSub = c.ExpectSubscription();                    cSub.Request(100);                    var demand1 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand1; i++)                      pSub.SendNext(input.Next());                    var demand2 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand2; i++)                      pSub.SendNext(input.Next());                    var demand3 = (int)pSub.ExpectRequest();                  c.ExpectNext().ShouldAllBeEquivalentTo(Enumerable.Range(1' demand1 + demand2));                  for (var i = 1; i <= demand3; i++)                      pSub.SendNext(input.Next());                    c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  c.ExpectNext()                      .ShouldAllBeEquivalentTo(Enumerable.Range(demand1 + demand2 + 1' demand3));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.ExpectRequest();                    var last = input.Next();                  pSub.SendNext(last);                  pSub.SendComplete();                    c.ExpectNext().Should().HaveCount(1).And.HaveElementAt(0' last);                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_group_elements_within_the_duration,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var input = new Iterator<int>(Enumerable.Range(1' 10000));                  var p = TestPublisher.CreateManualProbe<int>(this);                  var c = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    Source.FromPublisher(p)                      .GroupedWithin(1000' TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                    var pSub = p.ExpectSubscription();                  var cSub = c.ExpectSubscription();                    cSub.Request(100);                    var demand1 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand1; i++)                      pSub.SendNext(input.Next());                    var demand2 = (int)pSub.ExpectRequest();                  for (var i = 1; i <= demand2; i++)                      pSub.SendNext(input.Next());                    var demand3 = (int)pSub.ExpectRequest();                  c.ExpectNext().ShouldAllBeEquivalentTo(Enumerable.Range(1' demand1 + demand2));                  for (var i = 1; i <= demand3; i++)                      pSub.SendNext(input.Next());                    c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  c.ExpectNext()                      .ShouldAllBeEquivalentTo(Enumerable.Range(demand1 + demand2 + 1' demand3));                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  pSub.ExpectRequest();                    var last = input.Next();                  pSub.SendNext(last);                  pSub.SendComplete();                    c.ExpectNext().Should().HaveCount(1).And.HaveElementAt(0' last);                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: Source.From(Enumerable.Range(1' 3))                  .GroupedWithin(1000' TimeSpan.FromSeconds(10))                  .To(Sink.FromSubscriber(c))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: Source.From(Enumerable.Range(1' 3))                  .GroupedWithin(1000' TimeSpan.FromSeconds(10))                  .To(Sink.FromSubscriber(c))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: Source.From(Enumerable.Range(1' 3))                  .GroupedWithin(1000' TimeSpan.FromSeconds(10))                  .To(Sink.FromSubscriber(c))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: cSub.Request(100);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: c.ExpectNext().ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: c.ExpectNext().ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_buffer_groups_until_requested_from_downstream,The following statement contains a magic number: var input = new Iterator<int>(Enumerable.Range(1' 10000));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_buffer_groups_until_requested_from_downstream,The following statement contains a magic number: Source.FromPublisher(p)                  .GroupedWithin(1000' TimeSpan.FromSeconds(1))                  .To(Sink.FromSubscriber(c))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_buffer_groups_until_requested_from_downstream,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_buffer_groups_until_requested_from_downstream,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_drop_empty_groups,The following statement contains a magic number: Source.FromPublisher(p)                  .GroupedWithin(1000' TimeSpan.FromMilliseconds(500))                  .To(Sink.FromSubscriber(c))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_drop_empty_groups,The following statement contains a magic number: Source.FromPublisher(p)                  .GroupedWithin(1000' TimeSpan.FromMilliseconds(500))                  .To(Sink.FromSubscriber(c))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_drop_empty_groups,The following statement contains a magic number: cSub.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_drop_empty_groups,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_drop_empty_groups,The following statement contains a magic number: pSub.SendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_drop_empty_groups,The following statement contains a magic number: c.ExpectNext().ShouldAllBeEquivalentTo(new [] {1'2});
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_drop_empty_groups,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(1100));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_drop_empty_groups,The following statement contains a magic number: cSub.Request(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_drop_empty_groups,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_drop_empty_groups,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: var input = new Iterator<int>(Enumerable.Range(1' 10000));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: Source.FromPublisher(upstream)                  .GroupedWithin(3' TimeSpan.FromSeconds(2))                  .To(Sink.FromSubscriber(downstream))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: Source.FromPublisher(upstream)                  .GroupedWithin(3' TimeSpan.FromSeconds(2))                  .To(Sink.FromSubscriber(downstream))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: downstream.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1000));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: Enumerable.Range(1'4).ForEach(_=>upstream.SendNext(input.Next()));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: downstream.Within(TimeSpan.FromMilliseconds(1000)' () =>              {                  downstream.ExpectNext().ShouldAllBeEquivalentTo(new[] {1' 2' 3});                  return NotUsed.Instance;              });
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: downstream.Within(TimeSpan.FromMilliseconds(1000)' () =>              {                  downstream.ExpectNext().ShouldAllBeEquivalentTo(new[] {1' 2' 3});                  return NotUsed.Instance;              });
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: downstream.Within(TimeSpan.FromMilliseconds(1000)' () =>              {                  downstream.ExpectNext().ShouldAllBeEquivalentTo(new[] {1' 2' 3});                  return NotUsed.Instance;              });
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1500));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: downstream.Within(TimeSpan.FromMilliseconds(1000)' () =>              {                  downstream.ExpectNext().ShouldAllBeEquivalentTo(new[] {4});                  return NotUsed.Instance;              });
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: downstream.Within(TimeSpan.FromMilliseconds(1000)' () =>              {                  downstream.ExpectNext().ShouldAllBeEquivalentTo(new[] {4});                  return NotUsed.Instance;              });
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_reset_time_window_when_max_elements_reached,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_group_early,The following statement contains a magic number: RandomTestRange(Sys)                  .ForEach(_ => RunScript(script' Settings' flow => flow.GroupedWithin(3' TimeSpan.FromMinutes(10))));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_group_early,The following statement contains a magic number: RandomTestRange(Sys)                  .ForEach(_ => RunScript(script' Settings' flow => flow.GroupedWithin(3' TimeSpan.FromMinutes(10))));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_group_with_rest,The following statement contains a magic number: RandomTestRange(Sys)                  .ForEach(_ => RunScript(script()' Settings' flow => flow.GroupedWithin(3' TimeSpan.FromMinutes(10))));
Magic Number,Akka.Streams.Tests.Dsl,FlowGroupedWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowGroupedWithinSpec.cs,A_GroupedWithin_must_group_with_rest,The following statement contains a magic number: RandomTestRange(Sys)                  .ForEach(_ => RunScript(script()' Settings' flow => flow.GroupedWithin(3' TimeSpan.FromMinutes(10))));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,FlowIdleInjectSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,FlowIdleInjectSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_not_emit_additional_elements_if_upstream_is_fastEnough,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var result = Source.From(Enumerable.Range(1' 10))                      .KeepAlive(TimeSpan.FromSeconds(1)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_not_emit_additional_elements_if_upstream_is_fastEnough,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var result = Source.From(Enumerable.Range(1' 10))                      .KeepAlive(TimeSpan.FromSeconds(1)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_not_emit_additional_elements_if_upstream_is_fastEnough,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var result = Source.From(Enumerable.Range(1' 10))                      .KeepAlive(TimeSpan.FromSeconds(1)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_not_emit_additional_elements_if_upstream_is_fastEnough,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var result = Source.From(Enumerable.Range(1' 10))                      .KeepAlive(TimeSpan.FromSeconds(1)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_emit_elements_periodically_after_silent_periods,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceWithIdleGap = Source.Combine(Source.From(Enumerable.Range(1' 5))'                      Source.From(Enumerable.Range(6' 5)).InitialDelay(TimeSpan.FromSeconds(2))'                      i => new Merge<int' int>(i));                                      var result = sourceWithIdleGap                      .KeepAlive(TimeSpan.FromSeconds(0.6)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(                      Enumerable.Range(1' 5).Concat(new[] {0' 0' 0}).Concat(Enumerable.Range(6' 5)));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_emit_elements_periodically_after_silent_periods,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceWithIdleGap = Source.Combine(Source.From(Enumerable.Range(1' 5))'                      Source.From(Enumerable.Range(6' 5)).InitialDelay(TimeSpan.FromSeconds(2))'                      i => new Merge<int' int>(i));                                      var result = sourceWithIdleGap                      .KeepAlive(TimeSpan.FromSeconds(0.6)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(                      Enumerable.Range(1' 5).Concat(new[] {0' 0' 0}).Concat(Enumerable.Range(6' 5)));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_emit_elements_periodically_after_silent_periods,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceWithIdleGap = Source.Combine(Source.From(Enumerable.Range(1' 5))'                      Source.From(Enumerable.Range(6' 5)).InitialDelay(TimeSpan.FromSeconds(2))'                      i => new Merge<int' int>(i));                                      var result = sourceWithIdleGap                      .KeepAlive(TimeSpan.FromSeconds(0.6)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(                      Enumerable.Range(1' 5).Concat(new[] {0' 0' 0}).Concat(Enumerable.Range(6' 5)));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_emit_elements_periodically_after_silent_periods,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceWithIdleGap = Source.Combine(Source.From(Enumerable.Range(1' 5))'                      Source.From(Enumerable.Range(6' 5)).InitialDelay(TimeSpan.FromSeconds(2))'                      i => new Merge<int' int>(i));                                      var result = sourceWithIdleGap                      .KeepAlive(TimeSpan.FromSeconds(0.6)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(                      Enumerable.Range(1' 5).Concat(new[] {0' 0' 0}).Concat(Enumerable.Range(6' 5)));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_emit_elements_periodically_after_silent_periods,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceWithIdleGap = Source.Combine(Source.From(Enumerable.Range(1' 5))'                      Source.From(Enumerable.Range(6' 5)).InitialDelay(TimeSpan.FromSeconds(2))'                      i => new Merge<int' int>(i));                                      var result = sourceWithIdleGap                      .KeepAlive(TimeSpan.FromSeconds(0.6)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(                      Enumerable.Range(1' 5).Concat(new[] {0' 0' 0}).Concat(Enumerable.Range(6' 5)));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_emit_elements_periodically_after_silent_periods,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceWithIdleGap = Source.Combine(Source.From(Enumerable.Range(1' 5))'                      Source.From(Enumerable.Range(6' 5)).InitialDelay(TimeSpan.FromSeconds(2))'                      i => new Merge<int' int>(i));                                      var result = sourceWithIdleGap                      .KeepAlive(TimeSpan.FromSeconds(0.6)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(                      Enumerable.Range(1' 5).Concat(new[] {0' 0' 0}).Concat(Enumerable.Range(6' 5)));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_emit_elements_periodically_after_silent_periods,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceWithIdleGap = Source.Combine(Source.From(Enumerable.Range(1' 5))'                      Source.From(Enumerable.Range(6' 5)).InitialDelay(TimeSpan.FromSeconds(2))'                      i => new Merge<int' int>(i));                                      var result = sourceWithIdleGap                      .KeepAlive(TimeSpan.FromSeconds(0.6)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(                      Enumerable.Range(1' 5).Concat(new[] {0' 0' 0}).Concat(Enumerable.Range(6' 5)));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_emit_elements_periodically_after_silent_periods,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceWithIdleGap = Source.Combine(Source.From(Enumerable.Range(1' 5))'                      Source.From(Enumerable.Range(6' 5)).InitialDelay(TimeSpan.FromSeconds(2))'                      i => new Merge<int' int>(i));                                      var result = sourceWithIdleGap                      .KeepAlive(TimeSpan.FromSeconds(0.6)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(                      Enumerable.Range(1' 5).Concat(new[] {0' 0' 0}).Concat(Enumerable.Range(6' 5)));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_emit_elements_periodically_after_silent_periods,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceWithIdleGap = Source.Combine(Source.From(Enumerable.Range(1' 5))'                      Source.From(Enumerable.Range(6' 5)).InitialDelay(TimeSpan.FromSeconds(2))'                      i => new Merge<int' int>(i));                                      var result = sourceWithIdleGap                      .KeepAlive(TimeSpan.FromSeconds(0.6)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(                      Enumerable.Range(1' 5).Concat(new[] {0' 0' 0}).Concat(Enumerable.Range(6' 5)));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_emit_elements_periodically_after_silent_periods,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceWithIdleGap = Source.Combine(Source.From(Enumerable.Range(1' 5))'                      Source.From(Enumerable.Range(6' 5)).InitialDelay(TimeSpan.FromSeconds(2))'                      i => new Merge<int' int>(i));                                      var result = sourceWithIdleGap                      .KeepAlive(TimeSpan.FromSeconds(0.6)' () => 0)                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldAllBeEquivalentTo(                      Enumerable.Range(1' 5).Concat(new[] {0' 0' 0}).Concat(Enumerable.Range(6' 5)));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_immediately_pull_upstream_after_busy_period,The following statement contains a magic number: Source.Combine(Source.From(Enumerable.Range(1' 10))' Source.FromPublisher(upstream)'                  i => new Merge<int' int>(i))                  .KeepAlive(TimeSpan.FromSeconds(1)' () => 0)                  .RunWith(Sink.FromSubscriber(downstream)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_immediately_pull_upstream_after_busy_period,The following statement contains a magic number: downstream.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_immediately_pull_upstream_after_busy_period,The following statement contains a magic number: downstream.ExpectNextN(10).ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_immediately_pull_upstream_after_busy_period,The following statement contains a magic number: downstream.ExpectNextN(10).ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_work_if_timer_fires_before_initial_request,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromSeconds(1.5));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_work_if_timer_fires_before_initial_request_after_busy_period,The following statement contains a magic number: Source.Combine(Source.From(Enumerable.Range(1' 10))' Source.FromPublisher(upstream)'                  i => new Merge<int' int>(i))                  .KeepAlive(TimeSpan.FromSeconds(1)' () => 0)                  .RunWith(Sink.FromSubscriber(downstream)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_work_if_timer_fires_before_initial_request_after_busy_period,The following statement contains a magic number: downstream.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_work_if_timer_fires_before_initial_request_after_busy_period,The following statement contains a magic number: downstream.ExpectNextN(Enumerable.Range(1' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_work_if_timer_fires_before_initial_request_after_busy_period,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromSeconds(1.5));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_prefer_upstream_element_over_injected,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromSeconds(1.5));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_prefer_upstream_element_over_injected,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromSeconds(0.5));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_prefer_upstream_element_over_injected_after_busy_period,The following statement contains a magic number: Source.Combine(Source.From(Enumerable.Range(1' 10))' Source.FromPublisher(upstream)'                  i => new Merge<int' int>(i))                  .KeepAlive(TimeSpan.FromSeconds(1)' () => 0)                  .RunWith(Sink.FromSubscriber(downstream)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_prefer_upstream_element_over_injected_after_busy_period,The following statement contains a magic number: downstream.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_prefer_upstream_element_over_injected_after_busy_period,The following statement contains a magic number: downstream.ExpectNextN(Enumerable.Range(1' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_prefer_upstream_element_over_injected_after_busy_period,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromSeconds(1.5));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_prefer_upstream_element_over_injected_after_busy_period,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromSeconds(0.5));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_reset_deadline_properly_after_injected_element,The following statement contains a magic number: downstream.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_reset_deadline_properly_after_injected_element,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowIdleInjectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIdleInjectSpec.cs,KeepAlive_must_reset_deadline_properly_after_injected_element,The following statement contains a magic number: downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,FlowInitialDelaySpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,FlowInitialDelaySpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_mustwork_with_zero_delay,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.Zero)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_mustwork_with_zero_delay,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.Zero)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_mustwork_with_zero_delay,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.Zero)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_must_delay_elements_by_the_specified_time_but_not_more,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.FromSeconds(2))                      .InitialTimeout(TimeSpan.FromSeconds(1))                      .RunWith(Sink.Ignore<int>()' Materializer);                  task.Invoking(t => t.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<TimeoutException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_must_delay_elements_by_the_specified_time_but_not_more,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.FromSeconds(2))                      .InitialTimeout(TimeSpan.FromSeconds(1))                      .RunWith(Sink.Ignore<int>()' Materializer);                  task.Invoking(t => t.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<TimeoutException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_must_delay_elements_by_the_specified_time_but_not_more,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.FromSeconds(2))                      .InitialTimeout(TimeSpan.FromSeconds(1))                      .RunWith(Sink.Ignore<int>()' Materializer);                  task.Invoking(t => t.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<TimeoutException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_must_properly_ignore_timer_while_backpressured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateProbe<int>(this);                  Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.FromSeconds(0.5))                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.EnsureSubscription();                  probe.ExpectNoMsg(TimeSpan.FromSeconds(1.5));                  probe.Request(20);                  probe.ExpectNextN(Enumerable.Range(1' 10));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_must_properly_ignore_timer_while_backpressured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateProbe<int>(this);                  Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.FromSeconds(0.5))                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.EnsureSubscription();                  probe.ExpectNoMsg(TimeSpan.FromSeconds(1.5));                  probe.Request(20);                  probe.ExpectNextN(Enumerable.Range(1' 10));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_must_properly_ignore_timer_while_backpressured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateProbe<int>(this);                  Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.FromSeconds(0.5))                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.EnsureSubscription();                  probe.ExpectNoMsg(TimeSpan.FromSeconds(1.5));                  probe.Request(20);                  probe.ExpectNextN(Enumerable.Range(1' 10));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_must_properly_ignore_timer_while_backpressured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateProbe<int>(this);                  Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.FromSeconds(0.5))                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.EnsureSubscription();                  probe.ExpectNoMsg(TimeSpan.FromSeconds(1.5));                  probe.Request(20);                  probe.ExpectNextN(Enumerable.Range(1' 10));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInitialDelaySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInitialDelaySpec.cs,Flow_InitialDelay_must_properly_ignore_timer_while_backpressured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateProbe<int>(this);                  Source.From(Enumerable.Range(1' 10))                      .InitialDelay(TimeSpan.FromSeconds(0.5))                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.EnsureSubscription();                  probe.ExpectNoMsg(TimeSpan.FromSeconds(1.5));                  probe.Request(20);                  probe.ExpectNextN(Enumerable.Range(1' 10));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,Setup,The following statement contains a magic number: Source.FromPublisher(p1)                  .Interleave(Source.FromPublisher(p2)' 2)                  .RunWith(Sink.FromSubscriber(subscriber)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 4))                      .Interleave(Source.From(Enumerable.Range(4' 3))' 2)                      .Interleave(Source.From(Enumerable.Range(7' 5))' 3)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 12; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(new[] {0' 1' 4' 7' 8' 9' 5' 2' 3' 10' 11' 6});                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_not_equal_elements_in_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 2)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 1' 3' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_not_equal_elements_in_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 2)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 1' 3' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_not_equal_elements_in_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 2)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 1' 3' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_not_equal_elements_in_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 2)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 1' 3' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_not_equal_elements_in_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 2)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 1' 3' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_not_equal_elements_in_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 2)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 1' 3' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_not_equal_elements_in_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 2)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 1' 3' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_not_equal_elements_in_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 2)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 1' 3' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_not_equal_elements_in_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 2)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 1' 3' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_segmentSize_1,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 1)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 3' 1' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_segmentSize_1,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 1)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 3' 1' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_segmentSize_1,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 1)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 3' 1' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_segmentSize_1,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 1)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 3' 1' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_segmentSize_1,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 1)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 3' 1' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_segmentSize_1,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 1)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 3' 1' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_segmentSize_1,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 1)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 3' 1' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_segmentSize_1,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 3))' 1)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(10);                  probe.ExpectNext(0' 3' 1' 4' 2' 5);                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_not_work_with_segmentSize_0,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source = Source.From(Enumerable.Range(0' 3));                  source.Invoking(s => s.Interleave(Source.From(Enumerable.Range(3' 3))' 0))                      .ShouldThrow<ArgumentException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_not_work_with_segmentSize_0,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source = Source.From(Enumerable.Range(0' 3));                  source.Invoking(s => s.Interleave(Source.From(Enumerable.Range(3' 3))' 0))                      .ShouldThrow<ArgumentException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_not_work_with_segmentSize_0,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source = Source.From(Enumerable.Range(0' 3));                  source.Invoking(s => s.Interleave(Source.From(Enumerable.Range(3' 3))' 0))                      .ShouldThrow<ArgumentException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_when_segmentSize_is_greater_than_stream_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(0' 3))                      .Interleave(Source.From(Enumerable.Range(3' 13))' 10)                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                    probe.ExpectSubscription().Request(25);                  Enumerable.Range(0' 16).ForEach(i => probe.ExpectNext(i));                  probe.ExpectComplete();                    var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 20))                      .Interleave(Source.From(Enumerable.Range(21' 5))' 10)                      .RunWith(Sink.FromSubscriber(probe2)' Materializer);                    probe2.ExpectSubscription().Request(100);                  Enumerable.Range(1' 10).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(21' 5).ForEach(i => probe2.ExpectNext(i));                  Enumerable.Range(11' 10).ForEach(i => probe2.ExpectNext(i));                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber1.ExpectNext(i));                  subscriber1.ExpectComplete();                      var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(i => subscriber2.ExpectNext(i));                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: subscription1.Request(4);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: subscription2.Request(4);
Magic Number,Akka.Streams.Tests.Dsl,FlowInterleaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowInterleaveSpec.cs,An_Interleave_for_Flow_must_pass_along_early_cancellation,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var up1 = TestPublisher.CreateManualProbe<int>(this);                  var up2 = TestPublisher.CreateManualProbe<int>(this);                  var down = TestSubscriber.CreateManualProbe<int>(this);                    var t = Source.AsSubscriber<int>()                      .InterleaveMaterialized(Source.AsSubscriber<int>()' 2' Tuple.Create)                      .ToMaterialized(Sink.FromSubscriber(down)' Keep.Left)                      .Run(Materializer);                  var graphSubscriber1 = t.Item1;                  var graphSubscriber2 = t.Item2;                    var downstream = down.ExpectSubscription();                  downstream.Cancel();                  up1.Subscribe(graphSubscriber1);                  up2.Subscribe(graphSubscriber2);                  up1.ExpectSubscription().ExpectCancellation();                  up2.ExpectSubscription().ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,FlowIntersperseSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,FlowIntersperseSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,A_Intersperse_must_inject_element_between_existing_elements,The following statement contains a magic number: var probe =                  Source.From(new[] { 1' 2' 3 })                      .Select(x => x.ToString())                      .Intersperse("'")                      .RunWith(this.SinkProbe<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,A_Intersperse_must_inject_element_between_existing_elements,The following statement contains a magic number: var probe =                  Source.From(new[] { 1' 2' 3 })                      .Select(x => x.ToString())                      .Intersperse("'")                      .RunWith(this.SinkProbe<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,A_Intersperse_must_inject_element_between_existing_elements_when_downstream_is_aggregate,The following statement contains a magic number: var concated =                  Source.From(new[] { 1' 2' 3 })                      .Select(x => x.ToString())                      .Intersperse("'")                      .RunAggregate(""' (s' s1) => s + s1' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,A_Intersperse_must_inject_element_between_existing_elements_when_downstream_is_aggregate,The following statement contains a magic number: var concated =                  Source.From(new[] { 1' 2' 3 })                      .Select(x => x.ToString())                      .Intersperse("'")                      .RunAggregate(""' (s' s1) => s + s1' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,A_Intersperse_must_inject_element_between_existing_elements_when_downstream_is_aggregate,The following statement contains a magic number: concated.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,A_Intersperse_must_inject_element_between_existing_elements_and_surround_with_start_and_end,The following statement contains a magic number: var probe =                  Source.From(new[] { 1' 2' 3 })                      .Select(x => x.ToString())                      .Intersperse("["' "'"' "]")                      .RunWith(this.SinkProbe<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,A_Intersperse_must_inject_element_between_existing_elements_and_surround_with_start_and_end,The following statement contains a magic number: var probe =                  Source.From(new[] { 1' 2' 3 })                      .Select(x => x.ToString())                      .Intersperse("["' "'"' "]")                      .RunWith(this.SinkProbe<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,A_Intersperse_must__complete_the_stage_when_the_Source_has_been_completed,The following statement contains a magic number: p2.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowIntersperseSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIntersperseSpec.cs,A_Intersperse_must_complete_the_stage_when_the_Sink_has_been_cancelled,The following statement contains a magic number: p2.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowIterableSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_OnError_when_iterator_throws,The following statement contains a magic number: var iterable = Enumerable.Range(1' 3).Select(x =>              {                  if (x == 2)                      throw new IllegalStateException("not two");                  return x;              });
Magic Number,Akka.Streams.Tests.Dsl,FlowIterableSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_OnError_when_iterator_throws,The following statement contains a magic number: var iterable = Enumerable.Range(1' 3).Select(x =>              {                  if (x == 2)                      throw new IllegalStateException("not two");                  return x;              });
Magic Number,Akka.Streams.Tests.Dsl,FlowIterableSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_OnError_when_iterator_throws,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowIterableSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_OnError_when_iterator_throws,The following statement contains a magic number: EventFilter.Exception<IllegalStateException>("not two").ExpectOne(() => sub.Request(2));
Magic Number,Akka.Streams.Tests.Dsl,FlowIterableSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_OnError_when_iterator_throws,The following statement contains a magic number: sub.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowIterableSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_OnError_when_iterator_throws,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowIterableSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_OnError_when_Source_construction_throws,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowIterableSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_OnError_when_MoveNext_throws,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,AbstractFlowIteratorSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,AbstractFlowIteratorSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(1);                  c.ExpectNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub.Request(3);                  c.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(1);                  c.ExpectNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub.Request(3);                  c.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(1);                  c.ExpectNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub.Request(3);                  c.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(1);                  c.ExpectNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub.Request(3);                  c.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(1);                  c.ExpectNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub.Request(3);                  c.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_complete_empty,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(0).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  c.ExpectSubscriptionAndComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c2.ExpectNext(2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(2);                  sub2.Request(2);                  c1.ExpectNext(2);                  c1.ExpectNext(3);                  c2.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c2.ExpectNext(2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(2);                  sub2.Request(2);                  c1.ExpectNext(2);                  c1.ExpectNext(3);                  c2.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c2.ExpectNext(2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(2);                  sub2.Request(2);                  c1.ExpectNext(2);                  c1.ExpectNext(3);                  c2.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c2.ExpectNext(2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(2);                  sub2.Request(2);                  c1.ExpectNext(2);                  c1.ExpectNext(3);                  c2.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c2.ExpectNext(2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(2);                  sub2.Request(2);                  c1.ExpectNext(2);                  c1.ExpectNext(3);                  c2.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c2.ExpectNext(2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(2);                  sub2.Request(2);                  c1.ExpectNext(2);                  c1.ExpectNext(3);                  c2.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c2.ExpectNext(2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(2);                  sub2.Request(2);                  c1.ExpectNext(2);                  c1.ExpectNext(3);                  c2.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c2.ExpectNext(2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(2);                  sub2.Request(2);                  c1.ExpectNext(2);                  c1.ExpectNext(3);                  c2.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c2.ExpectNext(2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(2);                  sub2.Request(2);                  c1.ExpectNext(2);                  c1.ExpectNext(3);                  c2.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_multiple_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  c2.ExpectNext(2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(2);                  sub2.Request(2);                  c1.ExpectNext(2);                  c1.ExpectNext(3);                  c2.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_to_later_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  var sub1 = c1.ExpectSubscription();                  sub1.Request(1);                  c1.ExpectNext(1' TimeSpan.FromSeconds(60));                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    p.Subscribe(c2);                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  //element 1 is already gone                  c2.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();                    sub1.Request(3);                  c1.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_to_later_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  var sub1 = c1.ExpectSubscription();                  sub1.Request(1);                  c1.ExpectNext(1' TimeSpan.FromSeconds(60));                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    p.Subscribe(c2);                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  //element 1 is already gone                  c2.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();                    sub1.Request(3);                  c1.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_to_later_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  var sub1 = c1.ExpectSubscription();                  sub1.Request(1);                  c1.ExpectNext(1' TimeSpan.FromSeconds(60));                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    p.Subscribe(c2);                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  //element 1 is already gone                  c2.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();                    sub1.Request(3);                  c1.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_to_later_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  var sub1 = c1.ExpectSubscription();                  sub1.Request(1);                  c1.ExpectNext(1' TimeSpan.FromSeconds(60));                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    p.Subscribe(c2);                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  //element 1 is already gone                  c2.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();                    sub1.Request(3);                  c1.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_to_later_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  var sub1 = c1.ExpectSubscription();                  sub1.Request(1);                  c1.ExpectNext(1' TimeSpan.FromSeconds(60));                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    p.Subscribe(c2);                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  //element 1 is already gone                  c2.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();                    sub1.Request(3);                  c1.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_to_later_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  var sub1 = c1.ExpectSubscription();                  sub1.Request(1);                  c1.ExpectNext(1' TimeSpan.FromSeconds(60));                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    p.Subscribe(c2);                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  //element 1 is already gone                  c2.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();                    sub1.Request(3);                  c1.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_to_later_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  var sub1 = c1.ExpectSubscription();                  sub1.Request(1);                  c1.ExpectNext(1' TimeSpan.FromSeconds(60));                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    p.Subscribe(c2);                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  //element 1 is already gone                  c2.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();                    sub1.Request(3);                  c1.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_to_later_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  var sub1 = c1.ExpectSubscription();                  sub1.Request(1);                  c1.ExpectNext(1' TimeSpan.FromSeconds(60));                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    p.Subscribe(c2);                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  //element 1 is already gone                  c2.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();                    sub1.Request(3);                  c1.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_to_later_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(true)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                                    p.Subscribe(c1);                  var sub1 = c1.ExpectSubscription();                  sub1.Request(1);                  c1.ExpectNext(1' TimeSpan.FromSeconds(60));                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    p.Subscribe(c2);                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  //element 1 is already gone                  c2.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();                    sub1.Request(3);                  c1.ExpectNext(2)                      .ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_one_transformation_step,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(2)                      .ExpectNext(4)                      .ExpectNext(6)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_one_transformation_step,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(2)                      .ExpectNext(4)                      .ExpectNext(6)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_one_transformation_step,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(2)                      .ExpectNext(4)                      .ExpectNext(6)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_one_transformation_step,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(2)                      .ExpectNext(4)                      .ExpectNext(6)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_one_transformation_step,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(2)                      .ExpectNext(4)                      .ExpectNext(6)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_one_transformation_step,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(2)                      .ExpectNext(4)                      .ExpectNext(6)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_two_transformation_steps,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(4)                      .Where(x => x%2 == 0)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(4)                      .ExpectNext(8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_two_transformation_steps,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(4)                      .Where(x => x%2 == 0)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(4)                      .ExpectNext(8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_two_transformation_steps,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(4)                      .Where(x => x%2 == 0)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(4)                      .ExpectNext(8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_two_transformation_steps,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(4)                      .Where(x => x%2 == 0)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(4)                      .ExpectNext(8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_two_transformation_steps,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(4)                      .Where(x => x%2 == 0)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(4)                      .ExpectNext(8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_produce_elements_with_two_transformation_steps,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(4)                      .Where(x => x%2 == 0)                      .Select(x => x*2)                      .RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(10);                  c.ExpectNext(4)                      .ExpectNext(8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_not_produce_after_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(1);                  c.ExpectNext(1);                  sub.Cancel();                  sub.Request(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_not_produce_after_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(1);                  c.ExpectNext(1);                  sub.Cancel();                  sub.Request(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,AbstractFlowIteratorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowIteratorSpec.cs,A_Flow_based_on_an_iterable_must_not_produce_after_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateSource(3).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  var c = TestSubscriber.CreateManualProbe<int>(this);                    p.Subscribe(c);                  var sub = c.ExpectSubscription();                    sub.Request(1);                  c.ExpectNext(1);                  sub.Cancel();                  sub.Request(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,FlowJoinSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,FlowJoinSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_cycles,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int end = 47;                  var t = Enumerable.Range(0' end + 1).GroupBy(i => i%2 == 0).ToList();                  var even = t.First(x => x.Key).ToList();                  var odd = t.First(x => !x.Key).ToList();                  var source = Source.From(Enumerable.Range(0' end + 1));                  var result = even.Concat(odd).Concat(odd.Select(x => x*10));                  var probe = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    var flow1 = Flow.FromGraph(GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<int>(2));                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Grouped(1000))                          .To(Sink.FromSubscriber(probe));                      return new FlowShape<int' int>(merge.In(1)' broadcast.Out(1));                  }));                    var flow2 =                      Flow.Create<int>()                          .Where(x => x%2 == 1)                          .Select(x => x*10)                          .Buffer((end + 1)/2' OverflowStrategy.Backpressure)                          .Take((end + 1)/2);                    flow1.Join(flow2).Run(Materializer);                    var sub = probe.ExpectSubscription();                  sub.Request(1);                  probe.ExpectNext().ShouldAllBeEquivalentTo(result);                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_cycles,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int end = 47;                  var t = Enumerable.Range(0' end + 1).GroupBy(i => i%2 == 0).ToList();                  var even = t.First(x => x.Key).ToList();                  var odd = t.First(x => !x.Key).ToList();                  var source = Source.From(Enumerable.Range(0' end + 1));                  var result = even.Concat(odd).Concat(odd.Select(x => x*10));                  var probe = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    var flow1 = Flow.FromGraph(GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<int>(2));                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Grouped(1000))                          .To(Sink.FromSubscriber(probe));                      return new FlowShape<int' int>(merge.In(1)' broadcast.Out(1));                  }));                    var flow2 =                      Flow.Create<int>()                          .Where(x => x%2 == 1)                          .Select(x => x*10)                          .Buffer((end + 1)/2' OverflowStrategy.Backpressure)                          .Take((end + 1)/2);                    flow1.Join(flow2).Run(Materializer);                    var sub = probe.ExpectSubscription();                  sub.Request(1);                  probe.ExpectNext().ShouldAllBeEquivalentTo(result);                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_cycles,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int end = 47;                  var t = Enumerable.Range(0' end + 1).GroupBy(i => i%2 == 0).ToList();                  var even = t.First(x => x.Key).ToList();                  var odd = t.First(x => !x.Key).ToList();                  var source = Source.From(Enumerable.Range(0' end + 1));                  var result = even.Concat(odd).Concat(odd.Select(x => x*10));                  var probe = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    var flow1 = Flow.FromGraph(GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<int>(2));                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Grouped(1000))                          .To(Sink.FromSubscriber(probe));                      return new FlowShape<int' int>(merge.In(1)' broadcast.Out(1));                  }));                    var flow2 =                      Flow.Create<int>()                          .Where(x => x%2 == 1)                          .Select(x => x*10)                          .Buffer((end + 1)/2' OverflowStrategy.Backpressure)                          .Take((end + 1)/2);                    flow1.Join(flow2).Run(Materializer);                    var sub = probe.ExpectSubscription();                  sub.Request(1);                  probe.ExpectNext().ShouldAllBeEquivalentTo(result);                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_cycles,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int end = 47;                  var t = Enumerable.Range(0' end + 1).GroupBy(i => i%2 == 0).ToList();                  var even = t.First(x => x.Key).ToList();                  var odd = t.First(x => !x.Key).ToList();                  var source = Source.From(Enumerable.Range(0' end + 1));                  var result = even.Concat(odd).Concat(odd.Select(x => x*10));                  var probe = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    var flow1 = Flow.FromGraph(GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<int>(2));                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Grouped(1000))                          .To(Sink.FromSubscriber(probe));                      return new FlowShape<int' int>(merge.In(1)' broadcast.Out(1));                  }));                    var flow2 =                      Flow.Create<int>()                          .Where(x => x%2 == 1)                          .Select(x => x*10)                          .Buffer((end + 1)/2' OverflowStrategy.Backpressure)                          .Take((end + 1)/2);                    flow1.Join(flow2).Run(Materializer);                    var sub = probe.ExpectSubscription();                  sub.Request(1);                  probe.ExpectNext().ShouldAllBeEquivalentTo(result);                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_cycles,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int end = 47;                  var t = Enumerable.Range(0' end + 1).GroupBy(i => i%2 == 0).ToList();                  var even = t.First(x => x.Key).ToList();                  var odd = t.First(x => !x.Key).ToList();                  var source = Source.From(Enumerable.Range(0' end + 1));                  var result = even.Concat(odd).Concat(odd.Select(x => x*10));                  var probe = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    var flow1 = Flow.FromGraph(GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<int>(2));                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Grouped(1000))                          .To(Sink.FromSubscriber(probe));                      return new FlowShape<int' int>(merge.In(1)' broadcast.Out(1));                  }));                    var flow2 =                      Flow.Create<int>()                          .Where(x => x%2 == 1)                          .Select(x => x*10)                          .Buffer((end + 1)/2' OverflowStrategy.Backpressure)                          .Take((end + 1)/2);                    flow1.Join(flow2).Run(Materializer);                    var sub = probe.ExpectSubscription();                  sub.Request(1);                  probe.ExpectNext().ShouldAllBeEquivalentTo(result);                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_cycles,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int end = 47;                  var t = Enumerable.Range(0' end + 1).GroupBy(i => i%2 == 0).ToList();                  var even = t.First(x => x.Key).ToList();                  var odd = t.First(x => !x.Key).ToList();                  var source = Source.From(Enumerable.Range(0' end + 1));                  var result = even.Concat(odd).Concat(odd.Select(x => x*10));                  var probe = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    var flow1 = Flow.FromGraph(GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<int>(2));                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Grouped(1000))                          .To(Sink.FromSubscriber(probe));                      return new FlowShape<int' int>(merge.In(1)' broadcast.Out(1));                  }));                    var flow2 =                      Flow.Create<int>()                          .Where(x => x%2 == 1)                          .Select(x => x*10)                          .Buffer((end + 1)/2' OverflowStrategy.Backpressure)                          .Take((end + 1)/2);                    flow1.Join(flow2).Run(Materializer);                    var sub = probe.ExpectSubscription();                  sub.Request(1);                  probe.ExpectNext().ShouldAllBeEquivalentTo(result);                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_cycles,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int end = 47;                  var t = Enumerable.Range(0' end + 1).GroupBy(i => i%2 == 0).ToList();                  var even = t.First(x => x.Key).ToList();                  var odd = t.First(x => !x.Key).ToList();                  var source = Source.From(Enumerable.Range(0' end + 1));                  var result = even.Concat(odd).Concat(odd.Select(x => x*10));                  var probe = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    var flow1 = Flow.FromGraph(GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<int>(2));                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Grouped(1000))                          .To(Sink.FromSubscriber(probe));                      return new FlowShape<int' int>(merge.In(1)' broadcast.Out(1));                  }));                    var flow2 =                      Flow.Create<int>()                          .Where(x => x%2 == 1)                          .Select(x => x*10)                          .Buffer((end + 1)/2' OverflowStrategy.Backpressure)                          .Take((end + 1)/2);                    flow1.Join(flow2).Run(Materializer);                    var sub = probe.ExpectSubscription();                  sub.Request(1);                  probe.ExpectNext().ShouldAllBeEquivalentTo(result);                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_cycles,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int end = 47;                  var t = Enumerable.Range(0' end + 1).GroupBy(i => i%2 == 0).ToList();                  var even = t.First(x => x.Key).ToList();                  var odd = t.First(x => !x.Key).ToList();                  var source = Source.From(Enumerable.Range(0' end + 1));                  var result = even.Concat(odd).Concat(odd.Select(x => x*10));                  var probe = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    var flow1 = Flow.FromGraph(GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<int>(2));                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Grouped(1000))                          .To(Sink.FromSubscriber(probe));                      return new FlowShape<int' int>(merge.In(1)' broadcast.Out(1));                  }));                    var flow2 =                      Flow.Create<int>()                          .Where(x => x%2 == 1)                          .Select(x => x*10)                          .Buffer((end + 1)/2' OverflowStrategy.Backpressure)                          .Take((end + 1)/2);                    flow1.Join(flow2).Run(Materializer);                    var sub = probe.ExpectSubscription();                  sub.Request(1);                  probe.ExpectNext().ShouldAllBeEquivalentTo(result);                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_cycles,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int end = 47;                  var t = Enumerable.Range(0' end + 1).GroupBy(i => i%2 == 0).ToList();                  var even = t.First(x => x.Key).ToList();                  var odd = t.First(x => !x.Key).ToList();                  var source = Source.From(Enumerable.Range(0' end + 1));                  var result = even.Concat(odd).Concat(odd.Select(x => x*10));                  var probe = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    var flow1 = Flow.FromGraph(GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<int>(2));                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Grouped(1000))                          .To(Sink.FromSubscriber(probe));                      return new FlowShape<int' int>(merge.In(1)' broadcast.Out(1));                  }));                    var flow2 =                      Flow.Create<int>()                          .Where(x => x%2 == 1)                          .Select(x => x*10)                          .Buffer((end + 1)/2' OverflowStrategy.Backpressure)                          .Take((end + 1)/2);                    flow1.Join(flow2).Run(Materializer);                    var sub = probe.ExpectSubscription();                  sub.Request(1);                  probe.ExpectNext().ShouldAllBeEquivalentTo(result);                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_cycles,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int end = 47;                  var t = Enumerable.Range(0' end + 1).GroupBy(i => i%2 == 0).ToList();                  var even = t.First(x => x.Key).ToList();                  var odd = t.First(x => !x.Key).ToList();                  var source = Source.From(Enumerable.Range(0' end + 1));                  var result = even.Concat(odd).Concat(odd.Select(x => x*10));                  var probe = TestSubscriber.CreateManualProbe<IEnumerable<int>>(this);                    var flow1 = Flow.FromGraph(GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<int>(2));                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Grouped(1000))                          .To(Sink.FromSubscriber(probe));                      return new FlowShape<int' int>(merge.In(1)' broadcast.Out(1));                  }));                    var flow2 =                      Flow.Create<int>()                          .Where(x => x%2 == 1)                          .Select(x => x*10)                          .Buffer((end + 1)/2' OverflowStrategy.Backpressure)                          .Take((end + 1)/2);                    flow1.Join(flow2).Run(Materializer);                    var sub = probe.ExpectSubscription();                  sub.Request(1);                  probe.ExpectNext().ShouldAllBeEquivalentTo(result);                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_merge_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source =                      Source.Single("lonely traveler").MapMaterializedValue(_ => Task.FromResult(""));                    var flow1 = Flow.FromGraph(GraphDsl.Create(Sink.First<string>()' (b' sink) =>                  {                      var merge = b.Add(new Merge<string>(2));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(merge.In(1)' broadcast.Out(1));                  }));                    var t = flow1.Join(Flow.Create<string>()).Run(Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_merge_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source =                      Source.Single("lonely traveler").MapMaterializedValue(_ => Task.FromResult(""));                    var flow1 = Flow.FromGraph(GraphDsl.Create(Sink.First<string>()' (b' sink) =>                  {                      var merge = b.Add(new Merge<string>(2));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(merge.In(1)' broadcast.Out(1));                  }));                    var t = flow1.Join(Flow.Create<string>()).Run(Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_merge_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source =                      Source.Single("lonely traveler").MapMaterializedValue(_ => Task.FromResult(""));                    var flow1 = Flow.FromGraph(GraphDsl.Create(Sink.First<string>()' (b' sink) =>                  {                      var merge = b.Add(new Merge<string>(2));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(merge.In(0));                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(merge.In(1)' broadcast.Out(1));                  }));                    var t = flow1.Join(Flow.Create<string>()).Run(Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_merge_preferred_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source =                      Source.Single("lonely traveler").MapMaterializedValue(_ => Task.FromResult(""));                    var flow1 = Flow.FromGraph(GraphDsl.Create(Sink.First<string>()' (b' sink) =>                  {                      var merge = b.Add(new MergePreferred<string>(1));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(merge.Preferred);                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(merge.In(0)' broadcast.Out(1));                  }));                    var t = flow1.Join(Flow.Create<string>()).Run(Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_merge_preferred_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source =                      Source.Single("lonely traveler").MapMaterializedValue(_ => Task.FromResult(""));                    var flow1 = Flow.FromGraph(GraphDsl.Create(Sink.First<string>()' (b' sink) =>                  {                      var merge = b.Add(new MergePreferred<string>(1));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(merge.Preferred);                      b.From(merge.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(merge.In(0)' broadcast.Out(1));                  }));                    var t = flow1.Join(Flow.Create<string>()).Run(Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_zip_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source = Source.From(new[] {"traveler1"' "traveler2"})                      .MapMaterializedValue<TestSubscriber.Probe<Tuple<string' string>>>(_ => null);                    var flow = Flow.FromGraph(GraphDsl.Create(this.SinkProbe<Tuple<string'string>>()' (b' sink) =>                  {                      var zip = b.Add(new Zip<string' string>());                      var broadcast = b.Add(new Broadcast<Tuple<string' string>>(2));                        b.From(source).To(zip.In0);                      b.From(zip.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' Tuple<string' string>>(zip.In1' broadcast.Out(1));                  }));                    var feedback = Flow.FromGraph(GraphDsl.Create(Source.Single("ignition")' (b' ignition) =>                  {                      var f = b.Add(Flow.Create<Tuple<string' string>>().Select(t => t.Item1));                      var merge = b.Add(new Merge<string>(2));                        b.From(ignition).To(merge.In(0));                      b.From(f).To(merge.In(1));                        return new FlowShape<Tuple<string' string>' string>(f.Inlet' merge.Out);                  }));                    var probe = flow.Join(feedback).Run(Materializer);                  probe.RequestNext(Tuple.Create("traveler1"' "ignition"));                  probe.RequestNext(Tuple.Create("traveler2"' "traveler1"));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_zip_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source = Source.From(new[] {"traveler1"' "traveler2"})                      .MapMaterializedValue<TestSubscriber.Probe<Tuple<string' string>>>(_ => null);                    var flow = Flow.FromGraph(GraphDsl.Create(this.SinkProbe<Tuple<string'string>>()' (b' sink) =>                  {                      var zip = b.Add(new Zip<string' string>());                      var broadcast = b.Add(new Broadcast<Tuple<string' string>>(2));                        b.From(source).To(zip.In0);                      b.From(zip.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' Tuple<string' string>>(zip.In1' broadcast.Out(1));                  }));                    var feedback = Flow.FromGraph(GraphDsl.Create(Source.Single("ignition")' (b' ignition) =>                  {                      var f = b.Add(Flow.Create<Tuple<string' string>>().Select(t => t.Item1));                      var merge = b.Add(new Merge<string>(2));                        b.From(ignition).To(merge.In(0));                      b.From(f).To(merge.In(1));                        return new FlowShape<Tuple<string' string>' string>(f.Inlet' merge.Out);                  }));                    var probe = flow.Join(feedback).Run(Materializer);                  probe.RequestNext(Tuple.Create("traveler1"' "ignition"));                  probe.RequestNext(Tuple.Create("traveler2"' "traveler1"));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_concat_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.FromGraph(GraphDsl.Create(TestSource.SourceProbe<string>(this)' Sink.First<string>()' Keep.Both' (b' source' sink) =>                  {                      var concat = b.Add(Concat.Create<string>(2));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(concat.In(0));                      b.From(concat.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(concat.In(1)' broadcast.Out(1));                  }));                    var tuple = flow.Join(Flow.Create<string>()).Run(Materializer);                  var probe = tuple.Item1;                  var t = tuple.Item2;                  probe.SendNext("lonely traveler");                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");                  probe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_concat_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.FromGraph(GraphDsl.Create(TestSource.SourceProbe<string>(this)' Sink.First<string>()' Keep.Both' (b' source' sink) =>                  {                      var concat = b.Add(Concat.Create<string>(2));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(concat.In(0));                      b.From(concat.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(concat.In(1)' broadcast.Out(1));                  }));                    var tuple = flow.Join(Flow.Create<string>()).Run(Materializer);                  var probe = tuple.Item1;                  var t = tuple.Item2;                  probe.SendNext("lonely traveler");                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");                  probe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_concat_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.FromGraph(GraphDsl.Create(TestSource.SourceProbe<string>(this)' Sink.First<string>()' Keep.Both' (b' source' sink) =>                  {                      var concat = b.Add(Concat.Create<string>(2));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(concat.In(0));                      b.From(concat.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(concat.In(1)' broadcast.Out(1));                  }));                    var tuple = flow.Join(Flow.Create<string>()).Run(Materializer);                  var probe = tuple.Item1;                  var t = tuple.Item2;                  probe.SendNext("lonely traveler");                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");                  probe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_interleave_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source = Source.Single("lonely traveler").MapMaterializedValue(_ => Task.FromResult(""));                  var flow = Flow.FromGraph(GraphDsl.Create(Sink.First<string>()' (b' sink) =>                  {                      var interleave = b.Add(Interleave.Create<string>(2' 1));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(interleave.In(0));                      b.From(interleave.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(interleave.In(1)' broadcast.Out(1));                  }));                                    var t = flow.Join(Flow.Create<string>()).Run(Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_interleave_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source = Source.Single("lonely traveler").MapMaterializedValue(_ => Task.FromResult(""));                  var flow = Flow.FromGraph(GraphDsl.Create(Sink.First<string>()' (b' sink) =>                  {                      var interleave = b.Add(Interleave.Create<string>(2' 1));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(interleave.In(0));                      b.From(interleave.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(interleave.In(1)' broadcast.Out(1));                  }));                                    var t = flow.Join(Flow.Create<string>()).Run(Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowJoinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowJoinSpec.cs,A_Flow_using_Join_must_allow_for_interleave_cycle,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var source = Source.Single("lonely traveler").MapMaterializedValue(_ => Task.FromResult(""));                  var flow = Flow.FromGraph(GraphDsl.Create(Sink.First<string>()' (b' sink) =>                  {                      var interleave = b.Add(Interleave.Create<string>(2' 1));                      var broadcast = b.Add(new Broadcast<string>(2' true));                        b.From(source).To(interleave.In(0));                      b.From(interleave.Out).To(broadcast.In);                      b.From(broadcast.Out(0)).To(sink);                      return new FlowShape<string' string>(interleave.In(1)' broadcast.Out(1));                  }));                                    var t = flow.Join(Flow.Create<string>()).Run(Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("lonely traveler");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_empty_sequence_when_source_is_empty_and_n_is_equal_to_zero,The following statement contains a magic number: var future = Source.Empty<int>()                  .Limit(n)                  .Grouped(1000)                  .RunWith(Sink.FirstOrDefault<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_empty_sequence_when_source_is_empty_and_n_is_equal_to_zero,The following statement contains a magic number: future.Wait(TimeSpan.FromMilliseconds(300)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_output_that_is_identical_to_the_input_when_n_is_equal_to_input_length,The following statement contains a magic number: var input = Enumerable.Range(1' 6).ToList();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_output_that_is_identical_to_the_input_when_n_is_equal_to_input_length,The following statement contains a magic number: var future = Source.From(input)                  .Limit(n)                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_output_that_is_identical_to_the_input_when_n_is_equal_to_input_length,The following statement contains a magic number: future.Wait(TimeSpan.FromMilliseconds(300)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_output_that_is_identical_to_the_input_when_n_greather_than_input_length,The following statement contains a magic number: var input = Enumerable.Range(1' 6).ToList();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_output_that_is_identical_to_the_input_when_n_greather_than_input_length,The following statement contains a magic number: var n = input.Count + 2;
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_output_that_is_identical_to_the_input_when_n_greather_than_input_length,The following statement contains a magic number: var future = Source.From(input)                  .Limit(n)                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_output_that_is_identical_to_the_input_when_n_greather_than_input_length,The following statement contains a magic number: future.Wait(TimeSpan.FromMilliseconds(300)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_n_messages_before_throwing_a_StreamLimitReachedException_when_n_lower_than_input_size,The following statement contains a magic number: var input = Enumerable.Range(1' 6).ToList();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_n_messages_before_throwing_a_StreamLimitReachedException_when_n_lower_than_input_size,The following statement contains a magic number: var n = input.Count - 2;
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_n_messages_before_throwing_a_StreamLimitReachedException_when_n_lower_than_input_size,The following statement contains a magic number: var future = Source.From(input)                  .Limit(n)                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_produce_n_messages_before_throwing_a_StreamLimitReachedException_when_n_lower_than_input_size,The following statement contains a magic number: future.Invoking(f => f.Wait(TimeSpan.FromMilliseconds(300))).ShouldThrow<StreamLimitReachedException>();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_throw_a_StreamLimitReachedException_when_n_lower_than_0,The following statement contains a magic number: var input = Enumerable.Range(1' 6).ToList();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_throw_a_StreamLimitReachedException_when_n_lower_than_0,The following statement contains a magic number: var future = Source.From(input)                  .Limit(n)                  .Grouped(1000)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitSpec.cs,A_Limit_must_throw_a_StreamLimitReachedException_when_n_lower_than_0,The following statement contains a magic number: future.Invoking(f => f.Wait(TimeSpan.FromMilliseconds(300))).ShouldThrow<StreamLimitReachedException>();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,FlowLimitWeightedSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2'16);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,FlowLimitWeightedSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2'16);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_produce_empty_sequence_regardless_of_cost_when_source_is_empty_and_n_euqals_0,The following statement contains a magic number: Func<int' long> costFunction = e => 999999L;
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_produce_empty_sequence_regardless_of_cost_when_source_is_empty_and_n_euqals_0,The following statement contains a magic number: var future = Source.From(input)                  .LimitWeighted(n' costFunction)                  .Grouped(1000)                  .RunWith(Sink.FirstOrDefault<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_produce_empty_sequence_regardless_of_cost_when_source_is_empty_and_n_euqals_0,The following statement contains a magic number: future.Wait(TimeSpan.FromMilliseconds(300)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_always_exhaust_a_source_regardless_of_n_as_long_as_n_is_greater_than_0_if_cost_is_0,The following statement contains a magic number: var input = Enumerable.Range(1' 15).ToList();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_always_exhaust_a_source_regardless_of_n_as_long_as_n_is_greater_than_0_if_cost_is_0,The following statement contains a magic number: var future = Source.From(input)                  .LimitWeighted(n' costFunction)                  .Grouped(1000)                  .RunWith(Sink.FirstOrDefault<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_always_exhaust_a_source_regardless_of_n_as_long_as_n_is_greater_than_0_if_cost_is_0,The following statement contains a magic number: future.Wait(TimeSpan.FromMilliseconds(300)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_exhaust_source_if_n_equals_to_input_length_and_cost_is_1,The following statement contains a magic number: var input = Enumerable.Range(1' 16).ToList();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_exhaust_source_if_n_equals_to_input_length_and_cost_is_1,The following statement contains a magic number: var future = Source.From(input)                  .LimitWeighted(n' costFunction)                  .Grouped(1000)                  .RunWith(Sink.FirstOrDefault<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_exhaust_source_if_n_equals_to_input_length_and_cost_is_1,The following statement contains a magic number: future.Wait(TimeSpan.FromMilliseconds(300)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_exhaust_a_source_if_n_greater_or_equal_accumulated_cost,The following statement contains a magic number: var future = Source.From(input)                  .LimitWeighted(n' costFunction)                  .Grouped(1000)                  .RunWith(Sink.FirstOrDefault<IEnumerable<string>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_exhaust_a_source_if_n_greater_or_equal_accumulated_cost,The following statement contains a magic number: future.Wait(TimeSpan.FromMilliseconds(300)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_throw_a_StreamLimitReachedException_when_n_lower_than_accumulated_cost,The following statement contains a magic number: var future = Source.From(input)                  .LimitWeighted(n' costFunction)                  .Grouped(1000)                  .RunWith(Sink.FirstOrDefault<IEnumerable<string>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLimitWeightedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLimitWeightedSpec.cs,Limit_must_throw_a_StreamLimitReachedException_when_n_lower_than_accumulated_cost,The following statement contains a magic number: future.Invoking(f => f.Wait(TimeSpan.FromMilliseconds(300))).ShouldThrow<StreamLimitReachedException>();
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,FlowLogSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,FlowLogSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_Flow_must_debug_each_element,The following statement contains a magic number: Source.From(new[] {1' 2}).Via(debugging).RunWith(Sink.Ignore<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_Flow_must_debug_each_element,The following statement contains a magic number: var msgs = LogMessages(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_Flow_must_debug_each_element,The following statement contains a magic number: msgs[2].Should().Be("[my-debug] Upstream finished.");
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_Flow_must_allow_disabling_elements_logging,The following statement contains a magic number: Source.From(new[] {1' 2})                  .Via(debugging)                  .WithAttributes(disableElementLogging)                  .RunWith(Sink.Ignore<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_source_must_debug_each_element,The following statement contains a magic number: Source.From(new[] {1' 2}).Log("flow-s2").RunWith(Sink.Ignore<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_source_must_debug_each_element,The following statement contains a magic number: var msgs = LogMessages(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_source_must_debug_each_element,The following statement contains a magic number: msgs[2].Should().Be("[flow-s2] Upstream finished.");
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_source_must_allow_extracting_value_to_be_logged,The following statement contains a magic number: var msgs = LogMessages(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_source_must_allow_passing_in_custom_LoggingAdapter,The following statement contains a magic number: Source.Single(42)                  .Log("flow-5"' log: log)                  .RunWith(Sink.Ignore<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_source_must_allow_passing_in_custom_LoggingAdapter,The following statement contains a magic number: var msgs = LogProbe.ReceiveN(2).Cast<Debug>().ToArray();
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_source_must_allow_configuring_log_levels_via_Attributes,The following statement contains a magic number: Source.Single(42)                  .Log("flow-6")                  .WithAttributes(Attributes.CreateLogLevels(LogLevel.WarningLevel' LogLevel.InfoLevel'                      LogLevel.DebugLevel))                  .RunWith(Sink.Ignore<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_Source_must_follow_supervision_strategy_when_Exception_thrown,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 5))                  .Log("hi"' n => { throw ex; })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(Sink.Aggregate<int' int>(0' (i' i1) => i + i1)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowLogSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowLogSpec.cs,A_Log_on_Source_must_follow_supervision_strategy_when_Exception_thrown,The following statement contains a magic number: future.Wait(TimeSpan.FromMilliseconds(500)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_produce_task_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var latch = Enumerable.Range(0' 4).Select(_ => new TestLatch(1)).ToArray();                    Source.From(Enumerable.Range(0' 4)).SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      return n;                  })).To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(5);                    latch[1].CountDown();                  c.ExpectNext(1);                    latch[3].CountDown();                  c.ExpectNext(3);                    latch[2].CountDown();                  c.ExpectNext(2);                    latch[0].CountDown();                  c.ExpectNext(0);                    c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_produce_task_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var latch = Enumerable.Range(0' 4).Select(_ => new TestLatch(1)).ToArray();                    Source.From(Enumerable.Range(0' 4)).SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      return n;                  })).To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(5);                    latch[1].CountDown();                  c.ExpectNext(1);                    latch[3].CountDown();                  c.ExpectNext(3);                    latch[2].CountDown();                  c.ExpectNext(2);                    latch[0].CountDown();                  c.ExpectNext(0);                    c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_produce_task_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var latch = Enumerable.Range(0' 4).Select(_ => new TestLatch(1)).ToArray();                    Source.From(Enumerable.Range(0' 4)).SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      return n;                  })).To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(5);                    latch[1].CountDown();                  c.ExpectNext(1);                    latch[3].CountDown();                  c.ExpectNext(3);                    latch[2].CountDown();                  c.ExpectNext(2);                    latch[0].CountDown();                  c.ExpectNext(0);                    c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_produce_task_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var latch = Enumerable.Range(0' 4).Select(_ => new TestLatch(1)).ToArray();                    Source.From(Enumerable.Range(0' 4)).SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      return n;                  })).To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(5);                    latch[1].CountDown();                  c.ExpectNext(1);                    latch[3].CountDown();                  c.ExpectNext(3);                    latch[2].CountDown();                  c.ExpectNext(2);                    latch[0].CountDown();                  c.ExpectNext(0);                    c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_produce_task_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var latch = Enumerable.Range(0' 4).Select(_ => new TestLatch(1)).ToArray();                    Source.From(Enumerable.Range(0' 4)).SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      return n;                  })).To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(5);                    latch[1].CountDown();                  c.ExpectNext(1);                    latch[3].CountDown();                  c.ExpectNext(3);                    latch[2].CountDown();                  c.ExpectNext(2);                    latch[0].CountDown();                  c.ExpectNext(0);                    c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_produce_task_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var latch = Enumerable.Range(0' 4).Select(_ => new TestLatch(1)).ToArray();                    Source.From(Enumerable.Range(0' 4)).SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      return n;                  })).To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(5);                    latch[1].CountDown();                  c.ExpectNext(1);                    latch[3].CountDown();                  c.ExpectNext(3);                    latch[2].CountDown();                  c.ExpectNext(2);                    latch[0].CountDown();                  c.ExpectNext(0);                    c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_produce_task_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var latch = Enumerable.Range(0' 4).Select(_ => new TestLatch(1)).ToArray();                    Source.From(Enumerable.Range(0' 4)).SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      return n;                  })).To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(5);                    latch[1].CountDown();                  c.ExpectNext(1);                    latch[3].CountDown();                  c.ExpectNext(3);                    latch[2].CountDown();                  c.ExpectNext(2);                    latch[0].CountDown();                  c.ExpectNext(0);                    c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_produce_task_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var latch = Enumerable.Range(0' 4).Select(_ => new TestLatch(1)).ToArray();                    Source.From(Enumerable.Range(0' 4)).SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      return n;                  })).To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(5);                    latch[1].CountDown();                  c.ExpectNext(1);                    latch[3].CountDown();                  c.ExpectNext(3);                    latch[2].CountDown();                  c.ExpectNext(2);                    latch[0].CountDown();                  c.ExpectNext(0);                    c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_produce_task_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  var latch = Enumerable.Range(0' 4).Select(_ => new TestLatch(1)).ToArray();                    Source.From(Enumerable.Range(0' 4)).SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      return n;                  })).To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(5);                    latch[1].CountDown();                  c.ExpectNext(1);                    latch[3].CountDown();                  c.ExpectNext(3);                    latch[2].CountDown();                  c.ExpectNext(2);                    latch[0].CountDown();                  c.ExpectNext(0);                    c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: Source.From(Enumerable.Range(1' 20))                  .SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      probe.Ref.Tell(n);                      return n;                  }))                  .To(Sink.FromSubscriber(c)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: Source.From(Enumerable.Range(1' 20))                  .SelectAsyncUnordered(4' n => Task.Run(() =>                  {                      probe.Ref.Tell(n);                      return n;                  }))                  .To(Sink.FromSubscriber(c)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: probe.ExpectMsgAllOf(1' 2' 3' 4' 5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: probe.ExpectMsgAllOf(1' 2' 3' 4' 5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: probe.ExpectMsgAllOf(1' 2' 3' 4' 5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: probe.ExpectMsgAllOf(1' 2' 3' 4' 5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: sub.Request(25);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: probe.ExpectMsgAllOf(Enumerable.Range(6' 15).ToArray());
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: probe.ExpectMsgAllOf(Enumerable.Range(6' 15).ToArray());
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: c.Within(TimeSpan.FromSeconds(3)' () =>              {                  Enumerable.Range(2' 19).ForEach(_ => got.Add(c.ExpectNext()));                  return NotUsed.Instance;              });
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: c.Within(TimeSpan.FromSeconds(3)' () =>              {                  Enumerable.Range(2' 19).ForEach(_ => got.Add(c.ExpectNext()));                  return NotUsed.Instance;              });
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: c.Within(TimeSpan.FromSeconds(3)' () =>              {                  Enumerable.Range(2' 19).ForEach(_ => got.Add(c.ExpectNext()));                  return NotUsed.Instance;              });
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_requested_elements,The following statement contains a magic number: got.ShouldAllBeEquivalentTo(Enumerable.Range(1' 20));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsyncUnordered(4' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err1");                            latch.Ready(TimeSpan.FromSeconds(10));                          return n;                      }))                      .To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().InnerException.Message.Should().Be("err1");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsyncUnordered(4' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err1");                            latch.Ready(TimeSpan.FromSeconds(10));                          return n;                      }))                      .To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().InnerException.Message.Should().Be("err1");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsyncUnordered(4' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err1");                            latch.Ready(TimeSpan.FromSeconds(10));                          return n;                      }))                      .To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().InnerException.Message.Should().Be("err1");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsyncUnordered(4' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err1");                            latch.Ready(TimeSpan.FromSeconds(10));                          return n;                      }))                      .To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().InnerException.Message.Should().Be("err1");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsyncUnordered(4' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err1");                            latch.Ready(TimeSpan.FromSeconds(10));                          return n;                      }))                      .To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().InnerException.Message.Should().Be("err1");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_error_from_SelectAsyncUnordered,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsyncUnordered(4' n =>                      {                          if (n == 3)                              throw new TestException("err2");                            return Task.Run(() =>                          {                              latch.Ready(TimeSpan.FromSeconds(10));                              return n;                          });                      })                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().Message.Should().Be("err2");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_error_from_SelectAsyncUnordered,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsyncUnordered(4' n =>                      {                          if (n == 3)                              throw new TestException("err2");                            return Task.Run(() =>                          {                              latch.Ready(TimeSpan.FromSeconds(10));                              return n;                          });                      })                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().Message.Should().Be("err2");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_error_from_SelectAsyncUnordered,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsyncUnordered(4' n =>                      {                          if (n == 3)                              throw new TestException("err2");                            return Task.Run(() =>                          {                              latch.Ready(TimeSpan.FromSeconds(10));                              return n;                          });                      })                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().Message.Should().Be("err2");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_error_from_SelectAsyncUnordered,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsyncUnordered(4' n =>                      {                          if (n == 3)                              throw new TestException("err2");                            return Task.Run(() =>                          {                              latch.Ready(TimeSpan.FromSeconds(10));                              return n;                          });                      })                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().Message.Should().Be("err2");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_error_from_SelectAsyncUnordered,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsyncUnordered(4' n =>                      {                          if (n == 3)                              throw new TestException("err2");                            return Task.Run(() =>                          {                              latch.Ready(TimeSpan.FromSeconds(10));                              return n;                          });                      })                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().Message.Should().Be("err2");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      Source.From(Enumerable.Range(1' 5))                          .SelectAsyncUnordered(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(this.SinkProbe<int>()' Materializer)                          .Request(10)                          .ExpectNextUnordered(1' 2' 4' 5)                          .ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      Source.From(Enumerable.Range(1' 5))                          .SelectAsyncUnordered(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(this.SinkProbe<int>()' Materializer)                          .Request(10)                          .ExpectNextUnordered(1' 2' 4' 5)                          .ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      Source.From(Enumerable.Range(1' 5))                          .SelectAsyncUnordered(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(this.SinkProbe<int>()' Materializer)                          .Request(10)                          .ExpectNextUnordered(1' 2' 4' 5)                          .ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      Source.From(Enumerable.Range(1' 5))                          .SelectAsyncUnordered(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(this.SinkProbe<int>()' Materializer)                          .Request(10)                          .ExpectNextUnordered(1' 2' 4' 5)                          .ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      Source.From(Enumerable.Range(1' 5))                          .SelectAsyncUnordered(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(this.SinkProbe<int>()' Materializer)                          .Request(10)                          .ExpectNextUnordered(1' 2' 4' 5)                          .ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      Source.From(Enumerable.Range(1' 5))                          .SelectAsyncUnordered(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(this.SinkProbe<int>()' Materializer)                          .Request(10)                          .ExpectNextUnordered(1' 2' 4' 5)                          .ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      Source.From(Enumerable.Range(1' 5))                          .SelectAsyncUnordered(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(this.SinkProbe<int>()' Materializer)                          .Request(10)                          .ExpectNextUnordered(1' 2' 4' 5)                          .ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_after_multiple_failures,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futures = new[]                  {                      Task.Run(() => { throw new TestException("failure1"); return "";})'                      Task.Run(() => { throw new TestException("failure2"); return "";})'                      Task.Run(() => { throw new TestException("failure3"); return "";})'                      Task.Run(() => { throw new TestException("failure4"); return "";})'                      Task.Run(() => { throw new TestException("failure5"); return "";})'                      Task.FromResult("happy")                  };                    var t = Source.From(futures)                      .SelectAsyncUnordered(2' x => x)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.First<string>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("happy");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_after_multiple_failures,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futures = new[]                  {                      Task.Run(() => { throw new TestException("failure1"); return "";})'                      Task.Run(() => { throw new TestException("failure2"); return "";})'                      Task.Run(() => { throw new TestException("failure3"); return "";})'                      Task.Run(() => { throw new TestException("failure4"); return "";})'                      Task.Run(() => { throw new TestException("failure5"); return "";})'                      Task.FromResult("happy")                  };                    var t = Source.From(futures)                      .SelectAsyncUnordered(2' x => x)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.First<string>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("happy");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_finish_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 3))                      .SelectAsyncUnordered(1' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err3b");                          return n;                      }))                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_finish_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 3))                      .SelectAsyncUnordered(1' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err3b");                          return n;                      }))                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_finish_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 3))                      .SelectAsyncUnordered(1' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err3b");                          return n;                      }))                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_finish_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 3))                      .SelectAsyncUnordered(1' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err3b");                          return n;                      }))                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_when_SelectAsyncUnordered_throws,The following statement contains a magic number: Source.From(Enumerable.Range(1' 5))                  .SelectAsyncUnordered(4' n =>                  {                      if (n == 3)                          throw new TestException("err4");                      return Task.FromResult(n);                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNextUnordered(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_when_SelectAsyncUnordered_throws,The following statement contains a magic number: Source.From(Enumerable.Range(1' 5))                  .SelectAsyncUnordered(4' n =>                  {                      if (n == 3)                          throw new TestException("err4");                      return Task.FromResult(n);                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNextUnordered(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_when_SelectAsyncUnordered_throws,The following statement contains a magic number: Source.From(Enumerable.Range(1' 5))                  .SelectAsyncUnordered(4' n =>                  {                      if (n == 3)                          throw new TestException("err4");                      return Task.FromResult(n);                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNextUnordered(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_when_SelectAsyncUnordered_throws,The following statement contains a magic number: Source.From(Enumerable.Range(1' 5))                  .SelectAsyncUnordered(4' n =>                  {                      if (n == 3)                          throw new TestException("err4");                      return Task.FromResult(n);                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNextUnordered(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_when_SelectAsyncUnordered_throws,The following statement contains a magic number: Source.From(Enumerable.Range(1' 5))                  .SelectAsyncUnordered(4' n =>                  {                      if (n == 3)                          throw new TestException("err4");                      return Task.FromResult(n);                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNextUnordered(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_when_SelectAsyncUnordered_throws,The following statement contains a magic number: Source.From(Enumerable.Range(1' 5))                  .SelectAsyncUnordered(4' n =>                  {                      if (n == 3)                          throw new TestException("err4");                      return Task.FromResult(n);                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNextUnordered(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_when_SelectAsyncUnordered_throws,The following statement contains a magic number: Source.From(Enumerable.Range(1' 5))                  .SelectAsyncUnordered(4' n =>                  {                      if (n == 3)                          throw new TestException("err4");                      return Task.FromResult(n);                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNextUnordered(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_NPE_when_task_is_completed_with_null,The following statement contains a magic number: Source.From(new[] {"a"' "b"})                  .SelectAsyncUnordered(4' _ => Task.FromResult(null as string))                  .To(Sink.FromSubscriber(c)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_signal_NPE_when_task_is_completed_with_null,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_when_task_is_completed_with_null,The following statement contains a magic number: Source.From(new[] { "a"' "b"' "c" })                  .SelectAsyncUnordered(4' s => s.Equals("b") ? Task.FromResult(null as string) : Task.FromResult(s))                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .To(Sink.FromSubscriber(c)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_resume_when_task_is_completed_with_null,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_handle_cancel_properly,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var pub = TestPublisher.CreateManualProbe<int>(this);                  var sub = TestSubscriber.CreateManualProbe<int>(this);                    Source.FromPublisher(pub)                      .SelectAsyncUnordered(4' _ => Task.FromResult(0))                      .RunWith(Sink.FromSubscriber(sub)' Materializer);                    var upstream = pub.ExpectSubscription();                  upstream.ExpectRequest();                    sub.ExpectSubscription().Cancel();                    upstream.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int parallelism = 8;                  var counter = new AtomicCounter();                  var queue = new BlockingQueue<Tuple<TaskCompletionSource<int>' long>>();                    var timer = new Thread(() =>                  {                      var delay = 500; // 50000 nanoseconds                      var count = 0;                      var cont = true;                      while (cont)                      {                          try                          {                              var t = queue.Take(CancellationToken.None);                              var promise = t.Item1;                              var enqueued = t.Item2;                              var wakeup = enqueued + delay;                              while (DateTime.Now.Ticks < wakeup) { }                              counter.Decrement();                              promise.SetResult(count);                              count++;                          }                          catch                          {                              cont = false;                          }                      }                  });                    timer.Start();                    Func<Task<int>> deferred = () =>                  {                      var promise = new TaskCompletionSource<int>();                      if (counter.IncrementAndGet() > parallelism)                          promise.SetException(new Exception("parallelism exceeded"));                      else                          queue.Enqueue(Tuple.Create(promise' DateTime.Now.Ticks));                      return promise.Task;                  };                    try                  {                      const int n = 10000;                      var task = Source.From(Enumerable.Range(1' n))                          .SelectAsyncUnordered(parallelism' _ => deferred())                          .RunAggregate(0' (c' _) => c + 1' Materializer);                        task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      task.Result.Should().Be(n);                  }                  finally                  {                      timer.Interrupt();                  }              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int parallelism = 8;                  var counter = new AtomicCounter();                  var queue = new BlockingQueue<Tuple<TaskCompletionSource<int>' long>>();                    var timer = new Thread(() =>                  {                      var delay = 500; // 50000 nanoseconds                      var count = 0;                      var cont = true;                      while (cont)                      {                          try                          {                              var t = queue.Take(CancellationToken.None);                              var promise = t.Item1;                              var enqueued = t.Item2;                              var wakeup = enqueued + delay;                              while (DateTime.Now.Ticks < wakeup) { }                              counter.Decrement();                              promise.SetResult(count);                              count++;                          }                          catch                          {                              cont = false;                          }                      }                  });                    timer.Start();                    Func<Task<int>> deferred = () =>                  {                      var promise = new TaskCompletionSource<int>();                      if (counter.IncrementAndGet() > parallelism)                          promise.SetException(new Exception("parallelism exceeded"));                      else                          queue.Enqueue(Tuple.Create(promise' DateTime.Now.Ticks));                      return promise.Task;                  };                    try                  {                      const int n = 10000;                      var task = Source.From(Enumerable.Range(1' n))                          .SelectAsyncUnordered(parallelism' _ => deferred())                          .RunAggregate(0' (c' _) => c + 1' Materializer);                        task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      task.Result.Should().Be(n);                  }                  finally                  {                      timer.Interrupt();                  }              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int parallelism = 8;                  var counter = new AtomicCounter();                  var queue = new BlockingQueue<Tuple<TaskCompletionSource<int>' long>>();                    var timer = new Thread(() =>                  {                      var delay = 500; // 50000 nanoseconds                      var count = 0;                      var cont = true;                      while (cont)                      {                          try                          {                              var t = queue.Take(CancellationToken.None);                              var promise = t.Item1;                              var enqueued = t.Item2;                              var wakeup = enqueued + delay;                              while (DateTime.Now.Ticks < wakeup) { }                              counter.Decrement();                              promise.SetResult(count);                              count++;                          }                          catch                          {                              cont = false;                          }                      }                  });                    timer.Start();                    Func<Task<int>> deferred = () =>                  {                      var promise = new TaskCompletionSource<int>();                      if (counter.IncrementAndGet() > parallelism)                          promise.SetException(new Exception("parallelism exceeded"));                      else                          queue.Enqueue(Tuple.Create(promise' DateTime.Now.Ticks));                      return promise.Task;                  };                    try                  {                      const int n = 10000;                      var task = Source.From(Enumerable.Range(1' n))                          .SelectAsyncUnordered(parallelism' _ => deferred())                          .RunAggregate(0' (c' _) => c + 1' Materializer);                        task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      task.Result.Should().Be(n);                  }                  finally                  {                      timer.Interrupt();                  }              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncUnorderedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncUnorderedSpec .cs,A_Flow_with_SelectAsyncUnordered_must_not_run_more_futures_than_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int parallelism = 8;                  var counter = new AtomicCounter();                  var queue = new BlockingQueue<Tuple<TaskCompletionSource<int>' long>>();                    var timer = new Thread(() =>                  {                      var delay = 500; // 50000 nanoseconds                      var count = 0;                      var cont = true;                      while (cont)                      {                          try                          {                              var t = queue.Take(CancellationToken.None);                              var promise = t.Item1;                              var enqueued = t.Item2;                              var wakeup = enqueued + delay;                              while (DateTime.Now.Ticks < wakeup) { }                              counter.Decrement();                              promise.SetResult(count);                              count++;                          }                          catch                          {                              cont = false;                          }                      }                  });                    timer.Start();                    Func<Task<int>> deferred = () =>                  {                      var promise = new TaskCompletionSource<int>();                      if (counter.IncrementAndGet() > parallelism)                          promise.SetException(new Exception("parallelism exceeded"));                      else                          queue.Enqueue(Tuple.Create(promise' DateTime.Now.Ticks));                      return promise.Task;                  };                    try                  {                      const int n = 10000;                      var task = Source.From(Enumerable.Range(1' n))                          .SelectAsyncUnordered(parallelism' _ => deferred())                          .RunAggregate(0' (c' _) => c + 1' Materializer);                        task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      task.Result.Should().Be(n);                  }                  finally                  {                      timer.Interrupt();                  }              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .SelectAsync(4' Task.FromResult)                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                    sub.Request(2);                  c.ExpectNext(1)                      .ExpectNext(2)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Request(2);                    c.ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .SelectAsync(4' Task.FromResult)                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                    sub.Request(2);                  c.ExpectNext(1)                      .ExpectNext(2)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Request(2);                    c.ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .SelectAsync(4' Task.FromResult)                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                    sub.Request(2);                  c.ExpectNext(1)                      .ExpectNext(2)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Request(2);                    c.ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .SelectAsync(4' Task.FromResult)                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                    sub.Request(2);                  c.ExpectNext(1)                      .ExpectNext(2)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Request(2);                    c.ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .SelectAsync(4' Task.FromResult)                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                    sub.Request(2);                  c.ExpectNext(1)                      .ExpectNext(2)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Request(2);                    c.ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .SelectAsync(4' Task.FromResult)                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                    sub.Request(2);                  c.ExpectNext(1)                      .ExpectNext(2)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Request(2);                    c.ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .SelectAsync(4' Task.FromResult)                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                    sub.Request(2);                  c.ExpectNext(1)                      .ExpectNext(2)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Request(2);                    c.ExpectNext(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements_in_order,The following statement contains a magic number: Source.From(Enumerable.Range(1' 50))                  .SelectAsync(4' i => Task.Run(()=>                  {                      Thread.Sleep(ThreadLocalRandom.Current.Next(1' 10));                      return i;                  }))                  .RunWith(Sink.FromSubscriber(c)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements_in_order,The following statement contains a magic number: Source.From(Enumerable.Range(1' 50))                  .SelectAsync(4' i => Task.Run(()=>                  {                      Thread.Sleep(ThreadLocalRandom.Current.Next(1' 10));                      return i;                  }))                  .RunWith(Sink.FromSubscriber(c)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements_in_order,The following statement contains a magic number: Source.From(Enumerable.Range(1' 50))                  .SelectAsync(4' i => Task.Run(()=>                  {                      Thread.Sleep(ThreadLocalRandom.Current.Next(1' 10));                      return i;                  }))                  .RunWith(Sink.FromSubscriber(c)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements_in_order,The following statement contains a magic number: sub.Request(1000);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_produce_task_elements_in_order,The following statement contains a magic number: Enumerable.Range(1' 50).ForEach(n => c.ExpectNext(n));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: Source.From(Enumerable.Range(1' 20))                  .SelectAsync(8' n => Task.Run(() =>                   {                      probe.Ref.Tell(n);                      return n;                  }))                  .RunWith(Sink.FromSubscriber(c)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: Source.From(Enumerable.Range(1' 20))                  .SelectAsync(8' n => Task.Run(() =>                   {                      probe.Ref.Tell(n);                      return n;                  }))                  .RunWith(Sink.FromSubscriber(c)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ReceiveN(9).ShouldAllBeEquivalentTo(Enumerable.Range(1' 9));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ReceiveN(9).ShouldAllBeEquivalentTo(Enumerable.Range(1' 9));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: sub.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ReceiveN(2).ShouldAllBeEquivalentTo(Enumerable.Range(10' 2));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ReceiveN(2).ShouldAllBeEquivalentTo(Enumerable.Range(10' 2));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ReceiveN(2).ShouldAllBeEquivalentTo(Enumerable.Range(10' 2));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ReceiveN(9).ShouldAllBeEquivalentTo(Enumerable.Range(12' 9));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ReceiveN(9).ShouldAllBeEquivalentTo(Enumerable.Range(12' 9));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ReceiveN(9).ShouldAllBeEquivalentTo(Enumerable.Range(12' 9));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: Enumerable.Range(1' 13).ForEach(n => c.ExpectNext(n));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_requested_parallelism,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsync(4' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err1");                            latch.Ready(TimeSpan.FromSeconds(10));                          return n;                      }))                      .To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().InnerException.Message.Should().Be("err1");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsync(4' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err1");                            latch.Ready(TimeSpan.FromSeconds(10));                          return n;                      }))                      .To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().InnerException.Message.Should().Be("err1");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsync(4' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err1");                            latch.Ready(TimeSpan.FromSeconds(10));                          return n;                      }))                      .To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().InnerException.Message.Should().Be("err1");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsync(4' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err1");                            latch.Ready(TimeSpan.FromSeconds(10));                          return n;                      }))                      .To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().InnerException.Message.Should().Be("err1");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsync(4' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err1");                            latch.Ready(TimeSpan.FromSeconds(10));                          return n;                      }))                      .To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().InnerException.Message.Should().Be("err1");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_error_from_MapAsync,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsync(4' n =>                      {                          if (n == 3)                              throw new TestException("err2");                            return Task.Run(() =>                          {                              latch.Ready(TimeSpan.FromSeconds(10));                              return n;                          });                      })                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().Message.Should().Be("err2");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_error_from_MapAsync,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsync(4' n =>                      {                          if (n == 3)                              throw new TestException("err2");                            return Task.Run(() =>                          {                              latch.Ready(TimeSpan.FromSeconds(10));                              return n;                          });                      })                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().Message.Should().Be("err2");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_error_from_MapAsync,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsync(4' n =>                      {                          if (n == 3)                              throw new TestException("err2");                            return Task.Run(() =>                          {                              latch.Ready(TimeSpan.FromSeconds(10));                              return n;                          });                      })                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().Message.Should().Be("err2");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_error_from_MapAsync,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsync(4' n =>                      {                          if (n == 3)                              throw new TestException("err2");                            return Task.Run(() =>                          {                              latch.Ready(TimeSpan.FromSeconds(10));                              return n;                          });                      })                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().Message.Should().Be("err2");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_error_from_MapAsync,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 5))                      .SelectAsync(4' n =>                      {                          if (n == 3)                              throw new TestException("err2");                            return Task.Run(() =>                          {                              latch.Ready(TimeSpan.FromSeconds(10));                              return n;                          });                      })                      .RunWith(Sink.FromSubscriber(c)' Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(10);                  c.ExpectError().Message.Should().Be("err2");                  latch.CountDown();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      var c = TestSubscriber.CreateManualProbe<int>(this);                      Source.From(Enumerable.Range(1' 5))                          .SelectAsync(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(Sink.FromSubscriber(c)' Materializer);                      var sub = c.ExpectSubscription();                      sub.Request(10);                      new[] {1' 2' 4' 5}.ForEach(i => c.ExpectNext(i));                      c.ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      var c = TestSubscriber.CreateManualProbe<int>(this);                      Source.From(Enumerable.Range(1' 5))                          .SelectAsync(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(Sink.FromSubscriber(c)' Materializer);                      var sub = c.ExpectSubscription();                      sub.Request(10);                      new[] {1' 2' 4' 5}.ForEach(i => c.ExpectNext(i));                      c.ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      var c = TestSubscriber.CreateManualProbe<int>(this);                      Source.From(Enumerable.Range(1' 5))                          .SelectAsync(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(Sink.FromSubscriber(c)' Materializer);                      var sub = c.ExpectSubscription();                      sub.Request(10);                      new[] {1' 2' 4' 5}.ForEach(i => c.ExpectNext(i));                      c.ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      var c = TestSubscriber.CreateManualProbe<int>(this);                      Source.From(Enumerable.Range(1' 5))                          .SelectAsync(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(Sink.FromSubscriber(c)' Materializer);                      var sub = c.ExpectSubscription();                      sub.Request(10);                      new[] {1' 2' 4' 5}.ForEach(i => c.ExpectNext(i));                      c.ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      var c = TestSubscriber.CreateManualProbe<int>(this);                      Source.From(Enumerable.Range(1' 5))                          .SelectAsync(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(Sink.FromSubscriber(c)' Materializer);                      var sub = c.ExpectSubscription();                      sub.Request(10);                      new[] {1' 2' 4' 5}.ForEach(i => c.ExpectNext(i));                      c.ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      var c = TestSubscriber.CreateManualProbe<int>(this);                      Source.From(Enumerable.Range(1' 5))                          .SelectAsync(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(Sink.FromSubscriber(c)' Materializer);                      var sub = c.ExpectSubscription();                      sub.Request(10);                      new[] {1' 2' 4' 5}.ForEach(i => c.ExpectNext(i));                      c.ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  this.AssertAllStagesStopped(() =>                  {                      var c = TestSubscriber.CreateManualProbe<int>(this);                      Source.From(Enumerable.Range(1' 5))                          .SelectAsync(4' n => Task.Run(() =>                          {                              if (n == 3)                                  throw new TestException("err3");                              return n;                          }))                          .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                          .RunWith(Sink.FromSubscriber(c)' Materializer);                      var sub = c.ExpectSubscription();                      sub.Request(10);                      new[] {1' 2' 4' 5}.ForEach(i => c.ExpectNext(i));                      c.ExpectComplete();                  }' Materializer);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_after_multiple_failures,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futures = new[]                  {                      Task.Run(() => { throw new TestException("failure1"); return "";})'                      Task.Run(() => { throw new TestException("failure2"); return "";})'                      Task.Run(() => { throw new TestException("failure3"); return "";})'                      Task.Run(() => { throw new TestException("failure4"); return "";})'                      Task.Run(() => { throw new TestException("failure5"); return "";})'                      Task.FromResult("happy")                  };                    var t = Source.From(futures)                      .SelectAsync(2' x => x)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.First<string>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("happy");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_after_multiple_failures,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futures = new[]                  {                      Task.Run(() => { throw new TestException("failure1"); return "";})'                      Task.Run(() => { throw new TestException("failure2"); return "";})'                      Task.Run(() => { throw new TestException("failure3"); return "";})'                      Task.Run(() => { throw new TestException("failure4"); return "";})'                      Task.Run(() => { throw new TestException("failure5"); return "";})'                      Task.FromResult("happy")                  };                    var t = Source.From(futures)                      .SelectAsync(2' x => x)                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(Sink.First<string>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be("happy");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_finish_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 3))                      .SelectAsync(1' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err3b");                          return n;                      }))                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_finish_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 3))                      .SelectAsync(1' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err3b");                          return n;                      }))                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_finish_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 3))                      .SelectAsync(1' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err3b");                          return n;                      }))                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_finish_after_task_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 3))                      .SelectAsync(1' n => Task.Run(() =>                      {                          if (n == 3)                              throw new TestException("err3b");                          return n;                      }))                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_when_SelectAsync_throws,The following statement contains a magic number: Source.From(Enumerable.Range(1' 5))                  .SelectAsync(4' n =>                  {                      if (n == 3)                          throw new TestException("err4");                      return Task.FromResult(n);                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(Sink.FromSubscriber(c)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_when_SelectAsync_throws,The following statement contains a magic number: Source.From(Enumerable.Range(1' 5))                  .SelectAsync(4' n =>                  {                      if (n == 3)                          throw new TestException("err4");                      return Task.FromResult(n);                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(Sink.FromSubscriber(c)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_when_SelectAsync_throws,The following statement contains a magic number: Source.From(Enumerable.Range(1' 5))                  .SelectAsync(4' n =>                  {                      if (n == 3)                          throw new TestException("err4");                      return Task.FromResult(n);                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(Sink.FromSubscriber(c)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_when_SelectAsync_throws,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_when_SelectAsync_throws,The following statement contains a magic number: new[] {1' 2' 4' 5}.ForEach(i => c.ExpectNext(i));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_when_SelectAsync_throws,The following statement contains a magic number: new[] {1' 2' 4' 5}.ForEach(i => c.ExpectNext(i));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_when_SelectAsync_throws,The following statement contains a magic number: new[] {1' 2' 4' 5}.ForEach(i => c.ExpectNext(i));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_NPE_when_task_is_completed_with_null,The following statement contains a magic number: Source.From(new[] {"a"' "b"})                  .SelectAsync(4' _ => Task.FromResult(null as string))                  .To(Sink.FromSubscriber(c)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_signal_NPE_when_task_is_completed_with_null,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_when_task_is_completed_with_null,The following statement contains a magic number: Source.From(new[] { "a"' "b"' "c" })                  .SelectAsync(4' s => s.Equals("b") ? Task.FromResult(null as string) : Task.FromResult(s))                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .To(Sink.FromSubscriber(c)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_resume_when_task_is_completed_with_null,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_handle_cancel_properly,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var pub = TestPublisher.CreateManualProbe<int>(this);                  var sub = TestSubscriber.CreateManualProbe<int>(this);                    Source.FromPublisher(pub)                      .SelectAsync(4' _ => Task.FromResult(0))                      .RunWith(Sink.FromSubscriber(sub)' Materializer);                    var upstream = pub.ExpectSubscription();                  upstream.ExpectRequest();                    sub.ExpectSubscription().Cancel();                    upstream.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int parallelism = 8;                  var counter = new AtomicCounter();                  var queue = new BlockingQueue<Tuple<TaskCompletionSource<int>' long>>();                    var timer = new Thread(() =>                  {                      var delay = 500; // 50000 nanoseconds                      var count = 0;                      var cont = true;                      while (cont)                      {                          try                          {                              var t = queue.Take(CancellationToken.None);                              var promise = t.Item1;                              var enqueued = t.Item2;                              var wakeup = enqueued + delay;                              while (DateTime.Now.Ticks < wakeup) { }                              counter.Decrement();                              promise.SetResult(count);                              count++;                          }                          catch                          {                              cont = false;                          }                      }                  });                    timer.Start();                    Func<Task<int>> deferred = () =>                  {                      var promise = new TaskCompletionSource<int>();                      if (counter.IncrementAndGet() > parallelism)                          promise.SetException(new Exception("parallelism exceeded"));                      else                            queue.Enqueue(Tuple.Create(promise' DateTime.Now.Ticks));                      return promise.Task;                  };                    try                  {                      const int n = 10000;                      var task = Source.From(Enumerable.Range(1' n))                          .SelectAsync(parallelism' _ => deferred())                          .RunAggregate(0' (c' _) => c + 1' Materializer);                        task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      task.Result.Should().Be(n);                  }                  finally                  {                      timer.Interrupt();                  }              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int parallelism = 8;                  var counter = new AtomicCounter();                  var queue = new BlockingQueue<Tuple<TaskCompletionSource<int>' long>>();                    var timer = new Thread(() =>                  {                      var delay = 500; // 50000 nanoseconds                      var count = 0;                      var cont = true;                      while (cont)                      {                          try                          {                              var t = queue.Take(CancellationToken.None);                              var promise = t.Item1;                              var enqueued = t.Item2;                              var wakeup = enqueued + delay;                              while (DateTime.Now.Ticks < wakeup) { }                              counter.Decrement();                              promise.SetResult(count);                              count++;                          }                          catch                          {                              cont = false;                          }                      }                  });                    timer.Start();                    Func<Task<int>> deferred = () =>                  {                      var promise = new TaskCompletionSource<int>();                      if (counter.IncrementAndGet() > parallelism)                          promise.SetException(new Exception("parallelism exceeded"));                      else                            queue.Enqueue(Tuple.Create(promise' DateTime.Now.Ticks));                      return promise.Task;                  };                    try                  {                      const int n = 10000;                      var task = Source.From(Enumerable.Range(1' n))                          .SelectAsync(parallelism' _ => deferred())                          .RunAggregate(0' (c' _) => c + 1' Materializer);                        task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      task.Result.Should().Be(n);                  }                  finally                  {                      timer.Interrupt();                  }              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int parallelism = 8;                  var counter = new AtomicCounter();                  var queue = new BlockingQueue<Tuple<TaskCompletionSource<int>' long>>();                    var timer = new Thread(() =>                  {                      var delay = 500; // 50000 nanoseconds                      var count = 0;                      var cont = true;                      while (cont)                      {                          try                          {                              var t = queue.Take(CancellationToken.None);                              var promise = t.Item1;                              var enqueued = t.Item2;                              var wakeup = enqueued + delay;                              while (DateTime.Now.Ticks < wakeup) { }                              counter.Decrement();                              promise.SetResult(count);                              count++;                          }                          catch                          {                              cont = false;                          }                      }                  });                    timer.Start();                    Func<Task<int>> deferred = () =>                  {                      var promise = new TaskCompletionSource<int>();                      if (counter.IncrementAndGet() > parallelism)                          promise.SetException(new Exception("parallelism exceeded"));                      else                            queue.Enqueue(Tuple.Create(promise' DateTime.Now.Ticks));                      return promise.Task;                  };                    try                  {                      const int n = 10000;                      var task = Source.From(Enumerable.Range(1' n))                          .SelectAsync(parallelism' _ => deferred())                          .RunAggregate(0' (c' _) => c + 1' Materializer);                        task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      task.Result.Should().Be(n);                  }                  finally                  {                      timer.Interrupt();                  }              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectAsyncSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectAsyncSpec.cs,A_Flow_with_SelectAsync_must_not_run_more_futures_than_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int parallelism = 8;                  var counter = new AtomicCounter();                  var queue = new BlockingQueue<Tuple<TaskCompletionSource<int>' long>>();                    var timer = new Thread(() =>                  {                      var delay = 500; // 50000 nanoseconds                      var count = 0;                      var cont = true;                      while (cont)                      {                          try                          {                              var t = queue.Take(CancellationToken.None);                              var promise = t.Item1;                              var enqueued = t.Item2;                              var wakeup = enqueued + delay;                              while (DateTime.Now.Ticks < wakeup) { }                              counter.Decrement();                              promise.SetResult(count);                              count++;                          }                          catch                          {                              cont = false;                          }                      }                  });                    timer.Start();                    Func<Task<int>> deferred = () =>                  {                      var promise = new TaskCompletionSource<int>();                      if (counter.IncrementAndGet() > parallelism)                          promise.SetException(new Exception("parallelism exceeded"));                      else                            queue.Enqueue(Tuple.Create(promise' DateTime.Now.Ticks));                      return promise.Task;                  };                    try                  {                      const int n = 10000;                      var task = Source.From(Enumerable.Range(1' n))                          .SelectAsync(parallelism' _ => deferred())                          .RunAggregate(0' (c' _) => c + 1' Materializer);                        task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      task.Result.Should().Be(n);                  }                  finally                  {                      timer.Interrupt();                  }              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input size (4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(new List<int>());                  var source3 = Source.From(Enumerable.Range(4' 6));                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    source1                      .Merge(source2)                      .Merge(source3)                      .Select(i => i*2)                      .Select(i => i/2)                      .Select(i => i+1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input size (4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(new List<int>());                  var source3 = Source.From(Enumerable.Range(4' 6));                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    source1                      .Merge(source2)                      .Merge(source3)                      .Select(i => i*2)                      .Select(i => i/2)                      .Select(i => i+1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input size (4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(new List<int>());                  var source3 = Source.From(Enumerable.Range(4' 6));                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    source1                      .Merge(source2)                      .Merge(source3)                      .Select(i => i*2)                      .Select(i => i/2)                      .Select(i => i+1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input size (4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(new List<int>());                  var source3 = Source.From(Enumerable.Range(4' 6));                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    source1                      .Merge(source2)                      .Merge(source3)                      .Select(i => i*2)                      .Select(i => i/2)                      .Select(i => i+1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input size (4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(new List<int>());                  var source3 = Source.From(Enumerable.Range(4' 6));                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    source1                      .Merge(source2)                      .Merge(source3)                      .Select(i => i*2)                      .Select(i => i/2)                      .Select(i => i+1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input size (4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(new List<int>());                  var source3 = Source.From(Enumerable.Range(4' 6));                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    source1                      .Merge(source2)                      .Merge(source3)                      .Select(i => i*2)                      .Select(i => i/2)                      .Select(i => i+1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input size (4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(new List<int>());                  var source3 = Source.From(Enumerable.Range(4' 6));                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    source1                      .Merge(source2)                      .Merge(source3)                      .Select(i => i*2)                      .Select(i => i/2)                      .Select(i => i+1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);                    var subscription = probe.ExpectSubscription();                    var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1'4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1'4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1'4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1'4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1'4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1'4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowMergeSpec.cs,A_Merge_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.EnsureSubscription();                  subscription1.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber1.ExpectNext());                  subscriber1.ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.EnsureSubscription();                  subscription2.Request(4);                  Enumerable.Range(1' 4).ForEach(_ => subscriber2.ExpectNext());                  subscriber2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowOnCompleteSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowOnCompleteSpec.cs,FlowOnCompleteSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowOnCompleteSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowOnCompleteSpec.cs,FlowOnCompleteSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowOnCompleteSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowOnCompleteSpec.cs,A_Flow_with_OnComplete_must_invoke_callback_on_normal_completion,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var onCompleteProbe = CreateTestProbe();                  var p = TestPublisher.CreateManualProbe<int>(this);                  Source.FromPublisher(p)                      .To(Sink.OnComplete<int>(() => onCompleteProbe.Ref.Tell("done")' _ => { }))                      .Run(Materializer);                  var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  proc.SendNext(42);                  onCompleteProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  proc.SendComplete();                  onCompleteProbe.ExpectMsg("done");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowOnCompleteSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowOnCompleteSpec.cs,A_Flow_with_OnComplete_must_invoke_callback_on_normal_completion,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var onCompleteProbe = CreateTestProbe();                  var p = TestPublisher.CreateManualProbe<int>(this);                  Source.FromPublisher(p)                      .To(Sink.OnComplete<int>(() => onCompleteProbe.Ref.Tell("done")' _ => { }))                      .Run(Materializer);                  var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  proc.SendNext(42);                  onCompleteProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  proc.SendComplete();                  onCompleteProbe.ExpectMsg("done");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowOnCompleteSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowOnCompleteSpec.cs,A_Flow_with_OnComplete_must_yield_the_first_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var onCompleteProbe = CreateTestProbe();                  var p = TestPublisher.CreateManualProbe<int>(this);                  Source.FromPublisher(p)                      .To(Sink.OnComplete<int>(() => {}' ex => onCompleteProbe.Ref.Tell(ex)))                      .Run(Materializer);                  var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  var cause = new TestException("test");                  proc.SendError(cause);                  onCompleteProbe.ExpectMsg(cause);                  onCompleteProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowOnCompleteSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowOnCompleteSpec.cs,A_Flow_with_OnComplete_must_invoke_callback_for_an_empty_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var onCompleteProbe = CreateTestProbe();                  var p = TestPublisher.CreateManualProbe<int>(this);                  Source.FromPublisher(p)                      .To(Sink.OnComplete<int>(() => onCompleteProbe.Ref.Tell("done")' _ => {}))                      .Run(Materializer);                  var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  proc.SendComplete();                  onCompleteProbe.ExpectMsg("done");                  onCompleteProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowOnCompleteSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowOnCompleteSpec.cs,A_Flow_with_OnComplete_must_invoke_callback_after_transform_and_foreach_steps,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var onCompleteProbe = CreateTestProbe();                  var p = TestPublisher.CreateManualProbe<int>(this);                  var foreachSink = Sink.ForEach<int>(x => onCompleteProbe.Ref.Tell("foreach-" + x));                  var future = Source.FromPublisher(p).Select(x =>                  {                      onCompleteProbe.Ref.Tell("map-" + x);                      return x;                  }).RunWith(foreachSink' Materializer);                  future.ContinueWith(t => onCompleteProbe.Tell(t.IsCompleted ? "done" : "failure"));                                    var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  proc.SendNext(42);                  proc.SendComplete();                  onCompleteProbe.ExpectMsg("map-42");                  onCompleteProbe.ExpectMsg("foreach-42");                  onCompleteProbe.ExpectMsg("done");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,FlowPrefixAndTailSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2'2);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,FlowPrefixAndTailSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2'2);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_empty_input,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.Empty<int>().PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var tailFlow = fut.Result.Item2;                  var tailSubscriber = TestSubscriber.CreateManualProbe<int>(this);                  tailFlow.To(Sink.FromSubscriber(tailSubscriber)).Run(Materializer);                  tailSubscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_empty_input,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.Empty<int>().PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var tailFlow = fut.Result.Item2;                  var tailSubscriber = TestSubscriber.CreateManualProbe<int>(this);                  tailFlow.To(Sink.FromSubscriber(tailSubscriber)).Run(Materializer);                  tailSubscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_short_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(new [] {1'2'3}).PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(new[] {1' 2' 3});                  var tailFlow = fut.Result.Item2;                  var tailSubscriber = TestSubscriber.CreateManualProbe<int>(this);                  tailFlow.To(Sink.FromSubscriber(tailSubscriber)).Run(Materializer);                  tailSubscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_short_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(new [] {1'2'3}).PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(new[] {1' 2' 3});                  var tailFlow = fut.Result.Item2;                  var tailSubscriber = TestSubscriber.CreateManualProbe<int>(this);                  tailFlow.To(Sink.FromSubscriber(tailSubscriber)).Run(Materializer);                  tailSubscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_short_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(new [] {1'2'3}).PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(new[] {1' 2' 3});                  var tailFlow = fut.Result.Item2;                  var tailSubscriber = TestSubscriber.CreateManualProbe<int>(this);                  tailFlow.To(Sink.FromSubscriber(tailSubscriber)).Run(Materializer);                  tailSubscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_short_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(new [] {1'2'3}).PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(new[] {1' 2' 3});                  var tailFlow = fut.Result.Item2;                  var tailSubscriber = TestSubscriber.CreateManualProbe<int>(this);                  tailFlow.To(Sink.FromSubscriber(tailSubscriber)).Run(Materializer);                  tailSubscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_short_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(new [] {1'2'3}).PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(new[] {1' 2' 3});                  var tailFlow = fut.Result.Item2;                  var tailSubscriber = TestSubscriber.CreateManualProbe<int>(this);                  tailFlow.To(Sink.FromSubscriber(tailSubscriber)).Run(Materializer);                  tailSubscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_short_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(new [] {1'2'3}).PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(new[] {1' 2' 3});                  var tailFlow = fut.Result.Item2;                  var tailSubscriber = TestSubscriber.CreateManualProbe<int>(this);                  tailFlow.To(Sink.FromSubscriber(tailSubscriber)).Run(Materializer);                  tailSubscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_longer_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(5).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var takes = fut.Result.Item1;                  var tail = fut.Result.Item2;                  takes.Should().Equal(Enumerable.Range(1' 5));                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(6).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(6' 5));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_longer_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(5).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var takes = fut.Result.Item1;                  var tail = fut.Result.Item2;                  takes.Should().Equal(Enumerable.Range(1' 5));                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(6).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(6' 5));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_longer_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(5).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var takes = fut.Result.Item1;                  var tail = fut.Result.Item2;                  takes.Should().Equal(Enumerable.Range(1' 5));                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(6).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(6' 5));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_longer_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(5).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var takes = fut.Result.Item1;                  var tail = fut.Result.Item2;                  takes.Should().Equal(Enumerable.Range(1' 5));                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(6).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(6' 5));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_longer_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(5).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var takes = fut.Result.Item1;                  var tail = fut.Result.Item2;                  takes.Should().Equal(Enumerable.Range(1' 5));                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(6).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(6' 5));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_longer_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(5).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var takes = fut.Result.Item1;                  var tail = fut.Result.Item2;                  takes.Should().Equal(Enumerable.Range(1' 5));                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(6).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(6' 5));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_longer_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(5).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var takes = fut.Result.Item1;                  var tail = fut.Result.Item2;                  takes.Should().Equal(Enumerable.Range(1' 5));                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(6).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(6' 5));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_on_longer_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(5).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var takes = fut.Result.Item1;                  var tail = fut.Result.Item2;                  takes.Should().Equal(Enumerable.Range(1' 5));                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(6).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(6' 5));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_zero_take_count,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(0).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().BeEmpty();                  var tail = fut.Result.Item2;                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(11).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_zero_take_count,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(0).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().BeEmpty();                  var tail = fut.Result.Item2;                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(11).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_zero_take_count,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(0).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().BeEmpty();                  var tail = fut.Result.Item2;                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(11).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_zero_take_count,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(0).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().BeEmpty();                  var tail = fut.Result.Item2;                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(11).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_zero_take_count,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(0).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().BeEmpty();                  var tail = fut.Result.Item2;                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(11).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_negative_take_count,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(-1).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().BeEmpty();                  var tail = fut.Result.Item2;                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(11).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_negative_take_count,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(-1).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().BeEmpty();                  var tail = fut.Result.Item2;                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(11).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_negative_take_count,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(-1).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().BeEmpty();                  var tail = fut.Result.Item2;                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(11).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_negative_take_count,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(-1).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().BeEmpty();                  var tail = fut.Result.Item2;                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(11).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_negative_take_count,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 10)).PrefixAndTail(-1).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().BeEmpty();                  var tail = fut.Result.Item2;                    var futureSink2 = Sink.First<IEnumerable<int>>();                  var fut2 = tail.Grouped(11).RunWith(futureSink2' Materializer);                  fut2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut2.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_if_size_of_tak_is_equal_to_stream_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1'10)).PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  var tail = fut.Result.Item2;                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  tail.To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  subscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_if_size_of_tak_is_equal_to_stream_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1'10)).PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  var tail = fut.Result.Item2;                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  tail.To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  subscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_if_size_of_tak_is_equal_to_stream_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1'10)).PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  var tail = fut.Result.Item2;                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  tail.To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  subscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_if_size_of_tak_is_equal_to_stream_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1'10)).PrefixAndTail(10).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));                  var tail = fut.Result.Item2;                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                  tail.To(Sink.FromSubscriber(subscriber)).Run(Materializer);                  subscriber.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_throw_if_tail_is_attempted_to_be_materialized_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 2)).PrefixAndTail(1).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1));                  var tail = fut.Result.Item2;                    var subscriber1 = TestSubscriber.CreateProbe<int>(this);                  tail.To(Sink.FromSubscriber(subscriber1)).Run(Materializer);                    var subscriber2 = TestSubscriber.CreateProbe<int>(this);                  tail.To(Sink.FromSubscriber(subscriber2)).Run(Materializer);                    subscriber2.ExpectSubscriptionAndError()                      .Message.Should()                      .Be("Substream Source cannot be materialized more than once");                  subscriber1.RequestNext(2).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_throw_if_tail_is_attempted_to_be_materialized_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 2)).PrefixAndTail(1).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1));                  var tail = fut.Result.Item2;                    var subscriber1 = TestSubscriber.CreateProbe<int>(this);                  tail.To(Sink.FromSubscriber(subscriber1)).Run(Materializer);                    var subscriber2 = TestSubscriber.CreateProbe<int>(this);                  tail.To(Sink.FromSubscriber(subscriber2)).Run(Materializer);                    subscriber2.ExpectSubscriptionAndError()                      .Message.Should()                      .Be("Substream Source cannot be materialized more than once");                  subscriber1.RequestNext(2).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_throw_if_tail_is_attempted_to_be_materialized_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 2)).PrefixAndTail(1).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1));                  var tail = fut.Result.Item2;                    var subscriber1 = TestSubscriber.CreateProbe<int>(this);                  tail.To(Sink.FromSubscriber(subscriber1)).Run(Materializer);                    var subscriber2 = TestSubscriber.CreateProbe<int>(this);                  tail.To(Sink.FromSubscriber(subscriber2)).Run(Materializer);                    subscriber2.ExpectSubscriptionAndError()                      .Message.Should()                      .Be("Substream Source cannot be materialized more than once");                  subscriber1.RequestNext(2).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_signal_error_if_substream_has_been_not_subscribed_in_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var settings = ActorMaterializerSettings.Create(Sys)                      .WithSubscriptionTimeoutSettings(                          new StreamSubscriptionTimeoutSettings(                              StreamSubscriptionTimeoutTerminationMode.CancelTermination'                              TimeSpan.FromMilliseconds(500)));                  var tightTimeoutMaterializer = ActorMaterializer.Create(Sys' settings);                    var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 2)).PrefixAndTail(1).RunWith(futureSink' tightTimeoutMaterializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1));                  var tail = fut.Result.Item2;                    var subscriber = TestSubscriber.CreateProbe<int>(this);                  Thread.Sleep(1000);                  tail.To(Sink.FromSubscriber(subscriber)).Run(tightTimeoutMaterializer);                  subscriber.ExpectSubscriptionAndError()                      .Message.Should()                      .Be("Substream Source has not been materialized in 00:00:00.5000000");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_signal_error_if_substream_has_been_not_subscribed_in_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var settings = ActorMaterializerSettings.Create(Sys)                      .WithSubscriptionTimeoutSettings(                          new StreamSubscriptionTimeoutSettings(                              StreamSubscriptionTimeoutTerminationMode.CancelTermination'                              TimeSpan.FromMilliseconds(500)));                  var tightTimeoutMaterializer = ActorMaterializer.Create(Sys' settings);                    var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 2)).PrefixAndTail(1).RunWith(futureSink' tightTimeoutMaterializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1));                  var tail = fut.Result.Item2;                    var subscriber = TestSubscriber.CreateProbe<int>(this);                  Thread.Sleep(1000);                  tail.To(Sink.FromSubscriber(subscriber)).Run(tightTimeoutMaterializer);                  subscriber.ExpectSubscriptionAndError()                      .Message.Should()                      .Be("Substream Source has not been materialized in 00:00:00.5000000");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_signal_error_if_substream_has_been_not_subscribed_in_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var settings = ActorMaterializerSettings.Create(Sys)                      .WithSubscriptionTimeoutSettings(                          new StreamSubscriptionTimeoutSettings(                              StreamSubscriptionTimeoutTerminationMode.CancelTermination'                              TimeSpan.FromMilliseconds(500)));                  var tightTimeoutMaterializer = ActorMaterializer.Create(Sys' settings);                    var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 2)).PrefixAndTail(1).RunWith(futureSink' tightTimeoutMaterializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1));                  var tail = fut.Result.Item2;                    var subscriber = TestSubscriber.CreateProbe<int>(this);                  Thread.Sleep(1000);                  tail.To(Sink.FromSubscriber(subscriber)).Run(tightTimeoutMaterializer);                  subscriber.ExpectSubscriptionAndError()                      .Message.Should()                      .Be("Substream Source has not been materialized in 00:00:00.5000000");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_signal_error_if_substream_has_been_not_subscribed_in_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var settings = ActorMaterializerSettings.Create(Sys)                      .WithSubscriptionTimeoutSettings(                          new StreamSubscriptionTimeoutSettings(                              StreamSubscriptionTimeoutTerminationMode.CancelTermination'                              TimeSpan.FromMilliseconds(500)));                  var tightTimeoutMaterializer = ActorMaterializer.Create(Sys' settings);                    var futureSink = NewHeadSink;                  var fut = Source.From(Enumerable.Range(1' 2)).PrefixAndTail(1).RunWith(futureSink' tightTimeoutMaterializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1));                  var tail = fut.Result.Item2;                    var subscriber = TestSubscriber.CreateProbe<int>(this);                  Thread.Sleep(1000);                  tail.To(Sink.FromSubscriber(subscriber)).Run(tightTimeoutMaterializer);                  subscriber.ExpectSubscriptionAndError()                      .Message.Should()                      .Be("Substream Source has not been materialized in 00:00:00.5000000");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_shut_down_main_stage_if_substream_is_empty_even_when_not_subscribed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var futureSink = NewHeadSink;                  var fut = Source.Single(1).PrefixAndTail(1).RunWith(futureSink' Materializer);                  fut.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  fut.Result.Item1.Should().ContainSingle(i => i == 1);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_OnError_when_no_substream_is_open,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateManualProbe<int>(this);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<IImmutableList<int>' Source<int' NotUsed>>>(this);                    Source.FromPublisher(publisher)                      .PrefixAndTail(3)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var upstream = publisher.ExpectSubscription();                  var downstream = subscriber.ExpectSubscription();                    downstream.Request(1);                    upstream.ExpectRequest();                  upstream.SendNext(1);                  upstream.SendError(TestException);                    subscriber.ExpectError().Should().Be(TestException);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_OnError_when_substream_is_open,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateManualProbe<int>(this);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<IImmutableList<int>' Source<int' NotUsed>>>(this);                    Source.FromPublisher(publisher)                      .PrefixAndTail(1)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var upstream = publisher.ExpectSubscription();                  var downstream = subscriber.ExpectSubscription();                    downstream.Request(1000);                    upstream.ExpectRequest();                  upstream.SendNext(1);                    var t = subscriber.ExpectNext();                  t.Item1.Should().ContainSingle(i => i == 1);                  var tail = t.Item2;                  subscriber.ExpectComplete();                    var substreamSubscriber = TestSubscriber.CreateManualProbe<int>(this);                  tail.To(Sink.FromSubscriber(substreamSubscriber)).Run(Materializer);                  substreamSubscriber.ExpectSubscription();                  upstream.SendError(TestException);                  substreamSubscriber.ExpectError().Should().Be(TestException);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_master_stream_cancellation,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateManualProbe<int>(this);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<IImmutableList<int>' Source<int' NotUsed>>>(this);                    Source.FromPublisher(publisher)                      .PrefixAndTail(3)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var upstream = publisher.ExpectSubscription();                  var downstream = subscriber.ExpectSubscription();                    downstream.Request(1);                    upstream.ExpectRequest();                  upstream.SendNext(1);                    downstream.Cancel();                  upstream.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_handle_substream_cacellation,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateManualProbe<int>(this);                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<IImmutableList<int>' Source<int' NotUsed>>>(this);                    Source.FromPublisher(publisher)                      .PrefixAndTail(1)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var upstream = publisher.ExpectSubscription();                  var downstream = subscriber.ExpectSubscription();                    downstream.Request(1000);                    upstream.ExpectRequest();                  upstream.SendNext(1);                    var t = subscriber.ExpectNext();                  t.Item1.Should().ContainSingle(i => i == 1);                  var tail = t.Item2;                  subscriber.ExpectComplete();                    var substreamSubscriber = TestSubscriber.CreateManualProbe<int>(this);                  tail.To(Sink.FromSubscriber(substreamSubscriber)).Run(Materializer);                  substreamSubscriber.ExpectSubscription().Cancel();                    upstream.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowPrefixAndTailSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowPrefixAndTailSpec.cs,PrefixAndTail_must_work_even_if_tail_subscriber_arrives_after_substream_completion,The following statement contains a magic number: f.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverSpec.cs,A_Recover_must_recover_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  })                      .Recover(_ => new Option<int>(0))                      .Select(x => x.Value)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .RequestNext(1)                      .RequestNext(2)                      .RequestNext(0)                      .Request(1)                      .ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverSpec.cs,A_Recover_must_recover_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  })                      .Recover(_ => new Option<int>(0))                      .Select(x => x.Value)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .RequestNext(1)                      .RequestNext(2)                      .RequestNext(0)                      .Request(1)                      .ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverSpec.cs,A_Recover_must_recover_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  })                      .Recover(_ => new Option<int>(0))                      .Select(x => x.Value)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .RequestNext(1)                      .RequestNext(2)                      .RequestNext(0)                      .Request(1)                      .ExpectComplete();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverSpec.cs,A_Recover_must_failed_stream_if_handler_is_not_for_such_exception_type,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 2)                          throw Ex;                      return x;                  })                      .Recover(_ => Option<int>.None)                      .Select(x=>x.Value)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .RequestNext(1)                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverSpec.cs,A_Recover_must_failed_stream_if_handler_is_not_for_such_exception_type,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 2)                          throw Ex;                      return x;                  })                      .Recover(_ => Option<int>.None)                      .Select(x=>x.Value)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .RequestNext(1)                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverSpec.cs,A_Recover_must_not_influece_stream_when_there_is_no_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                      .Select(x => x)                      .Recover(_ => new Option<int>(0))                      .Select(x => x.Value)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1' 2' 3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverSpec.cs,A_Recover_must_not_influece_stream_when_there_is_no_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                      .Select(x => x)                      .Recover(_ => new Option<int>(0))                      .Select(x => x.Value)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1' 2' 3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverSpec.cs,A_Recover_must_not_influece_stream_when_there_is_no_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                      .Select(x => x)                      .Recover(_ => new Option<int>(0))                      .Select(x => x.Value)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1' 2' 3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverSpec.cs,A_Recover_must_not_influece_stream_when_there_is_no_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                      .Select(x => x)                      .Recover(_ => new Option<int>(0))                      .Select(x => x.Value)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1' 2' 3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_recover_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  }).RecoverWith(_ => Source.From(new[] {0' -1})).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1)                      .ExpectNext(2);                    probe                      .Request(1)                      .ExpectNext(0);                    probe                      .Request(1)                      .ExpectNext(-1)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_recover_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  }).RecoverWith(_ => Source.From(new[] {0' -1})).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1)                      .ExpectNext(2);                    probe                      .Request(1)                      .ExpectNext(0);                    probe                      .Request(1)                      .ExpectNext(-1)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_recover_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  }).RecoverWith(_ => Source.From(new[] {0' -1})).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1)                      .ExpectNext(2);                    probe                      .Request(1)                      .ExpectNext(0);                    probe                      .Request(1)                      .ExpectNext(-1)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_recover_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  }).RecoverWith(_ => Source.From(new[] {0' -1})).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1)                      .ExpectNext(2);                    probe                      .Request(1)                      .ExpectNext(0);                    probe                      .Request(1)                      .ExpectNext(-1)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_cancel_substream_if_parent_is_terminated_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  }).RecoverWith(_ => Source.From(new[] {0' -1})).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(0);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_cancel_substream_if_parent_is_terminated_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  }).RecoverWith(_ => Source.From(new[] {0' -1})).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(0);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_cancel_substream_if_parent_is_terminated_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  }).RecoverWith(_ => Source.From(new[] {0' -1})).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(0);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_cancel_substream_if_parent_is_terminated_when_there_is_a_handler,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 4)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  }).RecoverWith(_ => Source.From(new[] {0' -1})).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(0);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_failed_stream_if_handler_is_not_for_such_exception_type,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 2)                          throw Ex;                      return x;                  }).RecoverWith(_ => null).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(1)                      .ExpectNext(1);                    probe                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_failed_stream_if_handler_is_not_for_such_exception_type,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 2)                          throw Ex;                      return x;                  }).RecoverWith(_ => null).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(1)                      .ExpectNext(1);                    probe                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_be_able_to_recover_with_the_same_unmaterialized_source_if_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var src = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  });                  var probe = src.RecoverWith(_ => src).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_be_able_to_recover_with_the_same_unmaterialized_source_if_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var src = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  });                  var probe = src.RecoverWith(_ => src).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_be_able_to_recover_with_the_same_unmaterialized_source_if_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var src = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  });                  var probe = src.RecoverWith(_ => src).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_be_able_to_recover_with_the_same_unmaterialized_source_if_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var src = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  });                  var probe = src.RecoverWith(_ => src).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_be_able_to_recover_with_the_same_unmaterialized_source_if_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var src = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  });                  var probe = src.RecoverWith(_ => src).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_be_able_to_recover_with_the_same_unmaterialized_source_if_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var src = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  });                  var probe = src.RecoverWith(_ => src).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_be_able_to_recover_with_the_same_unmaterialized_source_if_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var src = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  });                  var probe = src.RecoverWith(_ => src).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_be_able_to_recover_with_the_same_unmaterialized_source_if_configured,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var src = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw Ex;                      return x;                  });                  var probe = src.RecoverWith(_ => src).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_not_influece_stream_when_there_is_no_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                      .Select(x => x)                      .RecoverWith(_ => Source.Single(0))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1' 2' 3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_not_influece_stream_when_there_is_no_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                      .Select(x => x)                      .RecoverWith(_ => Source.Single(0))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1' 2' 3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_not_influece_stream_when_there_is_no_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                      .Select(x => x)                      .RecoverWith(_ => Source.Single(0))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1' 2' 3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_not_influece_stream_when_there_is_no_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 3))                      .Select(x => x)                      .RecoverWith(_ => Source.Single(0))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1' 2' 3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_finish_stream_if_it_is_empty,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.Empty<int>()                      .Select(x => x)                      .RecoverWith(_ => Source.Single(0))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_switch_the_second_time_if_alternative_source_throws_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3)).Select(x =>                  {                      if (x == 3)                          throw new IndexOutOfRangeException();                      return x;                  }).RecoverWith(ex =>                  {                      if (ex is IndexOutOfRangeException)                          return Source.From(new [] {11'22}).Select(x =>                          {                              if (x == 22)                                  throw new ArgumentException();                              return x;                          });                      if (ex is ArgumentException)                          return Source.From(new[] { 33' 44 });                      return null;                  }).RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(2)                      .ExpectNext(11' 33);                    probe                      .Request(1)                      .ExpectNext(44)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_terminate_with_exception_if_alternative_source_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3))                      .Select(x =>                      {                          if(x==3)                              throw new IndexOutOfRangeException();                          return x;                      })                      .RecoverWith(ex =>                      {                          if (ex is IndexOutOfRangeException)                              return Source.From(new[] {11' 22}).Select(x =>                              {                                  if (x == 22)                                      throw Ex;                                  return x;                              });                          return null;                      })                      .RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(11);                    probe                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_terminate_with_exception_if_alternative_source_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3))                      .Select(x =>                      {                          if(x==3)                              throw new IndexOutOfRangeException();                          return x;                      })                      .RecoverWith(ex =>                      {                          if (ex is IndexOutOfRangeException)                              return Source.From(new[] {11' 22}).Select(x =>                              {                                  if (x == 22)                                      throw Ex;                                  return x;                              });                          return null;                      })                      .RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(11);                    probe                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_terminate_with_exception_if_alternative_source_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3))                      .Select(x =>                      {                          if(x==3)                              throw new IndexOutOfRangeException();                          return x;                      })                      .RecoverWith(ex =>                      {                          if (ex is IndexOutOfRangeException)                              return Source.From(new[] {11' 22}).Select(x =>                              {                                  if (x == 22)                                      throw Ex;                                  return x;                              });                          return null;                      })                      .RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(11);                    probe                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_terminate_with_exception_if_alternative_source_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3))                      .Select(x =>                      {                          if(x==3)                              throw new IndexOutOfRangeException();                          return x;                      })                      .RecoverWith(ex =>                      {                          if (ex is IndexOutOfRangeException)                              return Source.From(new[] {11' 22}).Select(x =>                              {                                  if (x == 22)                                      throw Ex;                                  return x;                              });                          return null;                      })                      .RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(11);                    probe                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_terminate_with_exception_if_alternative_source_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3))                      .Select(x =>                      {                          if(x==3)                              throw new IndexOutOfRangeException();                          return x;                      })                      .RecoverWith(ex =>                      {                          if (ex is IndexOutOfRangeException)                              return Source.From(new[] {11' 22}).Select(x =>                              {                                  if (x == 22)                                      throw Ex;                                  return x;                              });                          return null;                      })                      .RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(11);                    probe                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_terminate_with_exception_if_alternative_source_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3))                      .Select(x =>                      {                          if(x==3)                              throw new IndexOutOfRangeException();                          return x;                      })                      .RecoverWith(ex =>                      {                          if (ex is IndexOutOfRangeException)                              return Source.From(new[] {11' 22}).Select(x =>                              {                                  if (x == 22)                                      throw Ex;                                  return x;                              });                          return null;                      })                      .RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(11);                    probe                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_terminate_with_exception_if_alternative_source_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3))                      .Select(x =>                      {                          if(x==3)                              throw new IndexOutOfRangeException();                          return x;                      })                      .RecoverWith(ex =>                      {                          if (ex is IndexOutOfRangeException)                              return Source.From(new[] {11' 22}).Select(x =>                              {                                  if (x == 22)                                      throw Ex;                                  return x;                              });                          return null;                      })                      .RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(11);                    probe                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowRecoverWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowRecoverWithSpec.cs,A_RecoverWith_must_terminate_with_exception_if_alternative_source_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = Source.From(Enumerable.Range(1' 3))                      .Select(x =>                      {                          if(x==3)                              throw new IndexOutOfRangeException();                          return x;                      })                      .RecoverWith(ex =>                      {                          if (ex is IndexOutOfRangeException)                              return Source.From(new[] {11' 22}).Select(x =>                              {                                  if (x == 22)                                      throw Ex;                                  return x;                              });                          return null;                      })                      .RunWith(this.SinkProbe<int>()' Materializer);                    probe                      .Request(2)                      .ExpectNext(1' 2);                    probe                      .Request(1)                      .ExpectNext(11);                    probe                      .Request(1)                      .ExpectError().Should().Be(Ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSumSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSumSpec.cs,A_Sum_must_work_when_using_Source_RunSum,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = InputSource.RunSum((i' i1) => i + i1' Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be(Expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSumSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSumSpec.cs,A_Sum_must_work_when_using_Source_Sum,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = SumSource.RunWith(Sink.First<int>()' Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be(Expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSumSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSumSpec.cs,A_Sum_must_work_when_using_Sink_Sum,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = InputSource.RunWith(SumSink' Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be(Expected);                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSumSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSumSpec.cs,A_Sum_must_work_when_using_Flow_Sum,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = InputSource.Via(SumFlow).RunWith(Sink.First<int>()' Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be(Expected);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSumSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSumSpec.cs,A_Sum_must_work_when_using_Source_Sum_and_Flow_Sum_and_Sink_Sum,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = SumSource.Via(SumFlow).RunWith(SumSink' Materializer);                  t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.Should().Be(Expected);                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSumSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSumSpec.cs,A_Sum_must_propagate_an_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new TestException("test");                  var task = InputSource.Select(x =>                  {                      if (x > 50)                          throw error;                      return x;                  }).RunSum((i' i1) => 0' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3))).ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSumSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSumSpec.cs,A_Sum_must_propagate_an_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new TestException("test");                  var task = InputSource.Select(x =>                  {                      if (x > 50)                          throw error;                      return x;                  }).RunSum((i' i1) => 0' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3))).ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSumSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSumSpec.cs,A_Sum_must_complete_task_with_failure_when_reducing_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new TestException("test");                  var task = InputSource.RunSum((x' y) =>                  {                      if (x > 50)                          throw error;                      return x + y;                  }' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3))).ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSumSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSumSpec.cs,A_Sum_must_complete_task_with_failure_when_reducing_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new TestException("test");                  var task = InputSource.RunSum((x' y) =>                  {                      if (x > 50)                          throw error;                      return x + y;                  }' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3))).ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,FlowScanSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,FlowScanSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,Scan,The following statement contains a magic number: duration = duration ?? TimeSpan.FromSeconds(5);
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,A_Scan_must_Scan,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var v = Enumerable.Range(1' random.Next(100' 1000)).Select(_ => random.Next()).ToArray();                  Scan(Source.From(v)).ShouldAllBeEquivalentTo(scan(v));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,A_Scan_must_Scan,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var v = Enumerable.Range(1' random.Next(100' 1000)).Select(_ => random.Next()).ToArray();                  Scan(Source.From(v)).ShouldAllBeEquivalentTo(scan(v));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,A_Scan_must_emit_values_promptly,The following statement contains a magic number: var task = Source.Single(1).MapMaterializedValue<TaskCompletionSource<int>>(_ => null)                  .Concat(Source.Maybe<int>())                  .Scan(0' (i' i1) => i + i1)                  .Take(2)                  .RunWith(Sink.Seq<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,A_Scan_must_fail_properly,The following statement contains a magic number: Source.From(new[] {1' 3' -1' 5' 7})                  .Via(scan)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .ToStrict(TimeSpan.FromSeconds(1))                  .ShouldAllBeEquivalentTo(new[] {0' 1' 4' 0' 5' 12});
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,A_Scan_must_fail_properly,The following statement contains a magic number: Source.From(new[] {1' 3' -1' 5' 7})                  .Via(scan)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .ToStrict(TimeSpan.FromSeconds(1))                  .ShouldAllBeEquivalentTo(new[] {0' 1' 4' 0' 5' 12});
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,A_Scan_must_fail_properly,The following statement contains a magic number: Source.From(new[] {1' 3' -1' 5' 7})                  .Via(scan)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .ToStrict(TimeSpan.FromSeconds(1))                  .ShouldAllBeEquivalentTo(new[] {0' 1' 4' 0' 5' 12});
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,A_Scan_must_fail_properly,The following statement contains a magic number: Source.From(new[] {1' 3' -1' 5' 7})                  .Via(scan)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .ToStrict(TimeSpan.FromSeconds(1))                  .ShouldAllBeEquivalentTo(new[] {0' 1' 4' 0' 5' 12});
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,A_Scan_must_fail_properly,The following statement contains a magic number: Source.From(new[] {1' 3' -1' 5' 7})                  .Via(scan)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .ToStrict(TimeSpan.FromSeconds(1))                  .ShouldAllBeEquivalentTo(new[] {0' 1' 4' 0' 5' 12});
Magic Number,Akka.Streams.Tests.Dsl,FlowScanSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowScanSpec.cs,A_Scan_must_fail_properly,The following statement contains a magic number: Source.From(new[] {1' 3' -1' 5' 7})                  .Via(scan)                  .RunWith(this.SinkProbe<int>()' Materializer)                  .ToStrict(TimeSpan.FromSeconds(1))                  .ShouldAllBeEquivalentTo(new[] {0' 1' 4' 0' 5' 12});
Magic Number,Akka.Streams.Tests.Dsl,FlowSectionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSectionSpec.cs,A_Flow_can_have_an_op_section_with_different_dispatcher_and_name,The following statement contains a magic number: Source.From(new[] {0' 1' 2}).Via(f1).Via(f2).RunWith(Sink.Ignore<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSectionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSectionSpec.cs,A_Flow_can_have_an_op_section_with_different_dispatcher_and_name,The following statement contains a magic number: defaultDispatcher.ReceiveN(3).ForEach(o => o.ToString().Should().Contain("akka.test.stream-dispatcher"));
Magic Number,Akka.Streams.Tests.Dsl,FlowSectionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSectionSpec.cs,A_Flow_can_have_an_op_section_with_different_dispatcher_and_name,The following statement contains a magic number: customDispatcher.ReceiveN(3).ForEach(o => o.ToString().Should().Contain("my-dispatcher"));
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,FlowSlidingSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2'16);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,FlowSlidingSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2'16);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Check,The following statement contains a magic number: gen.ForEach(t =>              {                  var len = t.Item1;                  var win = t.Item2;                  var step = t.Item3;                    var af = Source.FromEnumerator(() => Enumerable.Range(0' int.MaxValue).Take(len).GetEnumerator())                      .Sliding(win' step)                      .RunAggregate(new List<IEnumerable<int>>()' (ints' e) =>                      {                          ints.Add(e);                          return ints;                      }' Materializer);                    var input = Enumerable.Range(0' int.MaxValue).Take(len).ToList();                  var cf = Source.FromEnumerator(() => Sliding(input' win' step).GetEnumerator())                      .RunAggregate(new List<IEnumerable<int>>()' (ints' e) =>                      {                          ints.Add(e);                          return ints;                      }' Materializer);                    af.Wait(TimeSpan.FromSeconds(30)).Should().BeTrue();                  cf.Wait(TimeSpan.FromSeconds(30)).Should().BeTrue();                  af.Result.ShouldAllBeEquivalentTo(cf.Result);              });
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Check,The following statement contains a magic number: gen.ForEach(t =>              {                  var len = t.Item1;                  var win = t.Item2;                  var step = t.Item3;                    var af = Source.FromEnumerator(() => Enumerable.Range(0' int.MaxValue).Take(len).GetEnumerator())                      .Sliding(win' step)                      .RunAggregate(new List<IEnumerable<int>>()' (ints' e) =>                      {                          ints.Add(e);                          return ints;                      }' Materializer);                    var input = Enumerable.Range(0' int.MaxValue).Take(len).ToList();                  var cf = Source.FromEnumerator(() => Sliding(input' win' step).GetEnumerator())                      .RunAggregate(new List<IEnumerable<int>>()' (ints' e) =>                      {                          ints.Add(e);                          return ints;                      }' Materializer);                    af.Wait(TimeSpan.FromSeconds(30)).Should().BeTrue();                  cf.Wait(TimeSpan.FromSeconds(30)).Should().BeTrue();                  af.Result.ShouldAllBeEquivalentTo(cf.Result);              });
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Sliding_must_behave_just_like_collections_sliding_with_step_lower_than_window,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var gen = Enumerable.Range(1' 1000)                      .Select(_ =>                      {                          var win = random.Next(1' 62);                          return Tuple.Create(random.Next(0' 32)' win' random.Next(1' win));                      });                    Check(gen);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Sliding_must_behave_just_like_collections_sliding_with_step_lower_than_window,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var gen = Enumerable.Range(1' 1000)                      .Select(_ =>                      {                          var win = random.Next(1' 62);                          return Tuple.Create(random.Next(0' 32)' win' random.Next(1' win));                      });                    Check(gen);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Sliding_must_behave_just_like_collections_sliding_with_step_lower_than_window,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var gen = Enumerable.Range(1' 1000)                      .Select(_ =>                      {                          var win = random.Next(1' 62);                          return Tuple.Create(random.Next(0' 32)' win' random.Next(1' win));                      });                    Check(gen);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Sliding_must_behave_just_like_collections_sliding_with_step_equals_window,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var gen = Enumerable.Range(1' 1000)                      .Select(_ =>                      {                          var win = random.Next(1' 62);                          return Tuple.Create(random.Next(0' 32)' win' win);                      });                    Check(gen);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Sliding_must_behave_just_like_collections_sliding_with_step_equals_window,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var gen = Enumerable.Range(1' 1000)                      .Select(_ =>                      {                          var win = random.Next(1' 62);                          return Tuple.Create(random.Next(0' 32)' win' win);                      });                    Check(gen);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Sliding_must_behave_just_like_collections_sliding_with_step_equals_window,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var gen = Enumerable.Range(1' 1000)                      .Select(_ =>                      {                          var win = random.Next(1' 62);                          return Tuple.Create(random.Next(0' 32)' win' win);                      });                    Check(gen);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Sliding_must_behave_just_like_collections_sliding_with_step_greather_than_window,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var gen = Enumerable.Range(1' 1000)                      .Select(_ =>                      {                          var win = random.Next(1' 62);                          return Tuple.Create(random.Next(0' 32)' win' random.Next(win + 1' 128));                      });                    Check(gen);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Sliding_must_behave_just_like_collections_sliding_with_step_greather_than_window,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var gen = Enumerable.Range(1' 1000)                      .Select(_ =>                      {                          var win = random.Next(1' 62);                          return Tuple.Create(random.Next(0' 32)' win' random.Next(win + 1' 128));                      });                    Check(gen);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Sliding_must_behave_just_like_collections_sliding_with_step_greather_than_window,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var gen = Enumerable.Range(1' 1000)                      .Select(_ =>                      {                          var win = random.Next(1' 62);                          return Tuple.Create(random.Next(0' 32)' win' random.Next(win + 1' 128));                      });                    Check(gen);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSlidingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSlidingSpec.cs,Sliding_must_behave_just_like_collections_sliding_with_step_greather_than_window,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var random = new Random();                  var gen = Enumerable.Range(1' 1000)                      .Select(_ =>                      {                          var win = random.Next(1' 62);                          return Tuple.Create(random.Next(0' 32)' win' random.Next(win + 1' 128));                      });                    Check(gen);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,FlowSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,FlowSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_request_more_elements_from_upstream_when_downstream_requests_more_elements,The following statement contains a magic number: setup.Upstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_request_more_elements_from_upstream_when_downstream_requests_more_elements,The following statement contains a magic number: setup.DownstreamSubscription.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_request_more_elements_from_upstream_when_downstream_requests_more_elements,The following statement contains a magic number: setup.Upstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_request_more_elements_from_upstream_when_downstream_requests_more_elements,The following statement contains a magic number: setup.Upstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_cancel_upstream_when_single_subscriber_cancels_subscription_while_receiving_data,The following statement contains a magic number: setup.DownstreamSubscription.Request(5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_materialize_into_Publisher_Subscriber,The following statement contains a magic number: sub1.Request(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_materialize_into_Publisher_Subscriber_and_transformation_processor,The following statement contains a magic number: sub1.Request(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_materialize_into_Publisher_Subscriber_and_transformation_processor,The following statement contains a magic number: c1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_materialize_into_Publisher_Subscriber_and_transformation_processor,The following statement contains a magic number: var source = Source.From(new[] { 1' 2' 3 }).RunWith(Sink.AsPublisher<int>(false)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_materialize_into_Publisher_Subscriber_and_transformation_processor,The following statement contains a magic number: var source = Source.From(new[] { 1' 2' 3 }).RunWith(Sink.AsPublisher<int>(false)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_materialize_into_Publisher_Subscriber_and_multiple_transformation_processor,The following statement contains a magic number: sub1.Request(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_materialize_into_Publisher_Subscriber_and_multiple_transformation_processor,The following statement contains a magic number: c1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_materialize_into_Publisher_Subscriber_and_multiple_transformation_processor,The following statement contains a magic number: var source = Source.From(new[] { 1' 2' 3 }).RunWith(Sink.AsPublisher<int>(false)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_materialize_into_Publisher_Subscriber_and_multiple_transformation_processor,The following statement contains a magic number: var source = Source.From(new[] { 1' 2' 3 }).RunWith(Sink.AsPublisher<int>(false)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_subscribe_Subscriber,The following statement contains a magic number: sub1.Request(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_perform_transformation_operation,The following statement contains a magic number: var publisher = Source.From(new[] { 1' 2' 3 }).RunWith(Sink.AsPublisher<int>(false)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_perform_transformation_operation,The following statement contains a magic number: var publisher = Source.From(new[] { 1' 2' 3 }).RunWith(Sink.AsPublisher<int>(false)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_perform_transformation_operation_and_subscribe_Subscriber,The following statement contains a magic number: var publisher = Source.From(new[] { 1' 2' 3 }).RunWith(Sink.AsPublisher<int>(false)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_perform_transformation_operation_and_subscribe_Subscriber,The following statement contains a magic number: var publisher = Source.From(new[] { 1' 2' 3 }).RunWith(Sink.AsPublisher<int>(false)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_perform_transformation_operation_and_subscribe_Subscriber,The following statement contains a magic number: sub1.Request(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_materializable_several_times_with_fanout_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Source.From(new[] {1' 2' 3}).Select(i => i.ToString());                  var p1 = flow.RunWith(Sink.AsPublisher<string>(true)' Materializer);                  var p2 = flow.RunWith(Sink.AsPublisher<string>(true)' Materializer);                  var s1 = TestSubscriber.CreateManualProbe<string>(this);                  var s2 = TestSubscriber.CreateManualProbe<string>(this);                  var s3 = TestSubscriber.CreateManualProbe<string>(this);                  p1.Subscribe(s1);                  p2.Subscribe(s2);                  p2.Subscribe(s3);                    var sub1 = s1.ExpectSubscription();                  var sub2 = s2.ExpectSubscription();                  var sub3 = s3.ExpectSubscription();                    sub1.Request(3);                  s1.ExpectNext("1");                  s1.ExpectNext("2");                  s1.ExpectNext("3");                  s1.ExpectComplete();                    sub2.Request(3);                  sub3.Request(3);                  s2.ExpectNext("1");                  s2.ExpectNext("2");                  s2.ExpectNext("3");                  s2.ExpectComplete();                  s3.ExpectNext("1");                  s3.ExpectNext("2");                  s3.ExpectNext("3");                  s3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_materializable_several_times_with_fanout_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Source.From(new[] {1' 2' 3}).Select(i => i.ToString());                  var p1 = flow.RunWith(Sink.AsPublisher<string>(true)' Materializer);                  var p2 = flow.RunWith(Sink.AsPublisher<string>(true)' Materializer);                  var s1 = TestSubscriber.CreateManualProbe<string>(this);                  var s2 = TestSubscriber.CreateManualProbe<string>(this);                  var s3 = TestSubscriber.CreateManualProbe<string>(this);                  p1.Subscribe(s1);                  p2.Subscribe(s2);                  p2.Subscribe(s3);                    var sub1 = s1.ExpectSubscription();                  var sub2 = s2.ExpectSubscription();                  var sub3 = s3.ExpectSubscription();                    sub1.Request(3);                  s1.ExpectNext("1");                  s1.ExpectNext("2");                  s1.ExpectNext("3");                  s1.ExpectComplete();                    sub2.Request(3);                  sub3.Request(3);                  s2.ExpectNext("1");                  s2.ExpectNext("2");                  s2.ExpectNext("3");                  s2.ExpectComplete();                  s3.ExpectNext("1");                  s3.ExpectNext("2");                  s3.ExpectNext("3");                  s3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_materializable_several_times_with_fanout_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Source.From(new[] {1' 2' 3}).Select(i => i.ToString());                  var p1 = flow.RunWith(Sink.AsPublisher<string>(true)' Materializer);                  var p2 = flow.RunWith(Sink.AsPublisher<string>(true)' Materializer);                  var s1 = TestSubscriber.CreateManualProbe<string>(this);                  var s2 = TestSubscriber.CreateManualProbe<string>(this);                  var s3 = TestSubscriber.CreateManualProbe<string>(this);                  p1.Subscribe(s1);                  p2.Subscribe(s2);                  p2.Subscribe(s3);                    var sub1 = s1.ExpectSubscription();                  var sub2 = s2.ExpectSubscription();                  var sub3 = s3.ExpectSubscription();                    sub1.Request(3);                  s1.ExpectNext("1");                  s1.ExpectNext("2");                  s1.ExpectNext("3");                  s1.ExpectComplete();                    sub2.Request(3);                  sub3.Request(3);                  s2.ExpectNext("1");                  s2.ExpectNext("2");                  s2.ExpectNext("3");                  s2.ExpectComplete();                  s3.ExpectNext("1");                  s3.ExpectNext("2");                  s3.ExpectNext("3");                  s3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_materializable_several_times_with_fanout_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Source.From(new[] {1' 2' 3}).Select(i => i.ToString());                  var p1 = flow.RunWith(Sink.AsPublisher<string>(true)' Materializer);                  var p2 = flow.RunWith(Sink.AsPublisher<string>(true)' Materializer);                  var s1 = TestSubscriber.CreateManualProbe<string>(this);                  var s2 = TestSubscriber.CreateManualProbe<string>(this);                  var s3 = TestSubscriber.CreateManualProbe<string>(this);                  p1.Subscribe(s1);                  p2.Subscribe(s2);                  p2.Subscribe(s3);                    var sub1 = s1.ExpectSubscription();                  var sub2 = s2.ExpectSubscription();                  var sub3 = s3.ExpectSubscription();                    sub1.Request(3);                  s1.ExpectNext("1");                  s1.ExpectNext("2");                  s1.ExpectNext("3");                  s1.ExpectComplete();                    sub2.Request(3);                  sub3.Request(3);                  s2.ExpectNext("1");                  s2.ExpectNext("2");                  s2.ExpectNext("3");                  s2.ExpectComplete();                  s3.ExpectNext("1");                  s3.ExpectNext("2");                  s3.ExpectNext("3");                  s3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_materializable_several_times_with_fanout_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Source.From(new[] {1' 2' 3}).Select(i => i.ToString());                  var p1 = flow.RunWith(Sink.AsPublisher<string>(true)' Materializer);                  var p2 = flow.RunWith(Sink.AsPublisher<string>(true)' Materializer);                  var s1 = TestSubscriber.CreateManualProbe<string>(this);                  var s2 = TestSubscriber.CreateManualProbe<string>(this);                  var s3 = TestSubscriber.CreateManualProbe<string>(this);                  p1.Subscribe(s1);                  p2.Subscribe(s2);                  p2.Subscribe(s3);                    var sub1 = s1.ExpectSubscription();                  var sub2 = s2.ExpectSubscription();                  var sub3 = s3.ExpectSubscription();                    sub1.Request(3);                  s1.ExpectNext("1");                  s1.ExpectNext("2");                  s1.ExpectNext("3");                  s1.ExpectComplete();                    sub2.Request(3);                  sub3.Request(3);                  s2.ExpectNext("1");                  s2.ExpectNext("2");                  s2.ExpectNext("3");                  s2.ExpectComplete();                  s3.ExpectNext("1");                  s3.ExpectNext("2");                  s3.ExpectNext("3");                  s3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_covariant,The following statement contains a magic number: SubFlow<IFruit' NotUsed' IRunnableGraph<NotUsed>> f3 =                  Source.From<IFruit>(Apples()).GroupBy(2' _ => true);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_covariant,The following statement contains a magic number: SubFlow<IFruit' NotUsed' Sink<string' NotUsed>> d2 =                  Flow.Create<string>()                      .Select<string' string' IFruit' NotUsed>(_ => new Apple())                      .GroupBy(-1'_ => 2);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_possible_to_convert_to_a_processor_and_should_be_able_to_take_a_Processor,The following statement contains a magic number: var task = Source.From(Enumerable.Range(1' 10))                  .Via(identity2)                  .Limit(100)                  .RunWith(Sink.Seq<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_possible_to_convert_to_a_processor_and_should_be_able_to_take_a_Processor,The following statement contains a magic number: var task = Source.From(Enumerable.Range(1' 10))                  .Via(identity2)                  .Limit(100)                  .RunWith(Sink.Seq<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_possible_to_convert_to_a_processor_and_should_be_able_to_take_a_Processor,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_possible_to_convert_to_a_processor_and_should_be_able_to_take_a_Processor,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_possible_to_convert_to_a_processor_and_should_be_able_to_take_a_Processor,The following statement contains a magic number: task = Source.From(Enumerable.Range(1' 10))                  .Via(identity2)                  .Limit(100)                  .RunWith(Sink.Seq<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_possible_to_convert_to_a_processor_and_should_be_able_to_take_a_Processor,The following statement contains a magic number: task = Source.From(Enumerable.Range(1' 10))                  .Via(identity2)                  .Limit(100)                  .RunWith(Sink.Seq<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_possible_to_convert_to_a_processor_and_should_be_able_to_take_a_Processor,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_must_be_possible_to_convert_to_a_processor_and_should_be_able_to_take_a_Processor,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_adapt_speed_to_the_currently_slowest_subscriber,The following statement contains a magic number: setup.DownstreamSubscription.Request(5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_support_slow_subscriber_with_fan_out_2,The following statement contains a magic number: var setup = new ChainSetup<string' string' NotUsed>(Identity' Settings.WithInputBuffer(1' 1)'                  (settings' factory) => ActorMaterializer.Create(factory' settings)'                  (source' materializer) => ToFanoutPublisher(source' materializer' 2)' this);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_support_slow_subscriber_with_fan_out_2,The following statement contains a magic number: setup.DownstreamSubscription.Request(5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_support_slow_subscriber_with_fan_out_2,The following statement contains a magic number: setup.Downstream.ExpectNoMsg(Dilated(TimeSpan.FromMilliseconds(100)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_support_slow_subscriber_with_fan_out_2,The following statement contains a magic number: downstream2Subscription.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_support_slow_subscriber_with_fan_out_2,The following statement contains a magic number: downstream2.ExpectNoMsg(Dilated(TimeSpan.FromMilliseconds(100)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_support_slow_subscriber_with_fan_out_2,The following statement contains a magic number: downstream2Subscription.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_support_incoming_subscriber_while_elements_were_requested_before,The following statement contains a magic number: setup.DownstreamSubscription.Request(5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_support_incoming_subscriber_while_elements_were_requested_before,The following statement contains a magic number: downstream2.ExpectNoMsg(Dilated(TimeSpan.FromMilliseconds(100)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_be_unblocked_when_blocking_subscriber_cancels_subscription,The following statement contains a magic number: setup.DownstreamSubscription.Request(5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_be_unblocked_when_blocking_subscriber_cancels_subscription,The following statement contains a magic number: setup.Downstream.ExpectNoMsg(Dilated(TimeSpan.FromMilliseconds(200)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_be_unblocked_when_blocking_subscriber_cancels_subscription,The following statement contains a magic number: setup.Upstream.ExpectNoMsg(Dilated(TimeSpan.FromMilliseconds(200)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_be_unblocked_when_blocking_subscriber_cancels_subscription,The following statement contains a magic number: downstream2.ExpectNoMsg(Dilated(TimeSpan.FromMilliseconds(200)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_call_future_subscribers_OnError_after_OnSubscribe_if_initial_upstream_was_completed,The following statement contains a magic number: setup.DownstreamSubscription.Request(5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_call_future_subscribers_OnError_after_OnSubscribe_if_initial_upstream_was_completed,The following statement contains a magic number: downstream2.ExpectNoMsg(Dilated(TimeSpan.FromMilliseconds(100)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_call_future_subscribers_OnError_should_be_called_instead_of_OnSubscribed_after_initial_upstream_reported_an_error,The following statement contains a magic number: setup.UpstreamSubscription.SendNext(5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_call_future_subscribers_OnError_when_all_subscriptions_were_cancelled,The following statement contains a magic number: var setup = new ChainSetup<string' string' NotUsed>(Identity' Settings.WithInputBuffer(1' 1)'                  (settings' factory) => ActorMaterializer.Create(factory' settings)'                  (source' materializer) => ToFanoutPublisher(source' materializer' 16)' this);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_must_call_future_subscribers_OnError_when_all_subscriptions_were_cancelled,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_should_be_created_from_a_function_easily,The following statement contains a magic number: Source.From(Enumerable.Range(0' 10))                  .Via(Flow.FromFunction<int' int>(i => i + 1))                  .RunWith(Sink.Seq<int>()' Materializer)                  .Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_Flow_with_multiple_subscribers_FanOutBox_should_be_created_from_a_function_easily,The following statement contains a magic number: Source.From(Enumerable.Range(0' 10))                  .Via(Flow.FromFunction<int' int>(i => i + 1))                  .RunWith(Sink.Seq<int>()' Materializer)                  .Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_borken_Flow_must_cancel_upstream_and_call_onError_on_current_and_future_downstream_subscribers_if_an_internal_error_occurs,The following statement contains a magic number: var setup = new ChainSetup<string' string' NotUsed>(FaultyFlow<string'string'string>' Settings.WithInputBuffer(1' 1)'                  (settings' factory) => ActorMaterializer.Create(factory' settings)'                  (source' materializer) => ToFanoutPublisher(source' materializer' 16)' this);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_borken_Flow_must_cancel_upstream_and_call_onError_on_current_and_future_downstream_subscribers_if_an_internal_error_occurs,The following statement contains a magic number: setup.DownstreamSubscription.Request(5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSpec.cs,A_borken_Flow_must_cancel_upstream_and_call_onError_on_current_and_future_downstream_subscribers_if_an_internal_error_occurs,The following statement contains a magic number: downstream2Subscription.Request(5);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,FlowSplitAfterSpec,The following statement contains a magic number: var settings =                  ActorMaterializerSettings.Create(Sys)                      .WithInputBuffer(2' 2)                      .WithSubscriptionTimeoutSettings(                          new StreamSubscriptionTimeoutSettings(                              StreamSubscriptionTimeoutTerminationMode.CancelTermination' TimeSpan.FromSeconds(1)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,FlowSplitAfterSpec,The following statement contains a magic number: var settings =                  ActorMaterializerSettings.Create(Sys)                      .WithInputBuffer(2' 2)                      .WithSubscriptionTimeoutSettings(                          new StreamSubscriptionTimeoutSettings(                              StreamSubscriptionTimeoutTerminationMode.CancelTermination' TimeSpan.FromSeconds(1)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(3'5'run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectNext(3);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(2);                      s2.ExpectNext(4);                      s2.ExpectNext(5);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(3'5'run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectNext(3);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(2);                      s2.ExpectNext(4);                      s2.ExpectNext(5);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(3'5'run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectNext(3);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(2);                      s2.ExpectNext(4);                      s2.ExpectNext(5);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(3'5'run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectNext(3);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(2);                      s2.ExpectNext(4);                      s2.ExpectNext(5);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(3'5'run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectNext(3);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(2);                      s2.ExpectNext(4);                      s2.ExpectNext(5);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(3'5'run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectNext(3);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(2);                      s2.ExpectNext(4);                      s2.ExpectNext(5);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(3'5'run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectNext(3);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(2);                      s2.ExpectNext(4);                      s2.ExpectNext(5);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(3'5'run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectNext(3);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(2);                      s2.ExpectNext(4);                      s2.ExpectNext(5);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(3'5'run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectNext(3);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(2);                      s2.ExpectNext(4);                      s2.ExpectNext(5);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_when_first_element_is_split_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(1' 3' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(3);                      s1.ExpectNext(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(3);                      s2.ExpectNext(2);                      s2.ExpectNext(3);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_when_first_element_is_split_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(1' 3' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(3);                      s1.ExpectNext(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(3);                      s2.ExpectNext(2);                      s2.ExpectNext(3);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_when_first_element_is_split_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(1' 3' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(3);                      s1.ExpectNext(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(3);                      s2.ExpectNext(2);                      s2.ExpectNext(3);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_when_first_element_is_split_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(1' 3' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(3);                      s1.ExpectNext(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(3);                      s2.ExpectNext(2);                      s2.ExpectNext(3);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_when_first_element_is_split_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(1' 3' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(3);                      s1.ExpectNext(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(3);                      s2.ExpectNext(2);                      s2.ExpectNext(3);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_when_first_element_is_split_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(1' 3' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(3);                      s1.ExpectNext(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s2.Request(3);                      s2.ExpectNext(2);                      s2.ExpectNext(3);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_with_single_element_splits_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 10))                      .SplitAfter(_ => true)                      .Lift()                      .SelectAsync(1' s => s.RunWith(Sink.First<int>()' Materializer))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_with_single_element_splits_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 10))                      .SplitAfter(_ => true)                      .Lift()                      .SelectAsync(1' s => s.RunWith(Sink.First<int>()' Materializer))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_with_single_element_splits_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 10))                      .SplitAfter(_ => true)                      .Lift()                      .SelectAsync(1' s => s.RunWith(Sink.First<int>()' Materializer))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_work_with_single_element_splits_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 10))                      .SplitAfter(_ => true)                      .Lift()                      .SelectAsync(1' s => s.RunWith(Sink.First<int>()' Materializer))                      .Grouped(10)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 10));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                      s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.ExpectNext(5);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                      s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.ExpectNext(5);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                      s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.ExpectNext(5);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                      s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.ExpectNext(5);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                      s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.ExpectNext(5);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                      s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.ExpectNext(5);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' expectSubFlow) =>                  {                      var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                      s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.ExpectNext(5);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_fail_stream_when_SplitAfter_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitAfter(i =>                  {                      if (i == 3)                          throw ex;                      return i%3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_fail_stream_when_SplitAfter_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitAfter(i =>                  {                      if (i == 3)                          throw ex;                      return i%3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_fail_stream_when_SplitAfter_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitAfter(i =>                  {                      if (i == 3)                          throw ex;                      return i%3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_fail_stream_when_SplitAfter_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitAfter(i =>                  {                      if (i == 3)                          throw ex;                      return i%3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_fail_stream_when_SplitAfter_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitAfter(i =>                  {                      if (i == 3)                          throw ex;                      return i%3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_fail_stream_when_SplitAfter_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitAfter(i =>                  {                      if (i == 3)                          throw ex;                      return i%3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_fail_stream_when_SplitAfter_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitAfter(i =>                  {                      if (i == 3)                          throw ex;                      return i%3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_pass_along_early_cancellation,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var up = TestPublisher.CreateManualProbe<int>(this);                  var down = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                    var flowSubscriber =                      Source.AsSubscriber<int>()                          .SplitAfter(i => i%3 == 0)                          .Lift()                          .To(Sink.FromSubscriber(down))                          .Run(Materializer);                  var downstream = down.ExpectSubscription();                  downstream.Cancel();                  up.Subscribe(flowSubscriber);                  var upSub = up.ExpectSubscription();                  upSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_support_eager_cancellation_of_master_stream_on_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5'8'SubstreamCancelStrategy.Propagate'                      (masterSubscriber' masterSubscription' expectSubFlow) =>                      {                          var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)'                              this);                          s1.Cancel();                          masterSubscriber.ExpectComplete();                      });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitAfterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitAfterSpec.cs,SplitAfter_must_support_eager_cancellation_of_master_stream_on_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5'8'SubstreamCancelStrategy.Propagate'                      (masterSubscriber' masterSubscription' expectSubFlow) =>                      {                          var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)'                              this);                          s1.Cancel();                          masterSubscriber.ExpectComplete();                      });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,FlowSplitWhenSpec,The following statement contains a magic number: var settings =                  ActorMaterializerSettings.Create(Sys)                      .WithInputBuffer(2' 2)                      .WithSubscriptionTimeoutSettings(                          new StreamSubscriptionTimeoutSettings(                              StreamSubscriptionTimeoutTerminationMode.CancelTermination' TimeSpan.FromSeconds(1)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,FlowSplitWhenSpec,The following statement contains a magic number: var settings =                  ActorMaterializerSettings.Create(Sys)                      .WithInputBuffer(2' 2)                      .WithSubscriptionTimeoutSettings(                          new StreamSubscriptionTimeoutSettings(                              StreamSubscriptionTimeoutTerminationMode.CancelTermination' TimeSpan.FromSeconds(1)));
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(elementCount: 4' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(3);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(4);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(elementCount: 4' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(3);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(4);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(elementCount: 4' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(3);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(4);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(elementCount: 4' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(3);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(4);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(elementCount: 4' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(3);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(4);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(elementCount: 4' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(3);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(4);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(elementCount: 4' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(3);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(4);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(elementCount: 4' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s1.Request(2);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.Request(1);                      s1.ExpectComplete();                        var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(3);                      s2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                        s2.Request(1);                      s2.ExpectNext(4);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_not_emit_substreams_if_the_parent_stream_is_empty,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task =                      Source.Empty<int>()                          .SplitWhen(_ => true)                          .Lift()                          .SelectAsync(1' s => s.RunWith(Sink.FirstOrDefault<int>()' Materializer))                          .Grouped(10)                          .RunWith(Sink.FirstOrDefault<IEnumerable<int>>()'                      Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldBeEquivalentTo(default(IEnumerable<int>));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_not_emit_substreams_if_the_parent_stream_is_empty,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task =                      Source.Empty<int>()                          .SplitWhen(_ => true)                          .Lift()                          .SelectAsync(1' s => s.RunWith(Sink.FirstOrDefault<int>()' Materializer))                          .Grouped(10)                          .RunWith(Sink.FirstOrDefault<IEnumerable<int>>()'                      Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldBeEquivalentTo(default(IEnumerable<int>));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_when_first_element_is_split_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(1' 3' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                           s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_when_first_element_is_split_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(1' 3' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                           s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_when_first_element_is_split_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(1' 3' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                           s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_when_first_element_is_split_by,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(1' 3' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                                           s1.Request(5);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s1.Cancel();                      var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                        s2.Request(4);                      s2.ExpectNext(5);                      s2.ExpectNext(6);                      s2.ExpectNext(7);                      s2.ExpectNext(8);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s1.Cancel();                      var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                        s2.Request(4);                      s2.ExpectNext(5);                      s2.ExpectNext(6);                      s2.ExpectNext(7);                      s2.ExpectNext(8);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s1.Cancel();                      var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                        s2.Request(4);                      s2.ExpectNext(5);                      s2.ExpectNext(6);                      s2.ExpectNext(7);                      s2.ExpectNext(8);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s1.Cancel();                      var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                        s2.Request(4);                      s2.ExpectNext(5);                      s2.ExpectNext(6);                      s2.ExpectNext(7);                      s2.ExpectNext(8);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s1.Cancel();                      var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                        s2.Request(4);                      s2.ExpectNext(5);                      s2.ExpectNext(6);                      s2.ExpectNext(7);                      s2.ExpectNext(8);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s1.Cancel();                      var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                        s2.Request(4);                      s2.ExpectNext(5);                      s2.ExpectNext(6);                      s2.ExpectNext(7);                      s2.ExpectNext(8);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      s1.Cancel();                      var s2 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                        s2.Request(4);                      s2.ExpectNext(5);                      s2.ExpectNext(6);                      s2.ExpectNext(7);                      s2.ExpectNext(8);                      s2.Request(1);                      s2.ExpectComplete();                        masterSubscription.Request(1);                      masterSubscriber.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_both_master_and_substream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputs = TestPublisher.CreateProbe<int>(this);                    var substream = TestSubscriber.CreateProbe<int>(this);                  var masterStream = TestSubscriber.CreateProbe<NotUsed>(this);                    Source.FromPublisher(inputs)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.FromSubscriber(substream)' Materializer))                      .RunWith(Sink.FromSubscriber(masterStream)' Materializer);                    masterStream.Request(1);                  inputs.SendNext(1);                    substream.Cancel();                    masterStream.ExpectNext(NotUsed.Instance);                  masterStream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream.Cancel();                  inputs.ExpectCancellation();                    var inputs2 = TestPublisher.CreateProbe<int>(this);                  Source.FromPublisher(inputs2)                      .SplitWhen(x => x == 2)                      .Lift()                      .Select(x => x.RunWith(Sink.Cancelled<int>()' Materializer))                      .RunWith(Sink.Cancelled<NotUsed>()' Materializer);                  inputs2.ExpectCancellation();                    var inputs3 = TestPublisher.CreateProbe<int>(this);                  var masterStream3 = TestSubscriber.CreateProbe<Source<int' NotUsed>>(this);                    Source.FromPublisher(inputs3)                      .SplitWhen(x => x == 2)                      .Lift()                      .RunWith(Sink.FromSubscriber(masterStream3)' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(1);                    var src = masterStream3.ExpectNext();                  src.RunWith(Sink.Cancelled<int>()' Materializer);                    masterStream3.Request(1);                  inputs3.SendNext(2);                  var src2 = masterStream3.ExpectNext();                  var substream4 = TestSubscriber.CreateProbe<int>(this);                  src2.RunWith(Sink.FromSubscriber(substream4)' Materializer);                    substream4.RequestNext(2);                  substream4.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  inputs3.ExpectRequest();                  inputs3.ExpectRequest();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    substream4.Cancel();                  inputs3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  masterStream3.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    masterStream3.Cancel();                  inputs3.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_the_master_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                        s1.Request(4);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_the_master_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                        s1.Request(4);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_the_master_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                        s1.Request(4);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_the_master_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                        s1.Request(4);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_the_master_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                        s1.Request(4);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_cancelling_the_master_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' run: (masterSubscriber' masterSubscription' getSubFlow) =>                  {                      var s1 = new StreamPuppet(getSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                      masterSubscription.Cancel();                        s1.Request(4);                      s1.ExpectNext(1);                      s1.ExpectNext(2);                      s1.ExpectNext(3);                      s1.ExpectNext(4);                      s1.Request(1);                      s1.ExpectComplete();                  });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_stream_when_SplitWhen_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitWhen(i =>                  {                      if (i == 3)                          throw ex;                      return i % 3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_stream_when_SplitWhen_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitWhen(i =>                  {                      if (i == 3)                          throw ex;                      return i % 3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_stream_when_SplitWhen_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitWhen(i =>                  {                      if (i == 3)                          throw ex;                      return i % 3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_stream_when_SplitWhen_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitWhen(i =>                  {                      if (i == 3)                          throw ex;                      return i % 3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_stream_when_SplitWhen_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitWhen(i =>                  {                      if (i == 3)                          throw ex;                      return i % 3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_stream_when_SplitWhen_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitWhen(i =>                  {                      if (i == 3)                          throw ex;                      return i % 3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_stream_when_SplitWhen_function_throws,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisherProbe = TestPublisher.CreateManualProbe<int>(this);                  var ex = new TestException("test");                  var publisher = Source.FromPublisher(publisherProbe).SplitWhen(i =>                  {                      if (i == 3)                          throw ex;                      return i % 3 == 0;                  }).Lift().RunWith(Sink.AsPublisher<Source<int' NotUsed>>(false)' Materializer);                    var subscriber = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                  publisher.Subscribe(subscriber);                    var upstreamSubscription = publisherProbe.ExpectSubscription();                  var downstreamSubscription = subscriber.ExpectSubscription();                    downstreamSubscription.Request(100);                  upstreamSubscription.SendNext(1);                    var substream = subscriber.ExpectNext();                  var substreamPuppet = new StreamPuppet(substream.RunWith(Sink.AsPublisher<int>(false)' Materializer)' this);                    substreamPuppet.Request(10);                  substreamPuppet.ExpectNext(1);                    upstreamSubscription.SendNext(2);                  substreamPuppet.ExpectNext(2);                    upstreamSubscription.SendNext(3);                    subscriber.ExpectError().Should().Be(ex);                  substreamPuppet.ExpectError(ex);                  upstreamSubscription.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_with_single_element_splits,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .SplitWhen(_ => true)                      .Lift()                      .SelectAsync(1' s => s.RunWith(Sink.First<int>()' Materializer)) // Please note that this line *also* implicitly asserts nonempty substreams                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_with_single_element_splits,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .SplitWhen(_ => true)                      .Lift()                      .SelectAsync(1' s => s.RunWith(Sink.First<int>()' Materializer)) // Please note that this line *also* implicitly asserts nonempty substreams                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_with_single_element_splits,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .SplitWhen(_ => true)                      .Lift()                      .SelectAsync(1' s => s.RunWith(Sink.First<int>()' Materializer)) // Please note that this line *also* implicitly asserts nonempty substreams                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_work_with_single_element_splits,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .SplitWhen(_ => true)                      .Lift()                      .SelectAsync(1' s => s.RunWith(Sink.First<int>()' Materializer)) // Please note that this line *also* implicitly asserts nonempty substreams                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_substream_if_materialized_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.Single(1).SplitWhen(_ => true).Lift()                      .SelectAsync(1' source =>                      {                          source.RunWith(Sink.Ignore<int>()' Materializer);                          // Sink.ignore+mapAsync pipes error back                          return Task.Run(() =>                          {                              source.RunWith(Sink.Ignore<int>()' Materializer).Wait(TimeSpan.FromSeconds(3));                              return 1;                          });                      })                      .RunWith(Sink.Ignore<int>()' Materializer);                  task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<IllegalStateException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_substream_if_materialized_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.Single(1).SplitWhen(_ => true).Lift()                      .SelectAsync(1' source =>                      {                          source.RunWith(Sink.Ignore<int>()' Materializer);                          // Sink.ignore+mapAsync pipes error back                          return Task.Run(() =>                          {                              source.RunWith(Sink.Ignore<int>()' Materializer).Wait(TimeSpan.FromSeconds(3));                              return 1;                          });                      })                      .RunWith(Sink.Ignore<int>()' Materializer);                  task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<IllegalStateException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_stream_if_substream_not_materialized_in_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var tightTimeoutMaterializer = ActorMaterializer.Create(Sys'                      ActorMaterializerSettings.Create(Sys)                          .WithSubscriptionTimeoutSettings(                              new StreamSubscriptionTimeoutSettings(                                  StreamSubscriptionTimeoutTerminationMode.CancelTermination'                                  TimeSpan.FromMilliseconds(500))));                    var testSource =                      Source.Single(1)                          .MapMaterializedValue<TaskCompletionSource<int>>(_ => null)                          .Concat(Source.Maybe<int>())                          .SplitWhen(_ => true);                  Action action = () =>                  {                      var task =                          testSource.Lift()                              .Delay(TimeSpan.FromSeconds(1))                              .ConcatMany(s => s.MapMaterializedValue<TaskCompletionSource<int>>(_ => null))                              .RunWith(Sink.Ignore<int>()' tightTimeoutMaterializer);                      task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  };                    action.ShouldThrow<SubscriptionTimeoutException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_fail_stream_if_substream_not_materialized_in_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var tightTimeoutMaterializer = ActorMaterializer.Create(Sys'                      ActorMaterializerSettings.Create(Sys)                          .WithSubscriptionTimeoutSettings(                              new StreamSubscriptionTimeoutSettings(                                  StreamSubscriptionTimeoutTerminationMode.CancelTermination'                                  TimeSpan.FromMilliseconds(500))));                    var testSource =                      Source.Single(1)                          .MapMaterializedValue<TaskCompletionSource<int>>(_ => null)                          .Concat(Source.Maybe<int>())                          .SplitWhen(_ => true);                  Action action = () =>                  {                      var task =                          testSource.Lift()                              .Delay(TimeSpan.FromSeconds(1))                              .ConcatMany(s => s.MapMaterializedValue<TaskCompletionSource<int>>(_ => null))                              .RunWith(Sink.Ignore<int>()' tightTimeoutMaterializer);                      task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  };                    action.ShouldThrow<SubscriptionTimeoutException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_pass_along_early_cancellation,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var up = TestPublisher.CreateManualProbe<int>(this);                  var down = TestSubscriber.CreateManualProbe<Source<int' NotUsed>>(this);                    var flowSubscriber =                      Source.AsSubscriber<int>()                          .SplitWhen(i => i % 3 == 0)                          .Lift()                          .To(Sink.FromSubscriber(down))                          .Run(Materializer);                  var downstream = down.ExpectSubscription();                  downstream.Cancel();                  up.Subscribe(flowSubscriber);                  var upSub = up.ExpectSubscription();                  upSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_eager_cancellation_of_master_stream_on_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' SubstreamCancelStrategy.Propagate'                        (masterSubscriber' masterSubscription' expectSubFlow) =>                        {                            var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)'                                this);                            s1.Cancel();                            masterSubscriber.ExpectComplete();                        });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSplitWhenSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSplitWhenSpec.cs,SplitWhen_must_support_eager_cancellation_of_master_stream_on_cancelling_substreams,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  WithSubstreamsSupport(5' 8' SubstreamCancelStrategy.Propagate'                        (masterSubscriber' masterSubscription' expectSubFlow) =>                        {                            var s1 = new StreamPuppet(expectSubFlow().RunWith(Sink.AsPublisher<int>(false)' Materializer)'                                this);                            s1.Cancel();                            masterSubscriber.ExpectComplete();                        });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,FlowStatefulSelectManySpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,FlowStatefulSelectManySpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_work_in_happy_case,The following statement contains a magic number: Func<Script<int' int>> script = () =>              {                  var phases = new[]                  {                      new Tuple<ICollection<int>' ICollection<int>>(new[] {2}' new int[0])'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {1}' new[] {1' 1})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {3}' new[] {3})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {6}' new[] {6' 6' 6})                  };                  return Script.Create(phases);              };
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_work_in_happy_case,The following statement contains a magic number: Func<Script<int' int>> script = () =>              {                  var phases = new[]                  {                      new Tuple<ICollection<int>' ICollection<int>>(new[] {2}' new int[0])'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {1}' new[] {1' 1})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {3}' new[] {3})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {6}' new[] {6' 6' 6})                  };                  return Script.Create(phases);              };
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_work_in_happy_case,The following statement contains a magic number: Func<Script<int' int>> script = () =>              {                  var phases = new[]                  {                      new Tuple<ICollection<int>' ICollection<int>>(new[] {2}' new int[0])'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {1}' new[] {1' 1})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {3}' new[] {3})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {6}' new[] {6' 6' 6})                  };                  return Script.Create(phases);              };
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_work_in_happy_case,The following statement contains a magic number: Func<Script<int' int>> script = () =>              {                  var phases = new[]                  {                      new Tuple<ICollection<int>' ICollection<int>>(new[] {2}' new int[0])'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {1}' new[] {1' 1})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {3}' new[] {3})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {6}' new[] {6' 6' 6})                  };                  return Script.Create(phases);              };
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_work_in_happy_case,The following statement contains a magic number: Func<Script<int' int>> script = () =>              {                  var phases = new[]                  {                      new Tuple<ICollection<int>' ICollection<int>>(new[] {2}' new int[0])'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {1}' new[] {1' 1})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {3}' new[] {3})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {6}' new[] {6' 6' 6})                  };                  return Script.Create(phases);              };
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_work_in_happy_case,The following statement contains a magic number: Func<Script<int' int>> script = () =>              {                  var phases = new[]                  {                      new Tuple<ICollection<int>' ICollection<int>>(new[] {2}' new int[0])'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {1}' new[] {1' 1})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {3}' new[] {3})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {6}' new[] {6' 6' 6})                  };                  return Script.Create(phases);              };
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_work_in_happy_case,The following statement contains a magic number: Func<Script<int' int>> script = () =>              {                  var phases = new[]                  {                      new Tuple<ICollection<int>' ICollection<int>>(new[] {2}' new int[0])'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {1}' new[] {1' 1})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {3}' new[] {3})'                      new Tuple<ICollection<int>' ICollection<int>>(new[] {6}' new[] {6' 6' 6})                  };                  return Script.Create(phases);              };
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_restart,The following statement contains a magic number: var probe = Source.From(new[] {2' 1' 3' 4' 1}).StatefulSelectMany<int' int' NotUsed>(() =>              {                  int? prev = null;                    return (x =>                  {                      if (x%3 == 0)                          throw Ex;                        if (prev.HasValue)                      {                          var result = Enumerable.Range(1' prev.Value).Select(__ => x);                          prev = x;                          return result;                      }                        prev = x;                      return new List<int>();                  });              })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.RestartingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_restart,The following statement contains a magic number: var probe = Source.From(new[] {2' 1' 3' 4' 1}).StatefulSelectMany<int' int' NotUsed>(() =>              {                  int? prev = null;                    return (x =>                  {                      if (x%3 == 0)                          throw Ex;                        if (prev.HasValue)                      {                          var result = Enumerable.Range(1' prev.Value).Select(__ => x);                          prev = x;                          return result;                      }                        prev = x;                      return new List<int>();                  });              })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.RestartingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_restart,The following statement contains a magic number: var probe = Source.From(new[] {2' 1' 3' 4' 1}).StatefulSelectMany<int' int' NotUsed>(() =>              {                  int? prev = null;                    return (x =>                  {                      if (x%3 == 0)                          throw Ex;                        if (prev.HasValue)                      {                          var result = Enumerable.Range(1' prev.Value).Select(__ => x);                          prev = x;                          return result;                      }                        prev = x;                      return new List<int>();                  });              })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.RestartingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_restart,The following statement contains a magic number: var probe = Source.From(new[] {2' 1' 3' 4' 1}).StatefulSelectMany<int' int' NotUsed>(() =>              {                  int? prev = null;                    return (x =>                  {                      if (x%3 == 0)                          throw Ex;                        if (prev.HasValue)                      {                          var result = Enumerable.Range(1' prev.Value).Select(__ => x);                          prev = x;                          return result;                      }                        prev = x;                      return new List<int>();                  });              })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.RestartingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_restart,The following statement contains a magic number: probe.Request(2).ExpectNext(1' 1);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_restart,The following statement contains a magic number: probe.Request(4).ExpectNext(1' 1' 1' 1);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_resume,The following statement contains a magic number: var probe = Source.From(new[] { 2' 1' 3' 4' 1 }).StatefulSelectMany<int' int' NotUsed>(() =>              {                  int? prev = null;                    return (x =>                  {                      if (x % 3 == 0)                          throw Ex;                        if (prev.HasValue)                      {                          var result = Enumerable.Range(1' prev.Value).Select(__ => x);                          prev = x;                          return result;                      }                        prev = x;                      return new List<int>();                  });              })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_resume,The following statement contains a magic number: var probe = Source.From(new[] { 2' 1' 3' 4' 1 }).StatefulSelectMany<int' int' NotUsed>(() =>              {                  int? prev = null;                    return (x =>                  {                      if (x % 3 == 0)                          throw Ex;                        if (prev.HasValue)                      {                          var result = Enumerable.Range(1' prev.Value).Select(__ => x);                          prev = x;                          return result;                      }                        prev = x;                      return new List<int>();                  });              })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_resume,The following statement contains a magic number: var probe = Source.From(new[] { 2' 1' 3' 4' 1 }).StatefulSelectMany<int' int' NotUsed>(() =>              {                  int? prev = null;                    return (x =>                  {                      if (x % 3 == 0)                          throw Ex;                        if (prev.HasValue)                      {                          var result = Enumerable.Range(1' prev.Value).Select(__ => x);                          prev = x;                          return result;                      }                        prev = x;                      return new List<int>();                  });              })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_resume,The following statement contains a magic number: var probe = Source.From(new[] { 2' 1' 3' 4' 1 }).StatefulSelectMany<int' int' NotUsed>(() =>              {                  int? prev = null;                    return (x =>                  {                      if (x % 3 == 0)                          throw Ex;                        if (prev.HasValue)                      {                          var result = Enumerable.Range(1' prev.Value).Select(__ => x);                          prev = x;                          return result;                      }                        prev = x;                      return new List<int>();                  });              })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_resume,The following statement contains a magic number: probe.Request(2).ExpectNext(1' 1);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_resume,The following statement contains a magic number: probe.RequestNext(4);
Magic Number,Akka.Streams.Tests.Dsl,FlowStatefulSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowStatefulSelectManySpec.cs,A_StatefulSelectMany_must_be_able_to_resume,The following statement contains a magic number: probe.Request(4).ExpectNext(1' 1' 1' 1);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_work_with_various_delimiters_and_test_sequences,The following statement contains a magic number: var task = Source.From(CompleteTestSequence(delimiter))                          .Select(x => x + delimiter)                          .Via(Rechunk)                          .Via(Framing.Delimiter(delimiter' 256))                          .Grouped(1000)                          .RunWith(Sink.First<IEnumerable<ByteString>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_work_with_various_delimiters_and_test_sequences,The following statement contains a magic number: var task = Source.From(CompleteTestSequence(delimiter))                          .Select(x => x + delimiter)                          .Via(Rechunk)                          .Via(Framing.Delimiter(delimiter' 256))                          .Grouped(1000)                          .RunWith(Sink.First<IEnumerable<ByteString>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_work_with_various_delimiters_and_test_sequences,The following statement contains a magic number: task.Wait(TimeSpan.FromDays(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_work_with_various_delimiters_and_test_sequences,The following statement contains a magic number: i <= 100
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_respect_maximum_line_settings,The following statement contains a magic number: var task1 = Source.Single(ByteString.FromString("a\nb\nc\nd\n"))                  .Via(SimpleLines("\n"' 1))                  .Limit(100)                  .RunWith(Sink.Seq<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_respect_maximum_line_settings,The following statement contains a magic number: task1.Wait(TimeSpan.FromDays(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_respect_maximum_line_settings,The following statement contains a magic number: var task2 =                  Source.Single(ByteString.FromString("ab\n"))                      .Via(SimpleLines("\n"' 1))                      .Limit(100)                      .RunWith(Sink.Seq<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_respect_maximum_line_settings,The following statement contains a magic number: task2.Invoking(t => t.Wait(TimeSpan.FromSeconds(3))).ShouldThrow<Framing.FramingException>();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_work_with_empty_streams,The following statement contains a magic number: var task = Source.Empty<ByteString>().Via(SimpleLines("\n"' 256)).RunAggregate(new List<string>()' (list' s) =>              {                  list.Add(s);                  return list;              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_work_with_empty_streams,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_report_truncated_frames,The following statement contains a magic number: var task =                  Source.Single(ByteString.FromString("I habe no end"))                      .Via(SimpleLines("\n"' 256' false))                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<string>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_report_truncated_frames,The following statement contains a magic number: var task =                  Source.Single(ByteString.FromString("I habe no end"))                      .Via(SimpleLines("\n"' 256' false))                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<string>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_report_truncated_frames,The following statement contains a magic number: task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3))).ShouldThrow<Framing.FramingException>();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_allow_truncated_frames_if_configured_so,The following statement contains a magic number: var task =                  Source.Single(ByteString.FromString("I have no end"))                      .Via(SimpleLines("\n"' 256))                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<string>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_allow_truncated_frames_if_configured_so,The following statement contains a magic number: var task =                  Source.Single(ByteString.FromString("I have no end"))                      .Via(SimpleLines("\n"' 256))                      .Grouped(1000)                      .RunWith(Sink.First<IEnumerable<string>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Delimiter_bytes_based_framing_must_allow_truncated_frames_if_configured_so,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Encode,The following statement contains a magic number: var header = byteOrder == ByteOrder.LittleEndian ? h.Take(fieldLength) : h.Drop(4 - fieldLength);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_work_with_various_byte_orders_frame_lengths_and_offsets,The following statement contains a magic number: var encodedFrames = FrameLengths.Where(x => x < 1L << (fieldLength * 8)).Select(length =>                            {                                var payload = ReferenceChunk.Take(length);                                return Encode(payload' fieldOffset' fieldLength' byteOrder);                            }).ToList();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_work_with_various_byte_orders_frame_lengths_and_offsets,The following statement contains a magic number: var task = Source.From(encodedFrames)                              .Via(Rechunk)                              .Via(Framing.LengthField(fieldLength' int.MaxValue' fieldOffset' byteOrder))                              .Grouped(10000)                              .RunWith(Sink.First<IEnumerable<ByteString>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_work_with_various_byte_orders_frame_lengths_and_offsets,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_work_with_empty_streams,The following statement contains a magic number: var task = Source.Empty<ByteString>()                  .Via(Framing.LengthField(4' int.MaxValue' 0' ByteOrder.BigEndian))                  .RunAggregate(new List<ByteString>()' (list' s) =>                  {                      list.Add(s);                      return list;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_work_with_empty_streams,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_report_oversized_frames,The following statement contains a magic number: var task1 = Source.Single(Encode(ReferenceChunk.Take(100)' 0' 1' ByteOrder.BigEndian))                  .Via(Framing.LengthField(1' 99' 0' ByteOrder.BigEndian))                  .RunAggregate(new List<ByteString>()' (list' s) =>                  {                      list.Add(s);                      return list;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_report_oversized_frames,The following statement contains a magic number: var task1 = Source.Single(Encode(ReferenceChunk.Take(100)' 0' 1' ByteOrder.BigEndian))                  .Via(Framing.LengthField(1' 99' 0' ByteOrder.BigEndian))                  .RunAggregate(new List<ByteString>()' (list' s) =>                  {                      list.Add(s);                      return list;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_report_oversized_frames,The following statement contains a magic number: task1.Invoking(t => t.Wait(TimeSpan.FromSeconds(3))).ShouldThrow<Framing.FramingException>();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_report_oversized_frames,The following statement contains a magic number: var task2 = Source.Single(Encode(ReferenceChunk.Take(100)' 49' 1' ByteOrder.BigEndian))                  .Via(Framing.LengthField(1' 100' 0' ByteOrder.BigEndian))                  .RunAggregate(new List<ByteString>()' (list' s) =>                  {                      list.Add(s);                      return list;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_report_oversized_frames,The following statement contains a magic number: var task2 = Source.Single(Encode(ReferenceChunk.Take(100)' 49' 1' ByteOrder.BigEndian))                  .Via(Framing.LengthField(1' 100' 0' ByteOrder.BigEndian))                  .RunAggregate(new List<ByteString>()' (list' s) =>                  {                      list.Add(s);                      return list;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_report_oversized_frames,The following statement contains a magic number: var task2 = Source.Single(Encode(ReferenceChunk.Take(100)' 49' 1' ByteOrder.BigEndian))                  .Via(Framing.LengthField(1' 100' 0' ByteOrder.BigEndian))                  .RunAggregate(new List<ByteString>()' (list' s) =>                  {                      list.Add(s);                      return list;                  }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_report_oversized_frames,The following statement contains a magic number: task2.Invoking(t => t.Wait(TimeSpan.FromSeconds(3))).ShouldThrow<Framing.FramingException>();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_report_truncated_frames,The following statement contains a magic number: Action action = () =>                              {                                      Source.From(new[] {fullFrame' partialFrame})                                          .Via(Rechunk)                                          .Via(Framing.LengthField(fieldLength' int.MaxValue' fieldOffset' byteOrder))                                          .Grouped(10000)                                          .RunWith(Sink.First<IEnumerable<ByteString>>()' Materializer)                                          .Wait(TimeSpan.FromSeconds(5));                              };
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_report_truncated_frames,The following statement contains a magic number: Action action = () =>                              {                                      Source.From(new[] {fullFrame' partialFrame})                                          .Via(Rechunk)                                          .Via(Framing.LengthField(fieldLength' int.MaxValue' fieldOffset' byteOrder))                                          .Grouped(10000)                                          .RunWith(Sink.First<IEnumerable<ByteString>>()' Materializer)                                          .Wait(TimeSpan.FromSeconds(5));                              };
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_report_truncated_frames,The following statement contains a magic number: FrameLengths.Where(f => f < 1 << (fieldLength * 8) && f != 0)
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_support_simple_framing_adapter,The following statement contains a magic number: var codecFlow = Framing.SimpleFramingProtocol(1024)                  .Atop(rechunkBidi)                  .Atop(Framing.SimpleFramingProtocol(1024).Reversed())                  .Join(Flow.Create<ByteString>());
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_support_simple_framing_adapter,The following statement contains a magic number: var codecFlow = Framing.SimpleFramingProtocol(1024)                  .Atop(rechunkBidi)                  .Atop(Framing.SimpleFramingProtocol(1024).Reversed())                  .Join(Flow.Create<ByteString>());
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_support_simple_framing_adapter,The following statement contains a magic number: var testMessages = Enumerable.Range(1' 100).Select(_ => ReferenceChunk.Take(random.Next(1024))).ToList();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_support_simple_framing_adapter,The following statement contains a magic number: var testMessages = Enumerable.Range(1' 100).Select(_ => ReferenceChunk.Take(random.Next(1024))).ToList();
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_support_simple_framing_adapter,The following statement contains a magic number: var task = Source.From(testMessages)                  .Via(codecFlow)                  .Limit(1000)                  .RunWith(Sink.Seq<ByteString>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FramingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Length_field_based_framing_must_support_simple_framing_adapter,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,Rechunker,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Rechunk,The following statement contains a magic number: !context.IsFinishing && ThreadLocalRandom.Current.Next(1' 3) == 2
Magic Number,Akka.Streams.Tests.Dsl,Rechunker,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FramingSpec.cs,Rechunk,The following statement contains a magic number: !context.IsFinishing && ThreadLocalRandom.Current.Next(1' 3) == 2
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,GraphBackedFlowSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,GraphBackedFlowSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,PartialGraph,The following statement contains a magic number: return GraphDsl.Create(b =>              {                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.Empty<int>();                  var source4 = Source.Empty<string>();                    var inMerge = b.Add(new Merge<int>(2));                  var outMerge = b.Add(new Merge<string>(2));                  var m2 = b.Add(new Merge<int>(2));                    b.From(inMerge.Out).Via(Flow.Create<int>().Select(x => x * 2)).To(m2.In(0));                  b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(i => (i + 1).ToString())).To(outMerge.In(0));                    b.From(source2).To(inMerge.In(0));                  b.From(source3).To(m2.In(1));                  b.From(source4).To(outMerge.In(1));                  return new FlowShape<int' string>(inMerge.In(1)' outMerge.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,PartialGraph,The following statement contains a magic number: return GraphDsl.Create(b =>              {                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.Empty<int>();                  var source4 = Source.Empty<string>();                    var inMerge = b.Add(new Merge<int>(2));                  var outMerge = b.Add(new Merge<string>(2));                  var m2 = b.Add(new Merge<int>(2));                    b.From(inMerge.Out).Via(Flow.Create<int>().Select(x => x * 2)).To(m2.In(0));                  b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(i => (i + 1).ToString())).To(outMerge.In(0));                    b.From(source2).To(inMerge.In(0));                  b.From(source3).To(m2.In(1));                  b.From(source4).To(outMerge.In(1));                  return new FlowShape<int' string>(inMerge.In(1)' outMerge.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,PartialGraph,The following statement contains a magic number: return GraphDsl.Create(b =>              {                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.Empty<int>();                  var source4 = Source.Empty<string>();                    var inMerge = b.Add(new Merge<int>(2));                  var outMerge = b.Add(new Merge<string>(2));                  var m2 = b.Add(new Merge<int>(2));                    b.From(inMerge.Out).Via(Flow.Create<int>().Select(x => x * 2)).To(m2.In(0));                  b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(i => (i + 1).ToString())).To(outMerge.In(0));                    b.From(source2).To(inMerge.In(0));                  b.From(source3).To(m2.In(1));                  b.From(source4).To(outMerge.In(1));                  return new FlowShape<int' string>(inMerge.In(1)' outMerge.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,PartialGraph,The following statement contains a magic number: return GraphDsl.Create(b =>              {                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.Empty<int>();                  var source4 = Source.Empty<string>();                    var inMerge = b.Add(new Merge<int>(2));                  var outMerge = b.Add(new Merge<string>(2));                  var m2 = b.Add(new Merge<int>(2));                    b.From(inMerge.Out).Via(Flow.Create<int>().Select(x => x * 2)).To(m2.In(0));                  b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(i => (i + 1).ToString())).To(outMerge.In(0));                    b.From(source2).To(inMerge.In(0));                  b.From(source3).To(m2.In(1));                  b.From(source4).To(outMerge.In(1));                  return new FlowShape<int' string>(inMerge.In(1)' outMerge.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,PartialGraph,The following statement contains a magic number: return GraphDsl.Create(b =>              {                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.Empty<int>();                  var source4 = Source.Empty<string>();                    var inMerge = b.Add(new Merge<int>(2));                  var outMerge = b.Add(new Merge<string>(2));                  var m2 = b.Add(new Merge<int>(2));                    b.From(inMerge.Out).Via(Flow.Create<int>().Select(x => x * 2)).To(m2.In(0));                  b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(i => (i + 1).ToString())).To(outMerge.In(0));                    b.From(source2).To(inMerge.In(0));                  b.From(source3).To(m2.In(1));                  b.From(source4).To(outMerge.In(1));                  return new FlowShape<int' string>(inMerge.In(1)' outMerge.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,PartialGraph,The following statement contains a magic number: return GraphDsl.Create(b =>              {                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.Empty<int>();                  var source4 = Source.Empty<string>();                    var inMerge = b.Add(new Merge<int>(2));                  var outMerge = b.Add(new Merge<string>(2));                  var m2 = b.Add(new Merge<int>(2));                    b.From(inMerge.Out).Via(Flow.Create<int>().Select(x => x * 2)).To(m2.In(0));                  b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(i => (i + 1).ToString())).To(outMerge.In(0));                    b.From(source2).To(inMerge.In(0));                  b.From(source3).To(m2.In(1));                  b.From(source4).To(outMerge.In(1));                  return new FlowShape<int' string>(inMerge.In(1)' outMerge.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,PartialGraph,The following statement contains a magic number: return GraphDsl.Create(b =>              {                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.Empty<int>();                  var source4 = Source.Empty<string>();                    var inMerge = b.Add(new Merge<int>(2));                  var outMerge = b.Add(new Merge<string>(2));                  var m2 = b.Add(new Merge<int>(2));                    b.From(inMerge.Out).Via(Flow.Create<int>().Select(x => x * 2)).To(m2.In(0));                  b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(i => (i + 1).ToString())).To(outMerge.In(0));                    b.From(source2).To(inMerge.In(0));                  b.From(source3).To(m2.In(1));                  b.From(source4).To(outMerge.In(1));                  return new FlowShape<int' string>(inMerge.In(1)' outMerge.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_flows_should_be_reusable_multiple_times,The following statement contains a magic number: var flow =                  Flow.FromGraph(GraphDsl.Create(Flow.Create<int>().Select(x=>x*2)'                      (b' importFlow) => new FlowShape<int' int>(importFlow.Inlet' importFlow.Outlet)));
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_flows_should_be_reusable_multiple_times,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var source = Source.From(Enumerable.Range(1' 5));                  b.From(source).Via(flow).Via(flow).To(Sink.FromSubscriber(probe));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_flows_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 5' new[] {4' 8' 12' 16' 20});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_flows_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 5' new[] {4' 8' 12' 16' 20});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_flows_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 5' new[] {4' 8' 12' 16' 20});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_flows_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 5' new[] {4' 8' 12' 16' 20});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_flows_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 5' new[] {4' 8' 12' 16' 20});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_flows_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 5' new[] {4' 8' 12' 16' 20});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_work_with_a_Sink_when_having_KeyedSource_inside,The following statement contains a magic number: ValidateProbe(probe' 4' new[] {0' 1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_work_with_a_Sink_when_having_KeyedSource_inside,The following statement contains a magic number: ValidateProbe(probe' 4' new[] {0' 1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_work_with_a_Sink_when_having_KeyedSource_inside,The following statement contains a magic number: ValidateProbe(probe' 4' new[] {0' 1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: var source =                  Source.FromGraph(GraphDsl.Create(Source.From(Enumerable.Range(1' 5))'                      (b' s) =>                      {                          var o = b.From(s.Outlet).Via(Flow.Create<int>().Select(x => x*2));                          return new SourceShape<int>(o.Out);                      }));
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: var source =                  Source.FromGraph(GraphDsl.Create(Source.From(Enumerable.Range(1' 5))'                      (b' s) =>                      {                          var o = b.From(s.Outlet).Via(Flow.Create<int>().Select(x => x*2));                          return new SourceShape<int>(o.Out);                      }));
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(source' source' Keep.Both' (b' s1' s2) =>              {                  var merge = b.Add(new Merge<int>(2));                  b.From(s1.Outlet).To(merge.In(0));                  b.From(merge.Out)                      .To(Sink.FromSubscriber(probe).MapMaterializedValue(_ => Tuple.Create(NotUsed.Instance' NotUsed.Instance)));                  b.From(s2.Outlet).Via(Flow.Create<int>().Select(x => x*10)).To(merge.In(1));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(source' source' Keep.Both' (b' s1' s2) =>              {                  var merge = b.Add(new Merge<int>(2));                  b.From(s1.Outlet).To(merge.In(0));                  b.From(merge.Out)                      .To(Sink.FromSubscriber(probe).MapMaterializedValue(_ => Tuple.Create(NotUsed.Instance' NotUsed.Instance)));                  b.From(s2.Outlet).Via(Flow.Create<int>().Select(x => x*10)).To(merge.In(1));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sources_should_be_reusable_multiple_times,The following statement contains a magic number: ValidateProbe(probe' 10' new[] {2' 4' 6' 8' 10' 20' 40' 60' 80' 100});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sinks_should_work_with_a_Source_when_having_KeyedSink_inside,The following statement contains a magic number: ValidateProbe(probe' 4' new[] { 0' 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sinks_should_work_with_a_Source_when_having_KeyedSink_inside,The following statement contains a magic number: ValidateProbe(probe' 4' new[] { 0' 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_turned_into_sinks_should_work_with_a_Source_when_having_KeyedSink_inside,The following statement contains a magic number: ValidateProbe(probe' 4' new[] { 0' 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_used_together_should_allow_connecting_source_to_sink_directly,The following statement contains a magic number: ValidateProbe(probe' 4' new[] {0' 1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_used_together_should_allow_connecting_source_to_sink_directly,The following statement contains a magic number: ValidateProbe(probe' 4' new[] {0' 1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,GraphBackedFlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBackedFlowSpec.cs,FlowGraphs_when_used_together_should_allow_connecting_source_to_sink_directly,The following statement contains a magic number: ValidateProbe(probe' 4' new[] {0' 1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,GraphBalanceSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,GraphBalanceSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_subscribers_which_signal_demand,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    sub2.Request(2);                  c2.ExpectNext(2' 3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_subscribers_which_signal_demand,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    sub2.Request(2);                  c2.ExpectNext(2' 3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_subscribers_which_signal_demand,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    sub2.Request(2);                  c2.ExpectNext(2' 3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_subscribers_which_signal_demand,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    sub2.Request(2);                  c2.ExpectNext(2' 3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_subscribers_which_signal_demand,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    sub2.Request(2);                  c2.ExpectNext(2' 3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_subscribers_which_signal_demand,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    sub2.Request(2);                  c2.ExpectNext(2' 3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var p2 = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)' (b' p2Sink) =>                  {                      var balance = b.Add(new Balance<int>(2' true));                      var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<IPublisher<int>>(_ => null);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(s1).MapMaterializedValue<IPublisher<int>>(_ => null));                      b.From(balance.Out(1)).To(p2Sink);                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = s1.ExpectSubscription();                    sub1.Request(1);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    // still no demand from s2                  s2.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub2.Request(2);                  s1.ExpectNext(1);                  s2.ExpectNext(2' 3);                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var p2 = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)' (b' p2Sink) =>                  {                      var balance = b.Add(new Balance<int>(2' true));                      var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<IPublisher<int>>(_ => null);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(s1).MapMaterializedValue<IPublisher<int>>(_ => null));                      b.From(balance.Out(1)).To(p2Sink);                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = s1.ExpectSubscription();                    sub1.Request(1);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    // still no demand from s2                  s2.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub2.Request(2);                  s1.ExpectNext(1);                  s2.ExpectNext(2' 3);                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var p2 = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)' (b' p2Sink) =>                  {                      var balance = b.Add(new Balance<int>(2' true));                      var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<IPublisher<int>>(_ => null);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(s1).MapMaterializedValue<IPublisher<int>>(_ => null));                      b.From(balance.Out(1)).To(p2Sink);                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = s1.ExpectSubscription();                    sub1.Request(1);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    // still no demand from s2                  s2.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub2.Request(2);                  s1.ExpectNext(1);                  s2.ExpectNext(2' 3);                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var p2 = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)' (b' p2Sink) =>                  {                      var balance = b.Add(new Balance<int>(2' true));                      var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<IPublisher<int>>(_ => null);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(s1).MapMaterializedValue<IPublisher<int>>(_ => null));                      b.From(balance.Out(1)).To(p2Sink);                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = s1.ExpectSubscription();                    sub1.Request(1);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    // still no demand from s2                  s2.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub2.Request(2);                  s1.ExpectNext(1);                  s2.ExpectNext(2' 3);                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var p2 = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)' (b' p2Sink) =>                  {                      var balance = b.Add(new Balance<int>(2' true));                      var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<IPublisher<int>>(_ => null);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(s1).MapMaterializedValue<IPublisher<int>>(_ => null));                      b.From(balance.Out(1)).To(p2Sink);                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = s1.ExpectSubscription();                    sub1.Request(1);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    // still no demand from s2                  s2.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub2.Request(2);                  s1.ExpectNext(1);                  s2.ExpectNext(2' 3);                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var p2 = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)' (b' p2Sink) =>                  {                      var balance = b.Add(new Balance<int>(2' true));                      var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<IPublisher<int>>(_ => null);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(s1).MapMaterializedValue<IPublisher<int>>(_ => null));                      b.From(balance.Out(1)).To(p2Sink);                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = s1.ExpectSubscription();                    sub1.Request(1);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    // still no demand from s2                  s2.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub2.Request(2);                  s1.ExpectNext(1);                  s2.ExpectNext(2' 3);                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var p2 = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)' (b' p2Sink) =>                  {                      var balance = b.Add(new Balance<int>(2' true));                      var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<IPublisher<int>>(_ => null);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(s1).MapMaterializedValue<IPublisher<int>>(_ => null));                      b.From(balance.Out(1)).To(p2Sink);                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = s1.ExpectSubscription();                    sub1.Request(1);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    // still no demand from s2                  s2.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub2.Request(2);                  s1.ExpectNext(1);                  s2.ExpectNext(2' 3);                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_non_cancelled_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var t = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)'                      Sink.AsPublisher<int>(false)' Keep.Both' (b' p2Sink' p3Sink) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0))                              .To(                                  Sink.FromSubscriber(s1)                                      .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null));                          b.From(balance.Out(1)).To(p2Sink);                          b.From(balance.Out(2)).To(p3Sink);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p2 = t.Item1;                  var p3 = t.Item2;                    var sub1 = s1.ExpectSubscription();                  sub1.Request(1);                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    var s3 = TestSubscriber.CreateManualProbe<int>(this);                  p3.Subscribe(s3);                  var sub3 = s3.ExpectSubscription();                    sub2.Request(2);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub3.Cancel();                    s1.ExpectNext(1);                  s2.ExpectNextN(2).ShouldAllBeEquivalentTo(new[] {2' 3});                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_non_cancelled_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var t = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)'                      Sink.AsPublisher<int>(false)' Keep.Both' (b' p2Sink' p3Sink) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0))                              .To(                                  Sink.FromSubscriber(s1)                                      .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null));                          b.From(balance.Out(1)).To(p2Sink);                          b.From(balance.Out(2)).To(p3Sink);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p2 = t.Item1;                  var p3 = t.Item2;                    var sub1 = s1.ExpectSubscription();                  sub1.Request(1);                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    var s3 = TestSubscriber.CreateManualProbe<int>(this);                  p3.Subscribe(s3);                  var sub3 = s3.ExpectSubscription();                    sub2.Request(2);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub3.Cancel();                    s1.ExpectNext(1);                  s2.ExpectNextN(2).ShouldAllBeEquivalentTo(new[] {2' 3});                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_non_cancelled_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var t = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)'                      Sink.AsPublisher<int>(false)' Keep.Both' (b' p2Sink' p3Sink) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0))                              .To(                                  Sink.FromSubscriber(s1)                                      .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null));                          b.From(balance.Out(1)).To(p2Sink);                          b.From(balance.Out(2)).To(p3Sink);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p2 = t.Item1;                  var p3 = t.Item2;                    var sub1 = s1.ExpectSubscription();                  sub1.Request(1);                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    var s3 = TestSubscriber.CreateManualProbe<int>(this);                  p3.Subscribe(s3);                  var sub3 = s3.ExpectSubscription();                    sub2.Request(2);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub3.Cancel();                    s1.ExpectNext(1);                  s2.ExpectNextN(2).ShouldAllBeEquivalentTo(new[] {2' 3});                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_non_cancelled_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var t = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)'                      Sink.AsPublisher<int>(false)' Keep.Both' (b' p2Sink' p3Sink) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0))                              .To(                                  Sink.FromSubscriber(s1)                                      .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null));                          b.From(balance.Out(1)).To(p2Sink);                          b.From(balance.Out(2)).To(p3Sink);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p2 = t.Item1;                  var p3 = t.Item2;                    var sub1 = s1.ExpectSubscription();                  sub1.Request(1);                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    var s3 = TestSubscriber.CreateManualProbe<int>(this);                  p3.Subscribe(s3);                  var sub3 = s3.ExpectSubscription();                    sub2.Request(2);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub3.Cancel();                    s1.ExpectNext(1);                  s2.ExpectNextN(2).ShouldAllBeEquivalentTo(new[] {2' 3});                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_non_cancelled_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var t = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)'                      Sink.AsPublisher<int>(false)' Keep.Both' (b' p2Sink' p3Sink) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0))                              .To(                                  Sink.FromSubscriber(s1)                                      .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null));                          b.From(balance.Out(1)).To(p2Sink);                          b.From(balance.Out(2)).To(p3Sink);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p2 = t.Item1;                  var p3 = t.Item2;                    var sub1 = s1.ExpectSubscription();                  sub1.Request(1);                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    var s3 = TestSubscriber.CreateManualProbe<int>(this);                  p3.Subscribe(s3);                  var sub3 = s3.ExpectSubscription();                    sub2.Request(2);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub3.Cancel();                    s1.ExpectNext(1);                  s2.ExpectNextN(2).ShouldAllBeEquivalentTo(new[] {2' 3});                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_non_cancelled_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var t = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)'                      Sink.AsPublisher<int>(false)' Keep.Both' (b' p2Sink' p3Sink) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0))                              .To(                                  Sink.FromSubscriber(s1)                                      .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null));                          b.From(balance.Out(1)).To(p2Sink);                          b.From(balance.Out(2)).To(p3Sink);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p2 = t.Item1;                  var p3 = t.Item2;                    var sub1 = s1.ExpectSubscription();                  sub1.Request(1);                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    var s3 = TestSubscriber.CreateManualProbe<int>(this);                  p3.Subscribe(s3);                  var sub3 = s3.ExpectSubscription();                    sub2.Request(2);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub3.Cancel();                    s1.ExpectNext(1);                  s2.ExpectNextN(2).ShouldAllBeEquivalentTo(new[] {2' 3});                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_non_cancelled_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var t = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)'                      Sink.AsPublisher<int>(false)' Keep.Both' (b' p2Sink' p3Sink) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0))                              .To(                                  Sink.FromSubscriber(s1)                                      .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null));                          b.From(balance.Out(1)).To(p2Sink);                          b.From(balance.Out(2)).To(p3Sink);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p2 = t.Item1;                  var p3 = t.Item2;                    var sub1 = s1.ExpectSubscription();                  sub1.Request(1);                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    var s3 = TestSubscriber.CreateManualProbe<int>(this);                  p3.Subscribe(s3);                  var sub3 = s3.ExpectSubscription();                    sub2.Request(2);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub3.Cancel();                    s1.ExpectNext(1);                  s2.ExpectNextN(2).ShouldAllBeEquivalentTo(new[] {2' 3});                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_support_waiting_for_demand_from_all_non_cancelled_downstream_subscriptions,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s1 = TestSubscriber.CreateManualProbe<int>(this);                    var t = RunnableGraph.FromGraph(GraphDsl.Create(Sink.AsPublisher<int>(false)'                      Sink.AsPublisher<int>(false)' Keep.Both' (b' p2Sink' p3Sink) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0))                              .To(                                  Sink.FromSubscriber(s1)                                      .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null));                          b.From(balance.Out(1)).To(p2Sink);                          b.From(balance.Out(2)).To(p3Sink);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p2 = t.Item1;                  var p3 = t.Item2;                    var sub1 = s1.ExpectSubscription();                  sub1.Request(1);                    var s2 = TestSubscriber.CreateManualProbe<int>(this);                  p2.Subscribe(s2);                  var sub2 = s2.ExpectSubscription();                    var s3 = TestSubscriber.CreateManualProbe<int>(this);                  p3.Subscribe(s3);                  var sub3 = s3.ExpectSubscription();                    sub2.Request(2);                  s1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub3.Cancel();                    s1.ExpectNext(1);                  s2.ExpectNextN(2).ShouldAllBeEquivalentTo(new[] {2' 3});                  s1.ExpectComplete();                  s2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_1_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(1));                      var source = b.Add(Source.From(Enumerable.Range(1' 3)));                        b.From(source).To(balance.In);                      return new SourceShape<int>(balance.Out(0));                  })).RunAggregate(new List<int>()' (list' i) =>                  {                      list.Add(i);                      return list;                  }' Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(new[] {1' 2' 3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_1_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(1));                      var source = b.Add(Source.From(Enumerable.Range(1' 3)));                        b.From(source).To(balance.In);                      return new SourceShape<int>(balance.Out(0));                  })).RunAggregate(new List<int>()' (list' i) =>                  {                      list.Add(i);                      return list;                  }' Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(new[] {1' 2' 3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_1_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(1));                      var source = b.Add(Source.From(Enumerable.Range(1' 3)));                        b.From(source).To(balance.In);                      return new SourceShape<int>(balance.Out(0));                  })).RunAggregate(new List<int>()' (list' i) =>                  {                      list.Add(i);                      return list;                  }' Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(new[] {1' 2' 3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_1_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(1));                      var source = b.Add(Source.From(Enumerable.Range(1' 3)));                        b.From(source).To(balance.In);                      return new SourceShape<int>(balance.Out(0));                  })).RunAggregate(new List<int>()' (list' i) =>                  {                      list.Add(i);                      return list;                  }' Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(new[] {1' 2' 3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_work_with_5_way_balance,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.First<IEnumerable<int>>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(sink' sink' sink' sink' sink' Tuple.Create'                      (b' s1' s2' s3' s4' s5) =>                      {                          var balance = b.Add(new Balance<int>(5' true));                          var source = Source.From(Enumerable.Range(0' 15)).MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_=> null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).Via(Flow.Create<int>().Grouped(15)).To(s1);                          b.From(balance.Out(1)).Via(Flow.Create<int>().Grouped(15)).To(s2);                          b.From(balance.Out(2)).Via(Flow.Create<int>().Grouped(15)).To(s3);                          b.From(balance.Out(3)).Via(Flow.Create<int>().Grouped(15)).To(s4);                          b.From(balance.Out(4)).Via(Flow.Create<int>().Grouped(15)).To(s5);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.SelectMany(l=>l).ShouldAllBeEquivalentTo(Enumerable.Range(0' 15));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_all_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int numElementsForSink = 10000;                  var outputs = Sink.Aggregate<int' int>(0' (sum' i) => sum + i);                  var t = RunnableGraph.FromGraph(GraphDsl.Create(outputs' outputs' outputs' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.Repeat(1)                                  .Take(numElementsForSink*3)                                  .MapMaterializedValue<Tuple<Task<int>' Task<int>' Task<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().NotContain(0);                  task.Result.Sum().Should().Be(numElementsForSink*3);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_all_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int numElementsForSink = 10000;                  var outputs = Sink.Aggregate<int' int>(0' (sum' i) => sum + i);                  var t = RunnableGraph.FromGraph(GraphDsl.Create(outputs' outputs' outputs' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.Repeat(1)                                  .Take(numElementsForSink*3)                                  .MapMaterializedValue<Tuple<Task<int>' Task<int>' Task<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().NotContain(0);                  task.Result.Sum().Should().Be(numElementsForSink*3);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_all_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int numElementsForSink = 10000;                  var outputs = Sink.Aggregate<int' int>(0' (sum' i) => sum + i);                  var t = RunnableGraph.FromGraph(GraphDsl.Create(outputs' outputs' outputs' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.Repeat(1)                                  .Take(numElementsForSink*3)                                  .MapMaterializedValue<Tuple<Task<int>' Task<int>' Task<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().NotContain(0);                  task.Result.Sum().Should().Be(numElementsForSink*3);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_all_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int numElementsForSink = 10000;                  var outputs = Sink.Aggregate<int' int>(0' (sum' i) => sum + i);                  var t = RunnableGraph.FromGraph(GraphDsl.Create(outputs' outputs' outputs' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.Repeat(1)                                  .Take(numElementsForSink*3)                                  .MapMaterializedValue<Tuple<Task<int>' Task<int>' Task<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().NotContain(0);                  task.Result.Sum().Should().Be(numElementsForSink*3);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_all_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int numElementsForSink = 10000;                  var outputs = Sink.Aggregate<int' int>(0' (sum' i) => sum + i);                  var t = RunnableGraph.FromGraph(GraphDsl.Create(outputs' outputs' outputs' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.Repeat(1)                                  .Take(numElementsForSink*3)                                  .MapMaterializedValue<Tuple<Task<int>' Task<int>' Task<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().NotContain(0);                  task.Result.Sum().Should().Be(numElementsForSink*3);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_balance_between_all_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int numElementsForSink = 10000;                  var outputs = Sink.Aggregate<int' int>(0' (sum' i) => sum + i);                  var t = RunnableGraph.FromGraph(GraphDsl.Create(outputs' outputs' outputs' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3' true));                          var source =                              Source.Repeat(1)                                  .Take(numElementsForSink*3)                                  .MapMaterializedValue<Tuple<Task<int>' Task<int>' Task<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().NotContain(0);                  task.Result.Sum().Should().Be(numElementsForSink*3);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_fairly_balance_between_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = this.SinkProbe<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(probe' probe' probe' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3));                          var source =                              Source.From(Enumerable.Range(1'7))                                  .MapMaterializedValue<Tuple<TestSubscriber.Probe<int>' TestSubscriber.Probe<int>' TestSubscriber.Probe<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p1 = t.Item1;                  var p2 = t.Item2;                  var p3 = t.Item3;                    p1.RequestNext(1);                  p2.RequestNext(2);                  p3.RequestNext(3);                  p2.RequestNext(4);                  p1.RequestNext(5);                  p3.RequestNext(6);                  p1.RequestNext(7);                    p1.ExpectComplete();                  p2.ExpectComplete();                  p3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_fairly_balance_between_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = this.SinkProbe<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(probe' probe' probe' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3));                          var source =                              Source.From(Enumerable.Range(1'7))                                  .MapMaterializedValue<Tuple<TestSubscriber.Probe<int>' TestSubscriber.Probe<int>' TestSubscriber.Probe<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p1 = t.Item1;                  var p2 = t.Item2;                  var p3 = t.Item3;                    p1.RequestNext(1);                  p2.RequestNext(2);                  p3.RequestNext(3);                  p2.RequestNext(4);                  p1.RequestNext(5);                  p3.RequestNext(6);                  p1.RequestNext(7);                    p1.ExpectComplete();                  p2.ExpectComplete();                  p3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_fairly_balance_between_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = this.SinkProbe<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(probe' probe' probe' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3));                          var source =                              Source.From(Enumerable.Range(1'7))                                  .MapMaterializedValue<Tuple<TestSubscriber.Probe<int>' TestSubscriber.Probe<int>' TestSubscriber.Probe<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p1 = t.Item1;                  var p2 = t.Item2;                  var p3 = t.Item3;                    p1.RequestNext(1);                  p2.RequestNext(2);                  p3.RequestNext(3);                  p2.RequestNext(4);                  p1.RequestNext(5);                  p3.RequestNext(6);                  p1.RequestNext(7);                    p1.ExpectComplete();                  p2.ExpectComplete();                  p3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_fairly_balance_between_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = this.SinkProbe<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(probe' probe' probe' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3));                          var source =                              Source.From(Enumerable.Range(1'7))                                  .MapMaterializedValue<Tuple<TestSubscriber.Probe<int>' TestSubscriber.Probe<int>' TestSubscriber.Probe<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p1 = t.Item1;                  var p2 = t.Item2;                  var p3 = t.Item3;                    p1.RequestNext(1);                  p2.RequestNext(2);                  p3.RequestNext(3);                  p2.RequestNext(4);                  p1.RequestNext(5);                  p3.RequestNext(6);                  p1.RequestNext(7);                    p1.ExpectComplete();                  p2.ExpectComplete();                  p3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_fairly_balance_between_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = this.SinkProbe<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(probe' probe' probe' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3));                          var source =                              Source.From(Enumerable.Range(1'7))                                  .MapMaterializedValue<Tuple<TestSubscriber.Probe<int>' TestSubscriber.Probe<int>' TestSubscriber.Probe<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p1 = t.Item1;                  var p2 = t.Item2;                  var p3 = t.Item3;                    p1.RequestNext(1);                  p2.RequestNext(2);                  p3.RequestNext(3);                  p2.RequestNext(4);                  p1.RequestNext(5);                  p3.RequestNext(6);                  p1.RequestNext(7);                    p1.ExpectComplete();                  p2.ExpectComplete();                  p3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_fairly_balance_between_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = this.SinkProbe<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(probe' probe' probe' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3));                          var source =                              Source.From(Enumerable.Range(1'7))                                  .MapMaterializedValue<Tuple<TestSubscriber.Probe<int>' TestSubscriber.Probe<int>' TestSubscriber.Probe<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p1 = t.Item1;                  var p2 = t.Item2;                  var p3 = t.Item3;                    p1.RequestNext(1);                  p2.RequestNext(2);                  p3.RequestNext(3);                  p2.RequestNext(4);                  p1.RequestNext(5);                  p3.RequestNext(6);                  p1.RequestNext(7);                    p1.ExpectComplete();                  p2.ExpectComplete();                  p3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_fairly_balance_between_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = this.SinkProbe<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(probe' probe' probe' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3));                          var source =                              Source.From(Enumerable.Range(1'7))                                  .MapMaterializedValue<Tuple<TestSubscriber.Probe<int>' TestSubscriber.Probe<int>' TestSubscriber.Probe<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p1 = t.Item1;                  var p2 = t.Item2;                  var p3 = t.Item3;                    p1.RequestNext(1);                  p2.RequestNext(2);                  p3.RequestNext(3);                  p2.RequestNext(4);                  p1.RequestNext(5);                  p3.RequestNext(6);                  p1.RequestNext(7);                    p1.ExpectComplete();                  p2.ExpectComplete();                  p3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_fairly_balance_between_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = this.SinkProbe<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(probe' probe' probe' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3));                          var source =                              Source.From(Enumerable.Range(1'7))                                  .MapMaterializedValue<Tuple<TestSubscriber.Probe<int>' TestSubscriber.Probe<int>' TestSubscriber.Probe<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p1 = t.Item1;                  var p2 = t.Item2;                  var p3 = t.Item3;                    p1.RequestNext(1);                  p2.RequestNext(2);                  p3.RequestNext(3);                  p2.RequestNext(4);                  p1.RequestNext(5);                  p3.RequestNext(6);                  p1.RequestNext(7);                    p1.ExpectComplete();                  p2.ExpectComplete();                  p3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_fairly_balance_between_three_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = this.SinkProbe<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(probe' probe' probe' Tuple.Create'                      (b' o1' o2' o3) =>                      {                          var balance = b.Add(new Balance<int>(3));                          var source =                              Source.From(Enumerable.Range(1'7))                                  .MapMaterializedValue<Tuple<TestSubscriber.Probe<int>' TestSubscriber.Probe<int>' TestSubscriber.Probe<int>>>(_ => null);                          b.From(source).To(balance.In);                          b.From(balance.Out(0)).To(o1);                          b.From(balance.Out(1)).To(o2);                          b.From(balance.Out(2)).To(o3);                          return ClosedShape.Instance;                      })).Run(Materializer);                  var p1 = t.Item1;                  var p2 = t.Item2;                  var p3 = t.Item3;                    p1.RequestNext(1);                  p2.RequestNext(2);                  p3.RequestNext(3);                  p2.RequestNext(4);                  p1.RequestNext(5);                  p3.RequestNext(6);                  p1.RequestNext(7);                    p1.ExpectComplete();                  p2.ExpectComplete();                  p3.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_produce_to_second_even_though_first_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Cancel();                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  c2.ExpectNext(1' 2' 3);                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_produce_to_second_even_though_first_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Cancel();                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  c2.ExpectNext(1' 2' 3);                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_produce_to_second_even_though_first_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Cancel();                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  c2.ExpectNext(1' 2' 3);                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_produce_to_second_even_though_first_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Cancel();                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  c2.ExpectNext(1' 2' 3);                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_produce_to_second_even_though_first_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Cancel();                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  c2.ExpectNext(1' 2' 3);                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_produce_to_first_even_though_second_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_produce_to_first_even_though_second_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_produce_to_first_even_though_second_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_produce_to_first_even_though_second_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_produce_to_first_even_though_second_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_cancel_upstream_when_downstream_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bsub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  p1.ExpectRequest(bsub' 16);                  bsub.SendNext(1);                  c1.ExpectNext(1);                    sub2.Request(1);                  bsub.SendNext(2);                  c2.ExpectNext(2);                    sub1.Cancel();                  sub2.Cancel();                  bsub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_cancel_upstream_when_downstream_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bsub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  p1.ExpectRequest(bsub' 16);                  bsub.SendNext(1);                  c1.ExpectNext(1);                    sub2.Request(1);                  bsub.SendNext(2);                  c2.ExpectNext(2);                    sub1.Cancel();                  sub2.Cancel();                  bsub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_cancel_upstream_when_downstream_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bsub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  p1.ExpectRequest(bsub' 16);                  bsub.SendNext(1);                  c1.ExpectNext(1);                    sub2.Request(1);                  bsub.SendNext(2);                  c2.ExpectNext(2);                    sub1.Cancel();                  sub2.Cancel();                  bsub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBalanceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBalanceSpec.cs,A_Balance_must_cancel_upstream_when_downstream_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var balance = b.Add(new Balance<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(balance.In);                      b.From(balance.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(balance.Out(1)).To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bsub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  p1.ExpectRequest(bsub' 16);                  bsub.SendNext(1);                  c1.ExpectNext(1);                    sub2.Request(1);                  bsub.SendNext(2);                  c2.ExpectNext(2);                    sub1.Cancel();                  sub2.Cancel();                  bsub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,GraphBroadcastSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,GraphBroadcastSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_broadcast_to_other_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create (b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                    c1.ExpectNext(1).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext(1' 2).ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2' 3).ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext(3).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_one_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(1));                      var source = b.Add(Source.From(Enumerable.Range(1' 3)));                        b.From(source).To(broadcast.In);                        return new SourceShape<int>(broadcast.Out(0));                  })).RunAggregate(new List<int>()' (list' i) =>                  {                      list.Add(i);                      return list;                  }' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2' 3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_one_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(1));                      var source = b.Add(Source.From(Enumerable.Range(1' 3)));                        b.From(source).To(broadcast.In);                        return new SourceShape<int>(broadcast.Out(0));                  })).RunAggregate(new List<int>()' (list' i) =>                  {                      list.Add(i);                      return list;                  }' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2' 3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_one_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(1));                      var source = b.Add(Source.From(Enumerable.Range(1' 3)));                        b.From(source).To(broadcast.In);                        return new SourceShape<int>(broadcast.Out(0));                  })).RunAggregate(new List<int>()' (list' i) =>                  {                      list.Add(i);                      return list;                  }' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2' 3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_one_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(1));                      var source = b.Add(Source.From(Enumerable.Range(1' 3)));                        b.From(source).To(broadcast.In);                        return new SourceShape<int>(broadcast.Out(0));                  })).RunAggregate(new List<int>()' (list' i) =>                  {                      list.Add(i);                      return list;                  }' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(new[] {1' 2' 3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_work_with_n_way_braodcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var headSink = Sink.First<IEnumerable<int>>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(headSink' headSink' headSink' headSink' headSink'Tuple.Create'                      (b' p1' p2' p3' p4' p5) =>                      {                          var broadcast = b.Add(new Broadcast<int>(5));                          var source = b.Add(Source.From(Enumerable.Range(1' 3)));                            b.From(source).To(broadcast.In);                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Grouped(5)).To(p1.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Grouped(5)).To(p2.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(5)).To(p3.Inlet);                          b.From(broadcast.Out(3)).Via(Flow.Create<int>().Grouped(5)).To(p4.Inlet);                          b.From(broadcast.Out(4)).Via(Flow.Create<int>().Grouped(5)).To(p5.Inlet);                          return ClosedShape.Instance;                      })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3' t.Item4' t.Item5);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  foreach (var list in task.Result)                      list.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });                           }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_produce_to_other_even_though_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Cancel();                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  c2.ExpectNext(1' 2' 3);                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_produce_to_other_even_though_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Cancel();                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  c2.ExpectNext(1' 2' 3);                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_produce_to_other_even_though_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Cancel();                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  c2.ExpectNext(1' 2' 3);                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_produce_to_other_even_though_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Cancel();                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  c2.ExpectNext(1' 2' 3);                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_produce_to_other_even_though_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Cancel();                  var sub2 = c2.ExpectSubscription();                  sub2.Request(3);                  c2.ExpectNext(1' 2' 3);                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_produce_to_downstream_even_though_other_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Named("identity-a"))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Named("identity-b"))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_produce_to_downstream_even_though_other_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Named("identity-a"))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Named("identity-b"))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_produce_to_downstream_even_though_other_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Named("identity-a"))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Named("identity-b"))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_produce_to_downstream_even_though_other_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Named("identity-a"))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Named("identity-b"))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_produce_to_downstream_even_though_other_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.From(Enumerable.Range(1' 3));                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>().Named("identity-a"))                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>().Named("identity-b"))                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bSub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(bSub' 16);                  bSub.SendNext(1);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  bSub.SendNext(2);                  c1.ExpectNext(2);                  c2.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  bSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bSub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(bSub' 16);                  bSub.SendNext(1);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  bSub.SendNext(2);                  c1.ExpectNext(2);                  c2.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  bSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bSub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(bSub' 16);                  bSub.SendNext(1);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  bSub.SendNext(2);                  c1.ExpectNext(2);                  c2.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  bSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bSub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(bSub' 16);                  bSub.SendNext(1);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  bSub.SendNext(2);                  c1.ExpectNext(2);                  c2.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  bSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bSub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(bSub' 16);                  bSub.SendNext(1);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  bSub.SendNext(2);                  c1.ExpectNext(2);                  c2.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  bSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bSub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(bSub' 16);                  bSub.SendNext(1);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  bSub.SendNext(2);                  c1.ExpectNext(2);                  c2.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  bSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<int>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      var source = Source.FromPublisher(p1.Publisher);                      b.From(source).To(broadcast.In);                      b.From(broadcast.Out(0))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1))                          .Via(Flow.Create<int>())                          .To(Sink.FromSubscriber(c2));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var bSub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(bSub' 16);                  bSub.SendNext(1);                  c1.ExpectNext(1);                  c2.ExpectNext(1);                  bSub.SendNext(2);                  c1.ExpectNext(2);                  c2.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  bSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_pass_along_early_cancellation,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<int>(this);                    var sink = Sink.FromGraph(GraphDsl.Create(b =>                  {                      var broadcast = b.Add(new Broadcast<int>(2));                      b.From(broadcast.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(broadcast.Out(1)).To(Sink.FromSubscriber(c2));                      return new SinkShape<int>(broadcast.In);                  }));                    var s = Source.AsSubscriber<int>().To(sink).Run(Materializer);                    var up = TestPublisher.CreateManualProbe<int>(this);                    var downSub1 = c1.ExpectSubscription();                  var downSub2 = c2.ExpectSubscription();                  downSub1.Cancel();                  downSub2.Cancel();                    up.Subscribe(s);                  var upSub = up.ExpectSubscription();                  upSub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AltoTo_must_broadcast,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                    ps1.Request(6);                  ps2.Request(6);                  ps1.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps1.ExpectComplete();                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AlsoTo_must_continue_if_sink_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                                    ps2.Request(6);                  ps1.Cancel();                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AlsoTo_must_continue_if_sink_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                                    ps2.Request(6);                  ps1.Cancel();                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AlsoTo_must_continue_if_sink_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                                    ps2.Request(6);                  ps1.Cancel();                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AlsoTo_must_continue_if_sink_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                                    ps2.Request(6);                  ps1.Cancel();                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AlsoTo_must_continue_if_sink_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                                    ps2.Request(6);                  ps1.Cancel();                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AlsoTo_must_continue_if_sink_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                                    ps2.Request(6);                  ps1.Cancel();                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphBroadcastSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphBroadcastSpec.cs,A_Broadcast_must_AlsoTo_must_continue_if_sink_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = this.SinkProbe<int>();                  var p2 = this.SinkProbe<int>();                    var t =                      Source.From(Enumerable.Range(1' 6))                          .AlsoToMaterialized(p' Keep.Right)                          .ToMaterialized(p2' Keep.Both)                          .Run(Materializer);                    var ps1 = t.Item1;                  var ps2 = t.Item2;                                    ps2.Request(6);                  ps1.Cancel();                  ps2.ExpectNext(1' 2' 3' 4' 5' 6);                  ps2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var concat1 = b.Add(new Concat<int' int>());                      var concat2 = b.Add(new Concat<int' int>());                      b.From(Source.From(new List<int>())).To(concat1.In(0));                      b.From(Source.From(Enumerable.Range(1' 4))).To(concat1.In(1));                        b.From(concat1.Out).To(concat2.In(0));                      b.From(Source.From(Enumerable.Range(5' 6))).To(concat2.In(1));                        b.From(concat2.Out).To(Sink.FromSubscriber(probe));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      probe.ExpectNext(i);                  }                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var concat1 = b.Add(new Concat<int' int>());                      var concat2 = b.Add(new Concat<int' int>());                      b.From(Source.From(new List<int>())).To(concat1.In(0));                      b.From(Source.From(Enumerable.Range(1' 4))).To(concat1.In(1));                        b.From(concat1.Out).To(concat2.In(0));                      b.From(Source.From(Enumerable.Range(5' 6))).To(concat2.In(1));                        b.From(concat2.Out).To(Sink.FromSubscriber(probe));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      probe.ExpectNext(i);                  }                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var concat1 = b.Add(new Concat<int' int>());                      var concat2 = b.Add(new Concat<int' int>());                      b.From(Source.From(new List<int>())).To(concat1.In(0));                      b.From(Source.From(Enumerable.Range(1' 4))).To(concat1.In(1));                        b.From(concat1.Out).To(concat2.In(0));                      b.From(Source.From(Enumerable.Range(5' 6))).To(concat2.In(1));                        b.From(concat2.Out).To(Sink.FromSubscriber(probe));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      probe.ExpectNext(i);                  }                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var concat1 = b.Add(new Concat<int' int>());                      var concat2 = b.Add(new Concat<int' int>());                      b.From(Source.From(new List<int>())).To(concat1.In(0));                      b.From(Source.From(Enumerable.Range(1' 4))).To(concat1.In(1));                        b.From(concat1.Out).To(concat2.In(0));                      b.From(Source.From(Enumerable.Range(5' 6))).To(concat2.In(1));                        b.From(concat2.Out).To(Sink.FromSubscriber(probe));                      return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      probe.ExpectNext(i);                  }                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                    subscription1.Request(5);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                    subscription2.Request(5);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndError().Should().Be(TestException());                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());                  subscriber2.ExpectSubscription().Request(5);                                    foreach (var i in Enumerable.Range(1'4))                  {                      var result = subscriber2.ExpectNextOrError();                      if(result is int && (int)result == i)                          continue;                      if (result.Equals(TestException()))                          return;                  }                    subscriber2.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndError().Should().Be(TestException());                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());                  subscriber2.ExpectSubscription().Request(5);                                    foreach (var i in Enumerable.Range(1'4))                  {                      var result = subscriber2.ExpectNextOrError();                      if(result is int && (int)result == i)                          continue;                      if (result.Equals(TestException()))                          return;                  }                    subscriber2.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndError().Should().Be(TestException());                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());                  subscriber2.ExpectSubscription().Request(5);                                    foreach (var i in Enumerable.Range(1'4))                  {                      var result = subscriber2.ExpectNextOrError();                      if(result is int && (int)result == i)                          continue;                      if (result.Equals(TestException()))                          return;                  }                    subscriber2.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndError().Should().Be(TestException());                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());                  subscriber2.ExpectSubscription().Request(5);                                    foreach (var i in Enumerable.Range(1'4))                  {                      var result = subscriber2.ExpectNextOrError();                      if(result is int && (int)result == i)                          continue;                      if (result.Equals(TestException()))                          return;                  }                    subscriber2.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_nonempty_publisher_and_one_delayed_failed_and,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());                  subscriber.ExpectSubscription().Request(5);                    foreach (var i in Enumerable.Range(1' 4))                  {                      var result = subscriber.ExpectNextOrError();                      if (result is int && (int)result == i)                          continue;                      if (result.Equals(TestException()))                          return;                  }                    subscriber.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_nonempty_publisher_and_one_delayed_failed_and,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());                  subscriber.ExpectSubscription().Request(5);                    foreach (var i in Enumerable.Range(1' 4))                  {                      var result = subscriber.ExpectNextOrError();                      if (result is int && (int)result == i)                          continue;                      if (result.Equals(TestException()))                          return;                  }                    subscriber.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_nonempty_publisher_and_one_delayed_failed_and,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());                  subscriber.ExpectSubscription().Request(5);                    foreach (var i in Enumerable.Range(1' 4))                  {                      var result = subscriber.ExpectNextOrError();                      if (result is int && (int)result == i)                          continue;                      if (result.Equals(TestException()))                          return;                  }                    subscriber.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_work_with_one_delayed_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToFailPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_correctly_handle_async_errors_in_secondary_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var promise = new TaskCompletionSource<int>();                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var concat = b.Add(new Concat<int' int>());                      var source = Source.From(Enumerable.Range(1' 3));                        b.From(source).To(concat.In(0));                      b.From(Source.FromTask(promise.Task)).To(concat.In(1));                      b.From(concat.Out).To(Sink.FromSubscriber(subscriber));                        return ClosedShape.Instance;                  })).Run(Materializer);                      var subscription = subscriber.ExpectSubscription();                  subscription.Request(4);                  subscriber.ExpectNext(1' 2' 3);                  promise.SetException(TestException());                  subscriber.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_correctly_handle_async_errors_in_secondary_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var promise = new TaskCompletionSource<int>();                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var concat = b.Add(new Concat<int' int>());                      var source = Source.From(Enumerable.Range(1' 3));                        b.From(source).To(concat.In(0));                      b.From(Source.FromTask(promise.Task)).To(concat.In(1));                      b.From(concat.Out).To(Sink.FromSubscriber(subscriber));                        return ClosedShape.Instance;                  })).Run(Materializer);                      var subscription = subscriber.ExpectSubscription();                  subscription.Request(4);                  subscriber.ExpectNext(1' 2' 3);                  promise.SetException(TestException());                  subscriber.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_correctly_handle_async_errors_in_secondary_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var promise = new TaskCompletionSource<int>();                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var concat = b.Add(new Concat<int' int>());                      var source = Source.From(Enumerable.Range(1' 3));                        b.From(source).To(concat.In(0));                      b.From(Source.FromTask(promise.Task)).To(concat.In(1));                      b.From(concat.Out).To(Sink.FromSubscriber(subscriber));                        return ClosedShape.Instance;                  })).Run(Materializer);                      var subscription = subscriber.ExpectSubscription();                  subscription.Request(4);                  subscriber.ExpectNext(1' 2' 3);                  promise.SetException(TestException());                  subscriber.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphConcatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphConcatSpec.cs,Concat_must_correctly_handle_async_errors_in_secondary_upstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var promise = new TaskCompletionSource<int>();                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var concat = b.Add(new Concat<int' int>());                      var source = Source.From(Enumerable.Range(1' 3));                        b.From(source).To(concat.In(0));                      b.From(Source.FromTask(promise.Task)).To(concat.In(1));                      b.From(concat.Out).To(Sink.FromSubscriber(subscriber));                        return ClosedShape.Instance;                  })).Run(Materializer);                      var subscription = subscriber.ExpectSubscription();                  subscription.Request(4);                  subscriber.ExpectNext(1' 2' 3);                  promise.SetException(TestException());                  subscriber.ExpectError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,GraphMatValueSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,GraphMatValueSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_expose_the_materialized_value_as_source,The following statement contains a magic number: var f = RunnableGraph.FromGraph(GraphDsl.Create(FoldSink' (b' fold) =>              {                  var source = Source.From(Enumerable.Range(1' 10)).MapMaterializedValue(_ => Task.FromResult(0));                  b.From(source).To(fold);                  b.From(b.MaterializedValue)                      .Via(Flow.Create<Task<int>>().SelectAsync(4' x => x))                      .To(Sink.FromSubscriber(sub).MapMaterializedValue(_ => Task.FromResult(0)));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_expose_the_materialized_value_as_source,The following statement contains a magic number: var f = RunnableGraph.FromGraph(GraphDsl.Create(FoldSink' (b' fold) =>              {                  var source = Source.From(Enumerable.Range(1' 10)).MapMaterializedValue(_ => Task.FromResult(0));                  b.From(source).To(fold);                  b.From(b.MaterializedValue)                      .Via(Flow.Create<Task<int>>().SelectAsync(4' x => x))                      .To(Sink.FromSubscriber(sub).MapMaterializedValue(_ => Task.FromResult(0)));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_expose_the_materialized_value_as_source,The following statement contains a magic number: f.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_expose_the_materialized_value_as_source_multiple_times,The following statement contains a magic number: var f = RunnableGraph.FromGraph(GraphDsl.Create(FoldSink' (b' fold) =>              {                  var zip = b.Add(new ZipWith<int' int' int>((i' i1) => i + i1));                  var source = Source.From(Enumerable.Range(1' 10)).MapMaterializedValue(_ => Task.FromResult(0));                  b.From(source).To(fold);                  b.From(b.MaterializedValue)                      .Via(Flow.Create<Task<int>>().SelectAsync(4' x => x))                      .To(zip.In0);                  b.From(b.MaterializedValue)                      .Via(Flow.Create<Task<int>>().SelectAsync(4' x => x))                      .To(zip.In1);                    b.From(zip.Out).To(Sink.FromSubscriber(sub).MapMaterializedValue(_ => Task.FromResult(0)));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_expose_the_materialized_value_as_source_multiple_times,The following statement contains a magic number: var f = RunnableGraph.FromGraph(GraphDsl.Create(FoldSink' (b' fold) =>              {                  var zip = b.Add(new ZipWith<int' int' int>((i' i1) => i + i1));                  var source = Source.From(Enumerable.Range(1' 10)).MapMaterializedValue(_ => Task.FromResult(0));                  b.From(source).To(fold);                  b.From(b.MaterializedValue)                      .Via(Flow.Create<Task<int>>().SelectAsync(4' x => x))                      .To(zip.In0);                  b.From(b.MaterializedValue)                      .Via(Flow.Create<Task<int>>().SelectAsync(4' x => x))                      .To(zip.In1);                    b.From(zip.Out).To(Sink.FromSubscriber(sub).MapMaterializedValue(_ => Task.FromResult(0)));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_expose_the_materialized_value_as_source_multiple_times,The following statement contains a magic number: var f = RunnableGraph.FromGraph(GraphDsl.Create(FoldSink' (b' fold) =>              {                  var zip = b.Add(new ZipWith<int' int' int>((i' i1) => i + i1));                  var source = Source.From(Enumerable.Range(1' 10)).MapMaterializedValue(_ => Task.FromResult(0));                  b.From(source).To(fold);                  b.From(b.MaterializedValue)                      .Via(Flow.Create<Task<int>>().SelectAsync(4' x => x))                      .To(zip.In0);                  b.From(b.MaterializedValue)                      .Via(Flow.Create<Task<int>>().SelectAsync(4' x => x))                      .To(zip.In1);                    b.From(zip.Out).To(Sink.FromSubscriber(sub).MapMaterializedValue(_ => Task.FromResult(0)));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_expose_the_materialized_value_as_source_multiple_times,The following statement contains a magic number: f.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_expose_the_materialized_value_as_source_multiple_times,The following statement contains a magic number: r1.Should().Be(r2/2);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_allow_exposing_the_materialized_value_as_port,The following statement contains a magic number: var t =                  FoldFeedbackSource.SelectAsync(4' x => x)                      .Select(x => x + 100)                      .ToMaterialized(Sink.First<int>()' Keep.Both)                      .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_allow_exposing_the_materialized_value_as_port,The following statement contains a magic number: var t =                  FoldFeedbackSource.SelectAsync(4' x => x)                      .Select(x => x + 100)                      .ToMaterialized(Sink.First<int>()' Keep.Both)                      .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_allow_exposing_the_materialized_value_as_port,The following statement contains a magic number: f1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_allow_exposing_the_materialized_value_as_port,The following statement contains a magic number: f1.Result.Should().Be(55);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_allow_exposing_the_materialized_value_as_port,The following statement contains a magic number: f2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_allow_exposing_the_materialized_value_as_port,The following statement contains a magic number: f2.Result.Should().Be(155);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_allow_exposing_the_materialized_values_as_port_even_if_wrapped_and_the_final_materialized_value_is_unit,The following statement contains a magic number: var noMatSource =                  FoldFeedbackSource.SelectAsync(4' x => x).Select(x => x + 100).MapMaterializedValue(_ => NotUsed.Instance);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_allow_exposing_the_materialized_values_as_port_even_if_wrapped_and_the_final_materialized_value_is_unit,The following statement contains a magic number: var noMatSource =                  FoldFeedbackSource.SelectAsync(4' x => x).Select(x => x + 100).MapMaterializedValue(_ => NotUsed.Instance);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_allow_exposing_the_materialized_values_as_port_even_if_wrapped_and_the_final_materialized_value_is_unit,The following statement contains a magic number: t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_allow_exposing_the_materialized_values_as_port_even_if_wrapped_and_the_final_materialized_value_is_unit,The following statement contains a magic number: t.Result.Should().Be(155);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: var compositeSource1 = Source.FromGraph(GraphDsl.Create(FoldFeedbackSource' FoldFeedbackSource' Keep.Both'                  (b' s1' s2) =>                  {                      var zip = b.Add(new ZipWith<int' int' int>((i' i1) => i + i1));                        b.From(s1.Outlet).Via(Flow.Create<Task<int>>().SelectAsync(4' x => x)).To(zip.In0);                      b.From(s2.Outlet).Via(Flow.Create<Task<int>>().SelectAsync(4' x => x).Select(x => x*100)).To(zip.In1);                                            return new SourceShape<int>(zip.Out);                  }));
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: var compositeSource1 = Source.FromGraph(GraphDsl.Create(FoldFeedbackSource' FoldFeedbackSource' Keep.Both'                  (b' s1' s2) =>                  {                      var zip = b.Add(new ZipWith<int' int' int>((i' i1) => i + i1));                        b.From(s1.Outlet).Via(Flow.Create<Task<int>>().SelectAsync(4' x => x)).To(zip.In0);                      b.From(s2.Outlet).Via(Flow.Create<Task<int>>().SelectAsync(4' x => x).Select(x => x*100)).To(zip.In1);                                            return new SourceShape<int>(zip.Out);                  }));
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: var compositeSource1 = Source.FromGraph(GraphDsl.Create(FoldFeedbackSource' FoldFeedbackSource' Keep.Both'                  (b' s1' s2) =>                  {                      var zip = b.Add(new ZipWith<int' int' int>((i' i1) => i + i1));                        b.From(s1.Outlet).Via(Flow.Create<Task<int>>().SelectAsync(4' x => x)).To(zip.In0);                      b.From(s2.Outlet).Via(Flow.Create<Task<int>>().SelectAsync(4' x => x).Select(x => x*100)).To(zip.In1);                                            return new SourceShape<int>(zip.Out);                  }));
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: var compositeSource2 = Source.FromGraph(GraphDsl.Create(compositeSource1' compositeSource1' Keep.Both'                  (b' s1' s2) =>                  {                      var zip = b.Add(new ZipWith<int' int' int>((i' i1) => i + i1));                        b.From(s1.Outlet).To(zip.In0);                      b.From(s2.Outlet).Via(Flow.Create<int>().Select(x => x*10000)).To(zip.In1);                        return new SourceShape<int>(zip.Out);                  }));
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: task.Result[0].Should().Be(55);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: task.Result[1].Should().Be(55);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: task.Result[2].Should().Be(55);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: task.Result[2].Should().Be(55);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: task.Result[3].Should().Be(55);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: task.Result[3].Should().Be(55);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: task.Result[4].Should().Be(55555555);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_properly_with_nesting_and_reusing,The following statement contains a magic number: task.Result[4].Should().Be(55555555);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_also_when_the_sources_module_is_copied,The following statement contains a magic number: var foldFlow = Flow.FromGraph(GraphDsl.Create(Sink.Aggregate<int' int>(0' (sum' i) => sum + i)' (b' fold) =>              {                  var o = b.From(b.MaterializedValue).Via(Flow.Create<Task<int>>().SelectAsync(4' x => x));                  return new FlowShape<int'int>(fold.Inlet' o.Out);              }));
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_also_when_the_sources_module_is_copied,The following statement contains a magic number: var t = Source.From(Enumerable.Range(1' 10)).Via(foldFlow).RunWith(Sink.First<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_also_when_the_sources_module_is_copied,The following statement contains a magic number: t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMatValueSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMatValueSpec.cs,A_Graph_with_materialized_value_must_work_also_when_the_sources_module_is_copied,The following statement contains a magic number: t.Result.Should().Be(55);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_prefer_selected_input_more_than_others,The following statement contains a magic number: const int numElements = 10000;
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_prefer_selected_input_more_than_others,The following statement contains a magic number: var aux = Source.From(Enumerable.Range(1' numElements).Select(_ => 2))                      .MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_prefer_selected_input_more_than_others,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                  b.From(preffered).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(numElements*2)).To(sink.Inlet);                  b.From(aux).To(merge.In(0));                  b.From(aux).To(merge.In(1));                  b.From(aux).To(merge.In(2));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_prefer_selected_input_more_than_others,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                  b.From(preffered).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(numElements*2)).To(sink.Inlet);                  b.From(aux).To(merge.In(0));                  b.From(aux).To(merge.In(1));                  b.From(aux).To(merge.In(2));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_prefer_selected_input_more_than_others,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                  b.From(preffered).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(numElements*2)).To(sink.Inlet);                  b.From(aux).To(merge.In(0));                  b.From(aux).To(merge.In(1));                  b.From(aux).To(merge.In(2));                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_prefer_selected_input_more_than_others,The following statement contains a magic number: result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                    b.From(source(1'100)).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(500)).To(sink.Inlet);                  b.From(source(101' 100)).To(merge.In(0));                  b.From(source(201' 100)).To(merge.In(1));                  b.From(source(301' 100)).To(merge.In(2));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                    b.From(source(1'100)).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(500)).To(sink.Inlet);                  b.From(source(101' 100)).To(merge.In(0));                  b.From(source(201' 100)).To(merge.In(1));                  b.From(source(301' 100)).To(merge.In(2));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                    b.From(source(1'100)).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(500)).To(sink.Inlet);                  b.From(source(101' 100)).To(merge.In(0));                  b.From(source(201' 100)).To(merge.In(1));                  b.From(source(301' 100)).To(merge.In(2));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                    b.From(source(1'100)).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(500)).To(sink.Inlet);                  b.From(source(101' 100)).To(merge.In(0));                  b.From(source(201' 100)).To(merge.In(1));                  b.From(source(301' 100)).To(merge.In(2));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                    b.From(source(1'100)).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(500)).To(sink.Inlet);                  b.From(source(101' 100)).To(merge.In(0));                  b.From(source(201' 100)).To(merge.In(1));                  b.From(source(301' 100)).To(merge.In(2));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                    b.From(source(1'100)).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(500)).To(sink.Inlet);                  b.From(source(101' 100)).To(merge.In(0));                  b.From(source(201' 100)).To(merge.In(1));                  b.From(source(301' 100)).To(merge.In(2));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                    b.From(source(1'100)).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(500)).To(sink.Inlet);                  b.From(source(101' 100)).To(merge.In(0));                  b.From(source(201' 100)).To(merge.In(1));                  b.From(source(301' 100)).To(merge.In(2));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                    b.From(source(1'100)).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(500)).To(sink.Inlet);                  b.From(source(101' 100)).To(merge.In(0));                  b.From(source(201' 100)).To(merge.In(1));                  b.From(source(301' 100)).To(merge.In(2));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                    b.From(source(1'100)).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(500)).To(sink.Inlet);                  b.From(source(101' 100)).To(merge.In(0));                  b.From(source(201' 100)).To(merge.In(1));                  b.From(source(301' 100)).To(merge.In(2));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: var result = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var merge = b.Add(new MergePreferred<int>(3));                    b.From(source(1'100)).To(merge.Preferred);                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(500)).To(sink.Inlet);                  b.From(source(101' 100)).To(merge.In(0));                  b.From(source(201' 100)).To(merge.In(1));                  b.From(source(301' 100)).To(merge.In(2));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_eventually_pas_through_all_elements,The following statement contains a magic number: result.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 400));
Magic Number,Akka.Streams.Tests.Dsl,GraphMergePreferredSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergePreferredSpec.cs,PreferredMerge_must_disallow_multiple_preffered_inputs,The following statement contains a magic number: var s = Source.From(Enumerable.Range(0' 4));
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSortedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSortedSpec.cs,MergeSorted_must_work_in_the_nominal_case,The following statement contains a magic number: var gen = Enumerable.Range(1' 10)                  .Select(i => Enumerable.Range(1' 1000)                      .Select(_ => random.Next(1' 3) == 2).ToList());
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSortedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSortedSpec.cs,MergeSorted_must_work_in_the_nominal_case,The following statement contains a magic number: var gen = Enumerable.Range(1' 10)                  .Select(i => Enumerable.Range(1' 1000)                      .Select(_ => random.Next(1' 3) == 2).ToList());
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSortedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSortedSpec.cs,MergeSorted_must_work_in_the_nominal_case,The following statement contains a magic number: var gen = Enumerable.Range(1' 10)                  .Select(i => Enumerable.Range(1' 1000)                      .Select(_ => random.Next(1' 3) == 2).ToList());
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSortedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSortedSpec.cs,MergeSorted_must_work_in_the_nominal_case,The following statement contains a magic number: var gen = Enumerable.Range(1' 10)                  .Select(i => Enumerable.Range(1' 1000)                      .Select(_ => random.Next(1' 3) == 2).ToList());
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSortedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSortedSpec.cs,MergeSorted_must_work_in_the_nominal_case,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input sizes(4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.From(new List<int>());                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var m1 = b.Add(new Merge<int>(2));                      var m2 = b.Add(new Merge<int>(2));                      var sink = Sink.FromSubscriber(probe);                        b.From(source1).To(m1.In(0));                      b.From(m1.Out).Via(Flow.Create<int>().Select(x => x*2)).To(m2.In(0));                      b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(x=>x+1)).To(sink);                      b.From(source2).To(m1.In(1));                      b.From(source3).To(m2.In(1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                  var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input sizes(4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.From(new List<int>());                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var m1 = b.Add(new Merge<int>(2));                      var m2 = b.Add(new Merge<int>(2));                      var sink = Sink.FromSubscriber(probe);                        b.From(source1).To(m1.In(0));                      b.From(m1.Out).Via(Flow.Create<int>().Select(x => x*2)).To(m2.In(0));                      b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(x=>x+1)).To(sink);                      b.From(source2).To(m1.In(1));                      b.From(source3).To(m2.In(1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                  var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input sizes(4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.From(new List<int>());                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var m1 = b.Add(new Merge<int>(2));                      var m2 = b.Add(new Merge<int>(2));                      var sink = Sink.FromSubscriber(probe);                        b.From(source1).To(m1.In(0));                      b.From(m1.Out).Via(Flow.Create<int>().Select(x => x*2)).To(m2.In(0));                      b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(x=>x+1)).To(sink);                      b.From(source2).To(m1.In(1));                      b.From(source3).To(m2.In(1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                  var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input sizes(4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.From(new List<int>());                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var m1 = b.Add(new Merge<int>(2));                      var m2 = b.Add(new Merge<int>(2));                      var sink = Sink.FromSubscriber(probe);                        b.From(source1).To(m1.In(0));                      b.From(m1.Out).Via(Flow.Create<int>().Select(x => x*2)).To(m2.In(0));                      b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(x=>x+1)).To(sink);                      b.From(source2).To(m1.In(1));                      b.From(source3).To(m2.In(1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                  var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input sizes(4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.From(new List<int>());                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var m1 = b.Add(new Merge<int>(2));                      var m2 = b.Add(new Merge<int>(2));                      var sink = Sink.FromSubscriber(probe);                        b.From(source1).To(m1.In(0));                      b.From(m1.Out).Via(Flow.Create<int>().Select(x => x*2)).To(m2.In(0));                      b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(x=>x+1)).To(sink);                      b.From(source2).To(m1.In(1));                      b.From(source3).To(m2.In(1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                  var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input sizes(4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.From(new List<int>());                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var m1 = b.Add(new Merge<int>(2));                      var m2 = b.Add(new Merge<int>(2));                      var sink = Sink.FromSubscriber(probe);                        b.From(source1).To(m1.In(0));                      b.From(m1.Out).Via(Flow.Create<int>().Select(x => x*2)).To(m2.In(0));                      b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(x=>x+1)).To(sink);                      b.From(source2).To(m1.In(1));                      b.From(source3).To(m2.In(1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                  var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input sizes(4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.From(new List<int>());                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var m1 = b.Add(new Merge<int>(2));                      var m2 = b.Add(new Merge<int>(2));                      var sink = Sink.FromSubscriber(probe);                        b.From(source1).To(m1.In(0));                      b.From(m1.Out).Via(Flow.Create<int>().Select(x => x*2)).To(m2.In(0));                      b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(x=>x+1)).To(sink);                      b.From(source2).To(m1.In(1));                      b.From(source3).To(m2.In(1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                  var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input sizes(4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.From(new List<int>());                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var m1 = b.Add(new Merge<int>(2));                      var m2 = b.Add(new Merge<int>(2));                      var sink = Sink.FromSubscriber(probe);                        b.From(source1).To(m1.In(0));                      b.From(m1.Out).Via(Flow.Create<int>().Select(x => x*2)).To(m2.In(0));                      b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(x=>x+1)).To(sink);                      b.From(source2).To(m1.In(1));                      b.From(source3).To(m2.In(1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                  var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  // Different input sizes(4 and 6)                  var source1 = Source.From(Enumerable.Range(0' 4));                  var source2 = Source.From(Enumerable.Range(4' 6));                  var source3 = Source.From(new List<int>());                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var m1 = b.Add(new Merge<int>(2));                      var m2 = b.Add(new Merge<int>(2));                      var sink = Sink.FromSubscriber(probe);                        b.From(source1).To(m1.In(0));                      b.From(m1.Out).Via(Flow.Create<int>().Select(x => x*2)).To(m2.In(0));                      b.From(m2.Out).Via(Flow.Create<int>().Select(x => x / 2).Select(x=>x+1)).To(sink);                      b.From(source2).To(m1.In(1));                      b.From(source3).To(m2.In(1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                  var collected = new List<int>();                  for (var i = 1; i <= 10; i++)                  {                      subscription.Request(1);                      collected.Add(probe.ExpectNext());                  }                    collected.ShouldAllBeEquivalentTo(Enumerable.Range(1'10));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_way_merge,The following statement contains a magic number: var task = Source.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<int>(1));                  var source = b.Add(Source.From(Enumerable.Range(1' 3)));                    b.From(source).To(merge.In(0));                    return new SourceShape<int>(merge.Out);              })).RunAggregate(new List<int>()' (list' i) =>              {                  list.Add(i);                  return list;              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_way_merge,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_way_merge,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 3));
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: var source2 = Source.Single(2);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: var source3 = Source.Single(3);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: var source4 = Source.Single(4);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: var source5 = Source.Single(5);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<int>(6));                    b.From(source1).To(merge.In(0));                  b.From(source2).To(merge.In(1));                  b.From(source3).To(merge.In(2));                  b.From(source4).To(merge.In(3));                  b.From(source5).To(merge.In(4));                  b.From(source6).To(merge.In(5));                  b.From(merge.Out).To(Sink.FromSubscriber(probe));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<int>(6));                    b.From(source1).To(merge.In(0));                  b.From(source2).To(merge.In(1));                  b.From(source3).To(merge.In(2));                  b.From(source4).To(merge.In(3));                  b.From(source5).To(merge.In(4));                  b.From(source6).To(merge.In(5));                  b.From(merge.Out).To(Sink.FromSubscriber(probe));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<int>(6));                    b.From(source1).To(merge.In(0));                  b.From(source2).To(merge.In(1));                  b.From(source3).To(merge.In(2));                  b.From(source4).To(merge.In(3));                  b.From(source5).To(merge.In(4));                  b.From(source6).To(merge.In(5));                  b.From(merge.Out).To(Sink.FromSubscriber(probe));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<int>(6));                    b.From(source1).To(merge.In(0));                  b.From(source2).To(merge.In(1));                  b.From(source3).To(merge.In(2));                  b.From(source4).To(merge.In(3));                  b.From(source5).To(merge.In(4));                  b.From(source6).To(merge.In(5));                  b.From(merge.Out).To(Sink.FromSubscriber(probe));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  var merge = b.Add(new Merge<int>(6));                    b.From(source1).To(merge.In(0));                  b.From(source2).To(merge.In(1));                  b.From(source3).To(merge.In(2));                  b.From(source4).To(merge.In(3));                  b.From(source5).To(merge.In(4));                  b.From(source6).To(merge.In(5));                  b.From(merge.Out).To(Sink.FromSubscriber(probe));                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: i <= 5
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_n_way_merge,The following statement contains a magic number: collected.ShouldAllBeEquivalentTo(Enumerable.Range(1' 5));
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  var subscription1 = subscriber1.ExpectSubscription();                  subscription1.Request(4);                  subscriber1.ExpectNext(1' 2' 3' 4).ExpectComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  var subscription2 = subscriber2.ExpectSubscription();                  subscription2.Request(4);                  subscriber2.ExpectNext(1' 2' 3' 4).ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphMergeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,A_Merge_must_pass_along_early_cancellation,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var up1 = TestPublisher.CreateManualProbe<int>(this);                  var up2 = TestPublisher.CreateManualProbe<int>(this);                  var down = TestSubscriber.CreateManualProbe<int>(this);                    var src1 = Source.AsSubscriber<int>();                  var src2 = Source.AsSubscriber<int>();                    var t = RunnableGraph.FromGraph(GraphDsl.Create(src1' src2' Tuple.Create' (b' s1' s2) =>                  {                      var merge = b.Add(new Merge<int>(2));                      var sink = Sink.FromSubscriber(down)                          .MapMaterializedValue<Tuple<ISubscriber<int>' ISubscriber<int>>>(_ => null);                        b.From(s1.Outlet).To(merge.In(0));                      b.From(s2.Outlet).To(merge.In(1));                      b.From(merge.Out).To(sink);                      return ClosedShape.Instance;                  })).Run(Materializer);                    var downstream = down.ExpectSubscription();                  downstream.Cancel();                  up1.Subscribe(t.Item1);                  up2.Subscribe(t.Item2);                  var upSub1 = up1.ExpectSubscription();                  upSub1.ExpectCancellation();                  var upSub2 = up2.ExpectSubscription();                  upSub2.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,MergeFixture,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphMergeSpec.cs,MergeFixture,The following statement contains a magic number: var merge = builder.Add(new Merge<int' int>(2));
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,GraphOpsIntegrationSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,GraphOpsIntegrationSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_broadcast_merge_layouts,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_broadcast_merge_layouts,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_broadcast_merge_layouts,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_broadcast_merge_layouts,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_broadcast_merge_layouts,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1' 3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_broadcast_merge_layouts,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_broadcast_merge_layouts,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 6));
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_balance_merge_parallelization_layouts,The following statement contains a magic number: var elements = Enumerable.Range(0' 11).ToList();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_balance_merge_parallelization_layouts,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var balance = b.Add(new Balance<int>(5));                  var merge = b.Add(new Merge<int>(5));                  var source = Source.From(elements).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source).To(balance.In);                    for (var i = 0; i < 5; i++)                      b.From(balance.Out(i)).To(merge.In(i));                    b.From(merge.Out).Via(Flow.Create<int>().Grouped(elements.Count*2)).To(sink.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_balance_merge_parallelization_layouts,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var balance = b.Add(new Balance<int>(5));                  var merge = b.Add(new Merge<int>(5));                  var source = Source.From(elements).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source).To(balance.In);                    for (var i = 0; i < 5; i++)                      b.From(balance.Out(i)).To(merge.In(i));                    b.From(merge.Out).Via(Flow.Create<int>().Grouped(elements.Count*2)).To(sink.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_balance_merge_parallelization_layouts,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var balance = b.Add(new Balance<int>(5));                  var merge = b.Add(new Merge<int>(5));                  var source = Source.From(elements).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source).To(balance.In);                    for (var i = 0; i < 5; i++)                      b.From(balance.Out(i)).To(merge.In(i));                    b.From(merge.Out).Via(Flow.Create<int>().Grouped(elements.Count*2)).To(sink.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_balance_merge_parallelization_layouts,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var balance = b.Add(new Balance<int>(5));                  var merge = b.Add(new Merge<int>(5));                  var source = Source.From(elements).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source).To(balance.In);                    for (var i = 0; i < 5; i++)                      b.From(balance.Out(i)).To(merge.In(i));                    b.From(merge.Out).Via(Flow.Create<int>().Grouped(elements.Count*2)).To(sink.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_balance_merge_parallelization_layouts,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: var t = RunnableGraph.FromGraph(GraphDsl.Create(seqSink' seqSink' seqSink' Tuple.Create' (b' sink2'sink9'sink10) =>              {                  var b3 = b.Add(new Broadcast<int>(2));                  var b7 = b.Add(new Broadcast<int>(2));                  var b11 = b.Add(new Broadcast<int>(3));                  var m8 = b.Add(new Merge<int>(2));                  var m9 = b.Add(new Merge<int>(2));                  var m10 = b.Add(new Merge<int>(2));                  var m11 = b.Add(new Merge<int>(2));                    var in3 = source(3);                  var in5 = source(5);                  var in7 = source(7);                    // First layer                  b.From(in7).To(b7.In);                  b.From(b7.Out(0)).To(m11.In(0));                  b.From(b7.Out(1)).To(m8.In(0));                    b.From(in5).To(m11.In(1));                    b.From(in3).To(b3.In);                  b.From(b3.Out(0)).To(m8.In(1));                  b.From(b3.Out(1)).To(m10.In(0));                    // Second layer                  b.From(m11.Out).To(b11.In);                  b.From(b11.Out(0)).Via(Flow.Create<int>().Grouped(1000)).To(sink2.Inlet);                  b.From(b11.Out(1)).To(m9.In(0));                  b.From(b11.Out(2)).To(m10.In(1));                    b.From(m8.Out).To(m9.In(1));                    // Third layer                  b.From(m9.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink9.Inlet);                  b.From(m10.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink10.Inlet);                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Result[0].ShouldAllBeEquivalentTo(new[] {5' 7});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Result[0].ShouldAllBeEquivalentTo(new[] {5' 7});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Result[1].ShouldAllBeEquivalentTo(new[] { 3' 5' 7' 7 });
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Result[1].ShouldAllBeEquivalentTo(new[] { 3' 5' 7' 7 });
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Result[1].ShouldAllBeEquivalentTo(new[] { 3' 5' 7' 7 });
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Result[1].ShouldAllBeEquivalentTo(new[] { 3' 5' 7' 7 });
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Result[2].ShouldAllBeEquivalentTo(new[] { 3' 5' 7 });
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Result[2].ShouldAllBeEquivalentTo(new[] { 3' 5' 7 });
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Result[2].ShouldAllBeEquivalentTo(new[] { 3' 5' 7 });
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_support_wikipedia_Topological_sorting_2,The following statement contains a magic number: task.Result[2].ShouldAllBeEquivalentTo(new[] { 3' 5' 7 });
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1'3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source.Select(x => x*2)).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1'3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source.Select(x => x*2)).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1'3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source.Select(x => x*2)).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1'3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source.Select(x => x*2)).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1'3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source.Select(x => x*2)).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var merge = b.Add(new Merge<int>(2));                  var source = Source.From(Enumerable.Range(1'3)).MapMaterializedValue<Task<IEnumerable<int>>>(_ => null);                    b.From(source.Select(x => x*2)).To(broadcast.In);                  b.From(broadcast.Out(0)).To(merge.In(0));                  b.From(broadcast.Out(1)).Via(Flow.Create<int>().Select(x => x + 3)).To(merge.In(1));                  b.From(merge.Out).Via(Flow.Create<int>().Grouped(10)).To(sink.Inlet);                                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {2' 4' 6' 5' 7' 9});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {2' 4' 6' 5' 7' 9});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {2' 4' 6' 5' 7' 9});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {2' 4' 6' 5' 7' 9});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {2' 4' 6' 5' 7' 9});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_allow_adding_of_flows_to_sources_and_sinks_to_flows,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {2' 4' 6' 5' 7' 9});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_able_to_run_plain_flow,The following statement contains a magic number: var p = Source.From(Enumerable.Range(1' 3)).RunWith(Sink.AsPublisher<int>(false)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_able_to_run_plain_flow,The following statement contains a magic number: var flow = Flow.Create<int>().Select(x => x*2);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_able_to_run_plain_flow,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_able_to_run_plain_flow,The following statement contains a magic number: s.ExpectNext(1*2' 2*2' 3*2).ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_able_to_run_plain_flow,The following statement contains a magic number: s.ExpectNext(1*2' 2*2' 3*2).ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_able_to_run_plain_flow,The following statement contains a magic number: s.ExpectNext(1*2' 2*2' 3*2).ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_able_to_run_plain_flow,The following statement contains a magic number: s.ExpectNext(1*2' 2*2' 3*2).ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_able_to_run_plain_flow,The following statement contains a magic number: s.ExpectNext(1*2' 2*2' 3*2).ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: Func<int' Source<int' Tuple<NotUsed' NotUsed' NotUsed' Task<IEnumerable<int>>>>> source =                  i =>                      Source.From(Enumerable.Range(i' 3))                          .MapMaterializedValue<Tuple<NotUsed' NotUsed' NotUsed' Task<IEnumerable<int>>>>(_ => null);
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: var task =                  RunnableGraph.FromGraph(GraphDsl.Create(shuffler' shuffler' shuffler' Sink.First<IEnumerable<int>>()'                      Tuple.Create'                      (b' s1' s2' s3' sink) =>                      {                          var merge = b.Add(new Merge<int>(2));                            b.From(source(1)).To(s1.In1);                          b.From(source(10)).To(s1.In2);                            b.From(s1.Out1).To(s2.In1);                          b.From(s1.Out2).To(s2.In2);                            b.From(s2.Out1).To(s3.In1);                          b.From(s2.Out2).To(s3.In2);                            b.From(s3.Out1).To(merge.In(0));                          b.From(s3.Out2).To(merge.In(1));                            b.From(merge.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink);                            return ClosedShape.Instance;                      })).Run(Materializer).Item4;
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: var task =                  RunnableGraph.FromGraph(GraphDsl.Create(shuffler' shuffler' shuffler' Sink.First<IEnumerable<int>>()'                      Tuple.Create'                      (b' s1' s2' s3' sink) =>                      {                          var merge = b.Add(new Merge<int>(2));                            b.From(source(1)).To(s1.In1);                          b.From(source(10)).To(s1.In2);                            b.From(s1.Out1).To(s2.In1);                          b.From(s1.Out2).To(s2.In2);                            b.From(s2.Out1).To(s3.In1);                          b.From(s2.Out2).To(s3.In2);                            b.From(s3.Out1).To(merge.In(0));                          b.From(s3.Out2).To(merge.In(1));                            b.From(merge.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink);                            return ClosedShape.Instance;                      })).Run(Materializer).Item4;
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: var task =                  RunnableGraph.FromGraph(GraphDsl.Create(shuffler' shuffler' shuffler' Sink.First<IEnumerable<int>>()'                      Tuple.Create'                      (b' s1' s2' s3' sink) =>                      {                          var merge = b.Add(new Merge<int>(2));                            b.From(source(1)).To(s1.In1);                          b.From(source(10)).To(s1.In2);                            b.From(s1.Out1).To(s2.In1);                          b.From(s1.Out2).To(s2.In2);                            b.From(s2.Out1).To(s3.In1);                          b.From(s2.Out2).To(s3.In2);                            b.From(s3.Out1).To(merge.In(0));                          b.From(s3.Out2).To(merge.In(1));                            b.From(merge.Out).Via(Flow.Create<int>().Grouped(1000)).To(sink);                            return ClosedShape.Instance;                      })).Run(Materializer).Item4;
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {4' 5' 6' 13' 14' 15});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {4' 5' 6' 13' 14' 15});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {4' 5' 6' 13' 14' 15});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {4' 5' 6' 13' 14' 15});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {4' 5' 6' 13' 14' 15});
Magic Number,Akka.Streams.Tests.Dsl,GraphOpsIntegrationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,FlowGraphs_must_be_possibe_to_use_as_lego_bricks,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {4' 5' 6' 13' 14' 15});
Magic Number,Akka.Streams.Tests.Dsl,Shuffle,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,Create,The following statement contains a magic number: return GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<TIn>(2));                      var balance = b.Add(new Balance<TOut>(2));                        b.From(merge.Out).Via(pipeline).To(balance.In);                        return new ShufflePorts(merge.In(0)' merge.In(1)' balance.Out(0)' balance.Out(1));                  });
Magic Number,Akka.Streams.Tests.Dsl,Shuffle,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphOpsIntegrationSpec.cs,Create,The following statement contains a magic number: return GraphDsl.Create(b =>                  {                      var merge = b.Add(new Merge<TIn>(2));                      var balance = b.Add(new Balance<TOut>(2));                        b.From(merge.Out).Via(pipeline).To(balance.In);                        return new ShufflePorts(merge.In(0)' merge.In(1)' balance.Out(0)' balance.Out(1));                  });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,GraphPartialSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,GraphPartialSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_partial_graphs,The following statement contains a magic number: var doubler = GraphDsl.Create(b =>              {                  var broadcast = b.Add(new Broadcast<int>(2));                  var zip = b.Add(ZipWith.Apply((int i' int i1) => i + i1));                    b.From(broadcast.Out(0)).To(zip.In0);                  b.From(broadcast.Out(1)).To(zip.In1);                    return new FlowShape<int' int>(broadcast.In' zip.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_partial_graphs,The following statement contains a magic number: var task =                  RunnableGraph.FromGraph(GraphDsl.Create(doubler' doubler' Sink.First<IEnumerable<int>>()' Tuple.Create'                      (b' d1' d2' sink) =>                      {                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<NotUsed' NotUsed' Task<IEnumerable<int>>>>(_ => null);                            b.From(source).To(d1.Inlet);                          b.From(d1.Outlet).To(d2.Inlet);                          b.From(d2.Outlet).Via(Flow.Create<int>().Grouped(100)).To(sink.Inlet);                            return ClosedShape.Instance;                      })).Run(Materializer).Item3;
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_partial_graphs,The following statement contains a magic number: var task =                  RunnableGraph.FromGraph(GraphDsl.Create(doubler' doubler' Sink.First<IEnumerable<int>>()' Tuple.Create'                      (b' d1' d2' sink) =>                      {                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<NotUsed' NotUsed' Task<IEnumerable<int>>>>(_ => null);                            b.From(source).To(d1.Inlet);                          b.From(d1.Outlet).To(d2.Inlet);                          b.From(d2.Outlet).Via(Flow.Create<int>().Grouped(100)).To(sink.Inlet);                            return ClosedShape.Instance;                      })).Run(Materializer).Item3;
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_partial_graphs,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_partial_graphs,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {4' 8' 12});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_partial_graphs,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {4' 8' 12});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_partial_graphs,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {4' 8' 12});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: var doubler = GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  var zip = b.Add(ZipWith.Apply((int i' int i1) => i + i1));                    b.From(broadcast.Out(0)).To(zip.In0);                  b.From(broadcast.Out(1)).To(zip.In1);                  b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(100)).To(sink.Inlet);                    return new FlowShape<int' int>(broadcast.In' zip.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: var doubler = GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  var zip = b.Add(ZipWith.Apply((int i' int i1) => i + i1));                    b.From(broadcast.Out(0)).To(zip.In0);                  b.From(broadcast.Out(1)).To(zip.In1);                  b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(100)).To(sink.Inlet);                    return new FlowShape<int' int>(broadcast.In' zip.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: var doubler = GraphDsl.Create(Sink.First<IEnumerable<int>>()' (b' sink) =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  var zip = b.Add(ZipWith.Apply((int i' int i1) => i + i1));                    b.From(broadcast.Out(0)).To(zip.In0);                  b.From(broadcast.Out(1)).To(zip.In1);                  b.From(broadcast.Out(2)).Via(Flow.Create<int>().Grouped(100)).To(sink.Inlet);                    return new FlowShape<int' int>(broadcast.In' zip.Out);              });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: var t =                  RunnableGraph.FromGraph(GraphDsl.Create(doubler' doubler' Sink.First<IEnumerable<int>>()' Tuple.Create'                      (b' d1' d2' sink) =>                      {                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_ => null);                            b.From(source).To(d1.Inlet);                          b.From(d1.Outlet).To(d2.Inlet);                          b.From(d2.Outlet).Via(Flow.Create<int>().Grouped(100)).To(sink.Inlet);                            return ClosedShape.Instance;                      })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: var t =                  RunnableGraph.FromGraph(GraphDsl.Create(doubler' doubler' Sink.First<IEnumerable<int>>()' Tuple.Create'                      (b' d1' d2' sink) =>                      {                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<Task<IEnumerable<int>>' Task<IEnumerable<int>>' Task<IEnumerable<int>>>>(_ => null);                            b.From(source).To(d1.Inlet);                          b.From(d1.Outlet).To(d2.Inlet);                          b.From(d2.Outlet).Via(Flow.Create<int>().Grouped(100)).To(sink.Inlet);                            return ClosedShape.Instance;                      })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: task.Result[0].ShouldAllBeEquivalentTo(new[] {1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: task.Result[0].ShouldAllBeEquivalentTo(new[] {1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: task.Result[1].ShouldAllBeEquivalentTo(new[] {2' 4' 6});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: task.Result[1].ShouldAllBeEquivalentTo(new[] {2' 4' 6});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: task.Result[1].ShouldAllBeEquivalentTo(new[] {2' 4' 6});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: task.Result[2].ShouldAllBeEquivalentTo(new[] { 4' 8' 12 });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: task.Result[2].ShouldAllBeEquivalentTo(new[] { 4' 8' 12 });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: task.Result[2].ShouldAllBeEquivalentTo(new[] { 4' 8' 12 });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_simple_materializing_partial_graphs,The following statement contains a magic number: task.Result[2].ShouldAllBeEquivalentTo(new[] { 4' 8' 12 });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: var doubler = GraphDsl.Create(summer' summer' Tuple.Create' (b' s1's2) =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  var broadcast2 = b.Add(new Broadcast<int>(2));                  var zip = b.Add(ZipWith.Apply((int i' int i1) => i + i1));                    b.From(broadcast.Out(0)).To(zip.In0);                  b.From(broadcast.Out(1)).To(zip.In1);                  b.From(broadcast.Out(2)).To(s1.Inlet);                    b.From(zip.Out).To(broadcast2.In);                  b.From(broadcast2.Out(0)).To(s2.Inlet);                    return new FlowShape<int' int>(broadcast.In' broadcast2.Out(1));              });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: var doubler = GraphDsl.Create(summer' summer' Tuple.Create' (b' s1's2) =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  var broadcast2 = b.Add(new Broadcast<int>(2));                  var zip = b.Add(ZipWith.Apply((int i' int i1) => i + i1));                    b.From(broadcast.Out(0)).To(zip.In0);                  b.From(broadcast.Out(1)).To(zip.In1);                  b.From(broadcast.Out(2)).To(s1.Inlet);                    b.From(zip.Out).To(broadcast2.In);                  b.From(broadcast2.Out(0)).To(s2.Inlet);                    return new FlowShape<int' int>(broadcast.In' broadcast2.Out(1));              });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: var doubler = GraphDsl.Create(summer' summer' Tuple.Create' (b' s1's2) =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  var broadcast2 = b.Add(new Broadcast<int>(2));                  var zip = b.Add(ZipWith.Apply((int i' int i1) => i + i1));                    b.From(broadcast.Out(0)).To(zip.In0);                  b.From(broadcast.Out(1)).To(zip.In1);                  b.From(broadcast.Out(2)).To(s1.Inlet);                    b.From(zip.Out).To(broadcast2.In);                  b.From(broadcast2.Out(0)).To(s2.Inlet);                    return new FlowShape<int' int>(broadcast.In' broadcast2.Out(1));              });
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: var t =                  RunnableGraph.FromGraph(GraphDsl.Create(doubler' doubler' Sink.First<IEnumerable<int>>()' Tuple.Create'                      (b' d1' d2' sink) =>                      {                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<Tuple<Task<int>' Task<int>>' Tuple<Task<int>' Task<int>>' Task<IEnumerable<int>>>>(_ => null);                            b.From(source).To(d1.Inlet);                          b.From(d1.Outlet).To(d2.Inlet);                          b.From(d2.Outlet).Via(Flow.Create<int>().Grouped(100)).To(sink.Inlet);                            return ClosedShape.Instance;                      })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: var t =                  RunnableGraph.FromGraph(GraphDsl.Create(doubler' doubler' Sink.First<IEnumerable<int>>()' Tuple.Create'                      (b' d1' d2' sink) =>                      {                          var source =                              Source.From(Enumerable.Range(1' 3))                                  .MapMaterializedValue<Tuple<Tuple<Task<int>' Task<int>>' Tuple<Task<int>' Task<int>>' Task<IEnumerable<int>>>>(_ => null);                            b.From(source).To(d1.Inlet);                          b.From(d1.Outlet).To(d2.Inlet);                          b.From(d2.Outlet).Via(Flow.Create<int>().Grouped(100)).To(sink.Inlet);                            return ClosedShape.Instance;                      })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {6' 12' 12' 24});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {6' 12' 12' 24});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {6' 12' 12' 24});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {6' 12' 12' 24});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: t.Item3.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: t.Item3.Result.ShouldAllBeEquivalentTo(new [] {4' 8' 12});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: t.Item3.Result.ShouldAllBeEquivalentTo(new [] {4' 8' 12});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_build_and_reuse_complex_materializing_partial_graphs,The following statement contains a magic number: t.Item3.Result.ShouldAllBeEquivalentTo(new [] {4' 8' 12});
Magic Number,Akka.Streams.Tests.Dsl,GraphPartialSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartialSpec.cs,FlowFlowGraph_Partial_must_be_able_to_expose_the_ports_of_imported_graphs,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,GraphPartitionSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2'16);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,GraphPartitionSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2'16);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_partition_to_three_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var t = RunnableGraph.FromGraph(GraphDsl.Create(s' s' s' Tuple.Create' (b' sink1' sink2' sink3) =>                  {                      var partition = b.Add(new Partition<int>(3' i => i > 3 ? 0 : (i < 3 ? 1 : 2)));                      var source =                          Source.From(Enumerable.Range(1' 5))                              .MapMaterializedValue                              <Tuple<Task<IImmutableList<int>>' Task<IImmutableList<int>>' Task<IImmutableList<int>>>>(                                  _ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(sink1.Inlet);                      b.From(partition.Out(1)).To(sink2.Inlet);                      b.From(partition.Out(2)).To(sink3.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var task = Task.WhenAll(t.Item1' t.Item2' t.Item3);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result[0].ShouldAllBeEquivalentTo(new[] {4' 5});                  task.Result[1].ShouldAllBeEquivalentTo(new[] {1' 2});                  task.Result[2].ShouldAllBeEquivalentTo(new[] {3});              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_complete_stage_after_upstream_completes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<string>(this);                  var c2 = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<string>(2' s => s.Length > 4 ? 0 : 1));                      var source = Source.From(new[] {"this"' "is"' "just"' "another"' "test"});                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c2.Request(4);                  c1.ExpectNext("another");                  c2.ExpectNext("this"' "is"' "just"' "test");                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_complete_stage_after_upstream_completes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<string>(this);                  var c2 = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<string>(2' s => s.Length > 4 ? 0 : 1));                      var source = Source.From(new[] {"this"' "is"' "just"' "another"' "test"});                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c2.Request(4);                  c1.ExpectNext("another");                  c2.ExpectNext("this"' "is"' "just"' "test");                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_complete_stage_after_upstream_completes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<string>(this);                  var c2 = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<string>(2' s => s.Length > 4 ? 0 : 1));                      var source = Source.From(new[] {"this"' "is"' "just"' "another"' "test"});                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c2.Request(4);                  c1.ExpectNext("another");                  c2.ExpectNext("this"' "is"' "just"' "test");                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_remeber_first_pull_even_thought_first_element_target_another_out,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.From(new [] {6'3});                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c1.ExpectNoMsg(TimeSpan.FromSeconds(1));                  c2.Request(1);                  c2.ExpectNext(6);                  c1.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_remeber_first_pull_even_thought_first_element_target_another_out,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.From(new [] {6'3});                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c1.ExpectNoMsg(TimeSpan.FromSeconds(1));                  c2.Request(1);                  c2.ExpectNext(6);                  c1.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_remeber_first_pull_even_thought_first_element_target_another_out,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.From(new [] {6'3});                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c1.ExpectNoMsg(TimeSpan.FromSeconds(1));                  c2.Request(1);                  c2.ExpectNext(6);                  c1.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_remeber_first_pull_even_thought_first_element_target_another_out,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.From(new [] {6'3});                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c1.ExpectNoMsg(TimeSpan.FromSeconds(1));                  c2.Request(1);                  c2.ExpectNext(6);                  c1.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_remeber_first_pull_even_thought_first_element_target_another_out,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.From(new [] {6'3});                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c1.ExpectNoMsg(TimeSpan.FromSeconds(1));                  c2.Request(1);                  c2.ExpectNext(6);                  c1.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_remeber_first_pull_even_thought_first_element_target_another_out,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.From(new [] {6'3});                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c1.ExpectNoMsg(TimeSpan.FromSeconds(1));                  c2.Request(1);                  c2.ExpectNext(6);                  c1.ExpectNext(3);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateProbe<int>(this);                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(partition.In);                      b.From(partition.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(3);                  sub2.Request(3);                  p1Sub.SendNext(1);                  p1Sub.SendNext(8);                  c1.ExpectNext(1);                  c2.ExpectNext(8);                  p1Sub.SendNext(2);                  c1.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateProbe<int>(this);                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(partition.In);                      b.From(partition.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(3);                  sub2.Request(3);                  p1Sub.SendNext(1);                  p1Sub.SendNext(8);                  c1.ExpectNext(1);                  c2.ExpectNext(8);                  p1Sub.SendNext(2);                  c1.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateProbe<int>(this);                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(partition.In);                      b.From(partition.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(3);                  sub2.Request(3);                  p1Sub.SendNext(1);                  p1Sub.SendNext(8);                  c1.ExpectNext(1);                  c2.ExpectNext(8);                  p1Sub.SendNext(2);                  c1.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateProbe<int>(this);                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(partition.In);                      b.From(partition.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(3);                  sub2.Request(3);                  p1Sub.SendNext(1);                  p1Sub.SendNext(8);                  c1.ExpectNext(1);                  c2.ExpectNext(8);                  p1Sub.SendNext(2);                  c1.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateProbe<int>(this);                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(partition.In);                      b.From(partition.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(3);                  sub2.Request(3);                  p1Sub.SendNext(1);                  p1Sub.SendNext(8);                  c1.ExpectNext(1);                  c2.ExpectNext(8);                  p1Sub.SendNext(2);                  c1.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateProbe<int>(this);                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(partition.In);                      b.From(partition.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(3);                  sub2.Request(3);                  p1Sub.SendNext(1);                  p1Sub.SendNext(8);                  c1.ExpectNext(1);                  c2.ExpectNext(8);                  p1Sub.SendNext(2);                  c1.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateProbe<int>(this);                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(partition.In);                      b.From(partition.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(3);                  sub2.Request(3);                  p1Sub.SendNext(1);                  p1Sub.SendNext(8);                  c1.ExpectNext(1);                  c2.ExpectNext(8);                  p1Sub.SendNext(2);                  c1.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateProbe<int>(this);                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(partition.In);                      b.From(partition.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(3);                  sub2.Request(3);                  p1Sub.SendNext(1);                  p1Sub.SendNext(8);                  c1.ExpectNext(1);                  c2.ExpectNext(8);                  p1Sub.SendNext(2);                  c1.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateProbe<int>(this);                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(partition.In);                      b.From(partition.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(3);                  sub2.Request(3);                  p1Sub.SendNext(1);                  p1Sub.SendNext(8);                  c1.ExpectNext(1);                  c2.ExpectNext(8);                  p1Sub.SendNext(2);                  c1.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_cancel_upstream_when_downstreams_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateProbe<int>(this);                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(partition.In);                      b.From(partition.Out(0))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1))                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                  sub1.Request(3);                  sub2.Request(3);                  p1Sub.SendNext(1);                  p1Sub.SendNext(8);                  c1.ExpectNext(1);                  c2.ExpectNext(8);                  p1Sub.SendNext(2);                  c1.ExpectNext(2);                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_work_with_merge,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var input = new[] {5' 2' 9' 1' 1' 1' 10};                    var task = RunnableGraph.FromGraph(GraphDsl.Create(s' (b' sink) =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 4 ? 0 : 1));                      var merge = b.Add(new Merge<int>(2));                      var source = Source.From(input).MapMaterializedValue<Task<IImmutableList<int>>>(_ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(merge.In(0));                      b.From(partition.Out(1)).To(merge.In(1));                      b.From(merge.Out).To(sink.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(input);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_work_with_merge,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var input = new[] {5' 2' 9' 1' 1' 1' 10};                    var task = RunnableGraph.FromGraph(GraphDsl.Create(s' (b' sink) =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 4 ? 0 : 1));                      var merge = b.Add(new Merge<int>(2));                      var source = Source.From(input).MapMaterializedValue<Task<IImmutableList<int>>>(_ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(merge.In(0));                      b.From(partition.Out(1)).To(merge.In(1));                      b.From(merge.Out).To(sink.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(input);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_work_with_merge,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var input = new[] {5' 2' 9' 1' 1' 1' 10};                    var task = RunnableGraph.FromGraph(GraphDsl.Create(s' (b' sink) =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 4 ? 0 : 1));                      var merge = b.Add(new Merge<int>(2));                      var source = Source.From(input).MapMaterializedValue<Task<IImmutableList<int>>>(_ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(merge.In(0));                      b.From(partition.Out(1)).To(merge.In(1));                      b.From(merge.Out).To(sink.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(input);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_work_with_merge,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var input = new[] {5' 2' 9' 1' 1' 1' 10};                    var task = RunnableGraph.FromGraph(GraphDsl.Create(s' (b' sink) =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 4 ? 0 : 1));                      var merge = b.Add(new Merge<int>(2));                      var source = Source.From(input).MapMaterializedValue<Task<IImmutableList<int>>>(_ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(merge.In(0));                      b.From(partition.Out(1)).To(merge.In(1));                      b.From(merge.Out).To(sink.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(input);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_work_with_merge,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var input = new[] {5' 2' 9' 1' 1' 1' 10};                    var task = RunnableGraph.FromGraph(GraphDsl.Create(s' (b' sink) =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 4 ? 0 : 1));                      var merge = b.Add(new Merge<int>(2));                      var source = Source.From(input).MapMaterializedValue<Task<IImmutableList<int>>>(_ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(merge.In(0));                      b.From(partition.Out(1)).To(merge.In(1));                      b.From(merge.Out).To(sink.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(input);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_work_with_merge,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var input = new[] {5' 2' 9' 1' 1' 1' 10};                    var task = RunnableGraph.FromGraph(GraphDsl.Create(s' (b' sink) =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 4 ? 0 : 1));                      var merge = b.Add(new Merge<int>(2));                      var source = Source.From(input).MapMaterializedValue<Task<IImmutableList<int>>>(_ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(merge.In(0));                      b.From(partition.Out(1)).To(merge.In(1));                      b.From(merge.Out).To(sink.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(input);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_work_with_merge,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var input = new[] {5' 2' 9' 1' 1' 1' 10};                    var task = RunnableGraph.FromGraph(GraphDsl.Create(s' (b' sink) =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 4 ? 0 : 1));                      var merge = b.Add(new Merge<int>(2));                      var source = Source.From(input).MapMaterializedValue<Task<IImmutableList<int>>>(_ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(merge.In(0));                      b.From(partition.Out(1)).To(merge.In(1));                      b.From(merge.Out).To(sink.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(input);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_work_with_merge,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = Sink.Seq<int>();                  var input = new[] {5' 2' 9' 1' 1' 1' 10};                    var task = RunnableGraph.FromGraph(GraphDsl.Create(s' (b' sink) =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 4 ? 0 : 1));                      var merge = b.Add(new Merge<int>(2));                      var source = Source.From(input).MapMaterializedValue<Task<IImmutableList<int>>>(_ => null);                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(merge.In(0));                      b.From(partition.Out(1)).To(merge.In(1));                      b.From(merge.Out).To(sink.Inlet);                        return ClosedShape.Instance;                  })).Run(Materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.ShouldAllBeEquivalentTo(input);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_stage_completion_is_waiting_for_pending_output,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.From(new[] { 6 });                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c1.ExpectNoMsg(TimeSpan.FromSeconds(1));                  c2.Request(1);                  c2.ExpectNext(6);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_stage_completion_is_waiting_for_pending_output,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.From(new[] { 6 });                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c1.ExpectNoMsg(TimeSpan.FromSeconds(1));                  c2.Request(1);                  c2.ExpectNext(6);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_stage_completion_is_waiting_for_pending_output,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.From(new[] { 6 });                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c1.ExpectNoMsg(TimeSpan.FromSeconds(1));                  c2.Request(1);                  c2.ExpectNext(6);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_stage_completion_is_waiting_for_pending_output,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                  var c2 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 6 ? 0 : 1));                      var source = Source.From(new[] { 6 });                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    c1.Request(1);                  c1.ExpectNoMsg(TimeSpan.FromSeconds(1));                  c2.Request(1);                  c2.ExpectNext(6);                  c1.ExpectComplete();                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_fail_stage_if_partitioner_outcome_is_out_of_bound,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 0 ? -1 : 0));                      var source = Source.From(new[] { -3 });                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.Ignore<int>().MapMaterializedValue(_ => NotUsed.Instance));                        return ClosedShape.Instance;                  })).Run(Materializer);                      c1.Request(1);                  var error = c1.ExpectError();                  error.Should().BeOfType<PartitionOutOfBoundsException>();                  error.Message.Should()                      .Be(                          "partitioner must return an index in the range [0'1]. returned: [-1] for input [Int32].");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphPartitionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphPartitionSpec.cs,A_Partition_must_fail_stage_if_partitioner_outcome_is_out_of_bound,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var partition = b.Add(new Partition<int>(2' i => i < 0 ? -1 : 0));                      var source = Source.From(new[] { -3 });                        b.From(source).To(partition.In);                      b.From(partition.Out(0)).To(Sink.FromSubscriber(c1));                      b.From(partition.Out(1)).To(Sink.Ignore<int>().MapMaterializedValue(_ => NotUsed.Instance));                        return ClosedShape.Instance;                  })).Run(Materializer);                      c1.Request(1);                  var error = c1.ExpectError();                  error.Should().BeOfType<PartitionOutOfBoundsException>();                  error.Message.Should()                      .Be(                          "partitioner must return an index in the range [0'1]. returned: [-1] for input [Int32].");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_receive_single_shot_timer,The following statement contains a magic number: Within(TimeSpan.FromSeconds(2)' () =>              {                  Within(TimeSpan.FromMilliseconds(500)' TimeSpan.FromSeconds(1)' () =>                  {                      driver.Tell(TestSingleTimer.Instance);                      ExpectMsg(new Tick(1));                  });                    ExpectNoMsg(TimeSpan.FromSeconds(1));              });
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_receive_single_shot_timer,The following statement contains a magic number: Within(TimeSpan.FromSeconds(2)' () =>              {                  Within(TimeSpan.FromMilliseconds(500)' TimeSpan.FromSeconds(1)' () =>                  {                      driver.Tell(TestSingleTimer.Instance);                      ExpectMsg(new Tick(1));                  });                    ExpectNoMsg(TimeSpan.FromSeconds(1));              });
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_resubmit_single_shot_timer,The following statement contains a magic number: Within(TimeSpan.FromSeconds(2.5)' () =>              {                  Within(TimeSpan.FromMilliseconds(500)' TimeSpan.FromSeconds(1)' () =>                  {                      driver.Tell(TestSingleTimerResubmit.Instance);                      ExpectMsg(new Tick(1));                  });                  Within(TimeSpan.FromSeconds(1)' () => ExpectMsg(new Tick(2)));                    ExpectNoMsg(TimeSpan.FromSeconds(1));              });
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_resubmit_single_shot_timer,The following statement contains a magic number: Within(TimeSpan.FromSeconds(2.5)' () =>              {                  Within(TimeSpan.FromMilliseconds(500)' TimeSpan.FromSeconds(1)' () =>                  {                      driver.Tell(TestSingleTimerResubmit.Instance);                      ExpectMsg(new Tick(1));                  });                  Within(TimeSpan.FromSeconds(1)' () => ExpectMsg(new Tick(2)));                    ExpectNoMsg(TimeSpan.FromSeconds(1));              });
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_resubmit_single_shot_timer,The following statement contains a magic number: Within(TimeSpan.FromSeconds(2.5)' () =>              {                  Within(TimeSpan.FromMilliseconds(500)' TimeSpan.FromSeconds(1)' () =>                  {                      driver.Tell(TestSingleTimerResubmit.Instance);                      ExpectMsg(new Tick(1));                  });                  Within(TimeSpan.FromSeconds(1)' () => ExpectMsg(new Tick(2)));                    ExpectNoMsg(TimeSpan.FromSeconds(1));              });
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_correctly_cancel_a_named_timer,The following statement contains a magic number: Within(TimeSpan.FromMilliseconds(500)' () => ExpectMsg<TestCancelTimerAck>());
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_correctly_cancel_a_named_timer,The following statement contains a magic number: Within(TimeSpan.FromMilliseconds(300)' TimeSpan.FromSeconds(1)' () => ExpectMsg(new Tick(1)));
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_receive_and_cancel_a_repeated_timer,The following statement contains a magic number: var seq = ReceiveWhile(TimeSpan.FromSeconds(2)' o => (Tick)o);
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_receive_and_cancel_a_repeated_timer,The following statement contains a magic number: seq.Should().HaveCount(5);
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_produce_scheduled_ticks_as_expected,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Via(new TestStage2())                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(5);                  downstream.ExpectNext(1' 2' 3);                    downstream.ExpectNoMsg(TimeSpan.FromSeconds(1));                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_produce_scheduled_ticks_as_expected,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Via(new TestStage2())                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(5);                  downstream.ExpectNext(1' 2' 3);                    downstream.ExpectNoMsg(TimeSpan.FromSeconds(1));                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphStageTimersSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,GraphStage_timer_support_must_produce_scheduled_ticks_as_expected,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Via(new TestStage2())                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(5);                  downstream.ExpectNext(1' 2' 3);                    downstream.ExpectNoMsg(TimeSpan.FromSeconds(1));                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,OnTestEvent,The following statement contains a magic number: message.Match()                          .With<TestSingleTimer>(() => ScheduleOnce(TestSingleTimerKey' Dilated(500)))                          .With<TestSingleTimerResubmit>(() => ScheduleOnce(TestSingleTimerResubmitKey' Dilated(500)))                          .With<TestCancelTimer>(() =>                          {                              ScheduleOnce(TestCancelTimerKey' Dilated(1));                              // Likely in mailbox but we cannot guarantee                              CancelTimer(TestCancelTimerKey);                              _stage._probe.Tell(TestCancelTimerAck.Instance);                              ScheduleOnce(TestCancelTimerKey' Dilated(500));                          })                          .With<TestRepeatedTimer>(() => ScheduleRepeatedly(TestRepeatedTimerKey' Dilated(100)));
Magic Number,Akka.Streams.Tests.Dsl,Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,OnTestEvent,The following statement contains a magic number: message.Match()                          .With<TestSingleTimer>(() => ScheduleOnce(TestSingleTimerKey' Dilated(500)))                          .With<TestSingleTimerResubmit>(() => ScheduleOnce(TestSingleTimerResubmitKey' Dilated(500)))                          .With<TestCancelTimer>(() =>                          {                              ScheduleOnce(TestCancelTimerKey' Dilated(1));                              // Likely in mailbox but we cannot guarantee                              CancelTimer(TestCancelTimerKey);                              _stage._probe.Tell(TestCancelTimerAck.Instance);                              ScheduleOnce(TestCancelTimerKey' Dilated(500));                          })                          .With<TestRepeatedTimer>(() => ScheduleRepeatedly(TestRepeatedTimerKey' Dilated(100)));
Magic Number,Akka.Streams.Tests.Dsl,Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,OnTestEvent,The following statement contains a magic number: message.Match()                          .With<TestSingleTimer>(() => ScheduleOnce(TestSingleTimerKey' Dilated(500)))                          .With<TestSingleTimerResubmit>(() => ScheduleOnce(TestSingleTimerResubmitKey' Dilated(500)))                          .With<TestCancelTimer>(() =>                          {                              ScheduleOnce(TestCancelTimerKey' Dilated(1));                              // Likely in mailbox but we cannot guarantee                              CancelTimer(TestCancelTimerKey);                              _stage._probe.Tell(TestCancelTimerAck.Instance);                              ScheduleOnce(TestCancelTimerKey' Dilated(500));                          })                          .With<TestRepeatedTimer>(() => ScheduleRepeatedly(TestRepeatedTimerKey' Dilated(100)));
Magic Number,Akka.Streams.Tests.Dsl,Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,OnTestEvent,The following statement contains a magic number: message.Match()                          .With<TestSingleTimer>(() => ScheduleOnce(TestSingleTimerKey' Dilated(500)))                          .With<TestSingleTimerResubmit>(() => ScheduleOnce(TestSingleTimerResubmitKey' Dilated(500)))                          .With<TestCancelTimer>(() =>                          {                              ScheduleOnce(TestCancelTimerKey' Dilated(1));                              // Likely in mailbox but we cannot guarantee                              CancelTimer(TestCancelTimerKey);                              _stage._probe.Tell(TestCancelTimerAck.Instance);                              ScheduleOnce(TestCancelTimerKey' Dilated(500));                          })                          .With<TestRepeatedTimer>(() => ScheduleRepeatedly(TestRepeatedTimerKey' Dilated(100)));
Magic Number,Akka.Streams.Tests.Dsl,Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,OnTimer,The following statement contains a magic number: ScheduleOnce(TestSingleTimerResubmitKey' Dilated(500));
Magic Number,Akka.Streams.Tests.Dsl,Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphStageTimersSpec.cs,OnTimer,The following statement contains a magic number: _tickCount == 3
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,GraphUnzipSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,GraphUnzipSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_unzip_to_two_subscribers,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(16' OverflowStrategy.Backpressure).Select(x => x*2))                          .To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(16' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(1);                  sub2.Request(2);                  c1.ExpectNext(1*2);                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  c2.ExpectNext("a"' "b");                  c2.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  sub1.Request(3);                  c1.ExpectNext(2*2' 3*2);                  c1.ExpectComplete();                  sub2.Request(3);                  c2.ExpectNext("c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_produce_to_right_downstream_even_though_left_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Cancel();                  sub2.Request(3);                  c2.ExpectNext("a"' "b"' "c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_produce_to_right_downstream_even_though_left_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Cancel();                  sub2.Request(3);                  c2.ExpectNext("a"' "b"' "c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_produce_to_right_downstream_even_though_left_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Cancel();                  sub2.Request(3);                  c2.ExpectNext("a"' "b"' "c");                  c2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_produce_to_left_downstream_even_though_right_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_produce_to_left_downstream_even_though_right_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_produce_to_left_downstream_even_though_right_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_produce_to_left_downstream_even_though_right_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_produce_to_left_downstream_even_though_right_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub2.Cancel();                  sub1.Request(3);                  c1.ExpectNext(1' 2' 3);                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_cancel_upstream_when_downstream_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<KeyValuePair<int' string>>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(p1Sub' 16);                  p1Sub.SendNext(new KeyValuePair<int' string>(1' "a"));                  c1.ExpectNext(1);                  c2.ExpectNext("a");                  p1Sub.SendNext(new KeyValuePair<int' string>(2' "b"));                  c1.ExpectNext(2);                  c2.ExpectNext("b");                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_cancel_upstream_when_downstream_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<KeyValuePair<int' string>>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(p1Sub' 16);                  p1Sub.SendNext(new KeyValuePair<int' string>(1' "a"));                  c1.ExpectNext(1);                  c2.ExpectNext("a");                  p1Sub.SendNext(new KeyValuePair<int' string>(2' "b"));                  c1.ExpectNext(2);                  c2.ExpectNext("b");                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_cancel_upstream_when_downstream_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<KeyValuePair<int' string>>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(p1Sub' 16);                  p1Sub.SendNext(new KeyValuePair<int' string>(1' "a"));                  c1.ExpectNext(1);                  c2.ExpectNext("a");                  p1Sub.SendNext(new KeyValuePair<int' string>(2' "b"));                  c1.ExpectNext(2);                  c2.ExpectNext("b");                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_cancel_upstream_when_downstream_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<KeyValuePair<int' string>>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(p1Sub' 16);                  p1Sub.SendNext(new KeyValuePair<int' string>(1' "a"));                  c1.ExpectNext(1);                  c2.ExpectNext("a");                  p1Sub.SendNext(new KeyValuePair<int' string>(2' "b"));                  c1.ExpectNext(2);                  c2.ExpectNext("b");                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_cancel_upstream_when_downstream_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p1 = TestPublisher.CreateManualProbe<KeyValuePair<int' string>>(this);                  var c1 = TestSubscriber.CreateManualProbe<int>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnZip<int' string>());                      var source = Source.FromPublisher(p1.Publisher);                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(c1));                      b.From(unzip.Out1).To(Sink.FromSubscriber(c2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var p1Sub = p1.ExpectSubscription();                  var sub1 = c1.ExpectSubscription();                  var sub2 = c2.ExpectSubscription();                    sub1.Request(3);                  sub2.Request(3);                  p1.ExpectRequest(p1Sub' 16);                  p1Sub.SendNext(new KeyValuePair<int' string>(1' "a"));                  c1.ExpectNext(1);                  c2.ExpectNext("a");                  p1Sub.SendNext(new KeyValuePair<int' string>(2' "b"));                  c1.ExpectNext(2);                  c2.ExpectNext("b");                  sub1.Cancel();                  sub2.Cancel();                  p1Sub.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_work_with_Zip,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(zip.In0);                      b.From(unzip.Out1).To(zip.In1);                      b.From(zip.Out).To(Sink.FromSubscriber(c1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Request(5);                  c1.ExpectNext(Tuple.Create(1' "a"));                  c1.ExpectNext(Tuple.Create(2' "b"));                  c1.ExpectNext(Tuple.Create(3' "c"));                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_work_with_Zip,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(zip.In0);                      b.From(unzip.Out1).To(zip.In1);                      b.From(zip.Out).To(Sink.FromSubscriber(c1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Request(5);                  c1.ExpectNext(Tuple.Create(1' "a"));                  c1.ExpectNext(Tuple.Create(2' "b"));                  c1.ExpectNext(Tuple.Create(3' "c"));                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_work_with_Zip,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(zip.In0);                      b.From(unzip.Out1).To(zip.In1);                      b.From(zip.Out).To(Sink.FromSubscriber(c1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Request(5);                  c1.ExpectNext(Tuple.Create(1' "a"));                  c1.ExpectNext(Tuple.Create(2' "b"));                  c1.ExpectNext(Tuple.Create(3' "c"));                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_work_with_Zip,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(zip.In0);                      b.From(unzip.Out1).To(zip.In1);                      b.From(zip.Out).To(Sink.FromSubscriber(c1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Request(5);                  c1.ExpectNext(Tuple.Create(1' "a"));                  c1.ExpectNext(Tuple.Create(2' "b"));                  c1.ExpectNext(Tuple.Create(3' "c"));                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipSpec.cs,A_Unzip_must_work_with_Zip,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c1 = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      var unzip = b.Add(new UnZip<int' string>());                      var source =                          Source.From(new[]                          {                              new KeyValuePair<int' string>(1' "a")'                              new KeyValuePair<int' string>(2' "b")'                              new KeyValuePair<int' string>(3' "c")                          });                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(zip.In0);                      b.From(unzip.Out1).To(zip.In1);                      b.From(zip.Out).To(Sink.FromSubscriber(c1));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var sub1 = c1.ExpectSubscription();                  sub1.Request(5);                  c1.ExpectNext(Tuple.Create(1' "a"));                  c1.ExpectNext(Tuple.Create(2' "b"));                  c1.ExpectNext(Tuple.Create(3' "c"));                  c1.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,GraphUnzipWithSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,GraphUnzipWithSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(Zipper));                      var source = Source.From(Enumerable.Range(1' 4));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0)                          .Via(Flow.Create<int>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1)                          .Via(Flow.Create<string>().Buffer(4' OverflowStrategy.Backpressure))                          .To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    leftSubscription.Request(2);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(2' 4);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("1+1");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                                    leftSubscription.Request(1);                  rightSubscription.Request(2);                    leftProbe.ExpectNext(6);                  leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    rightProbe.ExpectNext("2+2"' "3+3");                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                    leftSubscription.Request(1);                  rightSubscription.Request(1);                    leftProbe.ExpectNext(8);                  rightProbe.ExpectNext("4+4");                    leftProbe.ExpectComplete();                  rightProbe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(i => Tuple.Create(1/i' 1 + "/" + i)));                      var source = Source.From(Enumerable.Range(-2' 5));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1).To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    Action requestFromBoth = () =>                  {                      leftSubscription.Request(1);                      rightSubscription.Request(1);                  };                    requestFromBoth();                  leftProbe.ExpectNext(1/-2);                  rightProbe.ExpectNext("1/-2");                    requestFromBoth();                  leftProbe.ExpectNext(1 / -1);                  rightProbe.ExpectNext("1/-1");                    EventFilter.Exception<DivideByZeroException>().ExpectOne(requestFromBoth);                    leftProbe.ExpectError().Should().BeOfType<DivideByZeroException>();                  rightProbe.ExpectError().Should().BeOfType<DivideByZeroException>();                    leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(i => Tuple.Create(1/i' 1 + "/" + i)));                      var source = Source.From(Enumerable.Range(-2' 5));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1).To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    Action requestFromBoth = () =>                  {                      leftSubscription.Request(1);                      rightSubscription.Request(1);                  };                    requestFromBoth();                  leftProbe.ExpectNext(1/-2);                  rightProbe.ExpectNext("1/-2");                    requestFromBoth();                  leftProbe.ExpectNext(1 / -1);                  rightProbe.ExpectNext("1/-1");                    EventFilter.Exception<DivideByZeroException>().ExpectOne(requestFromBoth);                    leftProbe.ExpectError().Should().BeOfType<DivideByZeroException>();                  rightProbe.ExpectError().Should().BeOfType<DivideByZeroException>();                    leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(i => Tuple.Create(1/i' 1 + "/" + i)));                      var source = Source.From(Enumerable.Range(-2' 5));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1).To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    Action requestFromBoth = () =>                  {                      leftSubscription.Request(1);                      rightSubscription.Request(1);                  };                    requestFromBoth();                  leftProbe.ExpectNext(1/-2);                  rightProbe.ExpectNext("1/-2");                    requestFromBoth();                  leftProbe.ExpectNext(1 / -1);                  rightProbe.ExpectNext("1/-1");                    EventFilter.Exception<DivideByZeroException>().ExpectOne(requestFromBoth);                    leftProbe.ExpectError().Should().BeOfType<DivideByZeroException>();                  rightProbe.ExpectError().Should().BeOfType<DivideByZeroException>();                    leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(i => Tuple.Create(1/i' 1 + "/" + i)));                      var source = Source.From(Enumerable.Range(-2' 5));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1).To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    Action requestFromBoth = () =>                  {                      leftSubscription.Request(1);                      rightSubscription.Request(1);                  };                    requestFromBoth();                  leftProbe.ExpectNext(1/-2);                  rightProbe.ExpectNext("1/-2");                    requestFromBoth();                  leftProbe.ExpectNext(1 / -1);                  rightProbe.ExpectNext("1/-1");                    EventFilter.Exception<DivideByZeroException>().ExpectOne(requestFromBoth);                    leftProbe.ExpectError().Should().BeOfType<DivideByZeroException>();                  rightProbe.ExpectError().Should().BeOfType<DivideByZeroException>();                    leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var leftProbe = TestSubscriber.CreateManualProbe<int>(this);                  var rightProbe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<int' int' string>(i => Tuple.Create(1/i' 1 + "/" + i)));                      var source = Source.From(Enumerable.Range(-2' 5));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(leftProbe));                      b.From(unzip.Out1).To(Sink.FromSubscriber(rightProbe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var leftSubscription = leftProbe.ExpectSubscription();                  var rightSubscription = rightProbe.ExpectSubscription();                    Action requestFromBoth = () =>                  {                      leftSubscription.Request(1);                      rightSubscription.Request(1);                  };                    requestFromBoth();                  leftProbe.ExpectNext(1/-2);                  rightProbe.ExpectNext("1/-2");                    requestFromBoth();                  leftProbe.ExpectNext(1 / -1);                  rightProbe.ExpectNext("1/-1");                    EventFilter.Exception<DivideByZeroException>().ExpectOne(requestFromBoth);                    leftProbe.ExpectError().Should().BeOfType<DivideByZeroException>();                  rightProbe.ExpectError().Should().BeOfType<DivideByZeroException>();                    leftProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  rightProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_unzipWith_expanded_Person_unapply_3_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe0 = TestSubscriber.CreateManualProbe<string>(this);                  var probe1 = TestSubscriber.CreateManualProbe<string>(this);                  var probe2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<Person' string' string' int>(p => Tuple.Create(p.Name' p.Surname' p.Age)));                      var source = Source.Single(new Person("Caplin"' "Capybara"' 55));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(probe0));                      b.From(unzip.Out1).To(Sink.FromSubscriber(probe1));                      b.From(unzip.Out2).To(Sink.FromSubscriber(probe2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription0 = probe0.ExpectSubscription();                  var subscription1 = probe1.ExpectSubscription();                  var subscription2 = probe2.ExpectSubscription();                    subscription0.Request(1);                  subscription1.Request(1);                  subscription2.Request(1);                    probe0.ExpectNext("Caplin");                  probe1.ExpectNext("Capybara");                  probe2.ExpectNext(55);                    probe0.ExpectComplete();                  probe1.ExpectComplete();                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_unzipWith_expanded_Person_unapply_3_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe0 = TestSubscriber.CreateManualProbe<string>(this);                  var probe1 = TestSubscriber.CreateManualProbe<string>(this);                  var probe2 = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var unzip = b.Add(new UnzipWith<Person' string' string' int>(p => Tuple.Create(p.Name' p.Surname' p.Age)));                      var source = Source.Single(new Person("Caplin"' "Capybara"' 55));                        b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(probe0));                      b.From(unzip.Out1).To(Sink.FromSubscriber(probe1));                      b.From(unzip.Out2).To(Sink.FromSubscriber(probe2));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription0 = probe0.ExpectSubscription();                  var subscription1 = probe1.ExpectSubscription();                  var subscription2 = probe2.ExpectSubscription();                    subscription0.Request(1);                  subscription1.Request(1);                  subscription2.Request(1);                    probe0.ExpectNext("Caplin");                  probe1.ExpectNext("Capybara");                  probe2.ExpectNext(55);                    probe0.ExpectComplete();                  probe1.ExpectComplete();                  probe2.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_with_up_to_6_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe0 = TestSubscriber.CreateManualProbe<int>(this);                  var probe1 = TestSubscriber.CreateManualProbe<string>(this);                  var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  var probe3 = TestSubscriber.CreateManualProbe<string>(this);                  var probe4 = TestSubscriber.CreateManualProbe<int>(this);                  var probe5 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      // odd input ports will be Int' even input ports will be String                      var unzip =                          b.Add(                              new UnzipWith<List<int>' int' string' int' string' int' string>(                                  ints =>                                      Tuple.Create(ints[0]' ints[0].ToString()' ints[1]' ints[1].ToString()' ints[2]'                                          ints[2].ToString())));                        var source = Source.Single(Enumerable.Range(1'3).ToList());                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(probe0));                      b.From(unzip.Out1).To(Sink.FromSubscriber(probe1));                      b.From(unzip.Out2).To(Sink.FromSubscriber(probe2));                      b.From(unzip.Out3).To(Sink.FromSubscriber(probe3));                      b.From(unzip.Out4).To(Sink.FromSubscriber(probe4));                      b.From(unzip.Out5).To(Sink.FromSubscriber(probe5));                        return ClosedShape.Instance;                  })).Run(Materializer);                    probe0.ExpectSubscription().Request(1);                  probe1.ExpectSubscription().Request(1);                  probe2.ExpectSubscription().Request(1);                  probe3.ExpectSubscription().Request(1);                  probe4.ExpectSubscription().Request(1);                  probe5.ExpectSubscription().Request(1);                    probe0.ExpectNext(1);                  probe1.ExpectNext("1");                  probe2.ExpectNext(2);                  probe3.ExpectNext("2");                  probe4.ExpectNext(3);                  probe5.ExpectNext("3");                    probe0.ExpectComplete();                  probe1.ExpectComplete();                  probe2.ExpectComplete();                  probe3.ExpectComplete();                  probe4.ExpectComplete();                  probe5.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_with_up_to_6_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe0 = TestSubscriber.CreateManualProbe<int>(this);                  var probe1 = TestSubscriber.CreateManualProbe<string>(this);                  var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  var probe3 = TestSubscriber.CreateManualProbe<string>(this);                  var probe4 = TestSubscriber.CreateManualProbe<int>(this);                  var probe5 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      // odd input ports will be Int' even input ports will be String                      var unzip =                          b.Add(                              new UnzipWith<List<int>' int' string' int' string' int' string>(                                  ints =>                                      Tuple.Create(ints[0]' ints[0].ToString()' ints[1]' ints[1].ToString()' ints[2]'                                          ints[2].ToString())));                        var source = Source.Single(Enumerable.Range(1'3).ToList());                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(probe0));                      b.From(unzip.Out1).To(Sink.FromSubscriber(probe1));                      b.From(unzip.Out2).To(Sink.FromSubscriber(probe2));                      b.From(unzip.Out3).To(Sink.FromSubscriber(probe3));                      b.From(unzip.Out4).To(Sink.FromSubscriber(probe4));                      b.From(unzip.Out5).To(Sink.FromSubscriber(probe5));                        return ClosedShape.Instance;                  })).Run(Materializer);                    probe0.ExpectSubscription().Request(1);                  probe1.ExpectSubscription().Request(1);                  probe2.ExpectSubscription().Request(1);                  probe3.ExpectSubscription().Request(1);                  probe4.ExpectSubscription().Request(1);                  probe5.ExpectSubscription().Request(1);                    probe0.ExpectNext(1);                  probe1.ExpectNext("1");                  probe2.ExpectNext(2);                  probe3.ExpectNext("2");                  probe4.ExpectNext(3);                  probe5.ExpectNext("3");                    probe0.ExpectComplete();                  probe1.ExpectComplete();                  probe2.ExpectComplete();                  probe3.ExpectComplete();                  probe4.ExpectComplete();                  probe5.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_with_up_to_6_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe0 = TestSubscriber.CreateManualProbe<int>(this);                  var probe1 = TestSubscriber.CreateManualProbe<string>(this);                  var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  var probe3 = TestSubscriber.CreateManualProbe<string>(this);                  var probe4 = TestSubscriber.CreateManualProbe<int>(this);                  var probe5 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      // odd input ports will be Int' even input ports will be String                      var unzip =                          b.Add(                              new UnzipWith<List<int>' int' string' int' string' int' string>(                                  ints =>                                      Tuple.Create(ints[0]' ints[0].ToString()' ints[1]' ints[1].ToString()' ints[2]'                                          ints[2].ToString())));                        var source = Source.Single(Enumerable.Range(1'3).ToList());                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(probe0));                      b.From(unzip.Out1).To(Sink.FromSubscriber(probe1));                      b.From(unzip.Out2).To(Sink.FromSubscriber(probe2));                      b.From(unzip.Out3).To(Sink.FromSubscriber(probe3));                      b.From(unzip.Out4).To(Sink.FromSubscriber(probe4));                      b.From(unzip.Out5).To(Sink.FromSubscriber(probe5));                        return ClosedShape.Instance;                  })).Run(Materializer);                    probe0.ExpectSubscription().Request(1);                  probe1.ExpectSubscription().Request(1);                  probe2.ExpectSubscription().Request(1);                  probe3.ExpectSubscription().Request(1);                  probe4.ExpectSubscription().Request(1);                  probe5.ExpectSubscription().Request(1);                    probe0.ExpectNext(1);                  probe1.ExpectNext("1");                  probe2.ExpectNext(2);                  probe3.ExpectNext("2");                  probe4.ExpectNext(3);                  probe5.ExpectNext("3");                    probe0.ExpectComplete();                  probe1.ExpectComplete();                  probe2.ExpectComplete();                  probe3.ExpectComplete();                  probe4.ExpectComplete();                  probe5.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_with_up_to_6_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe0 = TestSubscriber.CreateManualProbe<int>(this);                  var probe1 = TestSubscriber.CreateManualProbe<string>(this);                  var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  var probe3 = TestSubscriber.CreateManualProbe<string>(this);                  var probe4 = TestSubscriber.CreateManualProbe<int>(this);                  var probe5 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      // odd input ports will be Int' even input ports will be String                      var unzip =                          b.Add(                              new UnzipWith<List<int>' int' string' int' string' int' string>(                                  ints =>                                      Tuple.Create(ints[0]' ints[0].ToString()' ints[1]' ints[1].ToString()' ints[2]'                                          ints[2].ToString())));                        var source = Source.Single(Enumerable.Range(1'3).ToList());                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(probe0));                      b.From(unzip.Out1).To(Sink.FromSubscriber(probe1));                      b.From(unzip.Out2).To(Sink.FromSubscriber(probe2));                      b.From(unzip.Out3).To(Sink.FromSubscriber(probe3));                      b.From(unzip.Out4).To(Sink.FromSubscriber(probe4));                      b.From(unzip.Out5).To(Sink.FromSubscriber(probe5));                        return ClosedShape.Instance;                  })).Run(Materializer);                    probe0.ExpectSubscription().Request(1);                  probe1.ExpectSubscription().Request(1);                  probe2.ExpectSubscription().Request(1);                  probe3.ExpectSubscription().Request(1);                  probe4.ExpectSubscription().Request(1);                  probe5.ExpectSubscription().Request(1);                    probe0.ExpectNext(1);                  probe1.ExpectNext("1");                  probe2.ExpectNext(2);                  probe3.ExpectNext("2");                  probe4.ExpectNext(3);                  probe5.ExpectNext("3");                    probe0.ExpectComplete();                  probe1.ExpectComplete();                  probe2.ExpectComplete();                  probe3.ExpectComplete();                  probe4.ExpectComplete();                  probe5.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphUnzipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphUnzipWithSpec.cs,UnzipWith_must_work_with_up_to_6_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe0 = TestSubscriber.CreateManualProbe<int>(this);                  var probe1 = TestSubscriber.CreateManualProbe<string>(this);                  var probe2 = TestSubscriber.CreateManualProbe<int>(this);                  var probe3 = TestSubscriber.CreateManualProbe<string>(this);                  var probe4 = TestSubscriber.CreateManualProbe<int>(this);                  var probe5 = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      // odd input ports will be Int' even input ports will be String                      var unzip =                          b.Add(                              new UnzipWith<List<int>' int' string' int' string' int' string>(                                  ints =>                                      Tuple.Create(ints[0]' ints[0].ToString()' ints[1]' ints[1].ToString()' ints[2]'                                          ints[2].ToString())));                        var source = Source.Single(Enumerable.Range(1'3).ToList());                                            b.From(source).To(unzip.In);                      b.From(unzip.Out0).To(Sink.FromSubscriber(probe0));                      b.From(unzip.Out1).To(Sink.FromSubscriber(probe1));                      b.From(unzip.Out2).To(Sink.FromSubscriber(probe2));                      b.From(unzip.Out3).To(Sink.FromSubscriber(probe3));                      b.From(unzip.Out4).To(Sink.FromSubscriber(probe4));                      b.From(unzip.Out5).To(Sink.FromSubscriber(probe5));                        return ClosedShape.Instance;                  })).Run(Materializer);                    probe0.ExpectSubscription().Request(1);                  probe1.ExpectSubscription().Request(1);                  probe2.ExpectSubscription().Request(1);                  probe3.ExpectSubscription().Request(1);                  probe4.ExpectSubscription().Request(1);                  probe5.ExpectSubscription().Request(1);                    probe0.ExpectNext(1);                  probe1.ExpectNext("1");                  probe2.ExpectNext(2);                  probe3.ExpectNext("2");                  probe4.ExpectNext(3);                  probe5.ExpectNext("3");                    probe0.ExpectComplete();                  probe1.ExpectComplete();                  probe2.ExpectComplete();                  probe3.ExpectComplete();                  probe4.ExpectComplete();                  probe5.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {"A"' "B"' "C"' "D"' "E"' "F"});                        b.From(source1).To(zip.In0);                      b.From(source2).To(zip.In1);                      b.From(zip.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(Tuple.Create(1' "A"));                  probe.ExpectNext(Tuple.Create(2' "B"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(3' "C"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(4' "D"));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {"A"' "B"' "C"' "D"' "E"' "F"});                        b.From(source1).To(zip.In0);                      b.From(source2).To(zip.In1);                      b.From(zip.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(Tuple.Create(1' "A"));                  probe.ExpectNext(Tuple.Create(2' "B"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(3' "C"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(4' "D"));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {"A"' "B"' "C"' "D"' "E"' "F"});                        b.From(source1).To(zip.In0);                      b.From(source2).To(zip.In1);                      b.From(zip.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(Tuple.Create(1' "A"));                  probe.ExpectNext(Tuple.Create(2' "B"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(3' "C"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(4' "D"));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {"A"' "B"' "C"' "D"' "E"' "F"});                        b.From(source1).To(zip.In0);                      b.From(source2).To(zip.In1);                      b.From(zip.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(Tuple.Create(1' "A"));                  probe.ExpectNext(Tuple.Create(2' "B"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(3' "C"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(4' "D"));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {"A"' "B"' "C"' "D"' "E"' "F"});                        b.From(source1).To(zip.In0);                      b.From(source2).To(zip.In1);                      b.From(zip.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(Tuple.Create(1' "A"));                  probe.ExpectNext(Tuple.Create(2' "B"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(3' "C"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(4' "D"));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_complete_if_one_side_is_available_but_other_already_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream1 = TestPublisher.CreateProbe<int>(this);                  var upstream2 = TestPublisher.CreateProbe<string>(this);                    var completed = RunnableGraph.FromGraph(GraphDsl.Create(Sink.Ignore<Tuple<int' string>>()' (b' sink) =>                  {                      var zip = b.Add(new Zip<int' string>());                      var source1 = Source.FromPublisher(upstream1).MapMaterializedValue<Task>(_ => null);                      var source2 = Source.FromPublisher(upstream2).MapMaterializedValue<Task>(_ => null);                        b.From(source1).To(zip.In0);                      b.From(source2).To(zip.In1);                      b.From(zip.Out).To(sink);                        return ClosedShape.Instance;                  })).Run(Materializer);                    upstream1.SendNext(1);                  upstream1.SendNext(2);                  upstream2.SendNext("A");                  upstream2.SendComplete();                    completed.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  upstream1.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_complete_if_one_side_is_available_but_other_already_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream1 = TestPublisher.CreateProbe<int>(this);                  var upstream2 = TestPublisher.CreateProbe<string>(this);                    var completed = RunnableGraph.FromGraph(GraphDsl.Create(Sink.Ignore<Tuple<int' string>>()' (b' sink) =>                  {                      var zip = b.Add(new Zip<int' string>());                      var source1 = Source.FromPublisher(upstream1).MapMaterializedValue<Task>(_ => null);                      var source2 = Source.FromPublisher(upstream2).MapMaterializedValue<Task>(_ => null);                        b.From(source1).To(zip.In0);                      b.From(source2).To(zip.In1);                      b.From(zip.Out).To(sink);                        return ClosedShape.Instance;                  })).Run(Materializer);                    upstream1.SendNext(1);                  upstream1.SendNext(2);                  upstream2.SendNext("A");                  upstream2.SendComplete();                    completed.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  upstream1.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_complete_if_one_side_complete_before_requested_with_elements_pending,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream1 = TestPublisher.CreateProbe<int>(this);                  var upstream2 = TestPublisher.CreateProbe<string>(this);                  var downstream = TestSubscriber.CreateProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(Sink.FromSubscriber(downstream)' (b' sink) =>                  {                      var zip = b.Add(new Zip<int' string>());                      var source1 = Source.FromPublisher(upstream1);                      var source2 = Source.FromPublisher(upstream2);                        b.From(source1).To(zip.In0);                      b.From(source2).To(zip.In1);                      b.From(zip.Out).To(sink);                        return ClosedShape.Instance;                  })).Run(Materializer);                    upstream1.SendNext(1);                  upstream1.SendNext(2);                  upstream2.SendNext("A");                    upstream1.SendComplete();                  upstream2.SendComplete();                    downstream.RequestNext(Tuple.Create(1' "A"));                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_complete_if_one_side_complete_before_requested_with_elements_pending_2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream1 = TestPublisher.CreateProbe<int>(this);                  var upstream2 = TestPublisher.CreateProbe<string>(this);                  var downstream = TestSubscriber.CreateProbe<Tuple<int' string>>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(Sink.FromSubscriber(downstream)' (b' sink) =>                  {                      var zip = b.Add(new Zip<int' string>());                      var source1 = Source.FromPublisher(upstream1);                      var source2 = Source.FromPublisher(upstream2);                        b.From(source1).To(zip.In0);                      b.From(source2).To(zip.In1);                      b.From(zip.Out).To(sink);                        return ClosedShape.Instance;                  })).Run(Materializer);                    downstream.EnsureSubscription();                    upstream1.SendNext(1);                  upstream1.SendComplete();                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                    upstream2.SendNext("A");                  upstream2.SendComplete();                    downstream.RequestNext(Tuple.Create(1' "A"));                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  subscriber2.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());                  subscriber2.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  subscriber2.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndComplete();                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());                  subscriber2.ExpectSubscriptionAndComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndError().Should().Be(TestException());                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());                  subscriber2.ExpectSubscriptionAndError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndError().Should().Be(TestException());                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());                  subscriber2.ExpectSubscriptionAndError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_with_one_delayed_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToFailPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndError().Should().Be(TestException());                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());                  subscriber2.ExpectSubscriptionAndError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipSpec.cs,Zip_must_work_with_one_delayed_failed_and_one_nonempty_publisher,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber1 = Setup(SoonToFailPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));                  subscriber1.ExpectSubscriptionAndError().Should().Be(TestException());                    var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());                  subscriber2.ExpectSubscriptionAndError().Should().Be(TestException());              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_one_delayed_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(SoonToFailPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_one_delayed_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i+i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {10' 20' 30' 40});                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(11' 22);                    subscription.Request(1);                  probe.ExpectNext(33);                    subscription.Request(1);                  probe.ExpectNext(44);                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i+i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {10' 20' 30' 40});                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(11' 22);                    subscription.Request(1);                  probe.ExpectNext(33);                    subscription.Request(1);                  probe.ExpectNext(44);                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i+i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {10' 20' 30' 40});                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(11' 22);                    subscription.Request(1);                  probe.ExpectNext(33);                    subscription.Request(1);                  probe.ExpectNext(44);                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i+i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {10' 20' 30' 40});                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(11' 22);                    subscription.Request(1);                  probe.ExpectNext(33);                    subscription.Request(1);                  probe.ExpectNext(44);                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i+i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {10' 20' 30' 40});                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(11' 22);                    subscription.Request(1);                  probe.ExpectNext(33);                    subscription.Request(1);                  probe.ExpectNext(44);                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i+i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {10' 20' 30' 40});                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(11' 22);                    subscription.Request(1);                  probe.ExpectNext(33);                    subscription.Request(1);                  probe.ExpectNext(44);                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i+i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {10' 20' 30' 40});                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(11' 22);                    subscription.Request(1);                  probe.ExpectNext(33);                    subscription.Request(1);                  probe.ExpectNext(44);                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i+i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {10' 20' 30' 40});                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(11' 22);                    subscription.Request(1);                  probe.ExpectNext(33);                    subscription.Request(1);                  probe.ExpectNext(44);                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i+i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {10' 20' 30' 40});                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(11' 22);                    subscription.Request(1);                  probe.ExpectNext(33);                    subscription.Request(1);                  probe.ExpectNext(44);                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i+i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(new[] {10' 20' 30' 40});                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(11' 22);                    subscription.Request(1);                  probe.ExpectNext(33);                    subscription.Request(1);                  probe.ExpectNext(44);                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i / i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(Enumerable.Range(-2' 5));                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(1/-2' 2/-1);                  EventFilter.Exception<DivideByZeroException>().ExpectOne(() => subscription.Request(2));                  probe.ExpectError().Should().BeOfType<DivideByZeroException>();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i / i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(Enumerable.Range(-2' 5));                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(1/-2' 2/-1);                  EventFilter.Exception<DivideByZeroException>().ExpectOne(() => subscription.Request(2));                  probe.ExpectError().Should().BeOfType<DivideByZeroException>();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i / i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(Enumerable.Range(-2' 5));                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(1/-2' 2/-1);                  EventFilter.Exception<DivideByZeroException>().ExpectOne(() => subscription.Request(2));                  probe.ExpectError().Should().BeOfType<DivideByZeroException>();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i / i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(Enumerable.Range(-2' 5));                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(1/-2' 2/-1);                  EventFilter.Exception<DivideByZeroException>().ExpectOne(() => subscription.Request(2));                  probe.ExpectError().Should().BeOfType<DivideByZeroException>();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i / i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(Enumerable.Range(-2' 5));                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(1/-2' 2/-1);                  EventFilter.Exception<DivideByZeroException>().ExpectOne(() => subscription.Request(2));                  probe.ExpectError().Should().BeOfType<DivideByZeroException>();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i / i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(Enumerable.Range(-2' 5));                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(1/-2' 2/-1);                  EventFilter.Exception<DivideByZeroException>().ExpectOne(() => subscription.Request(2));                  probe.ExpectError().Should().BeOfType<DivideByZeroException>();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i / i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(Enumerable.Range(-2' 5));                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(1/-2' 2/-1);                  EventFilter.Exception<DivideByZeroException>().ExpectOne(() => subscription.Request(2));                  probe.ExpectError().Should().BeOfType<DivideByZeroException>();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_in_the_sad_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith = b.Add(new ZipWith<int' int' int>((i' i1) => i / i1));                      var source1 = Source.From(Enumerable.Range(1' 4));                      var source2 = Source.From(Enumerable.Range(-2' 5));                        b.From(source1).To(zipWith.In0);                      b.From(source2).To(zipWith.In1);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(1/-2' 2/-1);                  EventFilter.Exception<DivideByZeroException>().ExpectOne(() => subscription.Request(2));                  probe.ExpectError().Should().BeOfType<DivideByZeroException>();                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_ZipWith_expanded_Person_unapply_3_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Person>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith =                          b.Add(                              new ZipWith<string' string' int' Person>(                                  (name' surname' age) => new Person(name' surname' age)));                        b.From(Source.Single("Caplin")).To(zipWith.In0);                      b.From(Source.Single("Capybara")).To(zipWith.In1);                      b.From(Source.Single(55)).To(zipWith.In2);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(5);                  probe.ExpectNext().ShouldBeEquivalentTo(new Person("Caplin"' "Capybara"' 55));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_ZipWith_expanded_Person_unapply_3_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Person>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith =                          b.Add(                              new ZipWith<string' string' int' Person>(                                  (name' surname' age) => new Person(name' surname' age)));                        b.From(Source.Single("Caplin")).To(zipWith.In0);                      b.From(Source.Single("Capybara")).To(zipWith.In1);                      b.From(Source.Single(55)).To(zipWith.In2);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(5);                  probe.ExpectNext().ShouldBeEquivalentTo(new Person("Caplin"' "Capybara"' 55));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_ZipWith_expanded_Person_unapply_3_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Person>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zipWith =                          b.Add(                              new ZipWith<string' string' int' Person>(                                  (name' surname' age) => new Person(name' surname' age)));                        b.From(Source.Single("Caplin")).To(zipWith.In0);                      b.From(Source.Single("Capybara")).To(zipWith.In1);                      b.From(Source.Single(55)).To(zipWith.In2);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(5);                  probe.ExpectNext().ShouldBeEquivalentTo(new Person("Caplin"' "Capybara"' 55));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_up_to_9_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      Func<int' string' int' string' int' string' int' string' int' string> sum9 =                          (i1' s1' i2' s2' i3' s3' i4' s4' i5) => i1 + s1 + i2 + s2 + i3 + s3 + i4 + s4 + i5;                        // odd input ports will be Int' even input ports will be String                      var zipWith = b.Add(ZipWith.Apply(sum9));                        b.From(Source.Single(1)).To(zipWith.In0);                      b.From(Source.Single("2")).To(zipWith.In1);                      b.From(Source.Single(3)).To(zipWith.In2);                      b.From(Source.Single("4")).To(zipWith.In3);                      b.From(Source.Single(5)).To(zipWith.In4);                      b.From(Source.Single("6")).To(zipWith.In5);                      b.From(Source.Single(7)).To(zipWith.In6);                      b.From(Source.Single("8")).To(zipWith.In7);                      b.From(Source.Single(9)).To(zipWith.In8);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(1);                  probe.ExpectNext(Enumerable.Range(1' 9).Aggregate(""' (s' i) => s + i));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_up_to_9_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      Func<int' string' int' string' int' string' int' string' int' string> sum9 =                          (i1' s1' i2' s2' i3' s3' i4' s4' i5) => i1 + s1 + i2 + s2 + i3 + s3 + i4 + s4 + i5;                        // odd input ports will be Int' even input ports will be String                      var zipWith = b.Add(ZipWith.Apply(sum9));                        b.From(Source.Single(1)).To(zipWith.In0);                      b.From(Source.Single("2")).To(zipWith.In1);                      b.From(Source.Single(3)).To(zipWith.In2);                      b.From(Source.Single("4")).To(zipWith.In3);                      b.From(Source.Single(5)).To(zipWith.In4);                      b.From(Source.Single("6")).To(zipWith.In5);                      b.From(Source.Single(7)).To(zipWith.In6);                      b.From(Source.Single("8")).To(zipWith.In7);                      b.From(Source.Single(9)).To(zipWith.In8);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(1);                  probe.ExpectNext(Enumerable.Range(1' 9).Aggregate(""' (s' i) => s + i));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_up_to_9_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      Func<int' string' int' string' int' string' int' string' int' string> sum9 =                          (i1' s1' i2' s2' i3' s3' i4' s4' i5) => i1 + s1 + i2 + s2 + i3 + s3 + i4 + s4 + i5;                        // odd input ports will be Int' even input ports will be String                      var zipWith = b.Add(ZipWith.Apply(sum9));                        b.From(Source.Single(1)).To(zipWith.In0);                      b.From(Source.Single("2")).To(zipWith.In1);                      b.From(Source.Single(3)).To(zipWith.In2);                      b.From(Source.Single("4")).To(zipWith.In3);                      b.From(Source.Single(5)).To(zipWith.In4);                      b.From(Source.Single("6")).To(zipWith.In5);                      b.From(Source.Single(7)).To(zipWith.In6);                      b.From(Source.Single("8")).To(zipWith.In7);                      b.From(Source.Single(9)).To(zipWith.In8);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(1);                  probe.ExpectNext(Enumerable.Range(1' 9).Aggregate(""' (s' i) => s + i));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_up_to_9_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      Func<int' string' int' string' int' string' int' string' int' string> sum9 =                          (i1' s1' i2' s2' i3' s3' i4' s4' i5) => i1 + s1 + i2 + s2 + i3 + s3 + i4 + s4 + i5;                        // odd input ports will be Int' even input ports will be String                      var zipWith = b.Add(ZipWith.Apply(sum9));                        b.From(Source.Single(1)).To(zipWith.In0);                      b.From(Source.Single("2")).To(zipWith.In1);                      b.From(Source.Single(3)).To(zipWith.In2);                      b.From(Source.Single("4")).To(zipWith.In3);                      b.From(Source.Single(5)).To(zipWith.In4);                      b.From(Source.Single("6")).To(zipWith.In5);                      b.From(Source.Single(7)).To(zipWith.In6);                      b.From(Source.Single("8")).To(zipWith.In7);                      b.From(Source.Single(9)).To(zipWith.In8);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(1);                  probe.ExpectNext(Enumerable.Range(1' 9).Aggregate(""' (s' i) => s + i));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,GraphZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\GraphZipWithSpec.cs,ZipWith_must_work_with_up_to_9_inputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      Func<int' string' int' string' int' string' int' string' int' string> sum9 =                          (i1' s1' i2' s2' i3' s3' i4' s4' i5) => i1 + s1 + i2 + s2 + i3 + s3 + i4 + s4 + i5;                        // odd input ports will be Int' even input ports will be String                      var zipWith = b.Add(ZipWith.Apply(sum9));                        b.From(Source.Single(1)).To(zipWith.In0);                      b.From(Source.Single("2")).To(zipWith.In1);                      b.From(Source.Single(3)).To(zipWith.In2);                      b.From(Source.Single("4")).To(zipWith.In3);                      b.From(Source.Single(5)).To(zipWith.In4);                      b.From(Source.Single("6")).To(zipWith.In5);                      b.From(Source.Single(7)).To(zipWith.In6);                      b.From(Source.Single("8")).To(zipWith.In7);                      b.From(Source.Single(9)).To(zipWith.In8);                      b.From(zipWith.Out).To(Sink.FromSubscriber(probe));                        return ClosedShape.Instance;                  })).Run(Materializer);                    var subscription = probe.ExpectSubscription();                    subscription.Request(1);                  probe.ExpectNext(Enumerable.Range(1' 9).Aggregate(""' (s' i) => s + i));                  probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_be_unique_when_created_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      RunnableGraph.FromGraph(                          GraphDsl.Create(Sink.AsPublisher<int>(false)'                              Sink.AsPublisher<int>(false)' Keep.Both'                              (b' p1' p2) =>                              {                                  var broadcast = b.Add(new Broadcast<int>(2));                                  var source =                                      Source.From(Enumerable.Range(0' 6))                                          .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                                  b.From(source).To(broadcast.In);                                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Select(i => i * 2)).To(p1.Inlet);                                  b.From(broadcast.Out(1)).To(p2.Inlet);                                  return ClosedShape.Instance;                              })).Run(Materializer);                    var pub1 = t.Item1;                  var pub2 = t.Item2;                    var f1 = Source.FromPublisher(pub1).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                  var f2 = Source.FromPublisher(pub2).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                    f1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  f2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    f1.Result.Should().Be(30);                  f2.Result.Should().Be(15);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_be_unique_when_created_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      RunnableGraph.FromGraph(                          GraphDsl.Create(Sink.AsPublisher<int>(false)'                              Sink.AsPublisher<int>(false)' Keep.Both'                              (b' p1' p2) =>                              {                                  var broadcast = b.Add(new Broadcast<int>(2));                                  var source =                                      Source.From(Enumerable.Range(0' 6))                                          .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                                  b.From(source).To(broadcast.In);                                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Select(i => i * 2)).To(p1.Inlet);                                  b.From(broadcast.Out(1)).To(p2.Inlet);                                  return ClosedShape.Instance;                              })).Run(Materializer);                    var pub1 = t.Item1;                  var pub2 = t.Item2;                    var f1 = Source.FromPublisher(pub1).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                  var f2 = Source.FromPublisher(pub2).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                    f1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  f2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    f1.Result.Should().Be(30);                  f2.Result.Should().Be(15);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_be_unique_when_created_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      RunnableGraph.FromGraph(                          GraphDsl.Create(Sink.AsPublisher<int>(false)'                              Sink.AsPublisher<int>(false)' Keep.Both'                              (b' p1' p2) =>                              {                                  var broadcast = b.Add(new Broadcast<int>(2));                                  var source =                                      Source.From(Enumerable.Range(0' 6))                                          .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                                  b.From(source).To(broadcast.In);                                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Select(i => i * 2)).To(p1.Inlet);                                  b.From(broadcast.Out(1)).To(p2.Inlet);                                  return ClosedShape.Instance;                              })).Run(Materializer);                    var pub1 = t.Item1;                  var pub2 = t.Item2;                    var f1 = Source.FromPublisher(pub1).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                  var f2 = Source.FromPublisher(pub2).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                    f1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  f2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    f1.Result.Should().Be(30);                  f2.Result.Should().Be(15);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_be_unique_when_created_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      RunnableGraph.FromGraph(                          GraphDsl.Create(Sink.AsPublisher<int>(false)'                              Sink.AsPublisher<int>(false)' Keep.Both'                              (b' p1' p2) =>                              {                                  var broadcast = b.Add(new Broadcast<int>(2));                                  var source =                                      Source.From(Enumerable.Range(0' 6))                                          .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                                  b.From(source).To(broadcast.In);                                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Select(i => i * 2)).To(p1.Inlet);                                  b.From(broadcast.Out(1)).To(p2.Inlet);                                  return ClosedShape.Instance;                              })).Run(Materializer);                    var pub1 = t.Item1;                  var pub2 = t.Item2;                    var f1 = Source.FromPublisher(pub1).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                  var f2 = Source.FromPublisher(pub2).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                    f1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  f2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    f1.Result.Should().Be(30);                  f2.Result.Should().Be(15);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_be_unique_when_created_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      RunnableGraph.FromGraph(                          GraphDsl.Create(Sink.AsPublisher<int>(false)'                              Sink.AsPublisher<int>(false)' Keep.Both'                              (b' p1' p2) =>                              {                                  var broadcast = b.Add(new Broadcast<int>(2));                                  var source =                                      Source.From(Enumerable.Range(0' 6))                                          .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                                  b.From(source).To(broadcast.In);                                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Select(i => i * 2)).To(p1.Inlet);                                  b.From(broadcast.Out(1)).To(p2.Inlet);                                  return ClosedShape.Instance;                              })).Run(Materializer);                    var pub1 = t.Item1;                  var pub2 = t.Item2;                    var f1 = Source.FromPublisher(pub1).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                  var f2 = Source.FromPublisher(pub2).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                    f1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  f2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    f1.Result.Should().Be(30);                  f2.Result.Should().Be(15);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_be_unique_when_created_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      RunnableGraph.FromGraph(                          GraphDsl.Create(Sink.AsPublisher<int>(false)'                              Sink.AsPublisher<int>(false)' Keep.Both'                              (b' p1' p2) =>                              {                                  var broadcast = b.Add(new Broadcast<int>(2));                                  var source =                                      Source.From(Enumerable.Range(0' 6))                                          .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                                  b.From(source).To(broadcast.In);                                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Select(i => i * 2)).To(p1.Inlet);                                  b.From(broadcast.Out(1)).To(p2.Inlet);                                  return ClosedShape.Instance;                              })).Run(Materializer);                    var pub1 = t.Item1;                  var pub2 = t.Item2;                    var f1 = Source.FromPublisher(pub1).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                  var f2 = Source.FromPublisher(pub2).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                    f1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  f2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    f1.Result.Should().Be(30);                  f2.Result.Should().Be(15);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_be_unique_when_created_twice,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      RunnableGraph.FromGraph(                          GraphDsl.Create(Sink.AsPublisher<int>(false)'                              Sink.AsPublisher<int>(false)' Keep.Both'                              (b' p1' p2) =>                              {                                  var broadcast = b.Add(new Broadcast<int>(2));                                  var source =                                      Source.From(Enumerable.Range(0' 6))                                          .MapMaterializedValue<Tuple<IPublisher<int>' IPublisher<int>>>(_ => null);                                  b.From(source).To(broadcast.In);                                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Select(i => i * 2)).To(p1.Inlet);                                  b.From(broadcast.Out(1)).To(p2.Inlet);                                  return ClosedShape.Instance;                              })).Run(Materializer);                    var pub1 = t.Item1;                  var pub2 = t.Item2;                    var f1 = Source.FromPublisher(pub1).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                  var f2 = Source.FromPublisher(pub2).Select(x => x).RunAggregate(0' (sum' i) => sum + i' Materializer);                    f1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  f2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    f1.Result.Should().Be(30);                  f2.Result.Should().Be(15);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_work_with_SubscriberSource,The following statement contains a magic number: Source.From(Enumerable.Range(1' 100)).To(Sink.FromSubscriber(sub)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_work_with_SubscriberSource,The following statement contains a magic number: var task = Source.FromPublisher(pub).Limit(1000).RunWith(Sink.Seq<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_work_with_SubscriberSource,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_work_with_SubscriberSource,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_be_able_to_use_Publisher_in_materialized_value_transformation,The following statement contains a magic number: var f = Source.From(Enumerable.Range(1' 3))                  .RunWith(                      Sink.AsPublisher<int>(false)                          .MapMaterializedValue(                              p => Source.FromPublisher(p).RunAggregate(0' (sum' i) => sum + i' Materializer))'                      Materializer);
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_be_able_to_use_Publisher_in_materialized_value_transformation,The following statement contains a magic number: f.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,PublisherSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\PublisherSinkSpec.cs,A_PublisherSink_must_be_able_to_use_Publisher_in_materialized_value_transformation,The following statement contains a magic number: f.Result.Should().Be(6);
Magic Number,Akka.Streams.Tests.Dsl,QueueSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSinkSpec.cs,QueueSink_should_send_the_elements_as_result_of_future,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var expected = new List<Option<int>>                  {                      new Option<int>(1)'                      new Option<int>(2)'                      new Option<int>(3)'                      new Option<int>()                  };                  var queue = Source.From(expected.Where(o => o.HasValue).Select(o => o.Value))                      .RunWith(Sink.Queue<int>()' _materializer);                    expected.ForEach(v =>                  {                      queue.PullAsync().PipeTo(TestActor);                      ExpectMsg(v);                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSinkSpec.cs,QueueSink_should_send_the_elements_as_result_of_future,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var expected = new List<Option<int>>                  {                      new Option<int>(1)'                      new Option<int>(2)'                      new Option<int>(3)'                      new Option<int>()                  };                  var queue = Source.From(expected.Where(o => o.HasValue).Select(o => o.Value))                      .RunWith(Sink.Queue<int>()' _materializer);                    expected.ForEach(v =>                  {                      queue.PullAsync().PipeTo(TestActor);                      ExpectMsg(v);                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSinkSpec.cs,QueueSink_should_allow_to_have_only_one_future_waiting_for_result_in_each_point_in_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestPublisher.CreateManualProbe<int>(this);                  var queue = Source.FromPublisher(probe).RunWith(Sink.Queue<int>()' _materializer);                  var sub = probe.ExpectSubscription();                  var future = queue.PullAsync();                  var future2 = queue.PullAsync();                  future2.Invoking(t => t.Wait(TimeSpan.FromMilliseconds(300))).ShouldThrow<IllegalStateException>();                    sub.SendNext(1);                  future.PipeTo(TestActor);                  ExpectMsg(new Option<int>(1));                    sub.SendComplete();                  queue.PullAsync();              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSinkSpec.cs,QueueSink_should_fail_future_when_stream_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestPublisher.CreateManualProbe<int>(this);                  var queue = Source.FromPublisher(probe).RunWith(Sink.Queue<int>()' _materializer);                  var sub = probe.ExpectSubscription();                    sub.SendError(TestException());                  queue.Invoking(q => q.PullAsync().Wait(TimeSpan.FromMilliseconds(300)))                      .ShouldThrow<TestException>();              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSinkSpec.cs,QueueSink_should_fail_pull_future_when_stream_is_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestPublisher.CreateManualProbe<int>(this);                  var queue = Source.FromPublisher(probe).RunWith(Sink.Queue<int>()' _materializer);                  var sub = probe.ExpectSubscription();                    queue.PullAsync().PipeTo(TestActor);                  sub.SendNext(1);                  ExpectMsg(new Option<int>(1));                    sub.SendComplete();                  var future = queue.PullAsync();                  future.Wait(_pause).Should().BeTrue();                  future.Result.Should().Be(Option<int>.None);                    ((Task)queue.PullAsync()).ContinueWith(t =>                  {                      t.Exception.InnerException.Should().BeOfType<IllegalStateException>();                  }' TaskContinuationOptions.OnlyOnFaulted).Wait(TimeSpan.FromMilliseconds(300));              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSinkSpec.cs,QueueSink_should_keep_on_sending_even_after_the_buffer_has_been_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int bufferSize = 16;                  const int streamElementCount = bufferSize + 4;                  var sink = Sink.Queue<int>().WithAttributes(Attributes.CreateInputBuffer(bufferSize' bufferSize));                  var tuple = Source.From(Enumerable.Range(1' streamElementCount))                      .AlsoToMaterialized(                          Flow.Create<int>().Take(bufferSize).WatchTermination(Keep.Right).To(Sink.Ignore<int>())'                          Keep.Right)                      .ToMaterialized(sink' Keep.Both)                      .Run(_materializer);                  var probe = tuple.Item1;                  var queue = tuple.Item2;                  probe.Wait(TimeSpan.FromMilliseconds(300)).Should().BeTrue();                    for (var i = 1; i <= streamElementCount; i++)                  {                      queue.PullAsync().PipeTo(TestActor);                      ExpectMsg(new Option<int>(i));                  }                  queue.PullAsync().PipeTo(TestActor);                  ExpectMsg(Option<int>.None);              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSinkSpec.cs,QueueSink_should_keep_on_sending_even_after_the_buffer_has_been_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int bufferSize = 16;                  const int streamElementCount = bufferSize + 4;                  var sink = Sink.Queue<int>().WithAttributes(Attributes.CreateInputBuffer(bufferSize' bufferSize));                  var tuple = Source.From(Enumerable.Range(1' streamElementCount))                      .AlsoToMaterialized(                          Flow.Create<int>().Take(bufferSize).WatchTermination(Keep.Right).To(Sink.Ignore<int>())'                          Keep.Right)                      .ToMaterialized(sink' Keep.Both)                      .Run(_materializer);                  var probe = tuple.Item1;                  var queue = tuple.Item2;                  probe.Wait(TimeSpan.FromMilliseconds(300)).Should().BeTrue();                    for (var i = 1; i <= streamElementCount; i++)                  {                      queue.PullAsync().PipeTo(TestActor);                      ExpectMsg(new Option<int>(i));                  }                  queue.PullAsync().PipeTo(TestActor);                  ExpectMsg(Option<int>.None);              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSinkSpec.cs,QueueSink_should_keep_on_sending_even_after_the_buffer_has_been_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  const int bufferSize = 16;                  const int streamElementCount = bufferSize + 4;                  var sink = Sink.Queue<int>().WithAttributes(Attributes.CreateInputBuffer(bufferSize' bufferSize));                  var tuple = Source.From(Enumerable.Range(1' streamElementCount))                      .AlsoToMaterialized(                          Flow.Create<int>().Take(bufferSize).WatchTermination(Keep.Right).To(Sink.Ignore<int>())'                          Keep.Right)                      .ToMaterialized(sink' Keep.Both)                      .Run(_materializer);                  var probe = tuple.Item1;                  var queue = tuple.Item2;                  probe.Wait(TimeSpan.FromMilliseconds(300)).Should().BeTrue();                    for (var i = 1; i <= streamElementCount; i++)                  {                      queue.PullAsync().PipeTo(TestActor);                      ExpectMsg(new Option<int>(i));                  }                  queue.PullAsync().PipeTo(TestActor);                  ExpectMsg(Option<int>.None);              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSinkSpec.cs,QueueSink_should_work_with_one_element_buffer,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.Queue<int>().WithAttributes(Attributes.CreateInputBuffer(1' 1));                  var probe = TestPublisher.CreateManualProbe<int>(this);                  var queue = Source.FromPublisher(probe).RunWith(sink' _materializer);                  var sub = probe.ExpectSubscription();                    queue.PullAsync().PipeTo(TestActor);                  sub.SendNext(1); // should pull next element                  ExpectMsg(new Option<int>(1));                    queue.PullAsync().PipeTo(TestActor);                  ExpectNoMsg(); // element requested but buffer empty                  sub.SendNext(2);                  ExpectMsg(new Option<int>(2));                    sub.SendComplete();                  var future = queue.PullAsync();                  future.Wait(_pause).Should().BeTrue();                  future.Result.Should().Be(Option<int>.None);              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSinkSpec.cs,QueueSink_should_work_with_one_element_buffer,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sink = Sink.Queue<int>().WithAttributes(Attributes.CreateInputBuffer(1' 1));                  var probe = TestPublisher.CreateManualProbe<int>(this);                  var queue = Source.FromPublisher(probe).RunWith(sink' _materializer);                  var sub = probe.ExpectSubscription();                    queue.PullAsync().PipeTo(TestActor);                  sub.SendNext(1); // should pull next element                  ExpectMsg(new Option<int>(1));                    queue.PullAsync().PipeTo(TestActor);                  ExpectNoMsg(); // element requested but buffer empty                  sub.SendNext(2);                  ExpectMsg(new Option<int>(2));                    sub.SendComplete();                  var future = queue.PullAsync();                  future.Wait(_pause).Should().BeTrue();                  future.Result.Should().Be(Option<int>.None);              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_emit_received_message_to_the_stream,The following statement contains a magic number: var queue =                  Source.Queue<int>(10' OverflowStrategy.Fail).To(Sink.FromSubscriber(s)).Run(_materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_emit_received_message_to_the_stream,The following statement contains a magic number: sub.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_emit_received_message_to_the_stream,The following statement contains a magic number: AssertSuccess(queue.OfferAsync(2));
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_emit_received_message_to_the_stream,The following statement contains a magic number: s.ExpectNext(2);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_emit_received_message_to_the_stream,The following statement contains a magic number: AssertSuccess(queue.OfferAsync(3));
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_buffer_when_needed,The following statement contains a magic number: var queue =                  Source.Queue<int>(100' OverflowStrategy.DropHead)                      .To(Sink.FromSubscriber(s))                      .Run(_materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_buffer_when_needed,The following statement contains a magic number: i <= 20
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_buffer_when_needed,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_buffer_when_needed,The following statement contains a magic number: i <= 10
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_buffer_when_needed,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_buffer_when_needed,The following statement contains a magic number: i <= 20
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_buffer_when_needed,The following statement contains a magic number: i <= 399
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_buffer_when_needed,The following statement contains a magic number: sub.Request(100);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_buffer_when_needed,The following statement contains a magic number: i <= 399
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_fail_offer_future_if_user_does_not_wait_in_backpressure_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = this.CreateManualProbe<int>();                  var queue =                      Source.Queue<int>(5' OverflowStrategy.Backpressure)                          .To(Sink.FromSubscriber(s))                          .Run(_materializer);                  var sub = s.ExpectSubscription();                    for (var i = 1; i <= 5; i++)                      AssertSuccess(queue.OfferAsync(i));                    queue.OfferAsync(6).PipeTo(TestActor);                  ExpectNoMsg(_pause);                    var task = queue.OfferAsync(7);                  task.Invoking(t => t.Wait(_pause)).ShouldThrow<IllegalStateException>();                    sub.Request(1);                  s.ExpectNext(1);                  ExpectMsg<Enqueued>();                  sub.Cancel();              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_fail_offer_future_if_user_does_not_wait_in_backpressure_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = this.CreateManualProbe<int>();                  var queue =                      Source.Queue<int>(5' OverflowStrategy.Backpressure)                          .To(Sink.FromSubscriber(s))                          .Run(_materializer);                  var sub = s.ExpectSubscription();                    for (var i = 1; i <= 5; i++)                      AssertSuccess(queue.OfferAsync(i));                    queue.OfferAsync(6).PipeTo(TestActor);                  ExpectNoMsg(_pause);                    var task = queue.OfferAsync(7);                  task.Invoking(t => t.Wait(_pause)).ShouldThrow<IllegalStateException>();                    sub.Request(1);                  s.ExpectNext(1);                  ExpectMsg<Enqueued>();                  sub.Cancel();              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_fail_offer_future_if_user_does_not_wait_in_backpressure_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = this.CreateManualProbe<int>();                  var queue =                      Source.Queue<int>(5' OverflowStrategy.Backpressure)                          .To(Sink.FromSubscriber(s))                          .Run(_materializer);                  var sub = s.ExpectSubscription();                    for (var i = 1; i <= 5; i++)                      AssertSuccess(queue.OfferAsync(i));                    queue.OfferAsync(6).PipeTo(TestActor);                  ExpectNoMsg(_pause);                    var task = queue.OfferAsync(7);                  task.Invoking(t => t.Wait(_pause)).ShouldThrow<IllegalStateException>();                    sub.Request(1);                  s.ExpectNext(1);                  ExpectMsg<Enqueued>();                  sub.Cancel();              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_fail_offer_future_if_user_does_not_wait_in_backpressure_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = this.CreateManualProbe<int>();                  var queue =                      Source.Queue<int>(5' OverflowStrategy.Backpressure)                          .To(Sink.FromSubscriber(s))                          .Run(_materializer);                  var sub = s.ExpectSubscription();                    for (var i = 1; i <= 5; i++)                      AssertSuccess(queue.OfferAsync(i));                    queue.OfferAsync(6).PipeTo(TestActor);                  ExpectNoMsg(_pause);                    var task = queue.OfferAsync(7);                  task.Invoking(t => t.Wait(_pause)).ShouldThrow<IllegalStateException>();                    sub.Request(1);                  s.ExpectNext(1);                  ExpectMsg<Enqueued>();                  sub.Cancel();              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_complete_watching_future_with_failure_if_stream_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = this.CreateManualProbe<int>();                  var queue =                      Source.Queue<int>(1' OverflowStrategy.Fail)                          .To(Sink.FromSubscriber(s))                          .Run(_materializer);                  queue.WatchCompletionAsync().PipeTo(TestActor);                  queue.OfferAsync(1); // need to wait when first offer is done as initialization can be done in this moment                  queue.OfferAsync(2);                  ExpectMsg<Status.Failure>();              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_return_false_when_element_was_not_added_to_buffer,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = this.CreateManualProbe<int>();                  var queue =                      Source.Queue<int>(1' OverflowStrategy.DropNew)                          .To(Sink.FromSubscriber(s))                          .Run(_materializer);                  var sub = s.ExpectSubscription();                    queue.OfferAsync(1);                  queue.OfferAsync(2).PipeTo(TestActor);                  ExpectMsg<Dropped>();                    sub.Request(1);                  s.ExpectNext(1);                  sub.Cancel();              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_wait_when_buffer_is_full_and_backpressure_is_on,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = this.CreateManualProbe<int>();                  var queue =                      Source.Queue<int>(1' OverflowStrategy.Backpressure)                          .To(Sink.FromSubscriber(s))                          .Run(_materializer);                  var sub = s.ExpectSubscription();                  AssertSuccess(queue.OfferAsync(1));                    queue.OfferAsync(2).PipeTo(TestActor);                  ExpectNoMsg(_pause);                    sub.Request(1);                  s.ExpectNext(1);                    sub.Request(1);                  s.ExpectNext(2);                  ExpectMsg<Enqueued>();                    sub.Cancel();              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,QueueSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\QueueSourceSpec.cs,QueueSource_should_wait_when_buffer_is_full_and_backpressure_is_on,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var s = this.CreateManualProbe<int>();                  var queue =                      Source.Queue<int>(1' OverflowStrategy.Backpressure)                          .To(Sink.FromSubscriber(s))                          .Run(_materializer);                  var sub = s.ExpectSubscription();                  AssertSuccess(queue.OfferAsync(1));                    queue.OfferAsync(2).PipeTo(TestActor);                  ExpectNoMsg(_pause);                    sub.Request(1);                  s.ExpectNext(1);                    sub.Request(1);                  s.ExpectNext(2);                  ExpectMsg<Enqueued>();                    sub.Cancel();              }' _materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_the_elements_to_the_ActorRef,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw>();                  Source.From(Enumerable.Range(1' 3))                      .RunWith(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage)' Materializer);                  ExpectMsg("start");                  ExpectMsg(1);                  ExpectMsg(2);                  ExpectMsg(3);                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_the_elements_to_the_ActorRef,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw>();                  Source.From(Enumerable.Range(1' 3))                      .RunWith(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage)' Materializer);                  ExpectMsg("start");                  ExpectMsg(1);                  ExpectMsg(2);                  ExpectMsg(3);                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_the_elements_to_the_ActorRef,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw>();                  Source.From(Enumerable.Range(1' 3))                      .RunWith(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage)' Materializer);                  ExpectMsg("start");                  ExpectMsg(1);                  ExpectMsg(2);                  ExpectMsg(3);                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_the_elements_to_the_ActorRef2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw>();                  var probe =                      this.SourceProbe<int>()                          .To(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage))                          .Run(Materializer);                  probe.SendNext(1);                  ExpectMsg("start");                  ExpectMsg(1);                  probe.SendNext(2);                  ExpectMsg(2);                  probe.SendNext(3);                  ExpectMsg(3);                  probe.SendComplete();                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_the_elements_to_the_ActorRef2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw>();                  var probe =                      this.SourceProbe<int>()                          .To(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage))                          .Run(Materializer);                  probe.SendNext(1);                  ExpectMsg("start");                  ExpectMsg(1);                  probe.SendNext(2);                  ExpectMsg(2);                  probe.SendNext(3);                  ExpectMsg(3);                  probe.SendComplete();                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_the_elements_to_the_ActorRef2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw>();                  var probe =                      this.SourceProbe<int>()                          .To(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage))                          .Run(Materializer);                  probe.SendNext(1);                  ExpectMsg("start");                  ExpectMsg(1);                  probe.SendNext(2);                  ExpectMsg(2);                  probe.SendNext(3);                  ExpectMsg(3);                  probe.SendComplete();                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_the_elements_to_the_ActorRef2,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw>();                  var probe =                      this.SourceProbe<int>()                          .To(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage))                          .Run(Materializer);                  probe.SendNext(1);                  ExpectMsg("start");                  ExpectMsg(1);                  probe.SendNext(2);                  ExpectMsg(2);                  probe.SendNext(3);                  ExpectMsg(3);                  probe.SendComplete();                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_message_only_when_backpressure_received,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw2>();                  var publisher = this.SourceProbe<int>()                          .To(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage))                          .Run(Materializer);                  ExpectMsg(InitMessage);                  publisher.SendNext(1);                  ExpectNoMsg();                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(1);                    publisher.SendNext(2);                  publisher.SendNext(3);                  publisher.SendComplete();                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(2);                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(3);                    ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_message_only_when_backpressure_received,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw2>();                  var publisher = this.SourceProbe<int>()                          .To(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage))                          .Run(Materializer);                  ExpectMsg(InitMessage);                  publisher.SendNext(1);                  ExpectNoMsg();                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(1);                    publisher.SendNext(2);                  publisher.SendNext(3);                  publisher.SendComplete();                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(2);                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(3);                    ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_message_only_when_backpressure_received,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw2>();                  var publisher = this.SourceProbe<int>()                          .To(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage))                          .Run(Materializer);                  ExpectMsg(InitMessage);                  publisher.SendNext(1);                  ExpectNoMsg();                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(1);                    publisher.SendNext(2);                  publisher.SendNext(3);                  publisher.SendComplete();                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(2);                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(3);                    ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_send_message_only_when_backpressure_received,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw2>();                  var publisher = this.SourceProbe<int>()                          .To(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage))                          .Run(Materializer);                  ExpectMsg(InitMessage);                  publisher.SendNext(1);                  ExpectNoMsg();                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(1);                    publisher.SendNext(2);                  publisher.SendNext(3);                  publisher.SendComplete();                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(2);                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(3);                    ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_keep_on_sending_even_after_the_buffer_has_been_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bufferSize = 16;                  var streamElementCount = bufferSize + 4;                  var fw = CreateActor<Fw2>();                  var sink =                      Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage)                          .WithAttributes(Attributes.CreateInputBuffer(bufferSize' bufferSize));                  var probe =                      Source.From(Enumerable.Range(1' streamElementCount))                          .AlsoToMaterialized(                              Flow.Create<int>().Take(bufferSize).WatchTermination(Keep.Right).To(Sink.Ignore<int>())'                              Keep.Right)                          .To(sink)                          .Run(Materializer);                  probe.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  probe.IsCompleted.Should().BeTrue();                  ExpectMsg(InitMessage);                  fw.Tell(TriggerAckMessage.Instance);                  for (var i = 1; i <= streamElementCount; i++)                  {                      ExpectMsg(i);                      fw.Tell(TriggerAckMessage.Instance);                  }                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_keep_on_sending_even_after_the_buffer_has_been_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bufferSize = 16;                  var streamElementCount = bufferSize + 4;                  var fw = CreateActor<Fw2>();                  var sink =                      Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage)                          .WithAttributes(Attributes.CreateInputBuffer(bufferSize' bufferSize));                  var probe =                      Source.From(Enumerable.Range(1' streamElementCount))                          .AlsoToMaterialized(                              Flow.Create<int>().Take(bufferSize).WatchTermination(Keep.Right).To(Sink.Ignore<int>())'                              Keep.Right)                          .To(sink)                          .Run(Materializer);                  probe.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  probe.IsCompleted.Should().BeTrue();                  ExpectMsg(InitMessage);                  fw.Tell(TriggerAckMessage.Instance);                  for (var i = 1; i <= streamElementCount; i++)                  {                      ExpectMsg(i);                      fw.Tell(TriggerAckMessage.Instance);                  }                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_keep_on_sending_even_after_the_buffer_has_been_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bufferSize = 16;                  var streamElementCount = bufferSize + 4;                  var fw = CreateActor<Fw2>();                  var sink =                      Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage)                          .WithAttributes(Attributes.CreateInputBuffer(bufferSize' bufferSize));                  var probe =                      Source.From(Enumerable.Range(1' streamElementCount))                          .AlsoToMaterialized(                              Flow.Create<int>().Take(bufferSize).WatchTermination(Keep.Right).To(Sink.Ignore<int>())'                              Keep.Right)                          .To(sink)                          .Run(Materializer);                  probe.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  probe.IsCompleted.Should().BeTrue();                  ExpectMsg(InitMessage);                  fw.Tell(TriggerAckMessage.Instance);                  for (var i = 1; i <= streamElementCount; i++)                  {                      ExpectMsg(i);                      fw.Tell(TriggerAckMessage.Instance);                  }                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_work_with_one_element_buffer,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw2>();                  var publisher =                      RunnableGraph.FromGraph(                          this.SourceProbe<int>()                              .To(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage))                              .WithAttributes(Attributes.CreateInputBuffer(1' 1))).Run(Materializer);                    ExpectMsg(InitMessage);                  fw.Tell(TriggerAckMessage.Instance);                    publisher.SendNext(1);                  ExpectMsg(1);                    fw.Tell(TriggerAckMessage.Instance);                  ExpectNoMsg(); // Ack received but buffer empty                    publisher.SendNext(2); // Buffer this value                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(2);                    publisher.SendComplete();                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefBackpressureSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefBackpressureSinkSpec.cs,ActorBackpressureSink_should_work_with_one_element_buffer,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var fw = CreateActor<Fw2>();                  var publisher =                      RunnableGraph.FromGraph(                          this.SourceProbe<int>()                              .To(Sink.ActorRefWithAck<int>(fw' InitMessage' AckMessage' CompleteMessage))                              .WithAttributes(Attributes.CreateInputBuffer(1' 1))).Run(Materializer);                    ExpectMsg(InitMessage);                  fw.Tell(TriggerAckMessage.Instance);                    publisher.SendNext(1);                  ExpectMsg(1);                    fw.Tell(TriggerAckMessage.Instance);                  ExpectNoMsg(); // Ack received but buffer empty                    publisher.SendNext(2); // Buffer this value                  fw.Tell(TriggerAckMessage.Instance);                  ExpectMsg(2);                    publisher.SendComplete();                  ExpectMsg(CompleteMessage);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSinkSpec.cs,ActorRefSink_should_send_elements_to_the_ActorRef,The following statement contains a magic number: Source.From(new[] { 1' 2' 3 }).RunWith(Sink.ActorRef<int>(TestActor' onCompleteMessage: "done")' materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSinkSpec.cs,ActorRefSink_should_send_elements_to_the_ActorRef,The following statement contains a magic number: Source.From(new[] { 1' 2' 3 }).RunWith(Sink.ActorRef<int>(TestActor' onCompleteMessage: "done")' materializer);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSinkSpec.cs,ActorRefSink_should_send_elements_to_the_ActorRef,The following statement contains a magic number: ExpectMsg(2);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSinkSpec.cs,ActorRefSink_should_send_elements_to_the_ActorRef,The following statement contains a magic number: ExpectMsg(3);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSinkSpec.cs,ActorRefSink_should_cancel_a_stream_when_actor_terminates,The following statement contains a magic number: var publisher = this.SourceProbe<int>().To(Sink.ActorRef<int>(fw' onCompleteMessage: "done"))                      .Run(materializer)                      .SendNext(1)                      .SendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,ActorRefSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ActorRefSinkSpec.cs,ActorRefSink_should_cancel_a_stream_when_actor_terminates,The following statement contains a magic number: ExpectMsg(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_normally_in_backpressured_mode,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000))                  .Buffer(100' OverflowStrategy.Backpressure)                  .Grouped(1001)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_normally_in_backpressured_mode,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000))                  .Buffer(100' OverflowStrategy.Backpressure)                  .Grouped(1001)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_normally_in_backpressured_mode,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000))                  .Buffer(100' OverflowStrategy.Backpressure)                  .Grouped(1001)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_normally_in_backpressured_mode,The following statement contains a magic number: future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_normally_in_backpressured_mode,The following statement contains a magic number: future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1'1000));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_normally_in_backpressured_mode_with_buffer_size_one,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000))                  .Buffer(1' OverflowStrategy.Backpressure)                  .Grouped(1001)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_normally_in_backpressured_mode_with_buffer_size_one,The following statement contains a magic number: var future = Source.From(Enumerable.Range(1' 1000))                  .Buffer(1' OverflowStrategy.Backpressure)                  .Grouped(1001)                  .RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_normally_in_backpressured_mode_with_buffer_size_one,The following statement contains a magic number: future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_normally_in_backpressured_mode_with_buffer_size_one,The following statement contains a magic number: future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1000));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_a_chain_of_backpressured_buffers_of_different_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var future = Source.From(Enumerable.Range(1' 1000))                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(10' OverflowStrategy.Backpressure)                      .Buffer(256' OverflowStrategy.Backpressure)                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(5' OverflowStrategy.Backpressure)                      .Buffer(128' OverflowStrategy.Backpressure)                      .Grouped(1001)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1000));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_a_chain_of_backpressured_buffers_of_different_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var future = Source.From(Enumerable.Range(1' 1000))                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(10' OverflowStrategy.Backpressure)                      .Buffer(256' OverflowStrategy.Backpressure)                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(5' OverflowStrategy.Backpressure)                      .Buffer(128' OverflowStrategy.Backpressure)                      .Grouped(1001)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1000));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_a_chain_of_backpressured_buffers_of_different_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var future = Source.From(Enumerable.Range(1' 1000))                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(10' OverflowStrategy.Backpressure)                      .Buffer(256' OverflowStrategy.Backpressure)                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(5' OverflowStrategy.Backpressure)                      .Buffer(128' OverflowStrategy.Backpressure)                      .Grouped(1001)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1000));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_a_chain_of_backpressured_buffers_of_different_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var future = Source.From(Enumerable.Range(1' 1000))                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(10' OverflowStrategy.Backpressure)                      .Buffer(256' OverflowStrategy.Backpressure)                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(5' OverflowStrategy.Backpressure)                      .Buffer(128' OverflowStrategy.Backpressure)                      .Grouped(1001)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1000));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_a_chain_of_backpressured_buffers_of_different_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var future = Source.From(Enumerable.Range(1' 1000))                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(10' OverflowStrategy.Backpressure)                      .Buffer(256' OverflowStrategy.Backpressure)                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(5' OverflowStrategy.Backpressure)                      .Buffer(128' OverflowStrategy.Backpressure)                      .Grouped(1001)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1000));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_a_chain_of_backpressured_buffers_of_different_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var future = Source.From(Enumerable.Range(1' 1000))                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(10' OverflowStrategy.Backpressure)                      .Buffer(256' OverflowStrategy.Backpressure)                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(5' OverflowStrategy.Backpressure)                      .Buffer(128' OverflowStrategy.Backpressure)                      .Grouped(1001)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1000));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_a_chain_of_backpressured_buffers_of_different_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var future = Source.From(Enumerable.Range(1' 1000))                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(10' OverflowStrategy.Backpressure)                      .Buffer(256' OverflowStrategy.Backpressure)                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(5' OverflowStrategy.Backpressure)                      .Buffer(128' OverflowStrategy.Backpressure)                      .Grouped(1001)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1000));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_pass_elements_through_a_chain_of_backpressured_buffers_of_different_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var future = Source.From(Enumerable.Range(1' 1000))                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(10' OverflowStrategy.Backpressure)                      .Buffer(256' OverflowStrategy.Backpressure)                      .Buffer(1' OverflowStrategy.Backpressure)                      .Buffer(5' OverflowStrategy.Backpressure)                      .Buffer(128' OverflowStrategy.Backpressure)                      .Grouped(1001)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  future.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 1000));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_accept_elements_that_fit_in_the_buffer_while_downstream_is_silent,The following statement contains a magic number: Source.FromPublisher(publisher)                  .Buffer(100' OverflowStrategy.Backpressure)                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_accept_elements_that_fit_in_the_buffer_while_downstream_is_silent,The following statement contains a magic number: Enumerable.Range(1' 100).ForEach(i => publisher.SendNext(i));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_accept_elements_that_fit_in_the_buffer_while_downstream_is_silent,The following statement contains a magic number: Enumerable.Range(1' 100).ForEach(i =>              {                  sub.Request(1);                  subscriber.ExpectNext(i);              });
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_head_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: Source.FromPublisher(publisher)                  .Buffer(100' OverflowStrategy.DropHead)                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_head_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: Enumerable.Range(1' 200).ForEach(i => publisher.SendNext(i));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_head_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_head_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: i <= 200
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_tail_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: Source.FromPublisher(publisher)                  .Buffer(100' OverflowStrategy.DropTail)                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_tail_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: Enumerable.Range(1' 200).ForEach(i => publisher.SendNext(i));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_tail_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_tail_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: i <= 99
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_tail_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: subscriber.ExpectNext(200);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_all_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: Source.FromPublisher(publisher)                  .Buffer(100' OverflowStrategy.DropBuffer)                  .To(Sink.FromSubscriber(subscriber))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_all_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: Enumerable.Range(1' 150).ForEach(i => publisher.SendNext(i));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_all_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_all_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: i <= 150
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_new_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: var t =                  this.SourceProbe<int>()                      .Buffer(100' OverflowStrategy.DropNew)                      .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                      .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_new_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: Enumerable.Range(1' 150).ForEach(i => publisher.SendNext(i));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_new_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_drop_new_elements_if_buffer_is_full_and_configured_so,The following statement contains a magic number: i <= 100
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_fail_upstream_if_buffer_is_full_and_configured_so,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateProbe<int>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                    Source.FromPublisher(publisher)                      .Buffer(100' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var sub = subscriber.ExpectSubscription();                    // Fill up buffer                  Enumerable.Range(1' 100).ForEach(i => publisher.SendNext(i));                    // drain                  for (var i = 1; i <= 10; i++)                  {                      sub.Request(1);                      subscriber.ExpectNext(i);                  }                    // overflow the buffer                  for (var i = 101; i <= 111; i++)                      publisher.SendNext(i);                    publisher.ExpectCancellation();                    var actualError = subscriber.ExpectError();                  actualError.Should().BeOfType<BufferOverflowException>();                  actualError.Message.Should().Be("Buffer overflow (max capacity was 100)");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_fail_upstream_if_buffer_is_full_and_configured_so,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateProbe<int>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                    Source.FromPublisher(publisher)                      .Buffer(100' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var sub = subscriber.ExpectSubscription();                    // Fill up buffer                  Enumerable.Range(1' 100).ForEach(i => publisher.SendNext(i));                    // drain                  for (var i = 1; i <= 10; i++)                  {                      sub.Request(1);                      subscriber.ExpectNext(i);                  }                    // overflow the buffer                  for (var i = 101; i <= 111; i++)                      publisher.SendNext(i);                    publisher.ExpectCancellation();                    var actualError = subscriber.ExpectError();                  actualError.Should().BeOfType<BufferOverflowException>();                  actualError.Message.Should().Be("Buffer overflow (max capacity was 100)");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_fail_upstream_if_buffer_is_full_and_configured_so,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateProbe<int>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                    Source.FromPublisher(publisher)                      .Buffer(100' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var sub = subscriber.ExpectSubscription();                    // Fill up buffer                  Enumerable.Range(1' 100).ForEach(i => publisher.SendNext(i));                    // drain                  for (var i = 1; i <= 10; i++)                  {                      sub.Request(1);                      subscriber.ExpectNext(i);                  }                    // overflow the buffer                  for (var i = 101; i <= 111; i++)                      publisher.SendNext(i);                    publisher.ExpectCancellation();                    var actualError = subscriber.ExpectError();                  actualError.Should().BeOfType<BufferOverflowException>();                  actualError.Message.Should().Be("Buffer overflow (max capacity was 100)");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_fail_upstream_if_buffer_is_full_and_configured_so,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateProbe<int>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                    Source.FromPublisher(publisher)                      .Buffer(100' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var sub = subscriber.ExpectSubscription();                    // Fill up buffer                  Enumerable.Range(1' 100).ForEach(i => publisher.SendNext(i));                    // drain                  for (var i = 1; i <= 10; i++)                  {                      sub.Request(1);                      subscriber.ExpectNext(i);                  }                    // overflow the buffer                  for (var i = 101; i <= 111; i++)                      publisher.SendNext(i);                    publisher.ExpectCancellation();                    var actualError = subscriber.ExpectError();                  actualError.Should().BeOfType<BufferOverflowException>();                  actualError.Message.Should().Be("Buffer overflow (max capacity was 100)");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_fail_upstream_if_buffer_is_full_and_configured_so,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var publisher = TestPublisher.CreateProbe<int>(this);                  var subscriber = TestSubscriber.CreateManualProbe<int>(this);                    Source.FromPublisher(publisher)                      .Buffer(100' OverflowStrategy.Fail)                      .To(Sink.FromSubscriber(subscriber))                      .Run(Materializer);                    var sub = subscriber.ExpectSubscription();                    // Fill up buffer                  Enumerable.Range(1' 100).ForEach(i => publisher.SendNext(i));                    // drain                  for (var i = 1; i <= 10; i++)                  {                      sub.Request(1);                      subscriber.ExpectNext(i);                  }                    // overflow the buffer                  for (var i = 101; i <= 111; i++)                      publisher.SendNext(i);                    publisher.ExpectCancellation();                    var actualError = subscriber.ExpectError();                  actualError.Should().BeOfType<BufferOverflowException>();                  actualError.Message.Should().Be("Buffer overflow (max capacity was 100)");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_work_with_strategy_if_bugger_size_of_one,The following statement contains a magic number: Enumerable.Range(1' 200).ForEach(i => publisher.SendNext(i));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_work_with_strategy_if_bugger_size_of_one,The following statement contains a magic number: subscriber.ExpectNoMsg(TimeSpan.FromMilliseconds(500));
Magic Number,Akka.Streams.Tests.Dsl,FlowBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowBufferSpec.cs,Buffer_must_work_with_strategy_if_bugger_size_of_one,The following statement contains a magic number: subscriber.ExpectNext(200);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhithinSpec.cs,A_SkipWithin_must_deliver_elements_after_the_duration_but_not_before,The following statement contains a magic number: var input = Enumerable.Range(1' 200).GetEnumerator();
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhithinSpec.cs,A_SkipWithin_must_deliver_elements_after_the_duration_but_not_before,The following statement contains a magic number: cSub.Request(100);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhithinSpec.cs,A_SkipWithin_must_deliver_elements_after_the_duration_but_not_before,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(1500));
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhithinSpec.cs,A_SkipWithin_must_deliver_elements_after_the_duration_but_not_before,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhileSpec.cs,A_SkipWhile_must_skip_while_predicate_is_true,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4))                      .SkipWhile(x => x < 3)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(2)                      .ExpectNext(3' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhileSpec.cs,A_SkipWhile_must_skip_while_predicate_is_true,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4))                      .SkipWhile(x => x < 3)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(2)                      .ExpectNext(3' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhileSpec.cs,A_SkipWhile_must_skip_while_predicate_is_true,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4))                      .SkipWhile(x => x < 3)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(2)                      .ExpectNext(3' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhileSpec.cs,A_SkipWhile_must_skip_while_predicate_is_true,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4))                      .SkipWhile(x => x < 3)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(2)                      .ExpectNext(3' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhileSpec.cs,A_SkipWhile_must_skip_while_predicate_is_true,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4))                      .SkipWhile(x => x < 3)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(2)                      .ExpectNext(3' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhileSpec.cs,A_SkipWhile_must_complete_the_future_for_an_empty_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.Empty<int>()                      .SkipWhile(x => x < 2)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(1)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhileSpec.cs,A_SkipWhile_must_continue_if_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testException = new Exception("test");                  Source.From(Enumerable.Range(1' 4)).SkipWhile(x =>                  {                      if (x < 3)                          return true;                      throw testException;                  })                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(1)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipWhileSpec.cs,A_SkipWhile_must_continue_if_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testException = new Exception("test");                  Source.From(Enumerable.Range(1' 4)).SkipWhile(x =>                  {                      if (x < 3)                          return true;                      throw testException;                  })                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(1)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipSpec.cs,FlowSkipSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipSpec.cs,FlowSkipSpec,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipSpec.cs,A_Skip_must_skip,The following statement contains a magic number: var d = Math.Min(Math.Max(random.Next(-10' 60)' 0)' 50);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipSpec.cs,A_Skip_must_skip,The following statement contains a magic number: var d = Math.Min(Math.Max(random.Next(-10' 60)' 0)' 50);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipSpec.cs,A_Skip_must_skip,The following statement contains a magic number: var d = Math.Min(Math.Max(random.Next(-10' 60)' 0)' 50);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipSpec.cs,A_Skip_must_not_skip_anything_for_negative_n,The following statement contains a magic number: Source.From(new[] {1' 2' 3}).Skip(-1).To(Sink.FromSubscriber(probe)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipSpec.cs,A_Skip_must_not_skip_anything_for_negative_n,The following statement contains a magic number: Source.From(new[] {1' 2' 3}).Skip(-1).To(Sink.FromSubscriber(probe)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipSpec.cs,A_Skip_must_not_skip_anything_for_negative_n,The following statement contains a magic number: probe.ExpectSubscription().Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipSpec.cs,A_Skip_must_not_skip_anything_for_negative_n,The following statement contains a magic number: probe.ExpectNext(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowSkipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSkipSpec.cs,A_Skip_must_not_skip_anything_for_negative_n,The following statement contains a magic number: probe.ExpectNext(3);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,FlowSelectManySpec,The following statement contains a magic number: settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(initialSize: 2' maxSize: 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,FlowSelectManySpec,The following statement contains a magic number: settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(initialSize: 2' maxSize: 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var script = Script.Create(                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 0 }' new int[0])'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 3 }' new[] { 3' 3' 3 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 }));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var script = Script.Create(                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 0 }' new int[0])'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 3 }' new[] { 3' 3' 3 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 }));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var script = Script.Create(                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 0 }' new int[0])'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 3 }' new[] { 3' 3' 3 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 }));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var script = Script.Create(                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 0 }' new int[0])'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 3 }' new[] { 3' 3' 3 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 }));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var script = Script.Create(                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 0 }' new int[0])'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 3 }' new[] { 3' 3' 3 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 }));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var script = Script.Create(                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 0 }' new int[0])'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 3 }' new[] { 3' 3' 3 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 }));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var script = Script.Create(                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 0 }' new int[0])'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 3 }' new[] { 3' 3' 3 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 }));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var script = Script.Create(                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 0 }' new int[0])'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 3 }' new[] { 3' 3' 3 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 }));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var script = Script.Create(                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 0 }' new int[0])'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 3 }' new[] { 3' 3' 3 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 }));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var script = Script.Create(                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 0 }' new int[0])'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 3 }' new[] { 3' 3' 3 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 2 }' new[] { 2' 2 })'                  Tuple.Create<ICollection<int>' ICollection<int>>(new[] { 1 }' new[] { 1 }));
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat,The following statement contains a magic number: var random = ThreadLocalRandom.Current.Next(1' 10);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: var input = new[]              {                  new[] {1' 2' 3' 4' 5}'                  new[] {6' 7' 8' 9' 10}'                  new[] {11' 12' 13' 14' 15}'                  new[] {16' 17' 18' 19' 20}'              };
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: Source                  .From(input)                  .SelectMany(x => x)                  .Select(x =>                  {                      Thread.Sleep(10);                      return x;                  })                  .RunWith(Sink.FromSubscriber(subscriber)' materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: subscription.Request(100);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_map_and_concat_grouping_with_slow_downstream,The following statement contains a magic number: i <= 20
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_be_able_to_resume,The following statement contains a magic number: Source                  .From(Enumerable.Range(1' 5))                  .SelectMany(x =>                  {                      if (x == 3) throw exception;                      else return new[] {x};                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' materializer)                  .Request(4).ExpectNext(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_be_able_to_resume,The following statement contains a magic number: Source                  .From(Enumerable.Range(1' 5))                  .SelectMany(x =>                  {                      if (x == 3) throw exception;                      else return new[] {x};                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' materializer)                  .Request(4).ExpectNext(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_be_able_to_resume,The following statement contains a magic number: Source                  .From(Enumerable.Range(1' 5))                  .SelectMany(x =>                  {                      if (x == 3) throw exception;                      else return new[] {x};                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' materializer)                  .Request(4).ExpectNext(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_be_able_to_resume,The following statement contains a magic number: Source                  .From(Enumerable.Range(1' 5))                  .SelectMany(x =>                  {                      if (x == 3) throw exception;                      else return new[] {x};                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' materializer)                  .Request(4).ExpectNext(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_be_able_to_resume,The following statement contains a magic number: Source                  .From(Enumerable.Range(1' 5))                  .SelectMany(x =>                  {                      if (x == 3) throw exception;                      else return new[] {x};                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' materializer)                  .Request(4).ExpectNext(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectManySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectManySpec.cs,SelectMany_should_be_able_to_resume,The following statement contains a magic number: Source                  .From(Enumerable.Range(1' 5))                  .SelectMany(x =>                  {                      if (x == 3) throw exception;                      else return new[] {x};                  })                  .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                  .RunWith(this.SinkProbe<int>()' materializer)                  .Request(4).ExpectNext(1' 2' 4' 5)                  .ExpectComplete();
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectSpec.cs,FlowSelectSpec,The following statement contains a magic number: _settings = ActorMaterializerSettings.Create(Sys)                  .WithInputBuffer(initialSize: 2' maxSize: 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectSpec.cs,FlowSelectSpec,The following statement contains a magic number: _settings = ActorMaterializerSettings.Create(Sys)                  .WithInputBuffer(initialSize: 2' maxSize: 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectSpec.cs,Select_should_select,The following statement contains a magic number: var script = Script.Create(Enumerable.Range(1' ThreadLocalRandom.Current.Next(1' 10)).Select(_ =>              {                  var x = ThreadLocalRandom.Current.Next();                  return Tuple.Create<ICollection<int>' ICollection<string>>(new[] {x}' new[] {x.ToString()});              }).ToArray());
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectSpec.cs,Select_should_select,The following statement contains a magic number: var n = ThreadLocalRandom.Current.Next(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectSpec.cs,Select_should_not_blow_up_with_high_request_counts,The following statement contains a magic number: i <= 1000
Magic Number,Akka.Streams.Tests.Dsl,FlowSelectSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSelectSpec.cs,Select_should_not_blow_up_with_high_request_counts,The following statement contains a magic number: probe.ExpectNext(6);
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Run,The following statement contains a magic number: var task =                  Source.From(Enumerable.Range(1' 5).Concat(Enumerable.Range(1' 5).ToList()))                      .Via(flow)                      .Limit(1000)                      .RunWith(Sink.Seq<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Run,The following statement contains a magic number: var task =                  Source.From(Enumerable.Range(1' 5).Concat(Enumerable.Range(1' 5).ToList()))                      .Via(flow)                      .Limit(1000)                      .RunWith(Sink.Seq<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Run,The following statement contains a magic number: var task =                  Source.From(Enumerable.Range(1' 5).Concat(Enumerable.Range(1' 5).ToList()))                      .Via(flow)                      .Limit(1000)                      .RunWith(Sink.Seq<int>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Run,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_resume,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new [] {1'2'4'5'1'2'4'5});
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_resume,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new [] {1'2'4'5'1'2'4'5});
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_resume,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new [] {1'2'4'5'1'2'4'5});
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_resume,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new [] {1'2'4'5'1'2'4'5});
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_resume,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new [] {1'2'4'5'1'2'4'5});
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_resume,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new [] {1'2'4'5'1'2'4'5});
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_restart,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new[] { 1' 2' 4' 5' 1' 2' 4' 5 });
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_restart,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new[] { 1' 2' 4' 5' 1' 2' 4' 5 });
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_restart,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new[] { 1' 2' 4' 5' 1' 2' 4' 5 });
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_restart,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new[] { 1' 2' 4' 5' 1' 2' 4' 5 });
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_restart,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new[] { 1' 2' 4' 5' 1' 2' 4' 5 });
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_support_restart,The following statement contains a magic number: result.ShouldAllBeEquivalentTo(new[] { 1' 2' 4' 5' 1' 2' 4' 5 });
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_complete_stream_with_ArgumentNullException_when_null_is_emitted,The following statement contains a magic number: var task = Source.From(new[] {"a"' "b"}).Select(x => null as string).Limit(1000).RunWith(Sink.Seq<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_complete_stream_with_ArgumentNullException_when_null_is_emitted,The following statement contains a magic number: task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                  .ShouldThrow<ArgumentNullException>()                  .And.Message.Should().StartWith(ReactiveStreamsCompliance.ElementMustNotBeNullMsg);
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_resume_stream_when_null_is_emitted,The following statement contains a magic number: var task = Source.From(new[] {"a"' "b"' "c"})                  .Via(nullMap)                  .Limit(1000)                  .RunWith(Sink.Seq<string>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowSupervisionSpec.cs,Stream_supervision_must_resume_stream_when_null_is_emitted,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeSpec.cs,FlowTakeSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeSpec.cs,FlowTakeSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeSpec.cs,A_Take_must_take,The following statement contains a magic number: RandomTestRange(Sys).ForEach(_ =>              {                  var d = Math.Min(Math.Max(random.Next(-10' 60)' 0)' 50);                  RunScript(script(d)' Materializer.Settings' f => f.Take(d));              });
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeSpec.cs,A_Take_must_take,The following statement contains a magic number: RandomTestRange(Sys).ForEach(_ =>              {                  var d = Math.Min(Math.Max(random.Next(-10' 60)' 0)' 50);                  RunScript(script(d)' Materializer.Settings' f => f.Take(d));              });
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeSpec.cs,A_Take_must_take,The following statement contains a magic number: RandomTestRange(Sys).ForEach(_ =>              {                  var d = Math.Min(Math.Max(random.Next(-10' 60)' 0)' 50);                  RunScript(script(d)' Materializer.Settings' f => f.Take(d));              });
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeSpec.cs,A_Take_must_not_Take_aynthing_for_negative_n,The following statement contains a magic number: Source.From(Enumerable.Range(1' 3))                  .Take(-1)                  .To(Sink.FromSubscriber(probe))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeSpec.cs,A_Take_must_not_Take_aynthing_for_negative_n,The following statement contains a magic number: probe.ExpectSubscription().Request(10);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeSpec.cs,A_Take_complete_eagerly_when_zero_or_less_is_taken_independently_of_upstream_completion,The following statement contains a magic number: Source.Maybe<int>()                  .Take(0)                  .RunWith(Sink.Ignore<int>()' Materializer)                  .Wait(TimeSpan.FromSeconds(3))                  .Should()                  .BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeSpec.cs,A_Take_complete_eagerly_when_zero_or_less_is_taken_independently_of_upstream_completion,The following statement contains a magic number: Source.Maybe<int>()                  .Take(-1)                  .RunWith(Sink.Ignore<int>()' Materializer)                  .Wait(TimeSpan.FromSeconds(3))                  .Should()                  .BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWhileSpec.cs,A_TakeWhile_must_take_while_predicate_is_true,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4))                      .TakeWhile(i => i < 3)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1'2)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWhileSpec.cs,A_TakeWhile_must_take_while_predicate_is_true,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4))                      .TakeWhile(i => i < 3)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1'2)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWhileSpec.cs,A_TakeWhile_must_take_while_predicate_is_true,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4))                      .TakeWhile(i => i < 3)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1'2)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWhileSpec.cs,A_TakeWhile_must_take_while_predicate_is_true,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 4))                      .TakeWhile(i => i < 3)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(3)                      .ExpectNext(1'2)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWhileSpec.cs,A_TakeWhile_must_complete_the_future_for_an_empty_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.Empty<int>()                      .TakeWhile(i => i < 2)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(1)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWhileSpec.cs,A_TakeWhile_must_continue_if_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testException = new Exception("test");                    Source.From(Enumerable.Range(1' 4)).TakeWhile(a =>                  {                      if (a == 3)                          throw testException;                      return true;                  })                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(4)                      .ExpectNext(1' 2' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWhileSpec.cs,A_TakeWhile_must_continue_if_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testException = new Exception("test");                    Source.From(Enumerable.Range(1' 4)).TakeWhile(a =>                  {                      if (a == 3)                          throw testException;                      return true;                  })                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(4)                      .ExpectNext(1' 2' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWhileSpec.cs,A_TakeWhile_must_continue_if_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testException = new Exception("test");                    Source.From(Enumerable.Range(1' 4)).TakeWhile(a =>                  {                      if (a == 3)                          throw testException;                      return true;                  })                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(4)                      .ExpectNext(1' 2' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWhileSpec.cs,A_TakeWhile_must_continue_if_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testException = new Exception("test");                    Source.From(Enumerable.Range(1' 4)).TakeWhile(a =>                  {                      if (a == 3)                          throw testException;                      return true;                  })                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(4)                      .ExpectNext(1' 2' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWhileSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWhileSpec.cs,A_TakeWhile_must_continue_if_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testException = new Exception("test");                    Source.From(Enumerable.Range(1' 4)).TakeWhile(a =>                  {                      if (a == 3)                          throw testException;                      return true;                  })                      .WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(4)                      .ExpectNext(1' 2' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWithinSpec.cs,A_TakeWithin_must_deliver_elements_within_the_duration_but_not_afterwards,The following statement contains a magic number: cSub.Request(100);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWithinSpec.cs,A_TakeWithin_must_deliver_elements_within_the_duration_but_not_afterwards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(2)' c.ExpectComplete);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWithinSpec.cs,A_TakeWithin_must_deliver_elements_within_the_duration_but_not_afterwards,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWithinSpec.cs,A_TakeWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .TakeWithin(TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  cSub.Request(100);                  Enumerable.Range(1' 3).ForEach(n => c.ExpectNext(n));                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWithinSpec.cs,A_TakeWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .TakeWithin(TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  cSub.Request(100);                  Enumerable.Range(1' 3).ForEach(n => c.ExpectNext(n));                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWithinSpec.cs,A_TakeWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .TakeWithin(TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  cSub.Request(100);                  Enumerable.Range(1' 3).ForEach(n => c.ExpectNext(n));                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWithinSpec.cs,A_TakeWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .TakeWithin(TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  cSub.Request(100);                  Enumerable.Range(1' 3).ForEach(n => c.ExpectNext(n));                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowTakeWithinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowTakeWithinSpec.cs,A_TakeWithin_must_deliver_buffered_elements_OnComplete_before_the_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  Source.From(Enumerable.Range(1' 3))                      .TakeWithin(TimeSpan.FromSeconds(1))                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var cSub = c.ExpectSubscription();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  cSub.Request(100);                  Enumerable.Range(1' 3).ForEach(n => c.ExpectNext(n));                  c.ExpectComplete();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,GenerateByteString,The following statement contains a magic number: var bytes =                  Enumerable.Range(0' 255)                      .Select(_ => random.Next(0' 255))                      .Take(length)                      .Select(Convert.ToByte)                      .ToArray();
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,GenerateByteString,The following statement contains a magic number: var bytes =                  Enumerable.Range(0' 255)                      .Select(_ => random.Next(0' 255))                      .Take(length)                      .Select(Convert.ToByte)                      .ToArray();
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_emit_single_element_per_tick,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(1);                    upstream.SendNext(2);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_emit_single_element_per_tick,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(1);                    upstream.SendNext(2);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_emit_single_element_per_tick,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(1);                    upstream.SendNext(2);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_emit_single_element_per_tick,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(1);                    upstream.SendNext(2);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_emit_single_element_per_tick,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(1);                    upstream.SendNext(2);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_emit_single_element_per_tick,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(1);                    upstream.SendNext(2);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(150));                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_not_send_downstream_if_upstream_does_not_emit_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNext(1);                    downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  upstream.SendNext(2);                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_not_send_downstream_if_upstream_does_not_emit_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNext(1);                    downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  upstream.SendNext(2);                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_not_send_downstream_if_upstream_does_not_emit_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNext(1);                    downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  upstream.SendNext(2);                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_not_send_downstream_if_upstream_does_not_emit_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNext(1);                    downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  upstream.SendNext(2);                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_not_send_downstream_if_upstream_does_not_emit_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNext(1);                    downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  upstream.SendNext(2);                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_cancel_when_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var downstream = TestSubscriber.CreateProbe<int>(this);                  Source.From(Enumerable.Range(1' 10))                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                  downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_cancel_when_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var downstream = TestSubscriber.CreateProbe<int>(this);                  Source.From(Enumerable.Range(1' 10))                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                  downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(2' TimeSpan.FromMilliseconds(500)' 0' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(2' TimeSpan.FromMilliseconds(500)' 0' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(2' TimeSpan.FromMilliseconds(500)' 0' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(2' TimeSpan.FromMilliseconds(500)' 0' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(2' TimeSpan.FromMilliseconds(500)' 0' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(2' TimeSpan.FromMilliseconds(500)' 0' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(2' TimeSpan.FromMilliseconds(500)' 0' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(2' TimeSpan.FromMilliseconds(500)' 0' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(2' TimeSpan.FromMilliseconds(500)' 0' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(2' TimeSpan.FromMilliseconds(500)' 0' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(100)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(100)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(100)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(100)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(100)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(100)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(100)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(100)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(100)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(100)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_throw_exception_when_exceeding_throughtput_in_enforced_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 5))                          .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Enforcing)                          .RunWith(Sink.Ignore<int>()' Materializer);                  t.Invoking(task => task.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<OverflowException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_throw_exception_when_exceeding_throughtput_in_enforced_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 5))                          .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Enforcing)                          .RunWith(Sink.Ignore<int>()' Materializer);                  t.Invoking(task => task.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<OverflowException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_throw_exception_when_exceeding_throughtput_in_enforced_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 5))                          .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Enforcing)                          .RunWith(Sink.Ignore<int>()' Materializer);                  t.Invoking(task => task.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<OverflowException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_throw_exception_when_exceeding_throughtput_in_enforced_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 5))                          .Throttle(1' TimeSpan.FromMilliseconds(200)' 5' ThrottleMode.Enforcing)                          .RunWith(Sink.Ignore<int>()' Materializer);                  t.Invoking(task => task.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<OverflowException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_single_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' _ => 1' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' _ => 1' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' _ => 1' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' _ => 1' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' _ => 1' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' _ => 1' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_work_for_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 0' _ => 1' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_emit_elements_according_to_cost,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var list = Enumerable.Range(1' 4).Select(x => x*2).Select(GenerateByteString).ToList();                    Source.From(list)                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x.Count' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<ByteString>()' Materializer)                      .Request(4)                      .ExpectNext(list[0])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(300))                      .ExpectNext(list[1])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(500))                      .ExpectNext(list[2])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(700))                      .ExpectNext(list[3])                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_emit_elements_according_to_cost,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var list = Enumerable.Range(1' 4).Select(x => x*2).Select(GenerateByteString).ToList();                    Source.From(list)                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x.Count' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<ByteString>()' Materializer)                      .Request(4)                      .ExpectNext(list[0])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(300))                      .ExpectNext(list[1])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(500))                      .ExpectNext(list[2])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(700))                      .ExpectNext(list[3])                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_emit_elements_according_to_cost,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var list = Enumerable.Range(1' 4).Select(x => x*2).Select(GenerateByteString).ToList();                    Source.From(list)                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x.Count' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<ByteString>()' Materializer)                      .Request(4)                      .ExpectNext(list[0])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(300))                      .ExpectNext(list[1])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(500))                      .ExpectNext(list[2])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(700))                      .ExpectNext(list[3])                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_emit_elements_according_to_cost,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var list = Enumerable.Range(1' 4).Select(x => x*2).Select(GenerateByteString).ToList();                    Source.From(list)                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x.Count' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<ByteString>()' Materializer)                      .Request(4)                      .ExpectNext(list[0])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(300))                      .ExpectNext(list[1])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(500))                      .ExpectNext(list[2])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(700))                      .ExpectNext(list[3])                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_emit_elements_according_to_cost,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var list = Enumerable.Range(1' 4).Select(x => x*2).Select(GenerateByteString).ToList();                    Source.From(list)                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x.Count' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<ByteString>()' Materializer)                      .Request(4)                      .ExpectNext(list[0])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(300))                      .ExpectNext(list[1])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(500))                      .ExpectNext(list[2])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(700))                      .ExpectNext(list[3])                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_emit_elements_according_to_cost,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var list = Enumerable.Range(1' 4).Select(x => x*2).Select(GenerateByteString).ToList();                    Source.From(list)                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x.Count' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<ByteString>()' Materializer)                      .Request(4)                      .ExpectNext(list[0])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(300))                      .ExpectNext(list[1])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(500))                      .ExpectNext(list[2])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(700))                      .ExpectNext(list[3])                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_emit_elements_according_to_cost,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var list = Enumerable.Range(1' 4).Select(x => x*2).Select(GenerateByteString).ToList();                    Source.From(list)                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x.Count' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<ByteString>()' Materializer)                      .Request(4)                      .ExpectNext(list[0])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(300))                      .ExpectNext(list[1])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(500))                      .ExpectNext(list[2])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(700))                      .ExpectNext(list[3])                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_emit_elements_according_to_cost,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var list = Enumerable.Range(1' 4).Select(x => x*2).Select(GenerateByteString).ToList();                    Source.From(list)                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x.Count' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<ByteString>()' Materializer)                      .Request(4)                      .ExpectNext(list[0])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(300))                      .ExpectNext(list[1])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(500))                      .ExpectNext(list[2])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(700))                      .ExpectNext(list[3])                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_emit_elements_according_to_cost,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var list = Enumerable.Range(1' 4).Select(x => x*2).Select(GenerateByteString).ToList();                    Source.From(list)                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x.Count' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<ByteString>()' Materializer)                      .Request(4)                      .ExpectNext(list[0])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(300))                      .ExpectNext(list[1])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(500))                      .ExpectNext(list[2])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(700))                      .ExpectNext(list[3])                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_emit_elements_according_to_cost,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var list = Enumerable.Range(1' 4).Select(x => x*2).Select(GenerateByteString).ToList();                    Source.From(list)                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x.Count' ThrottleMode.Shaping)                      .RunWith(this.SinkProbe<ByteString>()' Materializer)                      .Request(4)                      .ExpectNext(list[0])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(300))                      .ExpectNext(list[1])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(500))                      .ExpectNext(list[2])                      .ExpectNoMsg(TimeSpan.FromMilliseconds(700))                      .ExpectNext(list[3])                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_not_send_downstream_if_upstream_does_not_emit_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' x => x' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNext(1);                    downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  upstream.SendNext(2);                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_not_send_downstream_if_upstream_does_not_emit_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' x => x' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNext(1);                    downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  upstream.SendNext(2);                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_not_send_downstream_if_upstream_does_not_emit_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' x => x' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNext(1);                    downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  upstream.SendNext(2);                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_not_send_downstream_if_upstream_does_not_emit_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' x => x' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNext(1);                    downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  upstream.SendNext(2);                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_not_send_downstream_if_upstream_does_not_emit_element,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(1' TimeSpan.FromMilliseconds(300)' 0' x => x' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(2);                  upstream.SendNext(1);                  downstream.ExpectNext(1);                    downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                  upstream.SendNext(2);                  downstream.ExpectNext(2);                    upstream.SendComplete();                  downstream.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_cancel_when_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var downstream = TestSubscriber.CreateProbe<int>(this);                  Source.From(Enumerable.Range(1' 10))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                  downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_cancel_when_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var downstream = TestSubscriber.CreateProbe<int>(this);                  Source.From(Enumerable.Range(1' 10))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                  downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_cancel_when_downstream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var downstream = TestSubscriber.CreateProbe<int>(this);                  Source.From(Enumerable.Range(1' 10))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                  downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_send_elements_downstream_as_soon_as_time_comes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe =                      Source.From(Enumerable.Range(1' 10))                          .Throttle(4' TimeSpan.FromMilliseconds(500)' 0' _ => 2' ThrottleMode.Shaping)                          .RunWith(this.SinkProbe<int>()' Materializer);                  probe.Request(5);                  var result = probe.ReceiveWhile(TimeSpan.FromMilliseconds(600)' filter: x => x);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(3)                      .ExpectNoMsg(TimeSpan.FromMilliseconds(100))                      .ExpectNext(4);                  probe.Cancel();                  // assertion may take longer then the throttle and therefore the next assertion fails                  result.ShouldAllBeEquivalentTo(new[] { new OnNext(1)' new OnNext(2) });              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' x => 1' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' x => 1' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' x => 1' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' x => 1' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' x => 1' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' x => 1' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' x => 1' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' x => 1' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' x => 1' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_according_to_its_maximum_if_enough_time_passed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' x => 1' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.Request(5);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(1200));                  var expected = new List<OnNext>();                  for (var i = 2; i < 7; i++)                  {                      upstream.SendNext(i);                      expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(300)' filter: x => x' msgs: 5)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_burst_some_elements_if_have_enough_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstream = TestPublisher.CreateProbe<int>(this);                  var downstream = TestSubscriber.CreateProbe<int>(this);                    Source.FromPublisher(upstream)                      .Throttle(2' TimeSpan.FromMilliseconds(400)' 5' e => e < 4 ? 1 : 20' ThrottleMode.Shaping)                      .RunWith(Sink.FromSubscriber(downstream)' Materializer);                    downstream.Request(1);                  upstream.SendNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(100));                  downstream.ExpectNext(1);                  downstream.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); //wait to receive 2 in burst afterwards                  downstream.Request(5);                  var expected = new List<OnNext>();                  for (var i = 2; i < 5; i++)                  {                      upstream.SendNext(i);                      if (i < 4)                          expected.Add(new OnNext(i));                  }                  downstream.ReceiveWhile(TimeSpan.FromMilliseconds(200)' filter: x => x' msgs: 2)                      .ShouldAllBeEquivalentTo(expected);                    downstream.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_throw_exception_when_exceeding_throughtput_in_enforced_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 5))                          .Throttle(2' TimeSpan.FromMilliseconds(200)' 5' x => x' ThrottleMode.Enforcing)                          .RunWith(Sink.Ignore<int>()' Materializer);                  t.Invoking(task => task.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<OverflowException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_throw_exception_when_exceeding_throughtput_in_enforced_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 5))                          .Throttle(2' TimeSpan.FromMilliseconds(200)' 5' x => x' ThrottleMode.Enforcing)                          .RunWith(Sink.Ignore<int>()' Materializer);                  t.Invoking(task => task.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<OverflowException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_throw_exception_when_exceeding_throughtput_in_enforced_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 5))                          .Throttle(2' TimeSpan.FromMilliseconds(200)' 5' x => x' ThrottleMode.Enforcing)                          .RunWith(Sink.Ignore<int>()' Materializer);                  t.Invoking(task => task.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<OverflowException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_throw_exception_when_exceeding_throughtput_in_enforced_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 5))                          .Throttle(2' TimeSpan.FromMilliseconds(200)' 5' x => x' ThrottleMode.Enforcing)                          .RunWith(Sink.Ignore<int>()' Materializer);                  t.Invoking(task => task.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<OverflowException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_throw_exception_when_exceeding_throughtput_in_enforced_mode,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 5))                          .Throttle(2' TimeSpan.FromMilliseconds(200)' 5' x => x' ThrottleMode.Enforcing)                          .RunWith(Sink.Ignore<int>()' Materializer);                  t.Invoking(task => task.Wait(TimeSpan.FromSeconds(2))).ShouldThrow<OverflowException>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_properly_combine_shape_and_throttle_modes,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' x => x' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_handle_rate_calculation_function_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var ex = new SystemException();                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' _ => { throw ex; }' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_handle_rate_calculation_function_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var ex = new SystemException();                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' _ => { throw ex; }' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_handle_rate_calculation_function_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var ex = new SystemException();                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' _ => { throw ex; }' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_handle_rate_calculation_function_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var ex = new SystemException();                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' _ => { throw ex; }' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_handle_rate_calculation_function_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var ex = new SystemException();                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' _ => { throw ex; }' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowThrottleSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowThrottleSpec.cs,Throttle_for_various_cost_elements_must_handle_rate_calculation_function_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var ex = new SystemException();                  Source.From(Enumerable.Range(1' 5))                      .Throttle(2' TimeSpan.FromMilliseconds(200)' 0' _ => { throw ex; }' ThrottleMode.Shaping)                      .Throttle(1' TimeSpan.FromMilliseconds(100)' 5' ThrottleMode.Enforcing)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectError().Should().Be(ex);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(4).ExpectNext(1' 2' 3' 4);                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  p.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(4).ExpectNext(1' 2' 3' 4);                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  p.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(4).ExpectNext(1' 2' 3' 4);                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  p.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(4).ExpectNext(1' 2' 3' 4);                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  p.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(4).ExpectNext(1' 2' 3' 4);                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  p.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(4).ExpectNext(1' 2' 3' 4);                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  p.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_cancelled_from_downstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(3).ExpectNext(1' 2' 3);                  p.Cancel();                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_cancelled_from_downstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(3).ExpectNext(1' 2' 3);                  p.Cancel();                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_cancelled_from_downstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(3).ExpectNext(1' 2' 3);                  p.Cancel();                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_cancelled_from_downstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(3).ExpectNext(1' 2' 3);                  p.Cancel();                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_when_stream_is_cancelled_from_downstream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.From(Enumerable.Range(1' 4))                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                    p.Request(3).ExpectNext(1' 2' 3);                  p.Cancel();                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowWatchTerminationSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowWatchTerminationSpec.cs,A_WatchTermination_must_complete_the_future_for_an_empty_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t =                      Source.Empty<int>()                          .WatchTermination(Keep.Right)                          .ToMaterialized(this.SinkProbe<int>()' Keep.Both)                          .Run(Materializer);                  var future = t.Item1;                  var p = t.Item2;                  p.Request(1);                  future.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                  Source.From(Enumerable.Range(1' 4))                      .Zip(Source.From(new[] {"A"' "B"' "C"' "D"' "E"' "F"}))                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                  var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(Tuple.Create(1' "A"));                  probe.ExpectNext(Tuple.Create(2' "B"));                    subscription.Request(1);                  probe.ExpectNext(Tuple.Create(3' "C"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(4' "D"));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                  Source.From(Enumerable.Range(1' 4))                      .Zip(Source.From(new[] {"A"' "B"' "C"' "D"' "E"' "F"}))                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                  var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(Tuple.Create(1' "A"));                  probe.ExpectNext(Tuple.Create(2' "B"));                    subscription.Request(1);                  probe.ExpectNext(Tuple.Create(3' "C"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(4' "D"));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                  Source.From(Enumerable.Range(1' 4))                      .Zip(Source.From(new[] {"A"' "B"' "C"' "D"' "E"' "F"}))                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                  var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(Tuple.Create(1' "A"));                  probe.ExpectNext(Tuple.Create(2' "B"));                    subscription.Request(1);                  probe.ExpectNext(Tuple.Create(3' "C"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(4' "D"));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                  Source.From(Enumerable.Range(1' 4))                      .Zip(Source.From(new[] {"A"' "B"' "C"' "D"' "E"' "F"}))                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                  var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(Tuple.Create(1' "A"));                  probe.ExpectNext(Tuple.Create(2' "B"));                    subscription.Request(1);                  probe.ExpectNext(Tuple.Create(3' "C"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(4' "D"));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = TestSubscriber.CreateManualProbe<Tuple<int' string>>(this);                  Source.From(Enumerable.Range(1' 4))                      .Zip(Source.From(new[] {"A"' "B"' "C"' "D"' "E"' "F"}))                      .RunWith(Sink.FromSubscriber(probe)' Materializer);                  var subscription = probe.ExpectSubscription();                    subscription.Request(2);                  probe.ExpectNext(Tuple.Create(1' "A"));                  probe.ExpectNext(Tuple.Create(2' "B"));                    subscription.Request(1);                  probe.ExpectNext(Tuple.Create(3' "C"));                  subscription.Request(1);                  probe.ExpectNext(Tuple.Create(4' "D"));                    probe.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_with_one_delayed_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(SoonToFailPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,FlowZipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipSpec.cs,A_Zip_for_Flow_must_work_with_one_delayed_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: Source.From(Enumerable.Range(1' 4))                  .ZipWith(Source.From(new[] {10' 20' 30' 40}.AsEnumerable())' (i' i1) => i + i1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: Source.From(Enumerable.Range(1' 4))                  .ZipWith(Source.From(new[] {10' 20' 30' 40}.AsEnumerable())' (i' i1) => i + i1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: Source.From(Enumerable.Range(1' 4))                  .ZipWith(Source.From(new[] {10' 20' 30' 40}.AsEnumerable())' (i' i1) => i + i1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: Source.From(Enumerable.Range(1' 4))                  .ZipWith(Source.From(new[] {10' 20' 30' 40}.AsEnumerable())' (i' i1) => i + i1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: Source.From(Enumerable.Range(1' 4))                  .ZipWith(Source.From(new[] {10' 20' 30' 40}.AsEnumerable())' (i' i1) => i + i1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: subscription.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: probe.ExpectNext(11);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: probe.ExpectNext(22);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: probe.ExpectNext(33);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_happy_case,The following statement contains a magic number: probe.ExpectNext(44);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_sad_case,The following statement contains a magic number: Source.From(Enumerable.Range(1' 4))                  .ZipWith(Source.From(Enumerable.Range(-2' 4))' (i' i1) => i/i1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_sad_case,The following statement contains a magic number: Source.From(Enumerable.Range(1' 4))                  .ZipWith(Source.From(Enumerable.Range(-2' 4))' (i' i1) => i/i1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_sad_case,The following statement contains a magic number: Source.From(Enumerable.Range(1' 4))                  .ZipWith(Source.From(Enumerable.Range(-2' 4))' (i' i1) => i/i1)                  .RunWith(Sink.FromSubscriber(probe)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_sad_case,The following statement contains a magic number: subscription.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_sad_case,The following statement contains a magic number: probe.ExpectNext(1/-2);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_sad_case,The following statement contains a magic number: probe.ExpectNext(2/-1);
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_sad_case,The following statement contains a magic number: EventFilter.Exception<DivideByZeroException>().ExpectOne(() => subscription.Request(2));
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_ZipWith_for_Flow_must_work_in_the_sad_case,The following statement contains a magic number: probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_Zip_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(CompletedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_Zip_for_Flow_must_work_with_one_immediately_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' CompletedPublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_Zip_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(SoonToCompletePublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_Zip_for_Flow_must_work_with_one_delayed_completed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToCompletePublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_Zip_for_Flow_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(FailedPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_Zip_for_Flow_must_work_with_one_immediately_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' FailedPublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_Zip_for_Flow_must_work_with_one_delayed_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber1 = Setup(SoonToFailPublisher<int>()' NonEmptyPublisher(Enumerable.Range(1' 4)));
Magic Number,Akka.Streams.Tests.Dsl,FlowZipWithSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\FlowZipWithSpec.cs,A_Zip_for_Flow_must_work_with_one_delayed_failed_and_one_nonempty_publisher,The following statement contains a magic number: var subscriber2 = Setup(NonEmptyPublisher(Enumerable.Range(1' 4))' SoonToFailPublisher<int>());
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,HeadSinkSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,HeadSinkSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,A_FLow_with_a_Sink_Head_must_yield_the_first_value,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = TestPublisher.CreateManualProbe<int>(this);                  var task = Source.FromPublisher(p).Select(x=>x).RunWith(Sink.First<int>()' Materializer);                  var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  proc.SendNext(42);                  task.Wait(100);                  task.Result.Should().Be(42);                  proc.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,A_FLow_with_a_Sink_Head_must_yield_the_first_value,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = TestPublisher.CreateManualProbe<int>(this);                  var task = Source.FromPublisher(p).Select(x=>x).RunWith(Sink.First<int>()' Materializer);                  var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  proc.SendNext(42);                  task.Wait(100);                  task.Result.Should().Be(42);                  proc.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,A_FLow_with_a_Sink_Head_must_yield_the_first_value,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = TestPublisher.CreateManualProbe<int>(this);                  var task = Source.FromPublisher(p).Select(x=>x).RunWith(Sink.First<int>()' Materializer);                  var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  proc.SendNext(42);                  task.Wait(100);                  task.Result.Should().Be(42);                  proc.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,A_FLow_with_a_Sink_Head_must_yield_the_first_value_when_actively_constructing,The following statement contains a magic number: proc.SendNext(42);
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,A_FLow_with_a_Sink_Head_must_yield_the_first_value_when_actively_constructing,The following statement contains a magic number: future.Wait(100);
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,A_FLow_with_a_Sink_Head_must_yield_the_first_value_when_actively_constructing,The following statement contains a magic number: future.Result.Should().Be(42);
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,A_FLow_with_a_Sink_HeadOption_must_yield_the_first_value,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = TestPublisher.CreateManualProbe<int>(this);                  var task = Source.FromPublisher(p).Select(x => x).RunWith(Sink.FirstOrDefault<int>()' Materializer);                  var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  proc.SendNext(42);                  task.Wait(100);                  task.Result.Should().Be(42);                  proc.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,A_FLow_with_a_Sink_HeadOption_must_yield_the_first_value,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = TestPublisher.CreateManualProbe<int>(this);                  var task = Source.FromPublisher(p).Select(x => x).RunWith(Sink.FirstOrDefault<int>()' Materializer);                  var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  proc.SendNext(42);                  task.Wait(100);                  task.Result.Should().Be(42);                  proc.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,HeadSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\HeadSinkSpec.cs,A_FLow_with_a_Sink_HeadOption_must_yield_the_first_value,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = TestPublisher.CreateManualProbe<int>(this);                  var task = Source.FromPublisher(p).Select(x => x).RunWith(Sink.FirstOrDefault<int>()' Materializer);                  var proc = p.ExpectSubscription();                  proc.ExpectRequest();                  proc.SendNext(42);                  task.Wait(100);                  task.Result.Should().Be(42);                  proc.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,LastSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\LastSinkSpec.cs,LastSinkSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,LastSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\LastSinkSpec.cs,LastSinkSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,LastSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\LastSinkSpec.cs,A_Flow_with_Sink_Last_must_yield_the_last_value,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1'42)).Select(x=>x).RunWith(Sink.Last<int>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  task.Result.Should().Be(42);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,LastSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\LastSinkSpec.cs,A_Flow_with_Sink_Last_must_yield_the_last_value,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1'42)).Select(x=>x).RunWith(Sink.Last<int>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  task.Result.Should().Be(42);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,LastSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\LastSinkSpec.cs,A_Flow_with_Sink_LastOption_must_yield_the_last_value,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 42)).Select(x => x).RunWith(Sink.LastOrDefault<int>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  task.Result.Should().Be(42);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,LastSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\LastSinkSpec.cs,A_Flow_with_Sink_LastOption_must_yield_the_last_value,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 42)).Select(x => x).RunWith(Sink.LastOrDefault<int>()' Materializer);                  task.Wait(TimeSpan.FromSeconds(1)).Should().BeTrue();                  task.Result.Should().Be(42);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_Inlets,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_Inlets,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] {1' 2' 3});
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_SinkShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_SinkShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_Sink,The following statement contains a magic number: RunnableGraph.FromGraph(GraphDsl.Create(b =>              {                  b.To(Streams.Dsl.Sink.FromSubscriber(sub))                      .From(Streams.Dsl.Source.From(Enumerable.Range(1' 3)));                                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_Sink,The following statement contains a magic number: sub.ExpectSubscription().Request(10);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_Sink,The following statement contains a magic number: sub.ExpectNext(1' 2' 3);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_Sink,The following statement contains a magic number: sub.ExpectNext(1' 2' 3);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_FlowShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_FlowShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_UniformFanInShape,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink' (b' s) =>              {                  var f = b.Add(new Merge<int' int>(2));                  b.To(f).From(Source);                  b.To(f).From(Streams.Dsl.Source.Empty<int>().MapMaterializedValue(_ => MaterializedValue));                  b.From(f).To(s);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_UniformFanInShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_UniformFanInShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_UniformFanOutShape,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink' (b' s) =>              {                  var f = b.Add(new Broadcast<int>(2));                  b.To(f).From(Source);                  b.From(f).To(Streams.Dsl.Sink.Ignore<int>().MapMaterializedValue(_ => MaterializedValue));                  b.From(f).To(s);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_UniformFanOutShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_from_UniformFanOutShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_Outlets,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_Outlets,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_SourceShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_SourceShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_Source,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_Source,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_FlowShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_FlowShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_UniformFanInShape,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink' (b' s) =>              {                  var f = b.Add(new Merge<int' int>(2));                  b.To(s).From(f);                  b.From(Streams.Dsl.Source.Empty<int>().MapMaterializedValue(_ => MaterializedValue)).To(f);                  b.From(Source).To(f);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_UniformFanInShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_UniformFanInShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_fail_towards_already_full_UniformFanInShape,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink' (b' s) =>              {                  var f = b.Add(new Merge<int' int>(2));                  var src = b.Add(Source);                  b.From(Streams.Dsl.Source.Empty<int>().MapMaterializedValue(_ => MaterializedValue)).To(f);                  b.From(src).To(f);                    b.Invoking(builder => builder.To(s).Via(f).From(src))                      .ShouldThrow<ArgumentException>()                      .WithMessage("No more inlets on junction");                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_fail_towards_already_full_UniformFanInShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_fail_towards_already_full_UniformFanInShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_UniformFanOutShape,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink' (b' s) =>              {                  var f = b.Add(new Broadcast<int>(2));                  b.To(s).From(f);                  b.To(Streams.Dsl.Sink.Ignore<int>().MapMaterializedValue(_ => MaterializedValue)).From(f);                  b.From(Source).To(f);                  return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_UniformFanOutShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_towards_UniformFanOutShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_fail_towards_already_full_UniformFanOutShape,The following statement contains a magic number: var task = RunnableGraph.FromGraph(GraphDsl.Create(Sink' (b' s) =>              {                  var f = b.Add(new Broadcast<int>(2));                  var sink2 = b.Add(Streams.Dsl.Sink.Ignore<int>().MapMaterializedValue(_ => MaterializedValue));                  var src = b.Add(Source);                  b.From(src).To(f);                  b.To(sink2).From(f);                    b.Invoking(builder => builder.To(s).Via(f).From(src))                      .ShouldThrow<ArgumentException>()                      .WithMessage("The output port [StatefulSelectMany.out] is already connected");                    return ClosedShape.Instance;              })).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_fail_towards_already_full_UniformFanOutShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_fail_towards_already_full_UniformFanOutShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_across_a_Flow,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_across_a_Flow,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_across_a_FlowShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,ReverseArrowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\ReverseArrowSpec.cs,Reverse_Arrows_in_the_GraphDsl_must_work_across_a_FlowShape,The following statement contains a magic number: task.Result.ShouldAllBeEquivalentTo(new[] { 1' 2' 3 });
Magic Number,Akka.Streams.Tests.Dsl,SeqSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SeqSinkSpec.cs,SeqSinkSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,SeqSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SeqSinkSpec.cs,SeqSinkSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,SeqSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SeqSinkSpec.cs,Sink_ToSeq_must_return_a_SeqT_from_a_Source,The following statement contains a magic number: var input = Enumerable.Range(1' 6);
Magic Number,Akka.Streams.Tests.Dsl,SeqSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SeqSinkSpec.cs,Sink_ToSeq_must_return_a_SeqT_from_a_Source,The following statement contains a magic number: future.Wait(300).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,SeqSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SeqSinkSpec.cs,Sink_ToSeq_must_return_an_empty_SeqT_from_an_empty_Source,The following statement contains a magic number: future.Wait(300).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_produce_elements_in_the_order_they_are_ready,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 4)                      .Select(i => Tuple.Create(i' new TestLatch(1)))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 4)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      latch[n].Ready(TimeSpan.FromSeconds(5));                      probe.Ref.Tell(n);                  })' Materializer);                  latch[2].CountDown();                  probe.ExpectMsg(2);                  latch[4].CountDown();                  probe.ExpectMsg(4);                  latch[3].CountDown();                  probe.ExpectMsg(3);                    p.IsCompleted.Should().BeFalse();                    latch[1].CountDown();                  probe.ExpectMsg(1);                    p.Wait(TimeSpan.FromSeconds(4)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_not_run_more_functions_in_parallel_then_specified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = Enumerable.Range(1' 5)                      .Select(i => Tuple.Create(i' new TestLatch()))                      .ToDictionary(t => t.Item1' t => t.Item2);                  var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      probe.Ref.Tell(n);                      latch[n].Ready(TimeSpan.FromSeconds(5));                  })' Materializer);                    probe.ExpectMsgAllOf(1' 2' 3' 4);                  probe.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    p.IsCompleted.Should().BeFalse();                    Enumerable.Range(1' 4).ForEach(i => latch[i].CountDown());                    latch[5].CountDown();                  probe.ExpectMsg(5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  p.IsCompleted.Should().BeTrue();                }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_resume_after_function_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      if (n == 3)                          throw new TestException("err1");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))' Materializer);                    latch.CountDown();                  probe.ExpectMsgAllOf(1' 2' 4' 5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_resume_after_function_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      if (n == 3)                          throw new TestException("err1");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))' Materializer);                    latch.CountDown();                  probe.ExpectMsgAllOf(1' 2' 4' 5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_resume_after_function_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      if (n == 3)                          throw new TestException("err1");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))' Materializer);                    latch.CountDown();                  probe.ExpectMsgAllOf(1' 2' 4' 5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_resume_after_function_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      if (n == 3)                          throw new TestException("err1");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))' Materializer);                    latch.CountDown();                  probe.ExpectMsgAllOf(1' 2' 4' 5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_resume_after_function_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      if (n == 3)                          throw new TestException("err1");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))' Materializer);                    latch.CountDown();                  probe.ExpectMsgAllOf(1' 2' 4' 5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_resume_after_function_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      if (n == 3)                          throw new TestException("err1");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))' Materializer);                    latch.CountDown();                  probe.ExpectMsgAllOf(1' 2' 4' 5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_resume_after_function_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      if (n == 3)                          throw new TestException("err1");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))' Materializer);                    latch.CountDown();                  probe.ExpectMsgAllOf(1' 2' 4' 5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_resume_after_function_failure,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(4' n =>                  {                      if (n == 3)                          throw new TestException("err1");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.ResumingDecider))' Materializer);                    latch.CountDown();                  probe.ExpectMsgAllOf(1' 2' 4' 5);                    p.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_finish_after_function_thrown_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(3' n =>                  {                      if (n == 3)                          throw new TestException("err2");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.StoppingDecider))' Materializer);                                    // make sure the stream is up and running' otherwise the latch is maybe ready before the third message arrives                  Thread.Sleep(500);                  latch.CountDown();                  probe.ExpectMsgAllOf(1' 2);                    var ex = p.Invoking(t => t.Wait(TimeSpan.FromSeconds(1))).ShouldThrow<AggregateException>().Which;                  ex.Flatten().InnerException.Should().BeOfType<TestException>();                  ex.Flatten().InnerException.Message.Should().Be("err2");                    p.IsCompleted.Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_finish_after_function_thrown_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(3' n =>                  {                      if (n == 3)                          throw new TestException("err2");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.StoppingDecider))' Materializer);                                    // make sure the stream is up and running' otherwise the latch is maybe ready before the third message arrives                  Thread.Sleep(500);                  latch.CountDown();                  probe.ExpectMsgAllOf(1' 2);                    var ex = p.Invoking(t => t.Wait(TimeSpan.FromSeconds(1))).ShouldThrow<AggregateException>().Which;                  ex.Flatten().InnerException.Should().BeOfType<TestException>();                  ex.Flatten().InnerException.Message.Should().Be("err2");                    p.IsCompleted.Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_finish_after_function_thrown_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(3' n =>                  {                      if (n == 3)                          throw new TestException("err2");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.StoppingDecider))' Materializer);                                    // make sure the stream is up and running' otherwise the latch is maybe ready before the third message arrives                  Thread.Sleep(500);                  latch.CountDown();                  probe.ExpectMsgAllOf(1' 2);                    var ex = p.Invoking(t => t.Wait(TimeSpan.FromSeconds(1))).ShouldThrow<AggregateException>().Which;                  ex.Flatten().InnerException.Should().BeOfType<TestException>();                  ex.Flatten().InnerException.Message.Should().Be("err2");                    p.IsCompleted.Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_finish_after_function_thrown_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(3' n =>                  {                      if (n == 3)                          throw new TestException("err2");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.StoppingDecider))' Materializer);                                    // make sure the stream is up and running' otherwise the latch is maybe ready before the third message arrives                  Thread.Sleep(500);                  latch.CountDown();                  probe.ExpectMsgAllOf(1' 2);                    var ex = p.Invoking(t => t.Wait(TimeSpan.FromSeconds(1))).ShouldThrow<AggregateException>().Which;                  ex.Flatten().InnerException.Should().BeOfType<TestException>();                  ex.Flatten().InnerException.Message.Should().Be("err2");                    p.IsCompleted.Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_finish_after_function_thrown_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(3' n =>                  {                      if (n == 3)                          throw new TestException("err2");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.StoppingDecider))' Materializer);                                    // make sure the stream is up and running' otherwise the latch is maybe ready before the third message arrives                  Thread.Sleep(500);                  latch.CountDown();                  probe.ExpectMsgAllOf(1' 2);                    var ex = p.Invoking(t => t.Wait(TimeSpan.FromSeconds(1))).ShouldThrow<AggregateException>().Which;                  ex.Flatten().InnerException.Should().BeOfType<TestException>();                  ex.Flatten().InnerException.Message.Should().Be("err2");                    p.IsCompleted.Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_finish_after_function_thrown_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                  var latch = new TestLatch(1);                    var p = Source.From(Enumerable.Range(1' 5)).RunWith(Sink.ForEachParallel<int>(3' n =>                  {                      if (n == 3)                          throw new TestException("err2");                        probe.Ref.Tell(n);                      latch.Ready(TimeSpan.FromSeconds(10));                  }).WithAttributes(ActorAttributes.CreateSupervisionStrategy(Deciders.StoppingDecider))' Materializer);                                    // make sure the stream is up and running' otherwise the latch is maybe ready before the third message arrives                  Thread.Sleep(500);                  latch.CountDown();                  probe.ExpectMsgAllOf(1' 2);                    var ex = p.Invoking(t => t.Wait(TimeSpan.FromSeconds(1))).ShouldThrow<AggregateException>().Which;                  ex.Flatten().InnerException.Should().BeOfType<TestException>();                  ex.Flatten().InnerException.Message.Should().Be("err2");                    p.IsCompleted.Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_handle_empty_source,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = Source.From(new List<int>()).RunWith(Sink.ForEachParallel<int>(3' i => { })' Materializer);                  p.Wait(TimeSpan.FromSeconds(2)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkForeachParallelSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkForeachParallelSpec.cs,A_ForeachParallel_must_handle_empty_source,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = Source.From(new List<int>()).RunWith(Sink.ForEachParallel<int>(3' i => { })' Materializer);                  p.Wait(TimeSpan.FromSeconds(2)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_without_importing_modules,The following statement contains a magic number: var sink = Sink.FromGraph(GraphDsl.Create(b =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  for (var i = 0; i < 3; i++)                  {                      var closure = i;                      b.From(broadcast.Out(i))                          .Via(Flow.Create<int>().Where(x => x == closure))                          .To(Sink.FromSubscriber(probes[i]));                  }                  return new SinkShape<int>(broadcast.In);              }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_without_importing_modules,The following statement contains a magic number: var sink = Sink.FromGraph(GraphDsl.Create(b =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  for (var i = 0; i < 3; i++)                  {                      var closure = i;                      b.From(broadcast.Out(i))                          .Via(Flow.Create<int>().Where(x => x == closure))                          .To(Sink.FromSubscriber(probes[i]));                  }                  return new SinkShape<int>(broadcast.In);              }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_without_importing_modules,The following statement contains a magic number: Source.From(new[] {0' 1' 2}).RunWith(sink' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_without_importing_modules,The following statement contains a magic number: subscriptions.ForEach(s=>s.Request(3));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_1_modules,The following statement contains a magic number: var sink = Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])' (b' shape) =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape.Inlet);                  b.From(broadcast.Out(1))                      .Via(Flow.Create<int>().Where(x => x == 1))                      .To(Sink.FromSubscriber(probes[1]));                  b.From(broadcast.Out(2))                      .Via(Flow.Create<int>().Where(x => x == 2))                      .To(Sink.FromSubscriber(probes[2]));                  return new SinkShape<int>(broadcast.In);              }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_1_modules,The following statement contains a magic number: var sink = Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])' (b' shape) =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape.Inlet);                  b.From(broadcast.Out(1))                      .Via(Flow.Create<int>().Where(x => x == 1))                      .To(Sink.FromSubscriber(probes[1]));                  b.From(broadcast.Out(2))                      .Via(Flow.Create<int>().Where(x => x == 2))                      .To(Sink.FromSubscriber(probes[2]));                  return new SinkShape<int>(broadcast.In);              }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_1_modules,The following statement contains a magic number: var sink = Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])' (b' shape) =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape.Inlet);                  b.From(broadcast.Out(1))                      .Via(Flow.Create<int>().Where(x => x == 1))                      .To(Sink.FromSubscriber(probes[1]));                  b.From(broadcast.Out(2))                      .Via(Flow.Create<int>().Where(x => x == 2))                      .To(Sink.FromSubscriber(probes[2]));                  return new SinkShape<int>(broadcast.In);              }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_1_modules,The following statement contains a magic number: var sink = Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])' (b' shape) =>              {                  var broadcast = b.Add(new Broadcast<int>(3));                  b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape.Inlet);                  b.From(broadcast.Out(1))                      .Via(Flow.Create<int>().Where(x => x == 1))                      .To(Sink.FromSubscriber(probes[1]));                  b.From(broadcast.Out(2))                      .Via(Flow.Create<int>().Where(x => x == 2))                      .To(Sink.FromSubscriber(probes[2]));                  return new SinkShape<int>(broadcast.In);              }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_1_modules,The following statement contains a magic number: Source.From(new[] { 0' 1' 2 }).RunWith(sink' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_1_modules,The following statement contains a magic number: subscriptions.ForEach(s => s.Request(3));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_2_modules,The following statement contains a magic number: var sink =                  Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])'                      Sink.FromSubscriber(probes[1])' (_' __) => NotUsed.Instance' (b' shape0' shape1) =>                      {                          var broadcast = b.Add(new Broadcast<int>(3));                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape0.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Where(x => x == 1)).To(shape1.Inlet);                          b.From(broadcast.Out(2))                              .Via(Flow.Create<int>().Where(x => x == 2))                              .To(Sink.FromSubscriber(probes[2]));                          return new SinkShape<int>(broadcast.In);                      }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_2_modules,The following statement contains a magic number: var sink =                  Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])'                      Sink.FromSubscriber(probes[1])' (_' __) => NotUsed.Instance' (b' shape0' shape1) =>                      {                          var broadcast = b.Add(new Broadcast<int>(3));                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape0.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Where(x => x == 1)).To(shape1.Inlet);                          b.From(broadcast.Out(2))                              .Via(Flow.Create<int>().Where(x => x == 2))                              .To(Sink.FromSubscriber(probes[2]));                          return new SinkShape<int>(broadcast.In);                      }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_2_modules,The following statement contains a magic number: var sink =                  Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])'                      Sink.FromSubscriber(probes[1])' (_' __) => NotUsed.Instance' (b' shape0' shape1) =>                      {                          var broadcast = b.Add(new Broadcast<int>(3));                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape0.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Where(x => x == 1)).To(shape1.Inlet);                          b.From(broadcast.Out(2))                              .Via(Flow.Create<int>().Where(x => x == 2))                              .To(Sink.FromSubscriber(probes[2]));                          return new SinkShape<int>(broadcast.In);                      }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_2_modules,The following statement contains a magic number: var sink =                  Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])'                      Sink.FromSubscriber(probes[1])' (_' __) => NotUsed.Instance' (b' shape0' shape1) =>                      {                          var broadcast = b.Add(new Broadcast<int>(3));                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape0.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Where(x => x == 1)).To(shape1.Inlet);                          b.From(broadcast.Out(2))                              .Via(Flow.Create<int>().Where(x => x == 2))                              .To(Sink.FromSubscriber(probes[2]));                          return new SinkShape<int>(broadcast.In);                      }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_2_modules,The following statement contains a magic number: Source.From(new[] { 0' 1' 2 }).RunWith(sink' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_2_modules,The following statement contains a magic number: subscriptions.ForEach(s => s.Request(3));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_3_modules,The following statement contains a magic number: var sink =                  Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])'                      Sink.FromSubscriber(probes[1])' Sink.FromSubscriber(probes[2])'                      (_' __' ___) => NotUsed.Instance' (b' shape0' shape1' shape2) =>                      {                          var broadcast = b.Add(new Broadcast<int>(3));                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape0.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Where(x => x == 1)).To(shape1.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Where(x => x == 2)).To(shape2.Inlet);                          return new SinkShape<int>(broadcast.In);                      }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_3_modules,The following statement contains a magic number: var sink =                  Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])'                      Sink.FromSubscriber(probes[1])' Sink.FromSubscriber(probes[2])'                      (_' __' ___) => NotUsed.Instance' (b' shape0' shape1' shape2) =>                      {                          var broadcast = b.Add(new Broadcast<int>(3));                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape0.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Where(x => x == 1)).To(shape1.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Where(x => x == 2)).To(shape2.Inlet);                          return new SinkShape<int>(broadcast.In);                      }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_3_modules,The following statement contains a magic number: var sink =                  Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])'                      Sink.FromSubscriber(probes[1])' Sink.FromSubscriber(probes[2])'                      (_' __' ___) => NotUsed.Instance' (b' shape0' shape1' shape2) =>                      {                          var broadcast = b.Add(new Broadcast<int>(3));                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape0.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Where(x => x == 1)).To(shape1.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Where(x => x == 2)).To(shape2.Inlet);                          return new SinkShape<int>(broadcast.In);                      }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_3_modules,The following statement contains a magic number: var sink =                  Sink.FromGraph(GraphDsl.Create(Sink.FromSubscriber(probes[0])'                      Sink.FromSubscriber(probes[1])' Sink.FromSubscriber(probes[2])'                      (_' __' ___) => NotUsed.Instance' (b' shape0' shape1' shape2) =>                      {                          var broadcast = b.Add(new Broadcast<int>(3));                          b.From(broadcast.Out(0)).Via(Flow.Create<int>().Where(x => x == 0)).To(shape0.Inlet);                          b.From(broadcast.Out(1)).Via(Flow.Create<int>().Where(x => x == 1)).To(shape1.Inlet);                          b.From(broadcast.Out(2)).Via(Flow.Create<int>().Where(x => x == 2)).To(shape2.Inlet);                          return new SinkShape<int>(broadcast.In);                      }));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_3_modules,The following statement contains a magic number: Source.From(new[] { 0' 1' 2 }).RunWith(sink' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_be_composable_with_importing_3_modules,The following statement contains a magic number: subscriptions.ForEach(s => s.Request(3));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_combine_to_many_outputs_with_simplified_API,The following statement contains a magic number: var sink = Sink.Combine(i => new Broadcast<int>(i)' Sink.FromSubscriber(probes[0])'                  Sink.FromSubscriber(probes[1])' Sink.FromSubscriber(probes[2]));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_combine_to_many_outputs_with_simplified_API,The following statement contains a magic number: Source.From(new[] { 0' 1' 2 }).RunWith(sink' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_combine_to_many_outputs_with_simplified_API,The following statement contains a magic number: subscriptions.ForEach(s=>s.Request(2));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_combine_to_many_outputs_with_simplified_API,The following statement contains a magic number: probes.ForEach(p =>              {                  p.ExpectNext(1' 2);                  p.ExpectComplete();              });
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_combine_to_two_sinks_with_simplified_API,The following statement contains a magic number: var probes = CreateProbes().Take(2).ToArray();
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_combine_to_two_sinks_with_simplified_API,The following statement contains a magic number: Source.From(new[] { 0' 1' 2 }).RunWith(sink' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_combine_to_two_sinks_with_simplified_API,The following statement contains a magic number: subscriptions.ForEach(s => s.Request(2));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_combine_to_two_sinks_with_simplified_API,The following statement contains a magic number: probes.ForEach(p =>              {                  p.ExpectNext(1' 2);                  p.ExpectComplete();              });
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_support_contramap,The following statement contains a magic number: Source.From(Enumerable.Range(0' 9))                  .ToMaterialized(Sink.Seq<int>().ContraMap<int>(i => i + 1)' Keep.Right)                  .Run(Materializer)                  .Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 9));
Magic Number,Akka.Streams.Tests.Dsl,SinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SinkSpec.cs,A_Sink_must_support_contramap,The following statement contains a magic number: Source.From(Enumerable.Range(0' 9))                  .ToMaterialized(Sink.Seq<int>().ContraMap<int>(i => i + 1)' Keep.Right)                  .Run(Materializer)                  .Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 9));
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Maybe_Source_must_complete_materialized_future_with_None_when_stream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var neverSource = Source.Maybe<object>();                  var pubSink = Sink.AsPublisher<object>(false);                    var t = neverSource.ToMaterialized(pubSink' Keep.Both).Run(Materializer);                  var f = t.Item1;                  var neverPub = t.Item2;                    var c = TestSubscriber.CreateManualProbe<object>(this);                  neverPub.Subscribe(c);                  var subs = c.ExpectSubscription();                    subs.Request(1000);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    subs.Cancel();                  f.Task.Wait(500).Should().BeTrue();                  f.Task.Result.Should().Be(null);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Maybe_Source_must_complete_materialized_future_with_None_when_stream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var neverSource = Source.Maybe<object>();                  var pubSink = Sink.AsPublisher<object>(false);                    var t = neverSource.ToMaterialized(pubSink' Keep.Both).Run(Materializer);                  var f = t.Item1;                  var neverPub = t.Item2;                    var c = TestSubscriber.CreateManualProbe<object>(this);                  neverPub.Subscribe(c);                  var subs = c.ExpectSubscription();                    subs.Request(1000);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    subs.Cancel();                  f.Task.Wait(500).Should().BeTrue();                  f.Task.Result.Should().Be(null);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Maybe_Source_must_complete_materialized_future_with_None_when_stream_cancels,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var neverSource = Source.Maybe<object>();                  var pubSink = Sink.AsPublisher<object>(false);                    var t = neverSource.ToMaterialized(pubSink' Keep.Both).Run(Materializer);                  var f = t.Item1;                  var neverPub = t.Item2;                    var c = TestSubscriber.CreateManualProbe<object>(this);                  neverPub.Subscribe(c);                  var subs = c.ExpectSubscription();                    subs.Request(1000);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    subs.Cancel();                  f.Task.Wait(500).Should().BeTrue();                  f.Task.Result.Should().Be(null);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Maybe_Source_must_allow_external_triggering_of_empty_completion,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var neverSource = Source.Maybe<int>().Where(_ => false);                  var counterSink = Sink.Aggregate<int' int>(0' (acc' _) => acc + 1);                    var t = neverSource.ToMaterialized(counterSink' Keep.Both).Run(Materializer);                  var neverPromise = t.Item1;                  var counterFuture = t.Item2;                                    //external cancellation                  neverPromise.TrySetResult(0).Should().BeTrue();                    counterFuture.Wait(500).Should().BeTrue();                  counterFuture.Result.Should().Be(0);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Maybe_Source_must_allow_external_triggering_of_non_empty_completion,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var neverSource = Source.Maybe<int>();                  var counterSink = Sink.First<int>();                    var t = neverSource.ToMaterialized(counterSink' Keep.Both).Run(Materializer);                  var neverPromise = t.Item1;                  var counterFuture = t.Item2;                    //external cancellation                  neverPromise.TrySetResult(6).Should().BeTrue();                    counterFuture.Wait(500).Should().BeTrue();                  counterFuture.Result.Should().Be(6);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Maybe_Source_must_allow_external_triggering_of_non_empty_completion,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var neverSource = Source.Maybe<int>();                  var counterSink = Sink.First<int>();                    var t = neverSource.ToMaterialized(counterSink' Keep.Both).Run(Materializer);                  var neverPromise = t.Item1;                  var counterFuture = t.Item2;                    //external cancellation                  neverPromise.TrySetResult(6).Should().BeTrue();                    counterFuture.Wait(500).Should().BeTrue();                  counterFuture.Result.Should().Be(6);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Maybe_Source_must_allow_external_triggering_of_non_empty_completion,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var neverSource = Source.Maybe<int>();                  var counterSink = Sink.First<int>();                    var t = neverSource.ToMaterialized(counterSink' Keep.Both).Run(Materializer);                  var neverPromise = t.Item1;                  var counterFuture = t.Item2;                    //external cancellation                  neverPromise.TrySetResult(6).Should().BeTrue();                    counterFuture.Wait(500).Should().BeTrue();                  counterFuture.Result.Should().Be(6);              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Maybe_Source_must_allow_external_triggering_of_OnError,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var neverSource = Source.Maybe<int>();                  var counterSink = Sink.First<int>();                    var t = neverSource.ToMaterialized(counterSink' Keep.Both).Run(Materializer);                  var neverPromise = t.Item1;                  var counterFuture = t.Item2;                    //external cancellation                  neverPromise.SetException(new Exception("Boom"));                    counterFuture.Invoking(f => f.Wait(500)).ShouldThrow<Exception>()                      .WithMessage("Boom");              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: var probes = Enumerable.Range(1' 5).Select(_ => TestPublisher.CreateManualProbe<int>(this)).ToList();
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: var s =                  Source.FromGraph(GraphDsl.Create(source' source' source' source' source'                      (a' b' c' d' e) => new[] {a' b' c' d' e}'                      (b' i0' i1' i2' i3' i4) =>                      {                          var m = b.Add(new Merge<int>(5));                          b.From(i0.Outlet).To(m.In(0));                          b.From(i1.Outlet).To(m.In(1));                          b.From(i2.Outlet).To(m.In(2));                          b.From(i3.Outlet).To(m.In(3));                          b.From(i4.Outlet).To(m.In(4));                          return new SourceShape<int>(m.Out);                      })).To(Sink.FromSubscriber(outProbe)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: var s =                  Source.FromGraph(GraphDsl.Create(source' source' source' source' source'                      (a' b' c' d' e) => new[] {a' b' c' d' e}'                      (b' i0' i1' i2' i3' i4) =>                      {                          var m = b.Add(new Merge<int>(5));                          b.From(i0.Outlet).To(m.In(0));                          b.From(i1.Outlet).To(m.In(1));                          b.From(i2.Outlet).To(m.In(2));                          b.From(i3.Outlet).To(m.In(3));                          b.From(i4.Outlet).To(m.In(4));                          return new SourceShape<int>(m.Out);                      })).To(Sink.FromSubscriber(outProbe)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: var s =                  Source.FromGraph(GraphDsl.Create(source' source' source' source' source'                      (a' b' c' d' e) => new[] {a' b' c' d' e}'                      (b' i0' i1' i2' i3' i4) =>                      {                          var m = b.Add(new Merge<int>(5));                          b.From(i0.Outlet).To(m.In(0));                          b.From(i1.Outlet).To(m.In(1));                          b.From(i2.Outlet).To(m.In(2));                          b.From(i3.Outlet).To(m.In(3));                          b.From(i4.Outlet).To(m.In(4));                          return new SourceShape<int>(m.Out);                      })).To(Sink.FromSubscriber(outProbe)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: var s =                  Source.FromGraph(GraphDsl.Create(source' source' source' source' source'                      (a' b' c' d' e) => new[] {a' b' c' d' e}'                      (b' i0' i1' i2' i3' i4) =>                      {                          var m = b.Add(new Merge<int>(5));                          b.From(i0.Outlet).To(m.In(0));                          b.From(i1.Outlet).To(m.In(1));                          b.From(i2.Outlet).To(m.In(2));                          b.From(i3.Outlet).To(m.In(3));                          b.From(i4.Outlet).To(m.In(4));                          return new SourceShape<int>(m.Out);                      })).To(Sink.FromSubscriber(outProbe)).Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: i < 5
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: sub.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: i < 5
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: i < 5
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: gotten.ShouldAllBeEquivalentTo(new[] {0' 1' 2' 3' 4});
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: gotten.ShouldAllBeEquivalentTo(new[] {0' 1' 2' 3' 4});
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_merge_from_many_inputs,The following statement contains a magic number: gotten.ShouldAllBeEquivalentTo(new[] {0' 1' 2' 3' 4});
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_combine_from_many_inputs_with_simplified_API,The following statement contains a magic number: var probes = Enumerable.Range(1' 3).Select(_ => TestPublisher.CreateManualProbe<int>(this)).ToList();
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_combine_from_many_inputs_with_simplified_API,The following statement contains a magic number: Source.Combine(source[0]' source[1]' i => new Merge<int' int>(i)' source[2])                  .To(Sink.FromSubscriber(outProbe))                  .Run(Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_combine_from_many_inputs_with_simplified_API,The following statement contains a magic number: sub.Request(3);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_combine_from_many_inputs_with_simplified_API,The following statement contains a magic number: i < 3
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_combine_from_many_inputs_with_simplified_API,The following statement contains a magic number: i < 3
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_combine_from_many_inputs_with_simplified_API,The following statement contains a magic number: gotten.ShouldAllBeEquivalentTo(new[] {0' 1' 2});
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_combine_from_two_inputs_with_simplified_API,The following statement contains a magic number: var probes = Enumerable.Range(1' 2).Select(_ => TestPublisher.CreateManualProbe<int>(this)).ToList();
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_combine_from_two_inputs_with_simplified_API,The following statement contains a magic number: sub.Request(3);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_combine_from_two_inputs_with_simplified_API,The following statement contains a magic number: i < 2
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Composite_Source_must_combine_from_two_inputs_with_simplified_API,The following statement contains a magic number: i < 2
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Repeat_Source_must_repeat_as_long_as_it_takes,The following statement contains a magic number: var f = Source.Repeat(42).Grouped(1000).RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Repeat_Source_must_repeat_as_long_as_it_takes,The following statement contains a magic number: var f = Source.Repeat(42).Grouped(1000).RunWith(Sink.First<IEnumerable<int>>()' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Repeat_Source_must_repeat_as_long_as_it_takes,The following statement contains a magic number: f.Result.Should().HaveCount(1000).And.Match(x => x.All(i => i == 42));
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Repeat_Source_must_repeat_as_long_as_it_takes,The following statement contains a magic number: f.Result.Should().HaveCount(1000).And.Match(x => x.All(i => i == 42));
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Unfold_Source_must_generate_a_finite_fibonacci_sequence,The following statement contains a magic number: Source.Unfold(Tuple.Create(0' 1)' tuple =>              {                  var a = tuple.Item1;                  var b = tuple.Item2;                  if (a > 10000000)                      return null;                  return Tuple.Create(Tuple.Create(b' a + b)' a);              }).RunAggregate(new LinkedList<int>()' (ints' i) =>              {                  ints.AddFirst(i);                  return ints;              }' Materializer).Result.Should().Equal(Expected);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Unfold_Source_must_terminate_with_a_failure_if_there_is_an_exception_thrown,The following statement contains a magic number: EventFilter.Exception<SystemException>(message: "expected").ExpectOne(() =>              {                  var task = Source.Unfold(Tuple.Create(0' 1)' tuple =>                  {                      var a = tuple.Item1;                      var b = tuple.Item2;                      if (a > 10000000)                          throw new SystemException("expected");                      return Tuple.Create(Tuple.Create(b' a + b)' a);                  }).RunAggregate(new LinkedList<int>()' (ints' i) =>                  {                      ints.AddFirst(i);                      return ints;                  }' Materializer);                  task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<SystemException>()                      .WithMessage("expected");              });
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Unfold_Source_must_terminate_with_a_failure_if_there_is_an_exception_thrown,The following statement contains a magic number: EventFilter.Exception<SystemException>(message: "expected").ExpectOne(() =>              {                  var task = Source.Unfold(Tuple.Create(0' 1)' tuple =>                  {                      var a = tuple.Item1;                      var b = tuple.Item2;                      if (a > 10000000)                          throw new SystemException("expected");                      return Tuple.Create(Tuple.Create(b' a + b)' a);                  }).RunAggregate(new LinkedList<int>()' (ints' i) =>                  {                      ints.AddFirst(i);                      return ints;                  }' Materializer);                  task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<SystemException>()                      .WithMessage("expected");              });
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Unfold_Source_must_generate_a_finite_fibonacci_sequence_asynchronously,The following statement contains a magic number: Source.UnfoldAsync(Tuple.Create(0' 1)' tuple =>              {                  var a = tuple.Item1;                  var b = tuple.Item2;                  if (a > 10000000)                      return Task.FromResult<Tuple<Tuple<int' int>' int>>(null);                  return Task.FromResult(Tuple.Create(Tuple.Create(b' a + b)' a));              }).RunAggregate(new LinkedList<int>()' (ints' i) =>              {                  ints.AddFirst(i);                  return ints;              }' Materializer).Result.Should().Equal(Expected);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Unfold_Source_must_generate_a_unboundeed_fibonacci_sequence,The following statement contains a magic number: Source.Unfold(Tuple.Create(0' 1)' tuple =>              {                  var a = tuple.Item1;                  var b = tuple.Item2;                  return Tuple.Create(Tuple.Create(b' a + b)' a);              })              .Take(36)              .RunAggregate(new LinkedList<int>()' (ints' i) =>              {                  ints.AddFirst(i);                  return ints;              }' Materializer).Result.Should().Equal(Expected);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,Iterator_Source_must_properly_iterate,The following statement contains a magic number: Source.FromEnumerator(() => expected.GetEnumerator())                  .Grouped(10)                  .RunWith(Sink.First<IEnumerable<bool>>()' Materializer)                  .Result.Should()                  .Equal(expected);
Magic Number,Akka.Streams.Tests.Dsl,SourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SourceSpec.cs,A_Source_must_suitably_override_attribute_handling_methods,The following statement contains a magic number: Source.Single(42).Async().AddAttributes(Attributes.None).Named("");
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_receive_messages,The following statement contains a magic number: stageRef.Tell(new Add(2));
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_receive_messages,The following statement contains a magic number: stageRef.Tell(new Add(3));
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_receive_messages,The following statement contains a magic number: res.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_receive_messages,The following statement contains a magic number: res.Result.Should().Be(6);
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_be_able_to_be_replied_to,The following statement contains a magic number: LastSender.Tell(new AddAndTell(9));
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_be_able_to_be_replied_to,The following statement contains a magic number: ExpectMsg(10);
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_be_able_to_be_replied_to,The following statement contains a magic number: res.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_be_able_to_be_replied_to,The following statement contains a magic number: res.Result.Should().Be(10);
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_yield_the_same_self_ref_each_time,The following statement contains a magic number: LastSender.Tell(new AddAndTell(2));
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_yield_the_same_self_ref_each_time,The following statement contains a magic number: ExpectMsg(3);
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_yield_the_same_self_ref_each_time,The following statement contains a magic number: stageRef.Tell(new AddAndTell(3));
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_yield_the_same_self_ref_each_time,The following statement contains a magic number: ExpectMsg(6);
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_yield_the_same_self_ref_each_time,The following statement contains a magic number: res.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_yield_the_same_self_ref_each_time,The following statement contains a magic number: res.Result.Should().Be(6);
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_be_watchable,The following statement contains a magic number: res.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_be_able_to_become,The following statement contains a magic number: stageRef.Tell(42);
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_be_able_to_become,The following statement contains a magic number: res.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_reply_Terminated_when_terminated_stage_is_watched,The following statement contains a magic number: res.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_be_unwatchable,The following statement contains a magic number: res.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_be_unwatchable,The following statement contains a magic number: ExpectNoMsg(100);
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_ignore_and_log_warnings_for_PoisonPill_and_Kill_messages,The following statement contains a magic number: stageRef.Tell(new Add(40));
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_ignore_and_log_warnings_for_PoisonPill_and_Kill_messages,The following statement contains a magic number: source.SetResult(2);
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_ignore_and_log_warnings_for_PoisonPill_and_Kill_messages,The following statement contains a magic number: res.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_ignore_and_log_warnings_for_PoisonPill_and_Kill_messages,The following statement contains a magic number: res.Result.Should().Be(42);
Magic Number,Akka.Streams.Tests.Dsl,StageActorRefSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\StageActorRefSpec.cs,A_Graph_stage_ActorRef_must_be_able_to_watch_other_actors,The following statement contains a magic number: res.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,SubscriberSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubscriberSinkSpec.cs,SubscriberSinkSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,SubscriberSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubscriberSinkSpec.cs,SubscriberSinkSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Dsl,SubscriberSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubscriberSinkSpec.cs,A_Flow_with_SubscriberSink_must_publish_elements_to_the_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = this.CreateManualProbe<int>();                  Source.From(Enumerable.Range(1' 3)).To(Sink.FromSubscriber(c)).Run(Materializer);                    var s = c.ExpectSubscription();                  s.Request(3);                  c.ExpectNext(1);                  c.ExpectNext(2);                  c.ExpectNext(3);                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubscriberSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubscriberSinkSpec.cs,A_Flow_with_SubscriberSink_must_publish_elements_to_the_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = this.CreateManualProbe<int>();                  Source.From(Enumerable.Range(1' 3)).To(Sink.FromSubscriber(c)).Run(Materializer);                    var s = c.ExpectSubscription();                  s.Request(3);                  c.ExpectNext(1);                  c.ExpectNext(2);                  c.ExpectNext(3);                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubscriberSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubscriberSinkSpec.cs,A_Flow_with_SubscriberSink_must_publish_elements_to_the_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = this.CreateManualProbe<int>();                  Source.From(Enumerable.Range(1' 3)).To(Sink.FromSubscriber(c)).Run(Materializer);                    var s = c.ExpectSubscription();                  s.Request(3);                  c.ExpectNext(1);                  c.ExpectNext(2);                  c.ExpectNext(3);                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubscriberSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubscriberSinkSpec.cs,A_Flow_with_SubscriberSink_must_publish_elements_to_the_subscriber,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = this.CreateManualProbe<int>();                  Source.From(Enumerable.Range(1' 3)).To(Sink.FromSubscriber(c)).Run(Materializer);                    var s = c.ExpectSubscription();                  s.Request(3);                  c.ExpectNext(1);                  c.ExpectNext(2);                  c.ExpectNext(3);                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubscriberSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubscriberSourceSpec.cs,A_SubscriberSource_must_be_able_to_use_Subscribe_in_materialized_value_transformation,The following statement contains a magic number: var f = Source.AsSubscriber<int>()                  .MapMaterializedValue(                      s => Source.From(Enumerable.Range(1' 3)).RunWith(Sink.FromSubscriber(s)' Materializer))                  .RunWith(Sink.Aggregate<int' int>(0' (sum' i) => sum + i)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubscriberSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubscriberSourceSpec.cs,A_SubscriberSource_must_be_able_to_use_Subscribe_in_materialized_value_transformation,The following statement contains a magic number: f.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Dsl,SubscriberSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubscriberSourceSpec.cs,A_SubscriberSource_must_be_able_to_use_Subscribe_in_materialized_value_transformation,The following statement contains a magic number: f.Result.Should().Be(6);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,SubstreamSubscriptionTimeoutSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,SubstreamSubscriptionTimeoutSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 2);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_cancel_substream_publisher_when_no_one_subscribes_to_them_after_some_time,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(3' x => x%3)                          .Lift(x => x%3)                          .RunWith(Sink.FromSubscriber(subscriber)' Materializer);                    var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                    var s1 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s1SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s1.RunWith(Sink.FromSubscriber(s1SubscriberProbe)' Materializer);                  var s1Subscription = s1SubscriberProbe.ExpectSubscription();                  s1Subscription.Request(100);                  s1SubscriberProbe.ExpectNext().Should().Be(1);                    var s2 = subscriber.ExpectNext().Item2;                  // should not break normal usage                  var s2SubscriberProbe = TestSubscriber.CreateManualProbe<int>(this);                  s2.RunWith(Sink.FromSubscriber(s2SubscriberProbe)' Materializer);                  var s2Subscription = s2SubscriberProbe.ExpectSubscription();                  s2Subscription.Request(100);                  s2SubscriberProbe.ExpectNext().Should().Be(2);                    var s3 = subscriber.ExpectNext().Item2;                    // sleep long enough for it to be cleaned up                  Thread.Sleep(1500);                    // Must be a Sink.seq' otherwise there is a race due to the concat in the `lift` implementation                  Action action = () => s3.RunWith(Sink.Seq<int>()' Materializer).Wait(TimeSpan.FromMilliseconds(300));                  action.ShouldThrow<SubscriptionTimeoutException>();                    publisherProbe.SendComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_stop_groupBy_parent_actor_if_none_of_the_substreams_are_actually_consumed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2).RunWith(Sink.FromSubscriber(subscriber)' Materializer);                      var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                  publisherProbe.SendComplete();                    subscriber.ExpectNext();                  subscriber.ExpectNext();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_stop_groupBy_parent_actor_if_none_of_the_substreams_are_actually_consumed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2).RunWith(Sink.FromSubscriber(subscriber)' Materializer);                      var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                  publisherProbe.SendComplete();                    subscriber.ExpectNext();                  subscriber.ExpectNext();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_stop_groupBy_parent_actor_if_none_of_the_substreams_are_actually_consumed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2).RunWith(Sink.FromSubscriber(subscriber)' Materializer);                      var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                  publisherProbe.SendComplete();                    subscriber.ExpectNext();                  subscriber.ExpectNext();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_stop_groupBy_parent_actor_if_none_of_the_substreams_are_actually_consumed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2).RunWith(Sink.FromSubscriber(subscriber)' Materializer);                      var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                  publisherProbe.SendComplete();                    subscriber.ExpectNext();                  subscriber.ExpectNext();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_stop_groupBy_parent_actor_if_none_of_the_substreams_are_actually_consumed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2).RunWith(Sink.FromSubscriber(subscriber)' Materializer);                      var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                  publisherProbe.SendComplete();                    subscriber.ExpectNext();                  subscriber.ExpectNext();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_timeout_and_stop_groupBy_parent_actor_if_none_of_the_substreams_are_actually_consumed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var subscriber = TestSubscriber.CreateManualProbe<Tuple<int' Source<int' NotUsed>>>(this);                  var publisherProbe = TestPublisher.CreateProbe<int>(this);                  var publisher =                      Source.FromPublisher(publisherProbe)                          .GroupBy(2' x => x % 2)                          .Lift(x => x % 2).RunWith(Sink.FromSubscriber(subscriber)' Materializer);                      var downstreamSubscription = subscriber.ExpectSubscription();                  downstreamSubscription.Request(100);                    publisherProbe.SendNext(1);                  publisherProbe.SendNext(2);                  publisherProbe.SendNext(3);                  publisherProbe.SendComplete();                    subscriber.ExpectNext();                  subscriber.ExpectNext();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: var publisher =                  Source.FromPublisher(publisherProbe)                      .GroupBy(2' x => x % 2)                      .Lift(x => x % 2).RunWith(Sink.FromSubscriber(subscriber)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: var publisher =                  Source.FromPublisher(publisherProbe)                      .GroupBy(2' x => x % 2)                      .Lift(x => x % 2).RunWith(Sink.FromSubscriber(subscriber)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: var publisher =                  Source.FromPublisher(publisherProbe)                      .GroupBy(2' x => x % 2)                      .Lift(x => x % 2).RunWith(Sink.FromSubscriber(subscriber)' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: downstreamSubscription.Request(10);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: publisherProbe.SendNext(2);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: Thread.Sleep(1500);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: s2Subscription.Request(100);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: s2SubscriberProbe.ExpectNext().Should().Be(2);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: s1Subscription.Request(100);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: publisherProbe.SendNext(3);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: publisherProbe.SendNext(4);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: s1SubscriberProbe.ExpectNext().Should().Be(3);
Magic Number,Akka.Streams.Tests.Dsl,SubstreamSubscriptionTimeoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\SubstreamSubscriptionTimeoutSpec.cs,GroupBy_and_SplitWhen_must_not_timeout_and_cancel_substream_publisher_when_they_have_been_subscribed_to,The following statement contains a magic number: s2SubscriberProbe.ExpectNext().Should().Be(4);
Magic Number,Akka.Streams.Tests.Dsl,TestConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TestConfig.cs,RandomTestRange,The following statement contains a magic number: var numberOfTestsToRun = system.Settings.Config.GetInt("akka.stream.test.numberOfRandomizedTests"' 10);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_prouce_ticks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick")                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  sub.Cancel();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_prouce_ticks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick")                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  sub.Cancel();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_prouce_ticks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick")                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  sub.Cancel();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_prouce_ticks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick")                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  sub.Cancel();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_prouce_ticks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick")                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  sub.Cancel();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_prouce_ticks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick")                      .To(Sink.FromSubscriber(c))                      .Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  sub.Cancel();                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_drop_ticks_when_not_requested,The following statement contains a magic number: sub.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_drop_ticks_when_not_requested,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_drop_ticks_when_not_requested,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(1400));
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_drop_ticks_when_not_requested,The following statement contains a magic number: sub.Request(2);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_drop_ticks_when_not_requested,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_drop_ticks_when_not_requested,The following statement contains a magic number: c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_reject_multiple_subscribers_but_keep_the_firs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(1)' "tick")                      .RunWith(Sink.AsPublisher<string>(false)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<string>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                  p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  c2.ExpectSubscriptionAndError();                  sub1.Request(1);                  c1.ExpectNext("tick");                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub1.Request(2);                  c1.ExpectNext("tick");                  sub1.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_reject_multiple_subscribers_but_keep_the_firs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(1)' "tick")                      .RunWith(Sink.AsPublisher<string>(false)' Materializer);                  var c1 = TestSubscriber.CreateManualProbe<string>(this);                  var c2 = TestSubscriber.CreateManualProbe<string>(this);                  p.Subscribe(c1);                  p.Subscribe(c2);                  var sub1 = c1.ExpectSubscription();                  c2.ExpectSubscriptionAndError();                  sub1.Request(1);                  c1.ExpectNext("tick");                  c1.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub1.Request(2);                  c1.ExpectNext("tick");                  sub1.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_usable_with_zip_for_a_simple_form_of_rate_limiting,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      b.From(Source.From(Enumerable.Range(1' 100))).To(zip.In0);                      b.From(Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(1)' "tick")                          .MapMaterializedValue(_ => NotUsed.Instance)).To(zip.In1);                      b.From(zip.Out)                          .Via(Flow.Create<Tuple<int' string>>().Select(t => t.Item1))                          .To(Sink.FromSubscriber(c));                      return ClosedShape.Instance;                  })).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(1000);                  c.ExpectNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_usable_with_zip_for_a_simple_form_of_rate_limiting,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      b.From(Source.From(Enumerable.Range(1' 100))).To(zip.In0);                      b.From(Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(1)' "tick")                          .MapMaterializedValue(_ => NotUsed.Instance)).To(zip.In1);                      b.From(zip.Out)                          .Via(Flow.Create<Tuple<int' string>>().Select(t => t.Item1))                          .To(Sink.FromSubscriber(c));                      return ClosedShape.Instance;                  })).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(1000);                  c.ExpectNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_usable_with_zip_for_a_simple_form_of_rate_limiting,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      b.From(Source.From(Enumerable.Range(1' 100))).To(zip.In0);                      b.From(Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(1)' "tick")                          .MapMaterializedValue(_ => NotUsed.Instance)).To(zip.In1);                      b.From(zip.Out)                          .Via(Flow.Create<Tuple<int' string>>().Select(t => t.Item1))                          .To(Sink.FromSubscriber(c));                      return ClosedShape.Instance;                  })).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(1000);                  c.ExpectNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_usable_with_zip_for_a_simple_form_of_rate_limiting,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      b.From(Source.From(Enumerable.Range(1' 100))).To(zip.In0);                      b.From(Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(1)' "tick")                          .MapMaterializedValue(_ => NotUsed.Instance)).To(zip.In1);                      b.From(zip.Out)                          .Via(Flow.Create<Tuple<int' string>>().Select(t => t.Item1))                          .To(Sink.FromSubscriber(c));                      return ClosedShape.Instance;                  })).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(1000);                  c.ExpectNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_usable_with_zip_for_a_simple_form_of_rate_limiting,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<int>(this);                  RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var zip = b.Add(new Zip<int' string>());                      b.From(Source.From(Enumerable.Range(1' 100))).To(zip.In0);                      b.From(Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(1)' "tick")                          .MapMaterializedValue(_ => NotUsed.Instance)).To(zip.In1);                      b.From(zip.Out)                          .Via(Flow.Create<Tuple<int' string>>().Select(t => t.Item1))                          .To(Sink.FromSubscriber(c));                      return ClosedShape.Instance;                  })).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(1000);                  c.ExpectNext(1);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext(2);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  sub.Cancel();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_possible_to_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  var tickSource = Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick");                  var cancelable = tickSource.To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  cancelable.Cancel();                  AwaitCondition(() => cancelable.IsCancellationRequested);                  sub.Request(3);                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_possible_to_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  var tickSource = Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick");                  var cancelable = tickSource.To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  cancelable.Cancel();                  AwaitCondition(() => cancelable.IsCancellationRequested);                  sub.Request(3);                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_possible_to_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  var tickSource = Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick");                  var cancelable = tickSource.To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  cancelable.Cancel();                  AwaitCondition(() => cancelable.IsCancellationRequested);                  sub.Request(3);                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_possible_to_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  var tickSource = Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick");                  var cancelable = tickSource.To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  cancelable.Cancel();                  AwaitCondition(() => cancelable.IsCancellationRequested);                  sub.Request(3);                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_possible_to_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  var tickSource = Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick");                  var cancelable = tickSource.To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  cancelable.Cancel();                  AwaitCondition(() => cancelable.IsCancellationRequested);                  sub.Request(3);                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Dsl,TickSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Dsl\TickSourceSpec.cs,A_Flow_based_on_a_tick_publisher_must_be_possible_to_cancel,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var c = TestSubscriber.CreateManualProbe<string>(this);                  var tickSource = Source.Tick(TimeSpan.FromSeconds(1)' TimeSpan.FromMilliseconds(500)' "tick");                  var cancelable = tickSource.To(Sink.FromSubscriber(c)).Run(Materializer);                  var sub = c.ExpectSubscription();                  sub.Request(3);                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(600));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                  c.ExpectNext("tick");                  cancelable.Cancel();                  AwaitCondition(() => cancelable.IsCancellationRequested);                  sub.Request(3);                  c.ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,FlowTimedSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,FlowTimedSpec,The following statement contains a magic number: var settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(2' 16);
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Source_must_measure_time_it_takes_between_elements_matching_a_predicate,The following statement contains a magic number: const int measureBetweenEvery = 5;
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Source_must_measure_time_it_takes_between_elements_matching_a_predicate,The following statement contains a magic number: var n = 20;
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Source_must_measure_time_it_takes_between_elements_matching_a_predicate,The following statement contains a magic number: var testRuns = new[] {1' 2};
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Source_must_measure_time_it_takes_from_start_to_complete_by_wrapping_operations,The following statement contains a magic number: var n = 50;
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Source_must_measure_time_it_takes_from_start_to_complete_by_wrapping_operations,The following statement contains a magic number: var testRuns = new[] {1' 2' 3};
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Source_must_measure_time_it_takes_from_start_to_complete_by_wrapping_operations,The following statement contains a magic number: var testRuns = new[] {1' 2' 3};
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Flow_must_measure_time_it_takes_between_elements_matching_a_predicate,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                    var flow =                      Flow.Create<int>().Select(x => (long) x).TimedIntervalBetween(i => i%2 == 1' d => probe.Tell(d));                    var c1 = TestSubscriber.CreateManualProbe<long>(this);                  Source.From(Enumerable.Range(1' 3)).Via(flow).RunWith(Sink.FromSubscriber(c1)' Materializer);                    var s = c1.ExpectSubscription();                  s.Request(100);                  c1.ExpectNext(1L);                  c1.ExpectNext(2L);                  c1.ExpectNext(3L);                  c1.ExpectComplete();                    var duration = probe.ExpectMsg<TimeSpan>();                  _helper.WriteLine($"Got duration (first): {duration}");              }' Materializer);
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Flow_must_measure_time_it_takes_between_elements_matching_a_predicate,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                    var flow =                      Flow.Create<int>().Select(x => (long) x).TimedIntervalBetween(i => i%2 == 1' d => probe.Tell(d));                    var c1 = TestSubscriber.CreateManualProbe<long>(this);                  Source.From(Enumerable.Range(1' 3)).Via(flow).RunWith(Sink.FromSubscriber(c1)' Materializer);                    var s = c1.ExpectSubscription();                  s.Request(100);                  c1.ExpectNext(1L);                  c1.ExpectNext(2L);                  c1.ExpectNext(3L);                  c1.ExpectComplete();                    var duration = probe.ExpectMsg<TimeSpan>();                  _helper.WriteLine($"Got duration (first): {duration}");              }' Materializer);
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Flow_must_measure_time_it_takes_between_elements_matching_a_predicate,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                    var flow =                      Flow.Create<int>().Select(x => (long) x).TimedIntervalBetween(i => i%2 == 1' d => probe.Tell(d));                    var c1 = TestSubscriber.CreateManualProbe<long>(this);                  Source.From(Enumerable.Range(1' 3)).Via(flow).RunWith(Sink.FromSubscriber(c1)' Materializer);                    var s = c1.ExpectSubscription();                  s.Request(100);                  c1.ExpectNext(1L);                  c1.ExpectNext(2L);                  c1.ExpectNext(3L);                  c1.ExpectComplete();                    var duration = probe.ExpectMsg<TimeSpan>();                  _helper.WriteLine($"Got duration (first): {duration}");              }' Materializer);
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Flow_must_measure_time_it_takes_between_elements_matching_a_predicate,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                    var flow =                      Flow.Create<int>().Select(x => (long) x).TimedIntervalBetween(i => i%2 == 1' d => probe.Tell(d));                    var c1 = TestSubscriber.CreateManualProbe<long>(this);                  Source.From(Enumerable.Range(1' 3)).Via(flow).RunWith(Sink.FromSubscriber(c1)' Materializer);                    var s = c1.ExpectSubscription();                  s.Request(100);                  c1.ExpectNext(1L);                  c1.ExpectNext(2L);                  c1.ExpectNext(3L);                  c1.ExpectComplete();                    var duration = probe.ExpectMsg<TimeSpan>();                  _helper.WriteLine($"Got duration (first): {duration}");              }' Materializer);
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Flow_must_measure_time_it_takes_between_elements_matching_a_predicate,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                    var flow =                      Flow.Create<int>().Select(x => (long) x).TimedIntervalBetween(i => i%2 == 1' d => probe.Tell(d));                    var c1 = TestSubscriber.CreateManualProbe<long>(this);                  Source.From(Enumerable.Range(1' 3)).Via(flow).RunWith(Sink.FromSubscriber(c1)' Materializer);                    var s = c1.ExpectSubscription();                  s.Request(100);                  c1.ExpectNext(1L);                  c1.ExpectNext(2L);                  c1.ExpectNext(3L);                  c1.ExpectComplete();                    var duration = probe.ExpectMsg<TimeSpan>();                  _helper.WriteLine($"Got duration (first): {duration}");              }' Materializer);
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Flow_must_measure_time_it_takes_from_start_to_complete_by_wrapping_operations,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                    var flow =                      Flow.Create<int>()                          .Timed(f => f.Select(x => (double)x).Select(x => (int)x).Select(x => x.ToString())'                              d => probe.Tell(d))                          .Select(s => s + "!");                    var t = flow.RunWith(Source.AsSubscriber<int>()' Sink.AsPublisher<string>(false)' Materializer);                  var flowIn = t.Item1;                  var flowOut = t.Item2;                    var c1 = TestSubscriber.CreateManualProbe<string>(this);                  flowOut.Subscribe(c1);                    var p = Source.From(Enumerable.Range(0' 101)).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  p.Subscribe(flowIn);                    var sub = c1.ExpectSubscription();                  sub.Request(200);                  Enumerable.Range(0' 101).ForEach(i => c1.ExpectNext(i + "!"));                  c1.ExpectComplete();                    var duration = probe.ExpectMsg<TimeSpan>();                  _helper.WriteLine($"Took: {duration}");              }' Materializer);
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Flow_must_measure_time_it_takes_from_start_to_complete_by_wrapping_operations,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                    var flow =                      Flow.Create<int>()                          .Timed(f => f.Select(x => (double)x).Select(x => (int)x).Select(x => x.ToString())'                              d => probe.Tell(d))                          .Select(s => s + "!");                    var t = flow.RunWith(Source.AsSubscriber<int>()' Sink.AsPublisher<string>(false)' Materializer);                  var flowIn = t.Item1;                  var flowOut = t.Item2;                    var c1 = TestSubscriber.CreateManualProbe<string>(this);                  flowOut.Subscribe(c1);                    var p = Source.From(Enumerable.Range(0' 101)).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  p.Subscribe(flowIn);                    var sub = c1.ExpectSubscription();                  sub.Request(200);                  Enumerable.Range(0' 101).ForEach(i => c1.ExpectNext(i + "!"));                  c1.ExpectComplete();                    var duration = probe.ExpectMsg<TimeSpan>();                  _helper.WriteLine($"Took: {duration}");              }' Materializer);
Magic Number,Akka.Streams.Tests.Extra,FlowTimedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Extra\FlowTimedSpec.cs,Timed_Flow_must_measure_time_it_takes_from_start_to_complete_by_wrapping_operations,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var probe = CreateTestProbe();                    var flow =                      Flow.Create<int>()                          .Timed(f => f.Select(x => (double)x).Select(x => (int)x).Select(x => x.ToString())'                              d => probe.Tell(d))                          .Select(s => s + "!");                    var t = flow.RunWith(Source.AsSubscriber<int>()' Sink.AsPublisher<string>(false)' Materializer);                  var flowIn = t.Item1;                  var flowOut = t.Item2;                    var c1 = TestSubscriber.CreateManualProbe<string>(this);                  flowOut.Subscribe(c1);                    var p = Source.From(Enumerable.Range(0' 101)).RunWith(Sink.AsPublisher<int>(false)' Materializer);                  p.Subscribe(flowIn);                    var sub = c1.ExpectSubscription();                  sub.Request(200);                  Enumerable.Range(0' 101).ForEach(i => c1.ExpectNext(i + "!"));                  c1.ExpectComplete();                    var duration = probe.ExpectMsg<TimeSpan>();                  _helper.WriteLine($"Took: {duration}");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_simple_identity_graph_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identity = GraphStages.Identity<int>();                    var task = Source.From(Enumerable.Range(1' 100))                      .Via(identity)                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 100));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_simple_identity_graph_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identity = GraphStages.Identity<int>();                    var task = Source.From(Enumerable.Range(1' 100))                      .Via(identity)                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 100));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_simple_identity_graph_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identity = GraphStages.Identity<int>();                    var task = Source.From(Enumerable.Range(1' 100))                      .Via(identity)                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 100));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_simple_identity_graph_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identity = GraphStages.Identity<int>();                    var task = Source.From(Enumerable.Range(1' 100))                      .Via(identity)                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 100));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_reuse_a_simple_identity_graph_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identity = GraphStages.Identity<int>();                    var task = Source.From(Enumerable.Range(1' 100))                      .Via(identity)                      .Via(identity)                      .Via(identity)                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 100));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_reuse_a_simple_identity_graph_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identity = GraphStages.Identity<int>();                    var task = Source.From(Enumerable.Range(1' 100))                      .Via(identity)                      .Via(identity)                      .Via(identity)                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 100));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_reuse_a_simple_identity_graph_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identity = GraphStages.Identity<int>();                    var task = Source.From(Enumerable.Range(1' 100))                      .Via(identity)                      .Via(identity)                      .Via(identity)                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 100));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_reuse_a_simple_identity_graph_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identity = GraphStages.Identity<int>();                    var task = Source.From(Enumerable.Range(1' 100))                      .Via(identity)                      .Via(identity)                      .Via(identity)                      .Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 100));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_simple_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identityBidi = new IdentityBidiGraphStage();                  var identity = BidiFlow.FromGraph(identityBidi).Join(Flow.Identity<int>().Select(x => x));                    var task = Source.From(Enumerable.Range(1' 10))                      .Via(identity)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_simple_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identityBidi = new IdentityBidiGraphStage();                  var identity = BidiFlow.FromGraph(identityBidi).Join(Flow.Identity<int>().Select(x => x));                    var task = Source.From(Enumerable.Range(1' 10))                      .Via(identity)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_simple_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identityBidi = new IdentityBidiGraphStage();                  var identity = BidiFlow.FromGraph(identityBidi).Join(Flow.Identity<int>().Select(x => x));                    var task = Source.From(Enumerable.Range(1' 10))                      .Via(identity)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_simple_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identityBidi = new IdentityBidiGraphStage();                  var identity = BidiFlow.FromGraph(identityBidi).Join(Flow.Identity<int>().Select(x => x));                    var task = Source.From(Enumerable.Range(1' 10))                      .Via(identity)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_and_reuse_a_simple_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identityBidi = new IdentityBidiGraphStage();                  var identityBidiFlow = BidiFlow.FromGraph(identityBidi);                  var identity = identityBidiFlow.Atop(identityBidiFlow).Atop(identityBidiFlow).Join(Flow.Identity<int>().Select(x => x));                    var task = Source.From(Enumerable.Range(1' 10))                      .Via(identity)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_and_reuse_a_simple_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identityBidi = new IdentityBidiGraphStage();                  var identityBidiFlow = BidiFlow.FromGraph(identityBidi);                  var identity = identityBidiFlow.Atop(identityBidiFlow).Atop(identityBidiFlow).Join(Flow.Identity<int>().Select(x => x));                    var task = Source.From(Enumerable.Range(1' 10))                      .Via(identity)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_and_reuse_a_simple_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identityBidi = new IdentityBidiGraphStage();                  var identityBidiFlow = BidiFlow.FromGraph(identityBidi);                  var identity = identityBidiFlow.Atop(identityBidiFlow).Atop(identityBidiFlow).Join(Flow.Identity<int>().Select(x => x));                    var task = Source.From(Enumerable.Range(1' 10))                      .Via(identity)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_and_reuse_a_simple_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var identityBidi = new IdentityBidiGraphStage();                  var identityBidiFlow = BidiFlow.FromGraph(identityBidi);                  var identity = identityBidiFlow.Atop(identityBidiFlow).Atop(identityBidiFlow).Join(Flow.Identity<int>().Select(x => x));                    var task = Source.From(Enumerable.Range(1' 10))                      .Via(identity)                      .Grouped(100)                      .RunWith(Sink.First<IEnumerable<int>>()' _materializer);                    task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  task.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_rotated_identity_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var rotatedBidi = new RotatedIdentityBidiGraphStage();                  var takeAll = Flow.Identity<int>()                      .Grouped(200)                      .ToMaterialized(Sink.First<IEnumerable<int>>()' Keep.Right);                    var tasks = RunnableGraph.FromGraph(                      GraphDsl.Create(takeAll' takeAll' Keep.Both' (builder' shape1' shape2) =>                      {                          var bidi = builder.Add(rotatedBidi);                          var source1 = builder.Add(Source.From(Enumerable.Range(1' 10)));                          var source2 = builder.Add(Source.From(Enumerable.Range(1' 100)));                            builder                              .From(source1).To(bidi.Inlet1)                              .To(shape2.Inlet).From(bidi.Outlet2)                                .From(source2).To(bidi.Inlet2)                              .To(shape1.Inlet).From(bidi.Outlet1);                            return ClosedShape.Instance;                      })).Run(_materializer);                    tasks.Item1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  tasks.Item2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    tasks.Item1.Result.Should().Equal(Enumerable.Range(1' 100));                  tasks.Item2.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_rotated_identity_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var rotatedBidi = new RotatedIdentityBidiGraphStage();                  var takeAll = Flow.Identity<int>()                      .Grouped(200)                      .ToMaterialized(Sink.First<IEnumerable<int>>()' Keep.Right);                    var tasks = RunnableGraph.FromGraph(                      GraphDsl.Create(takeAll' takeAll' Keep.Both' (builder' shape1' shape2) =>                      {                          var bidi = builder.Add(rotatedBidi);                          var source1 = builder.Add(Source.From(Enumerable.Range(1' 10)));                          var source2 = builder.Add(Source.From(Enumerable.Range(1' 100)));                            builder                              .From(source1).To(bidi.Inlet1)                              .To(shape2.Inlet).From(bidi.Outlet2)                                .From(source2).To(bidi.Inlet2)                              .To(shape1.Inlet).From(bidi.Outlet1);                            return ClosedShape.Instance;                      })).Run(_materializer);                    tasks.Item1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  tasks.Item2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    tasks.Item1.Result.Should().Equal(Enumerable.Range(1' 100));                  tasks.Item2.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_rotated_identity_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var rotatedBidi = new RotatedIdentityBidiGraphStage();                  var takeAll = Flow.Identity<int>()                      .Grouped(200)                      .ToMaterialized(Sink.First<IEnumerable<int>>()' Keep.Right);                    var tasks = RunnableGraph.FromGraph(                      GraphDsl.Create(takeAll' takeAll' Keep.Both' (builder' shape1' shape2) =>                      {                          var bidi = builder.Add(rotatedBidi);                          var source1 = builder.Add(Source.From(Enumerable.Range(1' 10)));                          var source2 = builder.Add(Source.From(Enumerable.Range(1' 100)));                            builder                              .From(source1).To(bidi.Inlet1)                              .To(shape2.Inlet).From(bidi.Outlet2)                                .From(source2).To(bidi.Inlet2)                              .To(shape1.Inlet).From(bidi.Outlet1);                            return ClosedShape.Instance;                      })).Run(_materializer);                    tasks.Item1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  tasks.Item2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    tasks.Item1.Result.Should().Equal(Enumerable.Range(1' 100));                  tasks.Item2.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_rotated_identity_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var rotatedBidi = new RotatedIdentityBidiGraphStage();                  var takeAll = Flow.Identity<int>()                      .Grouped(200)                      .ToMaterialized(Sink.First<IEnumerable<int>>()' Keep.Right);                    var tasks = RunnableGraph.FromGraph(                      GraphDsl.Create(takeAll' takeAll' Keep.Both' (builder' shape1' shape2) =>                      {                          var bidi = builder.Add(rotatedBidi);                          var source1 = builder.Add(Source.From(Enumerable.Range(1' 10)));                          var source2 = builder.Add(Source.From(Enumerable.Range(1' 100)));                            builder                              .From(source1).To(bidi.Inlet1)                              .To(shape2.Inlet).From(bidi.Outlet2)                                .From(source2).To(bidi.Inlet2)                              .To(shape1.Inlet).From(bidi.Outlet1);                            return ClosedShape.Instance;                      })).Run(_materializer);                    tasks.Item1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  tasks.Item2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    tasks.Item1.Result.Should().Equal(Enumerable.Range(1' 100));                  tasks.Item2.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_rotated_identity_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var rotatedBidi = new RotatedIdentityBidiGraphStage();                  var takeAll = Flow.Identity<int>()                      .Grouped(200)                      .ToMaterialized(Sink.First<IEnumerable<int>>()' Keep.Right);                    var tasks = RunnableGraph.FromGraph(                      GraphDsl.Create(takeAll' takeAll' Keep.Both' (builder' shape1' shape2) =>                      {                          var bidi = builder.Add(rotatedBidi);                          var source1 = builder.Add(Source.From(Enumerable.Range(1' 10)));                          var source2 = builder.Add(Source.From(Enumerable.Range(1' 100)));                            builder                              .From(source1).To(bidi.Inlet1)                              .To(shape2.Inlet).From(bidi.Outlet2)                                .From(source2).To(bidi.Inlet2)                              .To(shape1.Inlet).From(bidi.Outlet1);                            return ClosedShape.Instance;                      })).Run(_materializer);                    tasks.Item1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  tasks.Item2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    tasks.Item1.Result.Should().Equal(Enumerable.Range(1' 100));                  tasks.Item2.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_rotated_identity_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var rotatedBidi = new RotatedIdentityBidiGraphStage();                  var takeAll = Flow.Identity<int>()                      .Grouped(200)                      .ToMaterialized(Sink.First<IEnumerable<int>>()' Keep.Right);                    var tasks = RunnableGraph.FromGraph(                      GraphDsl.Create(takeAll' takeAll' Keep.Both' (builder' shape1' shape2) =>                      {                          var bidi = builder.Add(rotatedBidi);                          var source1 = builder.Add(Source.From(Enumerable.Range(1' 10)));                          var source2 = builder.Add(Source.From(Enumerable.Range(1' 100)));                            builder                              .From(source1).To(bidi.Inlet1)                              .To(shape2.Inlet).From(bidi.Outlet2)                                .From(source2).To(bidi.Inlet2)                              .To(shape1.Inlet).From(bidi.Outlet1);                            return ClosedShape.Instance;                      })).Run(_materializer);                    tasks.Item1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  tasks.Item2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    tasks.Item1.Result.Should().Equal(Enumerable.Range(1' 100));                  tasks.Item2.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_interpret_a_rotated_identity_bidi_stage,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var rotatedBidi = new RotatedIdentityBidiGraphStage();                  var takeAll = Flow.Identity<int>()                      .Grouped(200)                      .ToMaterialized(Sink.First<IEnumerable<int>>()' Keep.Right);                    var tasks = RunnableGraph.FromGraph(                      GraphDsl.Create(takeAll' takeAll' Keep.Both' (builder' shape1' shape2) =>                      {                          var bidi = builder.Add(rotatedBidi);                          var source1 = builder.Add(Source.From(Enumerable.Range(1' 10)));                          var source2 = builder.Add(Source.From(Enumerable.Range(1' 100)));                            builder                              .From(source1).To(bidi.Inlet1)                              .To(shape2.Inlet).From(bidi.Outlet2)                                .From(source2).To(bidi.Inlet2)                              .To(shape1.Inlet).From(bidi.Outlet1);                            return ClosedShape.Instance;                      })).Run(_materializer);                    tasks.Item1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  tasks.Item2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                    tasks.Item1.Result.Should().Equal(Enumerable.Range(1' 100));                  tasks.Item2.Result.Should().Equal(Enumerable.Range(1' 10));              }' _materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_report_errors_if_an_error_happens_for_an_already_completed_stage,The following statement contains a magic number: EventFilter.Exception<ArgumentException>(new Regex("Error in stage.*")).ExpectOne(() =>              {                  Source.FromGraph(failyStage).RunWith(Sink.Ignore<int>()' _materializer).Wait(TimeSpan.FromSeconds(3));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_properly_handle_case_where_a_stage_fails_before_subscription_happens,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                    var evilLatch = new CountdownEvent(1);                    // This is a somewhat tricky test setup. We need the following conditions to be met:                  //  - the stage should fail its output port before the ExposedPublisher message is processed                  //  - the enclosing actor (and therefore the stage) should be kept alive until a stray SubscribePending arrives                  //    that has been enqueued after ExposedPublisher message has been enqueued' but before it has been processed                  //                  // To achieve keeping alive the stage for long enough' we use an extra input and output port and instead                  // of failing the stage' we fail only the output port under test.                  //                  // To delay the startup long enough' so both ExposedPublisher and SubscribePending are enqueued' we use an evil                  // latch to delay the preStart() (which in turn delays the enclosing actor's preStart).                  var failyStage = new FailyInPreStartGraphStage(evilLatch);                    var downstream0 = TestSubscriber.CreateProbe<int>(this);                  var downstream1 = TestSubscriber.CreateProbe<int>(this);                    var upstream = TestPublisher.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var faily = b.Add(failyStage);                        b.From(Source.FromPublisher(upstream)).To(faily.In);                      b.From(faily.Out0).To(Sink.FromSubscriber(downstream0));                      b.From(faily.Out1).To(Sink.FromSubscriber(downstream1));                        return ClosedShape.Instance;                  })).Run(noFuzzMaterializer);                    evilLatch.Signal();                  var ex = downstream0.ExpectSubscriptionAndError();                  ex.Should().BeOfType<TestException>();                  ex.Message.Should().Be("Test failure in PreStart");                    // if an NRE would happen due to unset exposedPublisher (see #19338)' this would receive a failure instead                  // of the actual element                  downstream1.Request(1);                  upstream.SendNext(42);                  downstream1.ExpectNext(42);                    upstream.SendComplete();                  downstream1.ExpectComplete();              }' noFuzzMaterializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,ActorGraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,ActorGraphInterpreter_should_be_able_to_properly_handle_case_where_a_stage_fails_before_subscription_happens,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                    var evilLatch = new CountdownEvent(1);                    // This is a somewhat tricky test setup. We need the following conditions to be met:                  //  - the stage should fail its output port before the ExposedPublisher message is processed                  //  - the enclosing actor (and therefore the stage) should be kept alive until a stray SubscribePending arrives                  //    that has been enqueued after ExposedPublisher message has been enqueued' but before it has been processed                  //                  // To achieve keeping alive the stage for long enough' we use an extra input and output port and instead                  // of failing the stage' we fail only the output port under test.                  //                  // To delay the startup long enough' so both ExposedPublisher and SubscribePending are enqueued' we use an evil                  // latch to delay the preStart() (which in turn delays the enclosing actor's preStart).                  var failyStage = new FailyInPreStartGraphStage(evilLatch);                    var downstream0 = TestSubscriber.CreateProbe<int>(this);                  var downstream1 = TestSubscriber.CreateProbe<int>(this);                    var upstream = TestPublisher.CreateProbe<int>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var faily = b.Add(failyStage);                        b.From(Source.FromPublisher(upstream)).To(faily.In);                      b.From(faily.Out0).To(Sink.FromSubscriber(downstream0));                      b.From(faily.Out1).To(Sink.FromSubscriber(downstream1));                        return ClosedShape.Instance;                  })).Run(noFuzzMaterializer);                    evilLatch.Signal();                  var ex = downstream0.ExpectSubscriptionAndError();                  ex.Should().BeOfType<TestException>();                  ex.Message.Should().Be("Test failure in PreStart");                    // if an NRE would happen due to unset exposedPublisher (see #19338)' this would receive a failure instead                  // of the actual element                  downstream1.Request(1);                  upstream.SendNext(42);                  downstream1.ExpectNext(42);                    upstream.SendComplete();                  downstream1.ExpectComplete();              }' noFuzzMaterializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\ActorGraphInterpreterSpec.cs,PreStart,The following statement contains a magic number: _evilLatch.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreterSpec,The following statement contains a magic number: _broadcast = new Broadcast<int>(2);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreterSpec,The following statement contains a magic number: _merge = new Merge<int>(2);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreterSpec,The following statement contains a magic number: _balance = new Balance<int>(2);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_chained_identity,The following statement contains a magic number: WithTestSetup((setup' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<int>("sink");                    // Constructing an assembly by hand and resolving ambiguities                  var assembly = new GraphAssembly(                      stages: new IGraphStageWithMaterializedValue<Shape' object>[] {_identity' _identity}'                      originalAttributes: new[] {Attributes.None' Attributes.None}'                      inlets: new Inlet[] {_identity.Inlet' _identity.Inlet' null}'                      inletOwners: new[] {0' 1' -1}'                      outlets: new Outlet[] {null' _identity.Outlet' _identity.Outlet}'                      outletOwners: new[] {-1' 0' 1}                      );                    setup.ManualInit(assembly);                  setup.Interpreter.AttachDownstreamBoundary(2' sink);                  setup.Interpreter.AttachUpstreamBoundary(0' source);                  setup.Interpreter.Init(null);                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_detacher_stage,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(_detach)                      .Connect(source' _detach.Shape.Inlet)                      .Connect(_detach.Shape.Outlet' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1)' new RequestOne(source));                    // Source waits                  source.OnNext(2);                  lastEvents().Should().BeEmpty();                    // "PushAndPull                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2)' new RequestOne(source));                    // Source waits                  sink.RequestOne();                  lastEvents().Should().BeEmpty();                    // "PushAndPull                  source.OnNext(3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 3)' new RequestOne(source));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_detacher_stage,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(_detach)                      .Connect(source' _detach.Shape.Inlet)                      .Connect(_detach.Shape.Outlet' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1)' new RequestOne(source));                    // Source waits                  source.OnNext(2);                  lastEvents().Should().BeEmpty();                    // "PushAndPull                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2)' new RequestOne(source));                    // Source waits                  sink.RequestOne();                  lastEvents().Should().BeEmpty();                    // "PushAndPull                  source.OnNext(3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 3)' new RequestOne(source));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_detacher_stage,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(_detach)                      .Connect(source' _detach.Shape.Inlet)                      .Connect(_detach.Shape.Outlet' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1)' new RequestOne(source));                    // Source waits                  source.OnNext(2);                  lastEvents().Should().BeEmpty();                    // "PushAndPull                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2)' new RequestOne(source));                    // Source waits                  sink.RequestOne();                  lastEvents().Should().BeEmpty();                    // "PushAndPull                  source.OnNext(3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 3)' new RequestOne(source));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_detacher_stage,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(_detach)                      .Connect(source' _detach.Shape.Inlet)                      .Connect(_detach.Shape.Outlet' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1)' new RequestOne(source));                    // Source waits                  source.OnNext(2);                  lastEvents().Should().BeEmpty();                    // "PushAndPull                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2)' new RequestOne(source));                    // Source waits                  sink.RequestOne();                  lastEvents().Should().BeEmpty();                    // "PushAndPull                  source.OnNext(3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 3)' new RequestOne(source));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_Zip,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<string>("source2");                  var sink = setup.NewDownstreamProbe<Tuple<int' string>>("sink");                    builder(_zip)                      .Connect(source1' _zip.In0)                      .Connect(source2' _zip.In1)                      .Connect(_zip.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    source1.OnNext(42);                  lastEvents().Should().BeEmpty();                    source2.OnNext("Meaning of life");                  lastEvents()                      .Should()                      .Equal(new OnNext(sink' new Tuple<int' string>(42' "Meaning of life"))' new RequestOne(source1)'                          new RequestOne(source2));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_Zip,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<string>("source2");                  var sink = setup.NewDownstreamProbe<Tuple<int' string>>("sink");                    builder(_zip)                      .Connect(source1' _zip.In0)                      .Connect(source2' _zip.In1)                      .Connect(_zip.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    source1.OnNext(42);                  lastEvents().Should().BeEmpty();                    source2.OnNext("Meaning of life");                  lastEvents()                      .Should()                      .Equal(new OnNext(sink' new Tuple<int' string>(42' "Meaning of life"))' new RequestOne(source1)'                          new RequestOne(source2));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_broadcast_zip,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<Tuple<int' int>>("sink");                  var zip = new Zip<int' int>();                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] {zip' _broadcast})                      .Connect(source' _broadcast.In)                      .Connect(_broadcast.Out(0)' zip.In0)                      .Connect(_broadcast.Out(1)' zip.In1)                      .Connect(zip.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' new Tuple<int' int>(1' 1))' new RequestOne(source));                    sink.RequestOne();                  source.OnNext(2);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' new Tuple<int' int>(2' 2))' new RequestOne(source));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_broadcast_zip,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<Tuple<int' int>>("sink");                  var zip = new Zip<int' int>();                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] {zip' _broadcast})                      .Connect(source' _broadcast.In)                      .Connect(_broadcast.Out(0)' zip.In0)                      .Connect(_broadcast.Out(1)' zip.In1)                      .Connect(zip.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' new Tuple<int' int>(1' 1))' new RequestOne(source));                    sink.RequestOne();                  source.OnNext(2);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' new Tuple<int' int>(2' 2))' new RequestOne(source));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_broadcast_zip,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<Tuple<int' int>>("sink");                  var zip = new Zip<int' int>();                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] {zip' _broadcast})                      .Connect(source' _broadcast.In)                      .Connect(_broadcast.Out(0)' zip.In0)                      .Connect(_broadcast.Out(1)' zip.In1)                      .Connect(zip.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' new Tuple<int' int>(1' 1))' new RequestOne(source));                    sink.RequestOne();                  source.OnNext(2);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' new Tuple<int' int>(2' 2))' new RequestOne(source));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_zip_broadcast,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<int>("source2");                  var sink1 = setup.NewDownstreamProbe<Tuple<int' int>>("sink1");                  var sink2 = setup.NewDownstreamProbe<Tuple<int' int>>("sink2");                  var zip = new Zip<int' int>();                  var broadcast = new Broadcast<Tuple<int' int>>(2);                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] {broadcast' zip})                      .Connect(source1' zip.In0)                      .Connect(source2' zip.In1)                      .Connect(zip.Out' broadcast.In)                      .Connect(broadcast.Out(0)' sink1)                      .Connect(broadcast.Out(1)' sink2)                      .Init();                    lastEvents().Should().BeEmpty();                    sink1.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    sink2.RequestOne();                    source1.OnNext(1);                  lastEvents().Should().BeEmpty();                    source2.OnNext(2);                  lastEvents()                      .Should()                      .Equal(new RequestOne(source1)' new RequestOne(source2)'                          new OnNext(sink1' new Tuple<int' int>(1' 2))' new OnNext(sink2' new Tuple<int' int>(1' 2)));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_zip_broadcast,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<int>("source2");                  var sink1 = setup.NewDownstreamProbe<Tuple<int' int>>("sink1");                  var sink2 = setup.NewDownstreamProbe<Tuple<int' int>>("sink2");                  var zip = new Zip<int' int>();                  var broadcast = new Broadcast<Tuple<int' int>>(2);                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] {broadcast' zip})                      .Connect(source1' zip.In0)                      .Connect(source2' zip.In1)                      .Connect(zip.Out' broadcast.In)                      .Connect(broadcast.Out(0)' sink1)                      .Connect(broadcast.Out(1)' sink2)                      .Init();                    lastEvents().Should().BeEmpty();                    sink1.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    sink2.RequestOne();                    source1.OnNext(1);                  lastEvents().Should().BeEmpty();                    source2.OnNext(2);                  lastEvents()                      .Should()                      .Equal(new RequestOne(source1)' new RequestOne(source2)'                          new OnNext(sink1' new Tuple<int' int>(1' 2))' new OnNext(sink2' new Tuple<int' int>(1' 2)));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_zip_broadcast,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<int>("source2");                  var sink1 = setup.NewDownstreamProbe<Tuple<int' int>>("sink1");                  var sink2 = setup.NewDownstreamProbe<Tuple<int' int>>("sink2");                  var zip = new Zip<int' int>();                  var broadcast = new Broadcast<Tuple<int' int>>(2);                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] {broadcast' zip})                      .Connect(source1' zip.In0)                      .Connect(source2' zip.In1)                      .Connect(zip.Out' broadcast.In)                      .Connect(broadcast.Out(0)' sink1)                      .Connect(broadcast.Out(1)' sink2)                      .Init();                    lastEvents().Should().BeEmpty();                    sink1.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    sink2.RequestOne();                    source1.OnNext(1);                  lastEvents().Should().BeEmpty();                    source2.OnNext(2);                  lastEvents()                      .Should()                      .Equal(new RequestOne(source1)' new RequestOne(source2)'                          new OnNext(sink1' new Tuple<int' int>(1' 2))' new OnNext(sink2' new Tuple<int' int>(1' 2)));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_zip_broadcast,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<int>("source2");                  var sink1 = setup.NewDownstreamProbe<Tuple<int' int>>("sink1");                  var sink2 = setup.NewDownstreamProbe<Tuple<int' int>>("sink2");                  var zip = new Zip<int' int>();                  var broadcast = new Broadcast<Tuple<int' int>>(2);                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] {broadcast' zip})                      .Connect(source1' zip.In0)                      .Connect(source2' zip.In1)                      .Connect(zip.Out' broadcast.In)                      .Connect(broadcast.Out(0)' sink1)                      .Connect(broadcast.Out(1)' sink2)                      .Init();                    lastEvents().Should().BeEmpty();                    sink1.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    sink2.RequestOne();                    source1.OnNext(1);                  lastEvents().Should().BeEmpty();                    source2.OnNext(2);                  lastEvents()                      .Should()                      .Equal(new RequestOne(source1)' new RequestOne(source2)'                          new OnNext(sink1' new Tuple<int' int>(1' 2))' new OnNext(sink2' new Tuple<int' int>(1' 2)));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_merge,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<int>("source2");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(_merge)                      .Connect(source1' _merge.In(0))                      .Connect(source2' _merge.In(1))                      .Connect(_merge.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    source1.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1)' new RequestOne(source1));                    source2.OnNext(2);                  lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source2.OnNext(3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 3)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source1.OnNext(4);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 4)' new RequestOne(source1));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_merge,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<int>("source2");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(_merge)                      .Connect(source1' _merge.In(0))                      .Connect(source2' _merge.In(1))                      .Connect(_merge.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    source1.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1)' new RequestOne(source1));                    source2.OnNext(2);                  lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source2.OnNext(3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 3)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source1.OnNext(4);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 4)' new RequestOne(source1));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_merge,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<int>("source2");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(_merge)                      .Connect(source1' _merge.In(0))                      .Connect(source2' _merge.In(1))                      .Connect(_merge.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    source1.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1)' new RequestOne(source1));                    source2.OnNext(2);                  lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source2.OnNext(3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 3)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source1.OnNext(4);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 4)' new RequestOne(source1));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_merge,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<int>("source2");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(_merge)                      .Connect(source1' _merge.In(0))                      .Connect(source2' _merge.In(1))                      .Connect(_merge.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    source1.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1)' new RequestOne(source1));                    source2.OnNext(2);                  lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source2.OnNext(3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 3)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source1.OnNext(4);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 4)' new RequestOne(source1));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_merge,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<int>("source2");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(_merge)                      .Connect(source1' _merge.In(0))                      .Connect(source2' _merge.In(1))                      .Connect(_merge.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    source1.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1)' new RequestOne(source1));                    source2.OnNext(2);                  lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source2.OnNext(3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 3)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source1.OnNext(4);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 4)' new RequestOne(source1));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_merge,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source1 = setup.NewUpstreamProbe<int>("source1");                  var source2 = setup.NewUpstreamProbe<int>("source2");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(_merge)                      .Connect(source1' _merge.In(0))                      .Connect(source2' _merge.In(1))                      .Connect(_merge.Out' sink)                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source1)' new RequestOne(source2));                    source1.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 1)' new RequestOne(source1));                    source2.OnNext(2);                  lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source2.OnNext(3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 3)' new RequestOne(source2));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source1.OnNext(4);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 4)' new RequestOne(source1));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_balance,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink1 = setup.NewDownstreamProbe<int>("sink1");                  var sink2 = setup.NewDownstreamProbe<int>("sink2");                    builder(_balance)                      .Connect(source' _balance.In)                      .Connect(_balance.Out(0)' sink1)                      .Connect(_balance.Out(1)' sink2)                      .Init();                    lastEvents().Should().BeEmpty();                    sink1.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    sink2.RequestOne();                  lastEvents().Should().BeEmpty();                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink1' 1)' new RequestOne(source));                    source.OnNext(2);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink2' 2));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_balance,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink1 = setup.NewDownstreamProbe<int>("sink1");                  var sink2 = setup.NewDownstreamProbe<int>("sink2");                    builder(_balance)                      .Connect(source' _balance.In)                      .Connect(_balance.Out(0)' sink1)                      .Connect(_balance.Out(1)' sink2)                      .Init();                    lastEvents().Should().BeEmpty();                    sink1.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    sink2.RequestOne();                  lastEvents().Should().BeEmpty();                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink1' 1)' new RequestOne(source));                    source.OnNext(2);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink2' 2));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_non_divergent_cycle,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] { _merge' _balance })                      .Connect(source' _merge.In(0))                      .Connect(_merge.Out' _balance.In)                      .Connect(_balance.Out(0)' sink)                      .Connect(_balance.Out(1)' _merge.In(1))                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new RequestOne(source)' new OnNext(sink' 1));                    // Token enters merge-balance cycle and gets stuck                  source.OnNext(2);                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    // Unstuck it                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_non_divergent_cycle,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] { _merge' _balance })                      .Connect(source' _merge.In(0))                      .Connect(_merge.Out' _balance.In)                      .Connect(_balance.Out(0)' sink)                      .Connect(_balance.Out(1)' _merge.In(1))                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new RequestOne(source)' new OnNext(sink' 1));                    // Token enters merge-balance cycle and gets stuck                  source.OnNext(2);                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    // Unstuck it                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_divergent_cycle,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] { _detach' _balance' _merge })                      .Connect(source' _merge.In(0))                      .Connect(_merge.Out' _balance.In)                      .Connect(_balance.Out(0)' sink)                      .Connect(_balance.Out(1)' _detach.Shape.Inlet)                      .Connect(_detach.Shape.Outlet' _merge.In(1))                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new RequestOne(source)' new OnNext(sink' 1));                    // Token enters merge-balance cycle and spins until event limit                  // Without the limit this would spin forever (where forever = int.MaxValue iterations)                  source.OnNext(2' eventLimit: 1000);                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    // The cycle is still alive and kicking' just suspended due to the event limit                  setup.Interpreter.IsSuspended.Should().BeTrue();                    // Do to the fairness properties of both the interpreter event queue and the balance stage                  // the element will eventually leave the cycle and reaches the sink.                  // This should not hang even though we do not have an event limit set                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2));                    // The cycle is now empty                  setup.Interpreter.IsSuspended.Should().BeFalse();              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_divergent_cycle,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] { _detach' _balance' _merge })                      .Connect(source' _merge.In(0))                      .Connect(_merge.Out' _balance.In)                      .Connect(_balance.Out(0)' sink)                      .Connect(_balance.Out(1)' _detach.Shape.Inlet)                      .Connect(_detach.Shape.Outlet' _merge.In(1))                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new RequestOne(source)' new OnNext(sink' 1));                    // Token enters merge-balance cycle and spins until event limit                  // Without the limit this would spin forever (where forever = int.MaxValue iterations)                  source.OnNext(2' eventLimit: 1000);                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    // The cycle is still alive and kicking' just suspended due to the event limit                  setup.Interpreter.IsSuspended.Should().BeTrue();                    // Do to the fairness properties of both the interpreter event queue and the balance stage                  // the element will eventually leave the cycle and reaches the sink.                  // This should not hang even though we do not have an event limit set                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2));                    // The cycle is now empty                  setup.Interpreter.IsSuspended.Should().BeFalse();              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_divergent_cycle,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<int>("source");                  var sink = setup.NewDownstreamProbe<int>("sink");                    builder(new IGraphStageWithMaterializedValue<Shape' object>[] { _detach' _balance' _merge })                      .Connect(source' _merge.In(0))                      .Connect(_merge.Out' _balance.In)                      .Connect(_balance.Out(0)' sink)                      .Connect(_balance.Out(1)' _detach.Shape.Inlet)                      .Connect(_detach.Shape.Outlet' _merge.In(1))                      .Init();                    lastEvents().Should().BeEmpty();                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext(1);                  lastEvents().Should().BeEquivalentTo(new RequestOne(source)' new OnNext(sink' 1));                    // Token enters merge-balance cycle and spins until event limit                  // Without the limit this would spin forever (where forever = int.MaxValue iterations)                  source.OnNext(2' eventLimit: 1000);                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    // The cycle is still alive and kicking' just suspended due to the event limit                  setup.Interpreter.IsSuspended.Should().BeTrue();                    // Do to the fairness properties of both the interpreter event queue and the balance stage                  // the element will eventually leave the cycle and reaches the sink.                  // This should not hang even though we do not have an event limit set                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' 2));                    // The cycle is now empty                  setup.Interpreter.IsSuspended.Should().BeFalse();              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_buffer,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<string>("source");                  var sink = setup.NewDownstreamProbe<string>("sink");                  var buffer =                      new PushPullGraphStage<string' string>(                          a => new Buffer<string>(2' OverflowStrategy.Backpressure)' Attributes.None);                    builder(buffer)                      .Connect(source' buffer.Shape.Inlet)                      .Connect(buffer.Shape.Outlet' sink)                      .Init();                    setup.StepAll();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source.OnNext("A");                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' "A")' new RequestOne(source));                    source.OnNext("B");                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext("C"' eventLimit: 0);                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' "B")' new RequestOne(source));                    sink.RequestOne(eventLimit: 0);                  source.OnComplete(eventLimit: 3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' "C"));                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnComplete(sink));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,GraphInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpec.cs,GraphInterpreter_should_implement_buffer,The following statement contains a magic number: WithTestSetup((setup' builder' lastEvents) =>              {                  var source = setup.NewUpstreamProbe<string>("source");                  var sink = setup.NewDownstreamProbe<string>("sink");                  var buffer =                      new PushPullGraphStage<string' string>(                          a => new Buffer<string>(2' OverflowStrategy.Backpressure)' Attributes.None);                    builder(buffer)                      .Connect(source' buffer.Shape.Inlet)                      .Connect(buffer.Shape.Outlet' sink)                      .Init();                    setup.StepAll();                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    sink.RequestOne();                  lastEvents().Should().BeEmpty();                    source.OnNext("A");                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' "A")' new RequestOne(source));                    source.OnNext("B");                  lastEvents().Should().BeEquivalentTo(new RequestOne(source));                    source.OnNext("C"' eventLimit: 0);                  sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' "B")' new RequestOne(source));                    sink.RequestOne(eventLimit: 0);                  source.OnComplete(eventLimit: 3);                  lastEvents().Should().BeEquivalentTo(new OnNext(sink' "C"));                    sink.RequestOne();                  lastEvents().Should().BeEquivalentTo(new OnComplete(sink));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_emit_failure_when_op_throws,The following statement contains a magic number: WithOneBoundedSetup(new Select<int' int>(x => { if (x == 0) throw TE(); return x; }' stoppingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(0); // boom                      lastEvents().Should().BeEquivalentTo(new Cancel()' new OnError(TE()));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_emit_failure_when_op_throws,The following statement contains a magic number: WithOneBoundedSetup(new Select<int' int>(x => { if (x == 0) throw TE(); return x; }' stoppingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(0); // boom                      lastEvents().Should().BeEquivalentTo(new Cancel()' new OnError(TE()));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_emit_failure_when_op_throws_in_middle_of_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' stoppingDecider)'                  new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' stoppingDecider)'                  new Select<int' int>(x => x + 100' stoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(113));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new Cancel()' new OnError(TE()));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_emit_failure_when_op_throws_in_middle_of_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' stoppingDecider)'                  new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' stoppingDecider)'                  new Select<int' int>(x => x + 100' stoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(113));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new Cancel()' new OnError(TE()));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_emit_failure_when_op_throws_in_middle_of_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' stoppingDecider)'                  new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' stoppingDecider)'                  new Select<int' int>(x => x + 100' stoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(113));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new Cancel()' new OnError(TE()));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_emit_failure_when_op_throws_in_middle_of_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' stoppingDecider)'                  new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' stoppingDecider)'                  new Select<int' int>(x => x + 100' stoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(113));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new Cancel()' new OnError(TE()));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_in_middle_of_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider)'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(113));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(114));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_in_middle_of_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider)'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(113));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(114));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_in_middle_of_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider)'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(113));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(114));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_in_middle_of_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider)'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(113));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(114));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_in_middle_of_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider)'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(113));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(114));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_in_middle_of_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider)'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(113));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(114));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(3))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14' 15}));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(3))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14' 15}));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(3))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14' 15}));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(3))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14' 15}));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(3))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14' 15}));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(3))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14' 15}));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(3))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14' 15}));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(3))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14' 15}));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_complete_after_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(1000))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_complete_after_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(1000))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_complete_after_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(1000))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_complete_after_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(1000))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_complete_after_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(1000))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_complete_after_resume_when_Map_throws_before_Grouped,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[] {                  ToGraphStage(new Select<int' int>(x => x + 1' resumingDecider))'                  ToGraphStage(new Select<int' int>(x => { if (x == 0) throw TE(); return x + 10; }' resumingDecider))'                  ToGraphStage(new Grouped<int>(1000))              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new[] {13' 14})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws_after_context_Push,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      // The element has been pushed before the exception' there is no way back                      lastEvents().Should().BeEquivalentTo(new OnNext(100));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws_after_context_Push,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      // The element has been pushed before the exception' there is no way back                      lastEvents().Should().BeEquivalentTo(new OnNext(100));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws_after_context_Push,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      // The element has been pushed before the exception' there is no way back                      lastEvents().Should().BeEquivalentTo(new OnNext(100));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws_after_context_Push,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      // The element has been pushed before the exception' there is no way back                      lastEvents().Should().BeEquivalentTo(new OnNext(100));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws_after_context_Push,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      // The element has been pushed before the exception' there is no way back                      lastEvents().Should().BeEquivalentTo(new OnNext(100));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_OnPush_throws_after_context_Push,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-1); // boom                      // The element has been pushed before the exception' there is no way back                      lastEvents().Should().BeEquivalentTo(new OnNext(100));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(104));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_OnPull_throws,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-5); // this will trigger failure of next requestOne (pull)                      lastEvents().Should().BeEquivalentTo(new OnNext(99));                        downstream.RequestOne(); // boom                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_OnPull_throws,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-5); // this will trigger failure of next requestOne (pull)                      lastEvents().Should().BeEquivalentTo(new OnNext(99));                        downstream.RequestOne(); // boom                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_OnPull_throws,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-5); // this will trigger failure of next requestOne (pull)                      lastEvents().Should().BeEquivalentTo(new OnNext(99));                        downstream.RequestOne(); // boom                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_OnPull_throws,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-5); // this will trigger failure of next requestOne (pull)                      lastEvents().Should().BeEquivalentTo(new OnNext(99));                        downstream.RequestOne(); // boom                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_OnPull_throws,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[] {                  new Select<int' int>(x => x + 1' resumingDecider)'                  stage'                  new Select<int' int>(x => x + 100' resumingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(103));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(-5); // this will trigger failure of next requestOne (pull)                      lastEvents().Should().BeEquivalentTo(new OnNext(99));                        downstream.RequestOne(); // boom                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Filter_throws,The following statement contains a magic number: WithOneBoundedSetup(new Where<int>(x => { if (x == 0) throw TE(); return true; }' resumingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(0); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Filter_throws,The following statement contains a magic number: WithOneBoundedSetup(new Where<int>(x => { if (x == 0) throw TE(); return true; }' resumingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(0); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Filter_throws,The following statement contains a magic number: WithOneBoundedSetup(new Where<int>(x => { if (x == 0) throw TE(); return true; }' resumingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(0); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Filter_throws,The following statement contains a magic number: WithOneBoundedSetup(new Where<int>(x => { if (x == 0) throw TE(); return true; }' resumingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(0); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' resumingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(7)); // 1 + 2 + 4                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' resumingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(7)); // 1 + 2 + 4                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' resumingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(7)); // 1 + 2 + 4                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' resumingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(7)); // 1 + 2 + 4                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' resumingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(7)); // 1 + 2 + 4                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_resume_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' resumingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(7)); // 1 + 2 + 4                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' restartingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(1)); // starts over again                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(20);                      lastEvents().Should().BeEquivalentTo(new OnNext(25)); // 1 + 4 + 25                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' restartingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(1)); // starts over again                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(20);                      lastEvents().Should().BeEquivalentTo(new OnNext(25)); // 1 + 4 + 25                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' restartingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(1)); // starts over again                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(20);                      lastEvents().Should().BeEquivalentTo(new OnNext(25)); // 1 + 4 + 25                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' restartingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(1)); // starts over again                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(20);                      lastEvents().Should().BeEquivalentTo(new OnNext(25)); // 1 + 4 + 25                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' restartingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(1)); // starts over again                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(20);                      lastEvents().Should().BeEquivalentTo(new OnNext(25)); // 1 + 4 + 25                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' restartingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(1)); // starts over again                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(20);                      lastEvents().Should().BeEquivalentTo(new OnNext(25)); // 1 + 4 + 25                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' restartingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(1)); // starts over again                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(20);                      lastEvents().Should().BeEquivalentTo(new OnNext(25)); // 1 + 4 + 25                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_restart_when_Scan_throws,The following statement contains a magic number: WithOneBoundedSetup(new Scan<int' int>(1' (acc' x) => { if (x == 10) throw TE(); return acc + x; }' restartingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(10); // boom                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(1)); // starts over again                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      upstream.OnNext(20);                      lastEvents().Should().BeEquivalentTo(new OnNext(25)); // 1 + 4 + 25                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_Expand_seed_throws,The following statement contains a magic number: WithOneBoundedSetup<int>(new Expand<int' int>(x => { if (x == 2) throw TE(); return new List<int> {x}.Concat(Enumerable.Repeat(-Math.Abs(x)' 100)).GetEnumerator(); })'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(-1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(-1));                        upstream.OnNext(2); // boom                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_Expand_seed_throws,The following statement contains a magic number: WithOneBoundedSetup<int>(new Expand<int' int>(x => { if (x == 2) throw TE(); return new List<int> {x}.Concat(Enumerable.Repeat(-Math.Abs(x)' 100)).GetEnumerator(); })'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(-1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(-1));                        upstream.OnNext(2); // boom                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_Expand_seed_throws,The following statement contains a magic number: WithOneBoundedSetup<int>(new Expand<int' int>(x => { if (x == 2) throw TE(); return new List<int> {x}.Concat(Enumerable.Repeat(-Math.Abs(x)' 100)).GetEnumerator(); })'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(-1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(-1));                        upstream.OnNext(2); // boom                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_Expand_extrapolate_throws,The following statement contains a magic number: WithOneBoundedSetup<int>(new Expand<int' int>(x => { if (x == 2) return ContinuallyThrow(); return new List<int> {x}.Concat(Enumerable.Repeat(-Math.Abs(x)' 100)).GetEnumerator(); })'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(-1));                        upstream.OnNext(2); // boom                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_Expand_extrapolate_throws,The following statement contains a magic number: WithOneBoundedSetup<int>(new Expand<int' int>(x => { if (x == 2) return ContinuallyThrow(); return new List<int> {x}.Concat(Enumerable.Repeat(-Math.Abs(x)' 100)).GetEnumerator(); })'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(-1));                        upstream.OnNext(2); // boom                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_Expand_extrapolate_throws,The following statement contains a magic number: WithOneBoundedSetup<int>(new Expand<int' int>(x => { if (x == 2) return ContinuallyThrow(); return new List<int> {x}.Concat(Enumerable.Repeat(-Math.Abs(x)' 100)).GetEnumerator(); })'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(-1));                        upstream.OnNext(2); // boom                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSupervisionSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,Interpreter_error_handling_should_fail_when_OnPull_throws_before_pushing_all_generated_elements,The following statement contains a magic number: Action<Decider' bool> test = (decider' absorbTermination) =>              {                  WithOneBoundedSetup(new OneToManyTestStage(decider' absorbTermination)'                      (lastEvents' upstream' downstream) =>                      {                          downstream.RequestOne();                          lastEvents().Should().BeEquivalentTo(new RequestOne());                            upstream.OnNext(1);                          lastEvents().Should().BeEquivalentTo(new OnNext(1));                            if (absorbTermination)                          {                              upstream.OnComplete();                              lastEvents().Should().BeEmpty();                          }                            downstream.RequestOne();                          lastEvents().Should().BeEquivalentTo(new OnNext(2));                            downstream.RequestOne();                          // 3 => boom                          if (absorbTermination)                              lastEvents().Should().BeEquivalentTo(new OnError(TE()));                          else                              lastEvents().Should().BeEquivalentTo(new OnError(TE())' new Cancel());                      });              };
Magic Number,Akka.Streams.Tests.Implementation.Fusing,OneToManyTestStage,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,OnPush,The following statement contains a magic number: _buffer = new Queue<int>(new [] {element + 1' element + 2' element + 3});
Magic Number,Akka.Streams.Tests.Implementation.Fusing,OneToManyTestStage,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,OnPush,The following statement contains a magic number: _buffer = new Queue<int>(new [] {element + 1' element + 2' element + 3});
Magic Number,Akka.Streams.Tests.Implementation.Fusing,OneToManyTestStage,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSupervisionSpec.cs,OnPull,The following statement contains a magic number: element == 3
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_maps,The following statement contains a magic number: WithOneBoundedSetup(ops' (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                      var tstamp = new Stopwatch();                      tstamp.Start();                        var i = 0;                      while (i < Repetition)                      {                          downstream.RequestOne();                          lastEvents().Should().BeEquivalentTo(new RequestOne());                            upstream.OnNext(i);                          lastEvents().Should().BeEquivalentTo(new OnNext(i + ChainLength));                          i++;                      }                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnComplete());                        tstamp.Stop();                      var time = tstamp.Elapsed.TotalSeconds;                      // Not a real benchmark' just for sanity check                      _helper?.WriteLine($"Chain finished in {time} seconds {ChainLength * Repetition} maps in total and {(ChainLength * Repetition) / (time * 1000 * 1000)} million maps/s");                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_maps,The following statement contains a magic number: WithOneBoundedSetup(ops' (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                      var tstamp = new Stopwatch();                      tstamp.Start();                        var i = 0;                      while (i < Repetition)                      {                          downstream.RequestOne();                          lastEvents().Should().BeEquivalentTo(new RequestOne());                            upstream.OnNext(i);                          lastEvents().Should().BeEquivalentTo(new OnNext(i + ChainLength));                          i++;                      }                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnComplete());                        tstamp.Stop();                      var time = tstamp.Elapsed.TotalSeconds;                      // Not a real benchmark' just for sanity check                      _helper?.WriteLine($"Chain finished in {time} seconds {ChainLength * Repetition} maps in total and {(ChainLength * Repetition) / (time * 1000 * 1000)} million maps/s");                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_maps_with_early_complete,The following statement contains a magic number: ops.Add(new Take<int>(Repetition/2));
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_maps_with_early_complete,The following statement contains a magic number: WithOneBoundedSetup(ops.ToArray()' (lastEvents' upstream' downstream) =>              {                  lastEvents().Should().BeEmpty();                  var tstamp = new Stopwatch();                  tstamp.Start();                    var i = 0;                  while (i < (Repetition/2) - 1)                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(i);                      lastEvents().Should().BeEquivalentTo(new OnNext(i + ChainLength));                      i++;                  }                    downstream.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne());                    upstream.OnNext(0);                  lastEvents().Should().BeEquivalentTo(new OnNext(0 + ChainLength)' new Cancel()' new OnComplete());                    tstamp.Stop();                  var time = tstamp.Elapsed.TotalSeconds;                  // Not a real benchmark' just for sanity check                  _helper?.WriteLine(                      $"Chain finished in {time} seconds {ChainLength*Repetition} maps in total and {(ChainLength*Repetition)/(time*1000*1000)} million maps/s");              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_maps_with_early_complete,The following statement contains a magic number: WithOneBoundedSetup(ops.ToArray()' (lastEvents' upstream' downstream) =>              {                  lastEvents().Should().BeEmpty();                  var tstamp = new Stopwatch();                  tstamp.Start();                    var i = 0;                  while (i < (Repetition/2) - 1)                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(i);                      lastEvents().Should().BeEquivalentTo(new OnNext(i + ChainLength));                      i++;                  }                    downstream.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne());                    upstream.OnNext(0);                  lastEvents().Should().BeEquivalentTo(new OnNext(0 + ChainLength)' new Cancel()' new OnComplete());                    tstamp.Stop();                  var time = tstamp.Elapsed.TotalSeconds;                  // Not a real benchmark' just for sanity check                  _helper?.WriteLine(                      $"Chain finished in {time} seconds {ChainLength*Repetition} maps in total and {(ChainLength*Repetition)/(time*1000*1000)} million maps/s");              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_maps_with_early_complete,The following statement contains a magic number: WithOneBoundedSetup(ops.ToArray()' (lastEvents' upstream' downstream) =>              {                  lastEvents().Should().BeEmpty();                  var tstamp = new Stopwatch();                  tstamp.Start();                    var i = 0;                  while (i < (Repetition/2) - 1)                  {                      downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(i);                      lastEvents().Should().BeEquivalentTo(new OnNext(i + ChainLength));                      i++;                  }                    downstream.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne());                    upstream.OnNext(0);                  lastEvents().Should().BeEquivalentTo(new OnNext(0 + ChainLength)' new Cancel()' new OnComplete());                    tstamp.Stop();                  var time = tstamp.Elapsed.TotalSeconds;                  // Not a real benchmark' just for sanity check                  _helper?.WriteLine(                      $"Chain finished in {time} seconds {ChainLength*Repetition} maps in total and {(ChainLength*Repetition)/(time*1000*1000)} million maps/s");              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_takes,The following statement contains a magic number: var ops = Enumerable.Range(1' ChainLength / 10).Select(_ => new Take<int>(1))                  .Cast<IStage<int' int>>().ToArray();
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_drops,The following statement contains a magic number: var ops = Enumerable.Range(1' ChainLength / 1000).Select(_ => new Drop<int>(1))                  .Cast<IStage<int' int>>().ToArray();
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_drops,The following statement contains a magic number: WithOneBoundedSetup(ops' (lastEvents' upstream' downstream) =>              {                  lastEvents().Should().BeEmpty();                    downstream.RequestOne();                  lastEvents().Should().BeEquivalentTo(new RequestOne());                    var i = 0;                  while (i < (ChainLength / 1000))                  {                      upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                      i++;                  }                    upstream.OnNext(0);                  lastEvents().Should().BeEquivalentTo(new OnNext(0));              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterStressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterStressSpec.cs,Interpreter_must_work_with_a_massive_chain_of_batches_of_overflowing_to_the_heap,The following statement contains a magic number: var ops = Enumerable.Range(1' ChainLength/10).Select(_ => batch)                  .Cast<IGraphStageWithMaterializedValue<Shape' object>>().ToArray();
Magic Number,Akka.Streams.Tests.Implementation.Fusing,KeepGoingStageSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\KeepGoingStageSpec.cs,A_stage_with_keep_going_must_still_be_alive_after_all_ports_have_been_closed_until_explicity_closed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.Maybe<int>().ToMaterialized(new PingableSink(true)' Keep.Both).Run(Materializer);                  var maybePromise = t.Item1;                  var pingerFuture = t.Item2;                  pingerFuture.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var pinger = pingerFuture.Result;                    pinger.Register(TestActor);                    //Before completion                  pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    maybePromise.TrySetResult(0);                  ExpectMsg<UpstreamCompleted>();                    ExpectNoMsg(200);                    pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Stop();                  // PostStop should not be concurrent with the event handler. This event here tests this.                  ExpectMsg<EndOfEventHandler>();                  ExpectMsg<PostStop>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,KeepGoingStageSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\KeepGoingStageSpec.cs,A_stage_with_keep_going_must_still_be_alive_after_all_ports_have_been_closed_until_explicity_closed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.Maybe<int>().ToMaterialized(new PingableSink(true)' Keep.Both).Run(Materializer);                  var maybePromise = t.Item1;                  var pingerFuture = t.Item2;                  pingerFuture.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var pinger = pingerFuture.Result;                    pinger.Register(TestActor);                    //Before completion                  pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    maybePromise.TrySetResult(0);                  ExpectMsg<UpstreamCompleted>();                    ExpectNoMsg(200);                    pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Stop();                  // PostStop should not be concurrent with the event handler. This event here tests this.                  ExpectMsg<EndOfEventHandler>();                  ExpectMsg<PostStop>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,KeepGoingStageSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\KeepGoingStageSpec.cs,A_stage_with_keep_going_must_still_be_alive_after_all_ports_have_been_closed_until_explicitly_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.Maybe<int>().ToMaterialized(new PingableSink(true)' Keep.Both).Run(Materializer);                  var maybePromise = t.Item1;                  var pingerFuture = t.Item2;                  pingerFuture.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var pinger = pingerFuture.Result;                    pinger.Register(TestActor);                    //Before completion                  pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    maybePromise.TrySetResult(0);                  ExpectMsg<UpstreamCompleted>();                    ExpectNoMsg(200);                    pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Fail();                  // PostStop should not be concurrent with the event handler. This event here tests this.                  ExpectMsg<EndOfEventHandler>();                  ExpectMsg<PostStop>();                }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,KeepGoingStageSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\KeepGoingStageSpec.cs,A_stage_with_keep_going_must_still_be_alive_after_all_ports_have_been_closed_until_explicitly_failed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.Maybe<int>().ToMaterialized(new PingableSink(true)' Keep.Both).Run(Materializer);                  var maybePromise = t.Item1;                  var pingerFuture = t.Item2;                  pingerFuture.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var pinger = pingerFuture.Result;                    pinger.Register(TestActor);                    //Before completion                  pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    maybePromise.TrySetResult(0);                  ExpectMsg<UpstreamCompleted>();                    ExpectNoMsg(200);                    pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Fail();                  // PostStop should not be concurrent with the event handler. This event here tests this.                  ExpectMsg<EndOfEventHandler>();                  ExpectMsg<PostStop>();                }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,KeepGoingStageSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\KeepGoingStageSpec.cs,A_stage_with_keep_going_must_still_be_alive_after_all_ports_have_been_closed_until_implicity_failed_via_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.Maybe<int>().ToMaterialized(new PingableSink(true)' Keep.Both).Run(Materializer);                  var maybePromise = t.Item1;                  var pingerFuture = t.Item2;                  pingerFuture.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var pinger = pingerFuture.Result;                    pinger.Register(TestActor);                    //Before completion                  pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    maybePromise.TrySetResult(0);                  ExpectMsg<UpstreamCompleted>();                    ExpectNoMsg(200);                    pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    // We need to catch the exception otherwise the test fails                  // ReSharper disable once EmptyGeneralCatchClause                  try { pinger.ThrowEx();} catch { }                  // PostStop should not be concurrent with the event handler. This event here tests this.                  ExpectMsg<EndOfEventHandler>();                  ExpectMsg<PostStop>();                }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,KeepGoingStageSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\KeepGoingStageSpec.cs,A_stage_with_keep_going_must_still_be_alive_after_all_ports_have_been_closed_until_implicity_failed_via_exception,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.Maybe<int>().ToMaterialized(new PingableSink(true)' Keep.Both).Run(Materializer);                  var maybePromise = t.Item1;                  var pingerFuture = t.Item2;                  pingerFuture.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var pinger = pingerFuture.Result;                    pinger.Register(TestActor);                    //Before completion                  pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    maybePromise.TrySetResult(0);                  ExpectMsg<UpstreamCompleted>();                    ExpectNoMsg(200);                    pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    // We need to catch the exception otherwise the test fails                  // ReSharper disable once EmptyGeneralCatchClause                  try { pinger.ThrowEx();} catch { }                  // PostStop should not be concurrent with the event handler. This event here tests this.                  ExpectMsg<EndOfEventHandler>();                  ExpectMsg<PostStop>();                }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,KeepGoingStageSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\KeepGoingStageSpec.cs,A_stage_with_keep_going_must_close_down_earls_if_keepAlive_is_not_requested,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.Maybe<int>().ToMaterialized(new PingableSink(false)' Keep.Both).Run(Materializer);                  var maybePromise = t.Item1;                  var pingerFuture = t.Item2;                  pingerFuture.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var pinger = pingerFuture.Result;                    pinger.Register(TestActor);                    //Before completion                  pinger.Ping();                  ExpectMsg<Pong>();                    pinger.Ping();                  ExpectMsg<Pong>();                    maybePromise.TrySetResult(0);                  ExpectMsg<UpstreamCompleted>();                  ExpectMsg<PostStop>();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,LifecycleInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\LifecycleInterpreterSpec.cs,Interpreter_must_call_PreStart_in_order_on_stages,The following statement contains a magic number: WithOneBoundedSetup(ops' (lastEvents' upstream' downstream) =>              {                  ExpectMsg("start-a");                  ExpectMsg("start-b");                  ExpectMsg("start-c");                  ExpectNoMsg(300);                  upstream.OnComplete();              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,LifecycleInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\LifecycleInterpreterSpec.cs,Interpreter_must_call_PostStop_in_order_on_stages_when_upstream_completes,The following statement contains a magic number: WithOneBoundedSetup(ops' (lastEvents' upstream' downstream) =>              {                  upstream.OnComplete();                  ExpectMsg("complete-a");                  ExpectMsg("stop-a");                  ExpectMsg("complete-b");                  ExpectMsg("stop-b");                  ExpectMsg("complete-c");                  ExpectMsg("stop-c");                  ExpectNoMsg(300);                  upstream.OnComplete();              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,LifecycleInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\LifecycleInterpreterSpec.cs,Interpreter_must_call_PostStop_in_order_on_stages_when_upstream_OnErrors,The following statement contains a magic number: WithOneBoundedSetup(op' (lastEvents' upstream' downstream) =>              {                  var msg = "Boom! Boom! Boom!";                  upstream.OnError(new TestException(msg));                  ExpectMsg(msg);                  ExpectMsg("stop-c");                  ExpectNoMsg(300);              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,LifecycleInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\LifecycleInterpreterSpec.cs,Interpreter_must_call_PostStop_in_order_on_stages_when_downstream_cancels,The following statement contains a magic number: WithOneBoundedSetup(ops' (lastEvents' upstream' downstream) =>              {                  downstream.Cancel();                  ExpectMsg("stop-c");                  ExpectMsg("stop-b");                  ExpectMsg("stop-a");                  ExpectNoMsg(300);              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,LifecycleInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\LifecycleInterpreterSpec.cs,Interpreter_must_call_PreStart_before_PostStop,The following statement contains a magic number: WithOneBoundedSetup(op' (lastEvents' upstream' downstream) =>              {                  ExpectMsg("start-a");                  ExpectNoMsg(300);                  upstream.OnComplete();                  ExpectMsg("stop-a");                  ExpectNoMsg(300);              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,LifecycleInterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\LifecycleInterpreterSpec.cs,Interpreter_must_call_PreStart_before_PostStop,The following statement contains a magic number: WithOneBoundedSetup(op' (lastEvents' upstream' downstream) =>              {                  ExpectMsg("start-a");                  ExpectNoMsg(300);                  upstream.OnComplete();                  ExpectMsg("stop-a");                  ExpectNoMsg(300);              });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,OnError,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpecKit.cs,GetHashCode,The following statement contains a magic number: return ((Source?.GetHashCode() ?? 0)*397) ^ (Cause?.GetHashCode() ?? 0);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,OnNext,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\GraphInterpreterSpecKit.cs,GetHashCode,The following statement contains a magic number: return ((Source?.GetHashCode() ?? 0)*397) ^ (Element?.GetHashCode() ?? 0);
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_map_correctly,The following statement contains a magic number: WithOneBoundedSetup(new Select<int' int>(x => x + 1' Deciders.StoppingDecider)'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_chain_of_maps_correctly,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Select<int' int>(x => x + 1' Deciders.StoppingDecider)'                  new Select<int' int>(x => x * 2' Deciders.StoppingDecider)'                  new Select<int' int>(x => x + 1' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_chain_of_maps_correctly,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Select<int' int>(x => x + 1' Deciders.StoppingDecider)'                  new Select<int' int>(x => x * 2' Deciders.StoppingDecider)'                  new Select<int' int>(x => x + 1' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_chain_of_maps_correctly,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Select<int' int>(x => x + 1' Deciders.StoppingDecider)'                  new Select<int' int>(x => x * 2' Deciders.StoppingDecider)'                  new Select<int' int>(x => x + 1' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(5));                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_take,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Take<int>(2)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new OnNext(0));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(1)' new Cancel()' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_take_inside_a_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Where<int>(x => x != 0' Deciders.StoppingDecider)'                  new Take<int>(2)'                  new Select<int' int>(x => x + 1' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3)' new Cancel()' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_take_inside_a_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Where<int>(x => x != 0' Deciders.StoppingDecider)'                  new Take<int>(2)'                  new Select<int' int>(x => x + 1' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3)' new Cancel()' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_take_inside_a_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Where<int>(x => x != 0' Deciders.StoppingDecider)'                  new Take<int>(2)'                  new Select<int' int>(x => x + 1' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3)' new Cancel()' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_take_inside_a_chain,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Where<int>(x => x != 0' Deciders.StoppingDecider)'                  new Take<int>(2)'                  new Select<int' int>(x => x + 1' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(3)' new Cancel()' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_fold,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Aggregate<int' int>(0' (agg' x) => agg + x' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(3)' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_fold,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Aggregate<int' int>(0' (agg' x) => agg + x' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(3)' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_fold_with_proper_cancel,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Aggregate<int' int>(0' (agg' x) => agg + x' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_grouped,The following statement contains a magic number: WithOneBoundedSetup<int' IEnumerable<int>>(ToGraphStage(                  new Grouped<int>(3)                  )'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(new [] {0' 1' 2}));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new [] {3})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_grouped,The following statement contains a magic number: WithOneBoundedSetup<int' IEnumerable<int>>(ToGraphStage(                  new Grouped<int>(3)                  )'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(new [] {0' 1' 2}));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new [] {3})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_grouped,The following statement contains a magic number: WithOneBoundedSetup<int' IEnumerable<int>>(ToGraphStage(                  new Grouped<int>(3)                  )'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(new [] {0' 1' 2}));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new [] {3})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_grouped,The following statement contains a magic number: WithOneBoundedSetup<int' IEnumerable<int>>(ToGraphStage(                  new Grouped<int>(3)                  )'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(new [] {0' 1' 2}));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new [] {3})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_grouped,The following statement contains a magic number: WithOneBoundedSetup<int' IEnumerable<int>>(ToGraphStage(                  new Grouped<int>(3)                  )'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(new [] {0' 1' 2}));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(3);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnComplete();                      lastEvents().Should().BeEquivalentTo(new OnNext(new [] {3})' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_batch_conflate,The following statement contains a magic number: WithOneBoundedSetup<int>(new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new OnNext(0)' new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(4)' new RequestOne());                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_batch_conflate,The following statement contains a magic number: WithOneBoundedSetup<int>(new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new OnNext(0)' new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(4)' new RequestOne());                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_batch_conflate,The following statement contains a magic number: WithOneBoundedSetup<int>(new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new OnNext(0)' new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(4)' new RequestOne());                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_batch_conflate,The following statement contains a magic number: WithOneBoundedSetup<int>(new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new OnNext(0)' new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new OnNext(4)' new RequestOne());                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_batch_batch_conflate_conflate,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)'                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(0));                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(4));                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_batch_batch_conflate_conflate,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)'                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(0));                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(4));                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_batch_batch_conflate_conflate,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)'                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(0));                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(4));                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_batch_batch_conflate_conflate,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)'                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(0));                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(3));                        downstream.RequestOne();                      lastEvents().Should().BeEmpty();                        upstream.OnNext(4);                      lastEvents().Should().BeEquivalentTo(new RequestOne()' new OnNext(4));                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_expand_expand,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())'                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(0));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        upstream.OnNext(10);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2)' new RequestOne()); // one element is still in the pipeline                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(10));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(11));                        upstream.OnComplete();                      downstream.RequestOne();                      // This is correct! If you don't believe' run the interpreter with Debug on                      lastEvents().Should().BeEquivalentTo(new OnNext(12)' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_expand_expand,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())'                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(0));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        upstream.OnNext(10);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2)' new RequestOne()); // one element is still in the pipeline                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(10));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(11));                        upstream.OnComplete();                      downstream.RequestOne();                      // This is correct! If you don't believe' run the interpreter with Debug on                      lastEvents().Should().BeEquivalentTo(new OnNext(12)' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_expand_expand,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())'                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(0));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        upstream.OnNext(10);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2)' new RequestOne()); // one element is still in the pipeline                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(10));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(11));                        upstream.OnComplete();                      downstream.RequestOne();                      // This is correct! If you don't believe' run the interpreter with Debug on                      lastEvents().Should().BeEquivalentTo(new OnNext(12)' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_expand_expand,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())'                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(0));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        upstream.OnNext(10);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2)' new RequestOne()); // one element is still in the pipeline                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(10));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(11));                        upstream.OnComplete();                      downstream.RequestOne();                      // This is correct! If you don't believe' run the interpreter with Debug on                      lastEvents().Should().BeEquivalentTo(new OnNext(12)' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_expand_expand,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())'                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(0));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        upstream.OnNext(10);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2)' new RequestOne()); // one element is still in the pipeline                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(10));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(11));                        upstream.OnComplete();                      downstream.RequestOne();                      // This is correct! If you don't believe' run the interpreter with Debug on                      lastEvents().Should().BeEquivalentTo(new OnNext(12)' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_expand_expand,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())'                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(0));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        upstream.OnNext(10);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2)' new RequestOne()); // one element is still in the pipeline                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(10));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(11));                        upstream.OnComplete();                      downstream.RequestOne();                      // This is correct! If you don't believe' run the interpreter with Debug on                      lastEvents().Should().BeEquivalentTo(new OnNext(12)' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_expand_expand,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())'                  new Expand<int' int>(e => Enumerable.Range(e' 100).GetEnumerator())              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(0));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        upstream.OnNext(10);                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2)' new RequestOne()); // one element is still in the pipeline                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(10));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(11));                        upstream.OnComplete();                      downstream.RequestOne();                      // This is correct! If you don't believe' run the interpreter with Debug on                      lastEvents().Should().BeEquivalentTo(new OnNext(12)' new OnComplete());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_batch_expand_conflate_expand,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)'                  new Expand<int' int>(e => Enumerable.Repeat(e' int.MaxValue).GetEnumerator())              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(0));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_batch_expand_conflate_expand,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)'                  new Expand<int' int>(e => Enumerable.Repeat(e' int.MaxValue).GetEnumerator())              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(0);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(0));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.Cancel();                      lastEvents().Should().BeEquivalentTo(new Cancel());                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_doubler_batch_doubler_conflate,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  ToGraphStage(new Doubler<int>())'                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(6));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_implement_doubler_batch_doubler_conflate,The following statement contains a magic number: WithOneBoundedSetup<int>(new IGraphStageWithMaterializedValue<Shape' object>[]              {                  ToGraphStage(new Doubler<int>())'                  new Batch<int' int>(1L' e => 0L' e => e' (agg' x) => agg + x)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(6));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_jumpback_table_and_completed_elements,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new KeepGoing<int>()'                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new Select<int' int>(x => x' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        upstream.OnComplete();                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_jumpback_table_and_completed_elements,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new KeepGoing<int>()'                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new Select<int' int>(x => x' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        upstream.OnComplete();                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_jumpback_table_and_completed_elements,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new KeepGoing<int>()'                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new Select<int' int>(x => x' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        upstream.OnComplete();                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                  });
Magic Number,Akka.Streams.Tests.Implementation.Fusing,InterpreterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\Fusing\InterpreterSpec.cs,Interpreter_should_work_with_jumpback_table_and_completed_elements,The following statement contains a magic number: WithOneBoundedSetup(new IStage<int' int>[]              {                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new KeepGoing<int>()'                  new Select<int' int>(x => x' Deciders.StoppingDecider)'                  new Select<int' int>(x => x' Deciders.StoppingDecider)              }'                  (lastEvents' upstream' downstream) =>                  {                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(1);                      lastEvents().Should().BeEquivalentTo(new OnNext(1));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new RequestOne());                        upstream.OnNext(2);                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        upstream.OnComplete();                      lastEvents().Should().BeEmpty();                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                        downstream.RequestOne();                      lastEvents().Should().BeEquivalentTo(new OnNext(2));                  });
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: var test = new Test(4' 4' 3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: var test = new Test(4' 4' 3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: var test = new Test(4' 4' 3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Write(2).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Write(3).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Read(0).Should().Be(2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Read(0).Should().Be(3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Read(1).Should().Be(2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Read(2).Should().Be(1);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Read(1).Should().Be(3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Read(2).Should().Be(2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Read(2).Should().Be(2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Read(2).Should().Be(3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_reads_if_nothing_can_be_read,The following statement contains a magic number: test.Read(2).Should().Be(3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: var test = new Test(4' 4' 2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: var test = new Test(4' 4' 2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: var test = new Test(4' 4' 2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Write(2).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Write(3).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Write(4).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Write(5).Should().BeFalse();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Write(5).Should().BeFalse();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Write(5).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(0).Should().Be(2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(0).Should().Be(3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(0).Should().Be(4);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(1).Should().Be(2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Write(6).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(0).Should().Be(5);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(0).Should().Be(6);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(1).Should().Be(3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(1).Should().Be(4);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(1).Should().Be(5);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(1).Should().Be(6);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Write(7).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Write(8).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Write(9).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(0).Should().Be(7);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(0).Should().Be(8);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(0).Should().Be(9);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(1).Should().Be(7);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(1).Should().Be(8);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_fail_write_if_there_is_no_more_space,The following statement contains a magic number: test.Read(1).Should().Be(9);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: var test = new Test(2' 8' 2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: var test = new Test(2' 8' 2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: var test = new Test(2' 8' 2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Write(2).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Write(3).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Write(4).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(0).Should().Be(2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(0).Should().Be(3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(1).Should().Be(2);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Write(5).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Write(6).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Write(7).Should().BeTrue();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(0).Should().Be(4);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(0).Should().Be(5);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(0).Should().Be(6);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(0).Should().Be(7);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(1).Should().Be(3);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(1).Should().Be(4);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(1).Should().Be(5);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(1).Should().Be(6);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_automatically_frow_if_possible,The following statement contains a magic number: test.Read(1).Should().Be(7);
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_pass_the_stress_test,The following statement contains a magic number: var MAXSIZEBIT_LIMIT = 6;
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_pass_the_stress_test,The following statement contains a magic number: var COUNTER_LIMIT = 200;
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_pass_the_stress_test,The following statement contains a magic number: var activeCoursors =                          Enumerable.Range(0' random.Next(8) + 1)                              .Select(i => new StressTestCursor(i' 1 << bit' log' COUNTER_LIMIT' sb))                              .ToList();
Magic Number,Akka.Streams.Tests.Implementation,ResizableMultiReaderRingBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\ResizableMultiReaderRingBufferSpec.cs,A_ResizableMultiReaderRingBuffer_should_pass_the_stress_test,The following statement contains a magic number: var stillWriting = 2;
Magic Number,Akka.Streams.Tests.Implementation,FixedBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\FixedBufferSpec.cs,FixedSizeBuffer_must_work_properly_with_full_range_filling_draining_cycles,The following statement contains a magic number: i < 10
Magic Number,Akka.Streams.Tests.Implementation,FixedBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\FixedBufferSpec.cs,FixedSizeBuffer_must_work_when_indexes_wrap_around_at_Int_MaxValue,The following statement contains a magic number: i < 10
Magic Number,Akka.Streams.Tests.Implementation,FixedBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\FixedBufferSpec.cs,Buffer_factory_must_set_default_to_one_billion_for_MaxFixedBufferSize,The following statement contains a magic number: Default.MaxFixedBufferSize.Should().Be(1000000000);
Magic Number,Akka.Streams.Tests.Implementation,FixedBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\FixedBufferSpec.cs,Buffer_factory_must_produce_FixedSizeBuffers_when_capacity_lower_than_MaxFixedBufferSize,The following statement contains a magic number: Buffer.Create<int>(1000' Default).Should().BeOfType<ModuloFixedSizeBuffer<int>>();
Magic Number,Akka.Streams.Tests.Implementation,FixedBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\FixedBufferSpec.cs,Buffer_factory_must_produce_FixedSizeBuffers_when_capacity_lower_than_MaxFixedBufferSize,The following statement contains a magic number: Buffer.Create<int>(1024' Default).Should().BeOfType<PowerOfTwoFixedSizeBuffer<int>>();
Magic Number,Akka.Streams.Tests.Implementation,FixedBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\FixedBufferSpec.cs,Buffer_factory_must_produce_FixedSizeBuffers_when_MaxFixedBufferSize_lower_than_BoundedBufferSize,The following statement contains a magic number: var settings = Default.WithMaxFixedBufferSize(9);
Magic Number,Akka.Streams.Tests.Implementation,FixedBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\FixedBufferSpec.cs,Buffer_factory_must_produce_FixedSizeBuffers_when_MaxFixedBufferSize_lower_than_BoundedBufferSize,The following statement contains a magic number: Buffer.Create<int>(5' settings).Should().BeOfType<ModuloFixedSizeBuffer<int>>();
Magic Number,Akka.Streams.Tests.Implementation,FixedBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\FixedBufferSpec.cs,Buffer_factory_must_produce_FixedSizeBuffers_when_MaxFixedBufferSize_lower_than_BoundedBufferSize,The following statement contains a magic number: Buffer.Create<int>(10' settings).Should().BeOfType<ModuloFixedSizeBuffer<int>>();
Magic Number,Akka.Streams.Tests.Implementation,FixedBufferSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\FixedBufferSpec.cs,Buffer_factory_must_produce_FixedSizeBuffers_when_MaxFixedBufferSize_lower_than_BoundedBufferSize,The following statement contains a magic number: Buffer.Create<int>(16' settings).Should().BeOfType<PowerOfTwoFixedSizeBuffer<int>>();
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_and_emit_N_before_completing,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 10))                  .Via(new ReadNEmitN(2))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNext(1' 2)                  .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_and_emit_N_before_completing,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 10))                  .Via(new ReadNEmitN(2))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNext(1' 2)                  .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_and_emit_N_before_completing,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 10))                  .Via(new ReadNEmitN(2))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNext(1' 2)                  .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_and_emit_N_before_completing,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 10))                  .Via(new ReadNEmitN(2))                  .RunWith(this.SinkProbe<int>()' Materializer)                  .Request(10)                  .ExpectNext(1' 2)                  .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_not_emit_if_upstream_completes_before_N_is_sent,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Via(new ReadNEmitN(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_not_emit_if_upstream_completes_before_N_is_sent,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Via(new ReadNEmitN(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_not_emit_if_upstream_completes_before_N_is_sent,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Via(new ReadNEmitN(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_not_emit_if_upstream_fails_before_N_is_sent,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new ArgumentException("Don't argue like that!");                  Source.From(Enumerable.Range(1' 5))                      .Select(x =>                      {                          if (x > 3)                              throw error;                          return x;                      })                      .Via(new ReadNEmitN(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectError().Should().Be(error);              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_not_emit_if_upstream_fails_before_N_is_sent,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new ArgumentException("Don't argue like that!");                  Source.From(Enumerable.Range(1' 5))                      .Select(x =>                      {                          if (x > 3)                              throw error;                          return x;                      })                      .Via(new ReadNEmitN(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectError().Should().Be(error);              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_not_emit_if_upstream_fails_before_N_is_sent,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new ArgumentException("Don't argue like that!");                  Source.From(Enumerable.Range(1' 5))                      .Select(x =>                      {                          if (x > 3)                              throw error;                          return x;                      })                      .Via(new ReadNEmitN(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectError().Should().Be(error);              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_not_emit_if_upstream_fails_before_N_is_sent,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var error = new ArgumentException("Don't argue like that!");                  Source.From(Enumerable.Range(1' 5))                      .Select(x =>                      {                          if (x > 3)                              throw error;                          return x;                      })                      .Via(new ReadNEmitN(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectError().Should().Be(error);              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_provide_elements_read_if_OnComplete_happens_before_N_elements_have_been_seen,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Via(new ReadNEmitRestOnComplete(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_provide_elements_read_if_OnComplete_happens_before_N_elements_have_been_seen,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Via(new ReadNEmitRestOnComplete(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_provide_elements_read_if_OnComplete_happens_before_N_elements_have_been_seen,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Via(new ReadNEmitRestOnComplete(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_provide_elements_read_if_OnComplete_happens_before_N_elements_have_been_seen,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Via(new ReadNEmitRestOnComplete(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_provide_elements_read_if_OnComplete_happens_before_N_elements_have_been_seen,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Via(new ReadNEmitRestOnComplete(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_provide_elements_read_if_OnComplete_happens_before_N_elements_have_been_seen,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Via(new ReadNEmitRestOnComplete(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_read_N_should_provide_elements_read_if_OnComplete_happens_before_N_elements_have_been_seen,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.From(Enumerable.Range(1' 5))                      .Via(new ReadNEmitRestOnComplete(6))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(10)                      .ExpectNext(1' 2' 3' 4' 5)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.Empty<int>()                      .Via(new Emit1234().Named("testStage"))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.Empty<int>()                      .Via(new Emit1234().Named("testStage"))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.Empty<int>()                      .Via(new Emit1234().Named("testStage"))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.Empty<int>()                      .Via(new Emit1234().Named("testStage"))                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(5)                      .ExpectNext(1' 2' 3' 4)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_two_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_two_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_two_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_two_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_two_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_two_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_two_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_two_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_three_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new PassThrough()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_three_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new PassThrough()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_three_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new PassThrough()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_three_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new PassThrough()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_three_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new PassThrough()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_three_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new PassThrough()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_three_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new PassThrough()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_all_things_before_completing_with_three_fused_stages,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var flow = Flow.Create<int>().Via(new Emit1234()).Via(new PassThrough()).Via(new Emit5678());                  var g = Streams.Implementation.Fusing.Fusing.Aggressive(flow);                    Source.Empty<int>()                      .Via(g)                      .RunWith(this.SinkProbe<int>()' Materializer)                      .Request(9)                      .ExpectNext(1' 2' 3' 4' 5' 6' 7' 8)                      .ExpectComplete();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_emit_properly_after_empty_iterable,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  Source.FromGraph(new EmitEmptyIterable())                      .RunWith(Sink.Seq<int>()' Materializer)                      .Result.Should()                      .HaveCount(1)                      .And.OnlyContain(x => x == 42);              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,GraphStageLogicSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,A_GraphStageLogic_must_not_double_terminate_a_single_stage,The following statement contains a magic number: WithBaseBuilderSetup(                  new GraphStage<FlowShape<int' int>>[] {new DoubleTerminateStage(TestActor)' new PassThrough()}'                  interpreter =>                  {                      interpreter.Complete(0);                      interpreter.Cancel(1);                      interpreter.Execute(2);                        ExpectMsg("postStop2");                      ExpectNoMsg(0);                        interpreter.IsCompleted.Should().BeFalse();                      interpreter.IsSuspended.Should().BeFalse();                      interpreter.IsStageCompleted(interpreter.Logics[0]).Should().BeTrue();                      interpreter.IsStageCompleted(interpreter.Logics[1]).Should().BeFalse();                  });
Magic Number,Akka.Streams.Tests.Implementation,Emit1234Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,PreStart,The following statement contains a magic number: Emit(_emit._out' 1' () => Emit(_emit._out' 2));
Magic Number,Akka.Streams.Tests.Implementation,Emit1234Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,PreStart,The following statement contains a magic number: Emit(_emit._out' 3' () => Emit(_emit._out' 4));
Magic Number,Akka.Streams.Tests.Implementation,Emit1234Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,PreStart,The following statement contains a magic number: Emit(_emit._out' 3' () => Emit(_emit._out' 4));
Magic Number,Akka.Streams.Tests.Implementation,Emit5678Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,Emit5678Logic,The following statement contains a magic number: SetHandler(emit._in' onPush: () => Push(emit._out' Grab(emit._in))' onUpstreamFinish: () =>                      {                          Emit(emit._out' 5' () => Emit(emit._out' 6));                          Emit(emit._out' 7' () => Emit(emit._out' 8));                          CompleteStage();                      });
Magic Number,Akka.Streams.Tests.Implementation,Emit5678Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,Emit5678Logic,The following statement contains a magic number: SetHandler(emit._in' onPush: () => Push(emit._out' Grab(emit._in))' onUpstreamFinish: () =>                      {                          Emit(emit._out' 5' () => Emit(emit._out' 6));                          Emit(emit._out' 7' () => Emit(emit._out' 8));                          CompleteStage();                      });
Magic Number,Akka.Streams.Tests.Implementation,Emit5678Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,Emit5678Logic,The following statement contains a magic number: SetHandler(emit._in' onPush: () => Push(emit._out' Grab(emit._in))' onUpstreamFinish: () =>                      {                          Emit(emit._out' 5' () => Emit(emit._out' 6));                          Emit(emit._out' 7' () => Emit(emit._out' 8));                          CompleteStage();                      });
Magic Number,Akka.Streams.Tests.Implementation,Emit5678Logic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,Emit5678Logic,The following statement contains a magic number: SetHandler(emit._in' onPush: () => Push(emit._out' Grab(emit._in))' onUpstreamFinish: () =>                      {                          Emit(emit._out' 5' () => Emit(emit._out' 6));                          Emit(emit._out' 7' () => Emit(emit._out' 8));                          CompleteStage();                      });
Magic Number,Akka.Streams.Tests.Implementation,EmitEmptyIterableLogic,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\GraphStageLogicSpec.cs,EmitEmptyIterableLogic,The following statement contains a magic number: SetHandler(emit._out' () => EmitMultiple(emit._out' Enumerable.Empty<int>()' () => Emit(emit._out' 42' CompleteStage)));
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_materialization_when_building_a_large_graph_with_simple_computation_when_starting_from_a_Source,The following statement contains a magic number: var g = Enumerable.Range(1' TooDeepForStack)                  .Aggregate(Source.Single(42).MapMaterializedValue(_ => 1)' (source' i) => source.Select(x => x));
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_materialization_when_building_a_large_graph_with_simple_computation_when_starting_from_a_Source,The following statement contains a magic number: result.Should().Contain(42);
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_materialization_when_building_a_large_graph_with_simple_computation_when_starting_from_a_Flow,The following statement contains a magic number: var t = g.RunWith(Source.Single(42).MapMaterializedValue(_ => 1)' Sink.Seq<int>()' materializer);
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_materialization_when_building_a_large_graph_with_simple_computation_when_starting_from_a_Flow,The following statement contains a magic number: result.Should().Contain(42);
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_materialization_when_building_a_large_graph_with_simple_computation_when_using_Via,The following statement contains a magic number: var g = Enumerable.Range(1' TooDeepForStack)                  .Aggregate(Source.Single(42).MapMaterializedValue(_ => 1)' (source' i) => source.Select(x => x));
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_materialization_when_building_a_large_graph_with_simple_computation_when_using_Via,The following statement contains a magic number: result.Should().Contain(42);
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_fusing_and_materialization_when_building_a_large_graph_with_simple_computation_when_starting_from_a_Source,The following statement contains a magic number: var g = Source.FromGraph(Fuse.Aggressive(Enumerable.Range(1' TooDeepForStack)                  .Aggregate(Source.Single(42).MapMaterializedValue(_ => 1)' (source' i) => source.Select(x => x))));
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_fusing_and_materialization_when_building_a_large_graph_with_simple_computation_when_starting_from_a_Source,The following statement contains a magic number: result.Should().Contain(42);
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_fusing_and_materialization_when_building_a_large_graph_with_simple_computation_when_starting_from_a_Flow,The following statement contains a magic number: var t = g.RunWith(Source.Single(42).MapMaterializedValue(_ => 1)' Sink.Seq<int>()' materializer);
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_fusing_and_materialization_when_building_a_large_graph_with_simple_computation_when_starting_from_a_Flow,The following statement contains a magic number: result.Should().Contain(42);
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_fusing_and_materialization_when_building_a_large_graph_with_simple_computation_when_using_Via,The following statement contains a magic number: var g = Source.FromGraph(Fuse.Aggressive(Enumerable.Range(1' TooDeepForStack)                  .Aggregate(Source.Single(42).MapMaterializedValue(_ => 1)' (source' i) => source.Select(x => x))));
Magic Number,Akka.Streams.Tests.Implementation,StreamLayoutSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\StreamLayoutSpec.cs,StreamLayout_should_not_fail_fusing_and_materialization_when_building_a_large_graph_with_simple_computation_when_using_Via,The following statement contains a magic number: result.Should().Contain(42);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,InitialTimeout_must_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .InitialTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,InitialTimeout_must_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .InitialTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,InitialTimeout_must_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .InitialTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,InitialTimeout_must_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .InitialTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,InitialTimeout_must_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .InitialTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,InitialTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .InitialTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");                }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,InitialTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .InitialTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");                }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,InitialTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .InitialTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");                }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,InitialTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .InitialTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");                }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,InitialTimeout_must_fail_if_no_initial_element_passes_until_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var downstreamProbe = this.CreateProbe<int>();                  Source.Maybe<int>()                  .InitialTimeout(TimeSpan.FromSeconds(1))                  .RunWith(Sink.FromSubscriber(downstreamProbe)' Materializer);                    downstreamProbe.ExpectSubscription();                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                    var ex = downstreamProbe.ExpectError();                  ex.Message.Should().Be($"The first element has not yet passed through in {TimeSpan.FromSeconds(1)}.");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_pass_through_elemnts_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .CompletionTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_pass_through_elemnts_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .CompletionTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_pass_through_elemnts_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .CompletionTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_pass_through_elemnts_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .CompletionTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_pass_through_elemnts_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .CompletionTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .CompletionTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .CompletionTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .CompletionTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .CompletionTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_fail_if_not_completed_until_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamProbe = TestPublisher.CreateProbe<int>(this);                  var downstreamProbe = this.CreateProbe<int>();                    Source.FromPublisher<int>(upstreamProbe)                      .CompletionTimeout(TimeSpan.FromSeconds(2))                      .RunWith(Sink.FromSubscriber(downstreamProbe)' Materializer);                      upstreamProbe.SendNext(1);                  downstreamProbe.RequestNext(1);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    upstreamProbe.SendNext(2);                  downstreamProbe.RequestNext(2);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    var ex = downstreamProbe.ExpectError();                  ex.Message.Should().Be($"The stream has not been completed in {TimeSpan.FromSeconds(2)}.");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_fail_if_not_completed_until_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamProbe = TestPublisher.CreateProbe<int>(this);                  var downstreamProbe = this.CreateProbe<int>();                    Source.FromPublisher<int>(upstreamProbe)                      .CompletionTimeout(TimeSpan.FromSeconds(2))                      .RunWith(Sink.FromSubscriber(downstreamProbe)' Materializer);                      upstreamProbe.SendNext(1);                  downstreamProbe.RequestNext(1);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    upstreamProbe.SendNext(2);                  downstreamProbe.RequestNext(2);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    var ex = downstreamProbe.ExpectError();                  ex.Message.Should().Be($"The stream has not been completed in {TimeSpan.FromSeconds(2)}.");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_fail_if_not_completed_until_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamProbe = TestPublisher.CreateProbe<int>(this);                  var downstreamProbe = this.CreateProbe<int>();                    Source.FromPublisher<int>(upstreamProbe)                      .CompletionTimeout(TimeSpan.FromSeconds(2))                      .RunWith(Sink.FromSubscriber(downstreamProbe)' Materializer);                      upstreamProbe.SendNext(1);                  downstreamProbe.RequestNext(1);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    upstreamProbe.SendNext(2);                  downstreamProbe.RequestNext(2);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    var ex = downstreamProbe.ExpectError();                  ex.Message.Should().Be($"The stream has not been completed in {TimeSpan.FromSeconds(2)}.");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_fail_if_not_completed_until_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamProbe = TestPublisher.CreateProbe<int>(this);                  var downstreamProbe = this.CreateProbe<int>();                    Source.FromPublisher<int>(upstreamProbe)                      .CompletionTimeout(TimeSpan.FromSeconds(2))                      .RunWith(Sink.FromSubscriber(downstreamProbe)' Materializer);                      upstreamProbe.SendNext(1);                  downstreamProbe.RequestNext(1);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    upstreamProbe.SendNext(2);                  downstreamProbe.RequestNext(2);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    var ex = downstreamProbe.ExpectError();                  ex.Message.Should().Be($"The stream has not been completed in {TimeSpan.FromSeconds(2)}.");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_fail_if_not_completed_until_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamProbe = TestPublisher.CreateProbe<int>(this);                  var downstreamProbe = this.CreateProbe<int>();                    Source.FromPublisher<int>(upstreamProbe)                      .CompletionTimeout(TimeSpan.FromSeconds(2))                      .RunWith(Sink.FromSubscriber(downstreamProbe)' Materializer);                      upstreamProbe.SendNext(1);                  downstreamProbe.RequestNext(1);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    upstreamProbe.SendNext(2);                  downstreamProbe.RequestNext(2);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    var ex = downstreamProbe.ExpectError();                  ex.Message.Should().Be($"The stream has not been completed in {TimeSpan.FromSeconds(2)}.");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,CompletionTimeout_must_fail_if_not_completed_until_timeout,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamProbe = TestPublisher.CreateProbe<int>(this);                  var downstreamProbe = this.CreateProbe<int>();                    Source.FromPublisher<int>(upstreamProbe)                      .CompletionTimeout(TimeSpan.FromSeconds(2))                      .RunWith(Sink.FromSubscriber(downstreamProbe)' Materializer);                      upstreamProbe.SendNext(1);                  downstreamProbe.RequestNext(1);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    upstreamProbe.SendNext(2);                  downstreamProbe.RequestNext(2);                  downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                    var ex = downstreamProbe.ExpectError();                  ex.Message.Should().Be($"The stream has not been completed in {TimeSpan.FromSeconds(2)}.");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .IdleTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .IdleTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .IdleTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .IdleTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = Source.From(Enumerable.Range(1' 100))                      .IdleTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .IdleTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .IdleTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .IdleTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_pass_through_error_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var task = Source.From(Enumerable.Range(1' 100))                      .Concat(Source.Failed<int>(new TestException("test")))                      .IdleTimeout(TimeSpan.FromSeconds(2)).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    task.Invoking(t => t.Wait(TimeSpan.FromSeconds(3)))                      .ShouldThrow<TestException>().WithMessage("test");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_fail_if_time_between_elements_is_too_large,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamProbe = TestPublisher.CreateProbe<int>(this);                  var downstreamProbe = this.CreateProbe<int>();                    Source.FromPublisher<int>(upstreamProbe)                      .IdleTimeout(TimeSpan.FromSeconds(1))                      .RunWith(Sink.FromSubscriber(downstreamProbe)' Materializer);                    // Two seconds in overall' but won't timeout until time between elements is large enough                  // (i.e. this works differently from completionTimeout)                  for (var i = 1; i <= 4; i++)                  {                      upstreamProbe.SendNext(1);                      downstreamProbe.RequestNext(1);                      downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                     }                                    var ex = downstreamProbe.ExpectError();                  ex.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(1)}.");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeout_must_fail_if_time_between_elements_is_too_large,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamProbe = TestPublisher.CreateProbe<int>(this);                  var downstreamProbe = this.CreateProbe<int>();                    Source.FromPublisher<int>(upstreamProbe)                      .IdleTimeout(TimeSpan.FromSeconds(1))                      .RunWith(Sink.FromSubscriber(downstreamProbe)' Materializer);                    // Two seconds in overall' but won't timeout until time between elements is large enough                  // (i.e. this works differently from completionTimeout)                  for (var i = 1; i <= 4; i++)                  {                      upstreamProbe.SendNext(1);                      downstreamProbe.RequestNext(1);                      downstreamProbe.ExpectNoMsg(TimeSpan.FromMilliseconds(500)); // No timeout yet                     }                                    var ex = downstreamProbe.ExpectError();                  ex.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(1)}.");              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_in_simple_loopback_case_and_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var timeoutIdentity = BidiFlow.BidirectionalIdleTimeout<int' int>(TimeSpan.FromSeconds(2)).Join(Flow.Create<int>());                    var t = Source.From(Enumerable.Range(1' 100))                      .Via(timeoutIdentity).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_in_simple_loopback_case_and_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var timeoutIdentity = BidiFlow.BidirectionalIdleTimeout<int' int>(TimeSpan.FromSeconds(2)).Join(Flow.Create<int>());                    var t = Source.From(Enumerable.Range(1' 100))                      .Via(timeoutIdentity).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_in_simple_loopback_case_and_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var timeoutIdentity = BidiFlow.BidirectionalIdleTimeout<int' int>(TimeSpan.FromSeconds(2)).Join(Flow.Create<int>());                    var t = Source.From(Enumerable.Range(1' 100))                      .Via(timeoutIdentity).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_in_simple_loopback_case_and_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var timeoutIdentity = BidiFlow.BidirectionalIdleTimeout<int' int>(TimeSpan.FromSeconds(2)).Join(Flow.Create<int>());                    var t = Source.From(Enumerable.Range(1' 100))                      .Via(timeoutIdentity).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_in_simple_loopback_case_and_pass_through_elements_unmodified,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var timeoutIdentity = BidiFlow.BidirectionalIdleTimeout<int' int>(TimeSpan.FromSeconds(2)).Join(Flow.Create<int>());                    var t = Source.From(Enumerable.Range(1' 100))                      .Via(timeoutIdentity).Grouped(200)                      .RunWith(Sink.First<IEnumerable<int>>()' Materializer);                    t.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  t.Result.ShouldAllBeEquivalentTo(Enumerable.Range(1' 100));              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_if_traffic_is_one_way,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamWriter = TestPublisher.CreateProbe<int>(this);                  var downstreamWriter = TestPublisher.CreateProbe<string>(this);                    var upstream = Flow.FromSinkAndSource(Sink.Ignore<string>()'                      Source.FromPublisher<int>(upstreamWriter)' Keep.Left);                  var downstream = Flow.FromSinkAndSource(Sink.Ignore<int>()'                      Source.FromPublisher<string>(downstreamWriter)' Keep.Left);                    var assembly = upstream.JoinMaterialized(                      BidiFlow.BidirectionalIdleTimeout<int' string>(TimeSpan.FromSeconds(2))'                      Keep.Left).JoinMaterialized(downstream' Keep.Both);                  var r = assembly.Run(Materializer);                  var upFinished = r.Item1;                  var downFinished = r.Item2;                    upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                    upstreamWriter.SendComplete();                  downstreamWriter.SendComplete();                    upFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  downFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_if_traffic_is_one_way,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamWriter = TestPublisher.CreateProbe<int>(this);                  var downstreamWriter = TestPublisher.CreateProbe<string>(this);                    var upstream = Flow.FromSinkAndSource(Sink.Ignore<string>()'                      Source.FromPublisher<int>(upstreamWriter)' Keep.Left);                  var downstream = Flow.FromSinkAndSource(Sink.Ignore<int>()'                      Source.FromPublisher<string>(downstreamWriter)' Keep.Left);                    var assembly = upstream.JoinMaterialized(                      BidiFlow.BidirectionalIdleTimeout<int' string>(TimeSpan.FromSeconds(2))'                      Keep.Left).JoinMaterialized(downstream' Keep.Both);                  var r = assembly.Run(Materializer);                  var upFinished = r.Item1;                  var downFinished = r.Item2;                    upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                    upstreamWriter.SendComplete();                  downstreamWriter.SendComplete();                    upFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  downFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_if_traffic_is_one_way,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamWriter = TestPublisher.CreateProbe<int>(this);                  var downstreamWriter = TestPublisher.CreateProbe<string>(this);                    var upstream = Flow.FromSinkAndSource(Sink.Ignore<string>()'                      Source.FromPublisher<int>(upstreamWriter)' Keep.Left);                  var downstream = Flow.FromSinkAndSource(Sink.Ignore<int>()'                      Source.FromPublisher<string>(downstreamWriter)' Keep.Left);                    var assembly = upstream.JoinMaterialized(                      BidiFlow.BidirectionalIdleTimeout<int' string>(TimeSpan.FromSeconds(2))'                      Keep.Left).JoinMaterialized(downstream' Keep.Both);                  var r = assembly.Run(Materializer);                  var upFinished = r.Item1;                  var downFinished = r.Item2;                    upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                    upstreamWriter.SendComplete();                  downstreamWriter.SendComplete();                    upFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  downFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_if_traffic_is_one_way,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamWriter = TestPublisher.CreateProbe<int>(this);                  var downstreamWriter = TestPublisher.CreateProbe<string>(this);                    var upstream = Flow.FromSinkAndSource(Sink.Ignore<string>()'                      Source.FromPublisher<int>(upstreamWriter)' Keep.Left);                  var downstream = Flow.FromSinkAndSource(Sink.Ignore<int>()'                      Source.FromPublisher<string>(downstreamWriter)' Keep.Left);                    var assembly = upstream.JoinMaterialized(                      BidiFlow.BidirectionalIdleTimeout<int' string>(TimeSpan.FromSeconds(2))'                      Keep.Left).JoinMaterialized(downstream' Keep.Both);                  var r = assembly.Run(Materializer);                  var upFinished = r.Item1;                  var downFinished = r.Item2;                    upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                    upstreamWriter.SendComplete();                  downstreamWriter.SendComplete();                    upFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  downFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_if_traffic_is_one_way,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamWriter = TestPublisher.CreateProbe<int>(this);                  var downstreamWriter = TestPublisher.CreateProbe<string>(this);                    var upstream = Flow.FromSinkAndSource(Sink.Ignore<string>()'                      Source.FromPublisher<int>(upstreamWriter)' Keep.Left);                  var downstream = Flow.FromSinkAndSource(Sink.Ignore<int>()'                      Source.FromPublisher<string>(downstreamWriter)' Keep.Left);                    var assembly = upstream.JoinMaterialized(                      BidiFlow.BidirectionalIdleTimeout<int' string>(TimeSpan.FromSeconds(2))'                      Keep.Left).JoinMaterialized(downstream' Keep.Both);                  var r = assembly.Run(Materializer);                  var upFinished = r.Item1;                  var downFinished = r.Item2;                    upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                    upstreamWriter.SendComplete();                  downstreamWriter.SendComplete();                    upFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  downFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_not_signal_error_if_traffic_is_one_way,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upstreamWriter = TestPublisher.CreateProbe<int>(this);                  var downstreamWriter = TestPublisher.CreateProbe<string>(this);                    var upstream = Flow.FromSinkAndSource(Sink.Ignore<string>()'                      Source.FromPublisher<int>(upstreamWriter)' Keep.Left);                  var downstream = Flow.FromSinkAndSource(Sink.Ignore<int>()'                      Source.FromPublisher<string>(downstreamWriter)' Keep.Left);                    var assembly = upstream.JoinMaterialized(                      BidiFlow.BidirectionalIdleTimeout<int' string>(TimeSpan.FromSeconds(2))'                      Keep.Left).JoinMaterialized(downstream' Keep.Both);                  var r = assembly.Run(Materializer);                  var upFinished = r.Item1;                  var downFinished = r.Item2;                    upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                  upstreamWriter.SendNext(1);                  Thread.Sleep(1000);                    upstreamWriter.SendComplete();                  downstreamWriter.SendComplete();                    upFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  downFinished.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_be_able_to_signal_timeout_once_no_traffic_on_either_sides,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    // Request enough for the whole test                  upRead.Request(100);                  downRead.Request(100);                    upWrite.SendNext("DATA1");                  downRead.ExpectNext("DATA1");                  Thread.Sleep(1500);                    downWrite.SendNext(1);                  upRead.ExpectNext(1);                  Thread.Sleep(1500);                    upWrite.SendNext("DATA2");                  downRead.ExpectNext("DATA2");                  Thread.Sleep(1000);                    downWrite.SendNext(2);                  upRead.ExpectNext(2);                    upRead.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  var error1 = upRead.ExpectError();                  var error2 = downRead.ExpectError();                    error1.Should().BeOfType<TimeoutException>();                  error1.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(2)}.");                  error2.ShouldBeEquivalentTo(error1);                    upWrite.ExpectCancellation();                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_be_able_to_signal_timeout_once_no_traffic_on_either_sides,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    // Request enough for the whole test                  upRead.Request(100);                  downRead.Request(100);                    upWrite.SendNext("DATA1");                  downRead.ExpectNext("DATA1");                  Thread.Sleep(1500);                    downWrite.SendNext(1);                  upRead.ExpectNext(1);                  Thread.Sleep(1500);                    upWrite.SendNext("DATA2");                  downRead.ExpectNext("DATA2");                  Thread.Sleep(1000);                    downWrite.SendNext(2);                  upRead.ExpectNext(2);                    upRead.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  var error1 = upRead.ExpectError();                  var error2 = downRead.ExpectError();                    error1.Should().BeOfType<TimeoutException>();                  error1.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(2)}.");                  error2.ShouldBeEquivalentTo(error1);                    upWrite.ExpectCancellation();                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_be_able_to_signal_timeout_once_no_traffic_on_either_sides,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    // Request enough for the whole test                  upRead.Request(100);                  downRead.Request(100);                    upWrite.SendNext("DATA1");                  downRead.ExpectNext("DATA1");                  Thread.Sleep(1500);                    downWrite.SendNext(1);                  upRead.ExpectNext(1);                  Thread.Sleep(1500);                    upWrite.SendNext("DATA2");                  downRead.ExpectNext("DATA2");                  Thread.Sleep(1000);                    downWrite.SendNext(2);                  upRead.ExpectNext(2);                    upRead.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  var error1 = upRead.ExpectError();                  var error2 = downRead.ExpectError();                    error1.Should().BeOfType<TimeoutException>();                  error1.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(2)}.");                  error2.ShouldBeEquivalentTo(error1);                    upWrite.ExpectCancellation();                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_be_able_to_signal_timeout_once_no_traffic_on_either_sides,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    // Request enough for the whole test                  upRead.Request(100);                  downRead.Request(100);                    upWrite.SendNext("DATA1");                  downRead.ExpectNext("DATA1");                  Thread.Sleep(1500);                    downWrite.SendNext(1);                  upRead.ExpectNext(1);                  Thread.Sleep(1500);                    upWrite.SendNext("DATA2");                  downRead.ExpectNext("DATA2");                  Thread.Sleep(1000);                    downWrite.SendNext(2);                  upRead.ExpectNext(2);                    upRead.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  var error1 = upRead.ExpectError();                  var error2 = downRead.ExpectError();                    error1.Should().BeOfType<TimeoutException>();                  error1.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(2)}.");                  error2.ShouldBeEquivalentTo(error1);                    upWrite.ExpectCancellation();                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_be_able_to_signal_timeout_once_no_traffic_on_either_sides,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    // Request enough for the whole test                  upRead.Request(100);                  downRead.Request(100);                    upWrite.SendNext("DATA1");                  downRead.ExpectNext("DATA1");                  Thread.Sleep(1500);                    downWrite.SendNext(1);                  upRead.ExpectNext(1);                  Thread.Sleep(1500);                    upWrite.SendNext("DATA2");                  downRead.ExpectNext("DATA2");                  Thread.Sleep(1000);                    downWrite.SendNext(2);                  upRead.ExpectNext(2);                    upRead.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  var error1 = upRead.ExpectError();                  var error2 = downRead.ExpectError();                    error1.Should().BeOfType<TimeoutException>();                  error1.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(2)}.");                  error2.ShouldBeEquivalentTo(error1);                    upWrite.ExpectCancellation();                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_be_able_to_signal_timeout_once_no_traffic_on_either_sides,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    // Request enough for the whole test                  upRead.Request(100);                  downRead.Request(100);                    upWrite.SendNext("DATA1");                  downRead.ExpectNext("DATA1");                  Thread.Sleep(1500);                    downWrite.SendNext(1);                  upRead.ExpectNext(1);                  Thread.Sleep(1500);                    upWrite.SendNext("DATA2");                  downRead.ExpectNext("DATA2");                  Thread.Sleep(1000);                    downWrite.SendNext(2);                  upRead.ExpectNext(2);                    upRead.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  var error1 = upRead.ExpectError();                  var error2 = downRead.ExpectError();                    error1.Should().BeOfType<TimeoutException>();                  error1.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(2)}.");                  error2.ShouldBeEquivalentTo(error1);                    upWrite.ExpectCancellation();                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_be_able_to_signal_timeout_once_no_traffic_on_either_sides,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    // Request enough for the whole test                  upRead.Request(100);                  downRead.Request(100);                    upWrite.SendNext("DATA1");                  downRead.ExpectNext("DATA1");                  Thread.Sleep(1500);                    downWrite.SendNext(1);                  upRead.ExpectNext(1);                  Thread.Sleep(1500);                    upWrite.SendNext("DATA2");                  downRead.ExpectNext("DATA2");                  Thread.Sleep(1000);                    downWrite.SendNext(2);                  upRead.ExpectNext(2);                    upRead.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  var error1 = upRead.ExpectError();                  var error2 = downRead.ExpectError();                    error1.Should().BeOfType<TimeoutException>();                  error1.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(2)}.");                  error2.ShouldBeEquivalentTo(error1);                    upWrite.ExpectCancellation();                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_be_able_to_signal_timeout_once_no_traffic_on_either_sides,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    // Request enough for the whole test                  upRead.Request(100);                  downRead.Request(100);                    upWrite.SendNext("DATA1");                  downRead.ExpectNext("DATA1");                  Thread.Sleep(1500);                    downWrite.SendNext(1);                  upRead.ExpectNext(1);                  Thread.Sleep(1500);                    upWrite.SendNext("DATA2");                  downRead.ExpectNext("DATA2");                  Thread.Sleep(1000);                    downWrite.SendNext(2);                  upRead.ExpectNext(2);                    upRead.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  var error1 = upRead.ExpectError();                  var error2 = downRead.ExpectError();                    error1.Should().BeOfType<TimeoutException>();                  error1.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(2)}.");                  error2.ShouldBeEquivalentTo(error1);                    upWrite.ExpectCancellation();                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_be_able_to_signal_timeout_once_no_traffic_on_either_sides,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    // Request enough for the whole test                  upRead.Request(100);                  downRead.Request(100);                    upWrite.SendNext("DATA1");                  downRead.ExpectNext("DATA1");                  Thread.Sleep(1500);                    downWrite.SendNext(1);                  upRead.ExpectNext(1);                  Thread.Sleep(1500);                    upWrite.SendNext("DATA2");                  downRead.ExpectNext("DATA2");                  Thread.Sleep(1000);                    downWrite.SendNext(2);                  upRead.ExpectNext(2);                    upRead.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  var error1 = upRead.ExpectError();                  var error2 = downRead.ExpectError();                    error1.Should().BeOfType<TimeoutException>();                  error1.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(2)}.");                  error2.ShouldBeEquivalentTo(error1);                    upWrite.ExpectCancellation();                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_be_able_to_signal_timeout_once_no_traffic_on_either_sides,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    // Request enough for the whole test                  upRead.Request(100);                  downRead.Request(100);                    upWrite.SendNext("DATA1");                  downRead.ExpectNext("DATA1");                  Thread.Sleep(1500);                    downWrite.SendNext(1);                  upRead.ExpectNext(1);                  Thread.Sleep(1500);                    upWrite.SendNext("DATA2");                  downRead.ExpectNext("DATA2");                  Thread.Sleep(1000);                    downWrite.SendNext(2);                  upRead.ExpectNext(2);                    upRead.ExpectNoMsg(TimeSpan.FromMilliseconds(500));                  var error1 = upRead.ExpectError();                  var error2 = downRead.ExpectError();                    error1.Should().BeOfType<TimeoutException>();                  error1.Message.Should().Be($"No elements passed in the last {TimeSpan.FromSeconds(2)}.");                  error2.ShouldBeEquivalentTo(error1);                    upWrite.ExpectCancellation();                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.Implementation,TimeoutsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\Implementation\TimeoutsSpec.cs,IdleTimeoutBidi_must_signal_error_to_all_outputs,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var upWrite = TestPublisher.CreateProbe<string>(this);                  var upRead = TestSubscriber.CreateProbe<int>(this);                    var downWrite = TestPublisher.CreateProbe<int>(this);                  var downRead = TestSubscriber.CreateProbe<string>(this);                    RunnableGraph.FromGraph(GraphDsl.Create(b =>                  {                      var timeoutStage = b.Add(BidiFlow.BidirectionalIdleTimeout<string' int>(TimeSpan.FromSeconds(2)));                        b.From(Source.FromPublisher<string>(upWrite)).To(timeoutStage.Inlet1);                      b.From(timeoutStage.Outlet1).To(Sink.FromSubscriber(downRead));                      b.From(timeoutStage.Outlet2).To(Sink.FromSubscriber(upRead));                      b.From(Source.FromPublisher<int>(downWrite)).To(timeoutStage.Inlet2);                        return ClosedShape.Instance;                  })).Run(Materializer);                    var te = new TestException("test");                    upWrite.SendError(te);                    upRead.ExpectSubscriptionAndError().ShouldBeEquivalentTo(te);                  downRead.ExpectSubscriptionAndError().ShouldBeEquivalentTo(te);                  downWrite.ExpectCancellation();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,FileSinkSpec,The following statement contains a magic number: i < 1000
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_write_lines_to_a_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      var completion = Source.From(_testByteStrings).RunWith(FileIO.ToFile(f)' _materializer);                        completion.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result = completion.Result;                      result.Count.Should().Be(6006);                      CheckFileContent(f' _testLines.Aggregate((s' s1) => s + s1));                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_write_lines_to_a_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      var completion = Source.From(_testByteStrings).RunWith(FileIO.ToFile(f)' _materializer);                        completion.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result = completion.Result;                      result.Count.Should().Be(6006);                      CheckFileContent(f' _testLines.Aggregate((s' s1) => s + s1));                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_create_new_file_if_not_exists,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      var completion = Source.From(_testByteStrings).RunWith(FileIO.ToFile(f)' _materializer);                      completion.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result = completion.Result;                      result.Count.Should().Be(6006);                      CheckFileContent(f' _testLines.Aggregate((s' s1) => s + s1));                  }' false);              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_create_new_file_if_not_exists,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      var completion = Source.From(_testByteStrings).RunWith(FileIO.ToFile(f)' _materializer);                      completion.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result = completion.Result;                      result.Count.Should().Be(6006);                      CheckFileContent(f' _testLines.Aggregate((s' s1) => s + s1));                  }' false);              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_by_default_write_into_existing_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      Func<IEnumerable<string>' Task<IOResult>> write = lines => Source.From(lines)                          .Select(ByteString.FromString)                          .RunWith(FileIO.ToFile(f)' _materializer);                        var completion1 = write(_testLines);                      completion1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                        var lastWrite = new string[100];                      for (var i = 0; i < 100; i++)                          lastWrite[i] = "x";                        var completion2 = write(lastWrite);                      completion2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result = completion2.Result;                        var lastWriteString = new string(lastWrite.SelectMany(x => x).ToArray());                      result.Count.Should().Be(lastWriteString.Length);                      var testLinesString = new string(_testLines.SelectMany(x => x).ToArray());                      CheckFileContent(f' lastWriteString + testLinesString.Substring(100));                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_by_default_write_into_existing_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      Func<IEnumerable<string>' Task<IOResult>> write = lines => Source.From(lines)                          .Select(ByteString.FromString)                          .RunWith(FileIO.ToFile(f)' _materializer);                        var completion1 = write(_testLines);                      completion1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                        var lastWrite = new string[100];                      for (var i = 0; i < 100; i++)                          lastWrite[i] = "x";                        var completion2 = write(lastWrite);                      completion2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result = completion2.Result;                        var lastWriteString = new string(lastWrite.SelectMany(x => x).ToArray());                      result.Count.Should().Be(lastWriteString.Length);                      var testLinesString = new string(_testLines.SelectMany(x => x).ToArray());                      CheckFileContent(f' lastWriteString + testLinesString.Substring(100));                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_by_default_write_into_existing_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      Func<IEnumerable<string>' Task<IOResult>> write = lines => Source.From(lines)                          .Select(ByteString.FromString)                          .RunWith(FileIO.ToFile(f)' _materializer);                        var completion1 = write(_testLines);                      completion1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                        var lastWrite = new string[100];                      for (var i = 0; i < 100; i++)                          lastWrite[i] = "x";                        var completion2 = write(lastWrite);                      completion2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result = completion2.Result;                        var lastWriteString = new string(lastWrite.SelectMany(x => x).ToArray());                      result.Count.Should().Be(lastWriteString.Length);                      var testLinesString = new string(_testLines.SelectMany(x => x).ToArray());                      CheckFileContent(f' lastWriteString + testLinesString.Substring(100));                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_by_default_write_into_existing_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      Func<IEnumerable<string>' Task<IOResult>> write = lines => Source.From(lines)                          .Select(ByteString.FromString)                          .RunWith(FileIO.ToFile(f)' _materializer);                        var completion1 = write(_testLines);                      completion1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                        var lastWrite = new string[100];                      for (var i = 0; i < 100; i++)                          lastWrite[i] = "x";                        var completion2 = write(lastWrite);                      completion2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result = completion2.Result;                        var lastWriteString = new string(lastWrite.SelectMany(x => x).ToArray());                      result.Count.Should().Be(lastWriteString.Length);                      var testLinesString = new string(_testLines.SelectMany(x => x).ToArray());                      CheckFileContent(f' lastWriteString + testLinesString.Substring(100));                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_by_default_write_into_existing_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      Func<IEnumerable<string>' Task<IOResult>> write = lines => Source.From(lines)                          .Select(ByteString.FromString)                          .RunWith(FileIO.ToFile(f)' _materializer);                        var completion1 = write(_testLines);                      completion1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                        var lastWrite = new string[100];                      for (var i = 0; i < 100; i++)                          lastWrite[i] = "x";                        var completion2 = write(lastWrite);                      completion2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result = completion2.Result;                        var lastWriteString = new string(lastWrite.SelectMany(x => x).ToArray());                      result.Count.Should().Be(lastWriteString.Length);                      var testLinesString = new string(_testLines.SelectMany(x => x).ToArray());                      CheckFileContent(f' lastWriteString + testLinesString.Substring(100));                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_allow_appending_to_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      Func<List<string>' Task<IOResult>> write = lines => Source.From(lines)                          .Select(ByteString.FromString)                          .RunWith(FileIO.ToFile(f' fileMode: FileMode.Append)' _materializer);                        var completion1 = write(_testLines);                      completion1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result1 = completion1.Result;                        var lastWrite = new List<string>();                      for (var i = 0; i < 100; i++)                          lastWrite.Add("x");                        var completion2 = write(lastWrite);                      completion2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result2 = completion2.Result;                        var lastWriteString = new string(lastWrite.SelectMany(x => x).ToArray());                      var testLinesString = new string(_testLines.SelectMany(x => x).ToArray());                        f.Length.Should().Be(result1.Count + result2.Count);                        //NOTE: no new line at the end of the file - does JVM/linux appends new line at the end of the file in append mode?                      CheckFileContent(f' testLinesString + lastWriteString);                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_allow_appending_to_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      Func<List<string>' Task<IOResult>> write = lines => Source.From(lines)                          .Select(ByteString.FromString)                          .RunWith(FileIO.ToFile(f' fileMode: FileMode.Append)' _materializer);                        var completion1 = write(_testLines);                      completion1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result1 = completion1.Result;                        var lastWrite = new List<string>();                      for (var i = 0; i < 100; i++)                          lastWrite.Add("x");                        var completion2 = write(lastWrite);                      completion2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result2 = completion2.Result;                        var lastWriteString = new string(lastWrite.SelectMany(x => x).ToArray());                      var testLinesString = new string(_testLines.SelectMany(x => x).ToArray());                        f.Length.Should().Be(result1.Count + result2.Count);                        //NOTE: no new line at the end of the file - does JVM/linux appends new line at the end of the file in append mode?                      CheckFileContent(f' testLinesString + lastWriteString);                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSinkSpec.cs,SynchronousFileSink_should_allow_appending_to_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  TargetFile(f =>                  {                      Func<List<string>' Task<IOResult>> write = lines => Source.From(lines)                          .Select(ByteString.FromString)                          .RunWith(FileIO.ToFile(f' fileMode: FileMode.Append)' _materializer);                        var completion1 = write(_testLines);                      completion1.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result1 = completion1.Result;                        var lastWrite = new List<string>();                      for (var i = 0; i < 100; i++)                          lastWrite.Add("x");                        var completion2 = write(lastWrite);                      completion2.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                      var result2 = completion2.Result;                        var lastWriteString = new string(lastWrite.SelectMany(x => x).ToArray());                      var testLinesString = new string(_testLines.SelectMany(x => x).ToArray());                        f.Length.Should().Be(result1.Count + result2.Count);                        //NOTE: no new line at the end of the file - does JVM/linux appends new line at the end of the file in append mode?                      CheckFileContent(f' testLinesString + lastWriteString);                  });              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,FileSourceSpec,The following statement contains a magic number: var sb = new StringBuilder(6000);
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,FileSource_should_read_contents_from_a_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var chunkSize = 512;                  var bufferAttributes = Attributes.CreateInputBuffer(1' 2);                    var p = FileIO.FromFile(TestFile()' chunkSize)                      .WithAttributes(bufferAttributes)                      .RunWith(Sink.AsPublisher<ByteString>(false)' _materializer);                    var c = this.CreateManualProbe<ByteString>();                  p.Subscribe(c);                  var sub = c.ExpectSubscription();                    var remaining = _testText;                  var nextChunk = new Func<string>(() =>                  {                      string chunks;                        if (remaining.Length <= chunkSize)                      {                          chunks = remaining;                          remaining = string.Empty;                      }                      else                      {                          chunks = remaining.Substring(0' chunkSize);                          remaining = remaining.Substring(chunkSize);                      }                        return chunks;                  });                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    sub.Request(200);                  var expectedChunk = nextChunk();                  while (!string.IsNullOrEmpty(expectedChunk))                  {                      var actual = c.ExpectNext().DecodeString(Encoding.UTF8);                      actual.Should().Be(expectedChunk);                      expectedChunk = nextChunk();                  }                  sub.Request(1);                  c.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,FileSource_should_read_contents_from_a_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var chunkSize = 512;                  var bufferAttributes = Attributes.CreateInputBuffer(1' 2);                    var p = FileIO.FromFile(TestFile()' chunkSize)                      .WithAttributes(bufferAttributes)                      .RunWith(Sink.AsPublisher<ByteString>(false)' _materializer);                    var c = this.CreateManualProbe<ByteString>();                  p.Subscribe(c);                  var sub = c.ExpectSubscription();                    var remaining = _testText;                  var nextChunk = new Func<string>(() =>                  {                      string chunks;                        if (remaining.Length <= chunkSize)                      {                          chunks = remaining;                          remaining = string.Empty;                      }                      else                      {                          chunks = remaining.Substring(0' chunkSize);                          remaining = remaining.Substring(chunkSize);                      }                        return chunks;                  });                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    sub.Request(200);                  var expectedChunk = nextChunk();                  while (!string.IsNullOrEmpty(expectedChunk))                  {                      var actual = c.ExpectNext().DecodeString(Encoding.UTF8);                      actual.Should().Be(expectedChunk);                      expectedChunk = nextChunk();                  }                  sub.Request(1);                  c.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,FileSource_should_read_contents_from_a_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var chunkSize = 512;                  var bufferAttributes = Attributes.CreateInputBuffer(1' 2);                    var p = FileIO.FromFile(TestFile()' chunkSize)                      .WithAttributes(bufferAttributes)                      .RunWith(Sink.AsPublisher<ByteString>(false)' _materializer);                    var c = this.CreateManualProbe<ByteString>();                  p.Subscribe(c);                  var sub = c.ExpectSubscription();                    var remaining = _testText;                  var nextChunk = new Func<string>(() =>                  {                      string chunks;                        if (remaining.Length <= chunkSize)                      {                          chunks = remaining;                          remaining = string.Empty;                      }                      else                      {                          chunks = remaining.Substring(0' chunkSize);                          remaining = remaining.Substring(chunkSize);                      }                        return chunks;                  });                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    sub.Request(200);                  var expectedChunk = nextChunk();                  while (!string.IsNullOrEmpty(expectedChunk))                  {                      var actual = c.ExpectNext().DecodeString(Encoding.UTF8);                      actual.Should().Be(expectedChunk);                      expectedChunk = nextChunk();                  }                  sub.Request(1);                  c.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,FileSource_should_read_contents_from_a_file,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var chunkSize = 512;                  var bufferAttributes = Attributes.CreateInputBuffer(1' 2);                    var p = FileIO.FromFile(TestFile()' chunkSize)                      .WithAttributes(bufferAttributes)                      .RunWith(Sink.AsPublisher<ByteString>(false)' _materializer);                    var c = this.CreateManualProbe<ByteString>();                  p.Subscribe(c);                  var sub = c.ExpectSubscription();                    var remaining = _testText;                  var nextChunk = new Func<string>(() =>                  {                      string chunks;                        if (remaining.Length <= chunkSize)                      {                          chunks = remaining;                          remaining = string.Empty;                      }                      else                      {                          chunks = remaining.Substring(0' chunkSize);                          remaining = remaining.Substring(chunkSize);                      }                        return chunks;                  });                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    sub.Request(200);                  var expectedChunk = nextChunk();                  while (!string.IsNullOrEmpty(expectedChunk))                  {                      var actual = c.ExpectNext().DecodeString(Encoding.UTF8);                      actual.Should().Be(expectedChunk);                      expectedChunk = nextChunk();                  }                  sub.Request(1);                  c.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,FileSource_should_complete_only_when_all_contents_of_a_file_have_been_signalled,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var chunkSize = 512;                  var bufferAttributes = Attributes.CreateInputBuffer(1' 2);                  var demandAllButOnechunks = _testText.Length / chunkSize - 1;                    var p = FileIO.FromFile(TestFile()' chunkSize)                      .WithAttributes(bufferAttributes)                      .RunWith(Sink.AsPublisher<ByteString>(false)' _materializer);                    var c = this.CreateManualProbe<ByteString>();                  p.Subscribe(c);                  var sub = c.ExpectSubscription();                    var remaining = _testText;                  var nextChunk = new Func<string>(() =>                  {                      string chunks;                        if (remaining.Length <= chunkSize)                      {                          chunks = remaining;                          remaining = string.Empty;                      }                      else                      {                          chunks = remaining.Substring(0' chunkSize);                          remaining = remaining.Substring(chunkSize);                      }                        return chunks;                  });                    sub.Request(demandAllButOnechunks);                  for (var i = 0; i < demandAllButOnechunks; i++)                      c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,FileSource_should_complete_only_when_all_contents_of_a_file_have_been_signalled,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var chunkSize = 512;                  var bufferAttributes = Attributes.CreateInputBuffer(1' 2);                  var demandAllButOnechunks = _testText.Length / chunkSize - 1;                    var p = FileIO.FromFile(TestFile()' chunkSize)                      .WithAttributes(bufferAttributes)                      .RunWith(Sink.AsPublisher<ByteString>(false)' _materializer);                    var c = this.CreateManualProbe<ByteString>();                  p.Subscribe(c);                  var sub = c.ExpectSubscription();                    var remaining = _testText;                  var nextChunk = new Func<string>(() =>                  {                      string chunks;                        if (remaining.Length <= chunkSize)                      {                          chunks = remaining;                          remaining = string.Empty;                      }                      else                      {                          chunks = remaining.Substring(0' chunkSize);                          remaining = remaining.Substring(chunkSize);                      }                        return chunks;                  });                    sub.Request(demandAllButOnechunks);                  for (var i = 0; i < demandAllButOnechunks; i++)                      c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,FileSource_should_complete_only_when_all_contents_of_a_file_have_been_signalled,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var chunkSize = 512;                  var bufferAttributes = Attributes.CreateInputBuffer(1' 2);                  var demandAllButOnechunks = _testText.Length / chunkSize - 1;                    var p = FileIO.FromFile(TestFile()' chunkSize)                      .WithAttributes(bufferAttributes)                      .RunWith(Sink.AsPublisher<ByteString>(false)' _materializer);                    var c = this.CreateManualProbe<ByteString>();                  p.Subscribe(c);                  var sub = c.ExpectSubscription();                    var remaining = _testText;                  var nextChunk = new Func<string>(() =>                  {                      string chunks;                        if (remaining.Length <= chunkSize)                      {                          chunks = remaining;                          remaining = string.Empty;                      }                      else                      {                          chunks = remaining.Substring(0' chunkSize);                          remaining = remaining.Substring(chunkSize);                      }                        return chunks;                  });                    sub.Request(demandAllButOnechunks);                  for (var i = 0; i < demandAllButOnechunks; i++)                      c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,FileSource_should_complete_only_when_all_contents_of_a_file_have_been_signalled,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var chunkSize = 512;                  var bufferAttributes = Attributes.CreateInputBuffer(1' 2);                  var demandAllButOnechunks = _testText.Length / chunkSize - 1;                    var p = FileIO.FromFile(TestFile()' chunkSize)                      .WithAttributes(bufferAttributes)                      .RunWith(Sink.AsPublisher<ByteString>(false)' _materializer);                    var c = this.CreateManualProbe<ByteString>();                  p.Subscribe(c);                  var sub = c.ExpectSubscription();                    var remaining = _testText;                  var nextChunk = new Func<string>(() =>                  {                      string chunks;                        if (remaining.Length <= chunkSize)                      {                          chunks = remaining;                          remaining = string.Empty;                      }                      else                      {                          chunks = remaining.Substring(0' chunkSize);                          remaining = remaining.Substring(chunkSize);                      }                        return chunks;                  });                    sub.Request(demandAllButOnechunks);                  for (var i = 0; i < demandAllButOnechunks; i++)                      c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(300));                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectNoMsg(TimeSpan.FromMilliseconds(200));                    sub.Request(1);                  c.ExpectNext().DecodeString(Encoding.UTF8).Should().Be(nextChunk());                  c.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,FileSource_should_count_lines_in_a_real_file,The following statement contains a magic number: f.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.IO,FileSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\FileSourceSpec.cs,AfterAll,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_read_bytes_correctly_if_requested_by_input_stream_not_in_chunk_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sinkProbe = CreateTestProbe();                  var byteString2 = RandomByteString(3);                  var inputStream = Source.From(new[] { _byteString' byteString2' null })                      .RunWith(TestSink(sinkProbe)' _materializer);                    sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Take(2));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Drop(2).Concat(byteString2.Take(1)));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(byteString2.Drop(1));                    inputStream.Close();                }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_read_bytes_correctly_if_requested_by_input_stream_not_in_chunk_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sinkProbe = CreateTestProbe();                  var byteString2 = RandomByteString(3);                  var inputStream = Source.From(new[] { _byteString' byteString2' null })                      .RunWith(TestSink(sinkProbe)' _materializer);                    sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Take(2));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Drop(2).Concat(byteString2.Take(1)));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(byteString2.Drop(1));                    inputStream.Close();                }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_read_bytes_correctly_if_requested_by_input_stream_not_in_chunk_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sinkProbe = CreateTestProbe();                  var byteString2 = RandomByteString(3);                  var inputStream = Source.From(new[] { _byteString' byteString2' null })                      .RunWith(TestSink(sinkProbe)' _materializer);                    sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Take(2));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Drop(2).Concat(byteString2.Take(1)));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(byteString2.Drop(1));                    inputStream.Close();                }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_read_bytes_correctly_if_requested_by_input_stream_not_in_chunk_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sinkProbe = CreateTestProbe();                  var byteString2 = RandomByteString(3);                  var inputStream = Source.From(new[] { _byteString' byteString2' null })                      .RunWith(TestSink(sinkProbe)' _materializer);                    sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Take(2));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Drop(2).Concat(byteString2.Take(1)));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(byteString2.Drop(1));                    inputStream.Close();                }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_read_bytes_correctly_if_requested_by_input_stream_not_in_chunk_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sinkProbe = CreateTestProbe();                  var byteString2 = RandomByteString(3);                  var inputStream = Source.From(new[] { _byteString' byteString2' null })                      .RunWith(TestSink(sinkProbe)' _materializer);                    sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Take(2));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Drop(2).Concat(byteString2.Take(1)));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(byteString2.Drop(1));                    inputStream.Close();                }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_read_bytes_correctly_if_requested_by_input_stream_not_in_chunk_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sinkProbe = CreateTestProbe();                  var byteString2 = RandomByteString(3);                  var inputStream = Source.From(new[] { _byteString' byteString2' null })                      .RunWith(TestSink(sinkProbe)' _materializer);                    sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Take(2));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Drop(2).Concat(byteString2.Take(1)));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(byteString2.Drop(1));                    inputStream.Close();                }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_read_bytes_correctly_if_requested_by_input_stream_not_in_chunk_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sinkProbe = CreateTestProbe();                  var byteString2 = RandomByteString(3);                  var inputStream = Source.From(new[] { _byteString' byteString2' null })                      .RunWith(TestSink(sinkProbe)' _materializer);                    sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Take(2));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Drop(2).Concat(byteString2.Take(1)));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(byteString2.Drop(1));                    inputStream.Close();                }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_read_bytes_correctly_if_requested_by_input_stream_not_in_chunk_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sinkProbe = CreateTestProbe();                  var byteString2 = RandomByteString(3);                  var inputStream = Source.From(new[] { _byteString' byteString2' null })                      .RunWith(TestSink(sinkProbe)' _materializer);                    sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Take(2));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Drop(2).Concat(byteString2.Take(1)));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(byteString2.Drop(1));                    inputStream.Close();                }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_read_bytes_correctly_if_requested_by_input_stream_not_in_chunk_size,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sinkProbe = CreateTestProbe();                  var byteString2 = RandomByteString(3);                  var inputStream = Source.From(new[] { _byteString' byteString2' null })                      .RunWith(TestSink(sinkProbe)' _materializer);                    sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Take(2));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(_byteString.Drop(2).Concat(byteString2.Take(1)));                    result = ReadN(inputStream' 2);                  result.Item1.Should().Be(2);                  result.Item2.Should().BeEquivalentTo(byteString2.Drop(1));                    inputStream.Close();                }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_return_all_data_when_upstream_is_completed,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sinkProbe = CreateTestProbe();                  var t = this.SourceProbe<ByteString>().ToMaterialized(TestSink(sinkProbe)' Keep.Both).Run(_materializer);                  var probe = t.Item1;                  var inputStream = t.Item2;                  var bytes = RandomByteString(1);                    probe.SendNext(bytes);                  sinkProbe.ExpectMsg<GraphStageMessages.Push>();                    probe.SendComplete();                  sinkProbe.ExpectMsg<GraphStageMessages.UpstreamFinish>();                    var result = ReadN(inputStream' 3);                  result.Item1.Should().Be(1);                  result.Item2.Should().BeEquivalentTo(bytes);              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_smaller_then_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = RandomByteString(10);                  var inputStream = Source.Single(bytes).RunWith(StreamConverters.AsInputStream()' _materializer);                    while (bytes.NonEmpty)                  {                      var expected = bytes.Take(3);                      bytes = bytes.Drop(3);                        var result = ReadN(inputStream' 3);                      result.Item1.Should().Be(expected.Count);                      result.Item2.ShouldBeEquivalentTo(expected);                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_smaller_then_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = RandomByteString(10);                  var inputStream = Source.Single(bytes).RunWith(StreamConverters.AsInputStream()' _materializer);                    while (bytes.NonEmpty)                  {                      var expected = bytes.Take(3);                      bytes = bytes.Drop(3);                        var result = ReadN(inputStream' 3);                      result.Item1.Should().Be(expected.Count);                      result.Item2.ShouldBeEquivalentTo(expected);                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_smaller_then_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = RandomByteString(10);                  var inputStream = Source.Single(bytes).RunWith(StreamConverters.AsInputStream()' _materializer);                    while (bytes.NonEmpty)                  {                      var expected = bytes.Take(3);                      bytes = bytes.Drop(3);                        var result = ReadN(inputStream' 3);                      result.Item1.Should().Be(expected.Count);                      result.Item2.ShouldBeEquivalentTo(expected);                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_smaller_then_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = RandomByteString(10);                  var inputStream = Source.Single(bytes).RunWith(StreamConverters.AsInputStream()' _materializer);                    while (bytes.NonEmpty)                  {                      var expected = bytes.Take(3);                      bytes = bytes.Drop(3);                        var result = ReadN(inputStream' 3);                      result.Item1.Should().Be(expected.Count);                      result.Item2.ShouldBeEquivalentTo(expected);                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_throw_exception_when_call_read_With_wrong_parameters,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputStream = Source.Single(_byteString).RunWith(StreamConverters.AsInputStream()' _materializer);                  var buf = new byte[3];                    Action(() => inputStream.Read(buf' -1' 2)).ShouldThrow<ArgumentException>();                  Action(() => inputStream.Read(buf' 0' 5)).ShouldThrow<ArgumentException>();                  Action(() => inputStream.Read(new byte[0]' 0' 1)).ShouldThrow<ArgumentException>();                  Action(() => inputStream.Read(buf' 0' 0)).ShouldThrow<ArgumentException>();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_throw_exception_when_call_read_With_wrong_parameters,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputStream = Source.Single(_byteString).RunWith(StreamConverters.AsInputStream()' _materializer);                  var buf = new byte[3];                    Action(() => inputStream.Read(buf' -1' 2)).ShouldThrow<ArgumentException>();                  Action(() => inputStream.Read(buf' 0' 5)).ShouldThrow<ArgumentException>();                  Action(() => inputStream.Read(new byte[0]' 0' 1)).ShouldThrow<ArgumentException>();                  Action(() => inputStream.Read(buf' 0' 0)).ShouldThrow<ArgumentException>();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_throw_exception_when_call_read_With_wrong_parameters,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputStream = Source.Single(_byteString).RunWith(StreamConverters.AsInputStream()' _materializer);                  var buf = new byte[3];                    Action(() => inputStream.Read(buf' -1' 2)).ShouldThrow<ArgumentException>();                  Action(() => inputStream.Read(buf' 0' 5)).ShouldThrow<ArgumentException>();                  Action(() => inputStream.Read(new byte[0]' 0' 1)).ShouldThrow<ArgumentException>();                  Action(() => inputStream.Read(buf' 0' 0)).ShouldThrow<ArgumentException>();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_successfully_read_several_chunks_at_once,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = Enumerable.Range(1' 4).Select(_ => RandomByteString(4)).ToList();                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(bytes).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while all elements arrive to sink                  bytes.ForEach(_ => sinkProbe.ExpectMsg<GraphStageMessages.Push>());                    for (var i = 0; i < 2; i++)                  {                      var r = ReadN(inputStream' 8);                      r.Item1.Should().Be(8);                      r.Item2.ShouldBeEquivalentTo(bytes[i * 2].Concat(bytes[i * 2 + 1]));                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_successfully_read_several_chunks_at_once,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = Enumerable.Range(1' 4).Select(_ => RandomByteString(4)).ToList();                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(bytes).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while all elements arrive to sink                  bytes.ForEach(_ => sinkProbe.ExpectMsg<GraphStageMessages.Push>());                    for (var i = 0; i < 2; i++)                  {                      var r = ReadN(inputStream' 8);                      r.Item1.Should().Be(8);                      r.Item2.ShouldBeEquivalentTo(bytes[i * 2].Concat(bytes[i * 2 + 1]));                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_successfully_read_several_chunks_at_once,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = Enumerable.Range(1' 4).Select(_ => RandomByteString(4)).ToList();                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(bytes).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while all elements arrive to sink                  bytes.ForEach(_ => sinkProbe.ExpectMsg<GraphStageMessages.Push>());                    for (var i = 0; i < 2; i++)                  {                      var r = ReadN(inputStream' 8);                      r.Item1.Should().Be(8);                      r.Item2.ShouldBeEquivalentTo(bytes[i * 2].Concat(bytes[i * 2 + 1]));                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_successfully_read_several_chunks_at_once,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = Enumerable.Range(1' 4).Select(_ => RandomByteString(4)).ToList();                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(bytes).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while all elements arrive to sink                  bytes.ForEach(_ => sinkProbe.ExpectMsg<GraphStageMessages.Push>());                    for (var i = 0; i < 2; i++)                  {                      var r = ReadN(inputStream' 8);                      r.Item1.Should().Be(8);                      r.Item2.ShouldBeEquivalentTo(bytes[i * 2].Concat(bytes[i * 2 + 1]));                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_successfully_read_several_chunks_at_once,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = Enumerable.Range(1' 4).Select(_ => RandomByteString(4)).ToList();                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(bytes).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while all elements arrive to sink                  bytes.ForEach(_ => sinkProbe.ExpectMsg<GraphStageMessages.Push>());                    for (var i = 0; i < 2; i++)                  {                      var r = ReadN(inputStream' 8);                      r.Item1.Should().Be(8);                      r.Item2.ShouldBeEquivalentTo(bytes[i * 2].Concat(bytes[i * 2 + 1]));                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_successfully_read_several_chunks_at_once,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = Enumerable.Range(1' 4).Select(_ => RandomByteString(4)).ToList();                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(bytes).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while all elements arrive to sink                  bytes.ForEach(_ => sinkProbe.ExpectMsg<GraphStageMessages.Push>());                    for (var i = 0; i < 2; i++)                  {                      var r = ReadN(inputStream' 8);                      r.Item1.Should().Be(8);                      r.Item2.ShouldBeEquivalentTo(bytes[i * 2].Concat(bytes[i * 2 + 1]));                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_successfully_read_several_chunks_at_once,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes = Enumerable.Range(1' 4).Select(_ => RandomByteString(4)).ToList();                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(bytes).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while all elements arrive to sink                  bytes.ForEach(_ => sinkProbe.ExpectMsg<GraphStageMessages.Push>());                    for (var i = 0; i < 2; i++)                  {                      var r = ReadN(inputStream' 8);                      r.Item1.Should().Be(8);                      r.Item2.ShouldBeEquivalentTo(bytes[i * 2].Concat(bytes[i * 2 + 1]));                  }                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_bigger_than_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes1 = RandomByteString(10);                  var bytes2 = RandomByteString(10);                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(new[] { bytes1' bytes2' null }).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while both elements arrive to sink                  sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var r1 = ReadN(inputStream' 15);                  r1.Item1.Should().Be(15);                  r1.Item2.ShouldBeEquivalentTo(bytes1.Concat(bytes2.Take(5)));                    var r2 = ReadN(inputStream' 15);                  r2.Item1.Should().Be(5);                  r2.Item2.ShouldBeEquivalentTo(bytes2.Drop(5));                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_bigger_than_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes1 = RandomByteString(10);                  var bytes2 = RandomByteString(10);                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(new[] { bytes1' bytes2' null }).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while both elements arrive to sink                  sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var r1 = ReadN(inputStream' 15);                  r1.Item1.Should().Be(15);                  r1.Item2.ShouldBeEquivalentTo(bytes1.Concat(bytes2.Take(5)));                    var r2 = ReadN(inputStream' 15);                  r2.Item1.Should().Be(5);                  r2.Item2.ShouldBeEquivalentTo(bytes2.Drop(5));                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_bigger_than_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes1 = RandomByteString(10);                  var bytes2 = RandomByteString(10);                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(new[] { bytes1' bytes2' null }).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while both elements arrive to sink                  sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var r1 = ReadN(inputStream' 15);                  r1.Item1.Should().Be(15);                  r1.Item2.ShouldBeEquivalentTo(bytes1.Concat(bytes2.Take(5)));                    var r2 = ReadN(inputStream' 15);                  r2.Item1.Should().Be(5);                  r2.Item2.ShouldBeEquivalentTo(bytes2.Drop(5));                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_bigger_than_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes1 = RandomByteString(10);                  var bytes2 = RandomByteString(10);                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(new[] { bytes1' bytes2' null }).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while both elements arrive to sink                  sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var r1 = ReadN(inputStream' 15);                  r1.Item1.Should().Be(15);                  r1.Item2.ShouldBeEquivalentTo(bytes1.Concat(bytes2.Take(5)));                    var r2 = ReadN(inputStream' 15);                  r2.Item1.Should().Be(5);                  r2.Item2.ShouldBeEquivalentTo(bytes2.Drop(5));                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_bigger_than_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes1 = RandomByteString(10);                  var bytes2 = RandomByteString(10);                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(new[] { bytes1' bytes2' null }).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while both elements arrive to sink                  sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var r1 = ReadN(inputStream' 15);                  r1.Item1.Should().Be(15);                  r1.Item2.ShouldBeEquivalentTo(bytes1.Concat(bytes2.Take(5)));                    var r2 = ReadN(inputStream' 15);                  r2.Item1.Should().Be(5);                  r2.Item2.ShouldBeEquivalentTo(bytes2.Drop(5));                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_bigger_than_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes1 = RandomByteString(10);                  var bytes2 = RandomByteString(10);                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(new[] { bytes1' bytes2' null }).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while both elements arrive to sink                  sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var r1 = ReadN(inputStream' 15);                  r1.Item1.Should().Be(15);                  r1.Item2.ShouldBeEquivalentTo(bytes1.Concat(bytes2.Take(5)));                    var r2 = ReadN(inputStream' 15);                  r2.Item1.Should().Be(5);                  r2.Item2.ShouldBeEquivalentTo(bytes2.Drop(5));                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_bigger_than_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes1 = RandomByteString(10);                  var bytes2 = RandomByteString(10);                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(new[] { bytes1' bytes2' null }).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while both elements arrive to sink                  sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var r1 = ReadN(inputStream' 15);                  r1.Item1.Should().Be(15);                  r1.Item2.ShouldBeEquivalentTo(bytes1.Concat(bytes2.Take(5)));                    var r2 = ReadN(inputStream' 15);                  r2.Item1.Should().Be(5);                  r2.Item2.ShouldBeEquivalentTo(bytes2.Drop(5));                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_read_chunks_bigger_than_stream_chunks,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var bytes1 = RandomByteString(10);                  var bytes2 = RandomByteString(10);                  var sinkProbe = CreateTestProbe();                  var inputStream = Source.From(new[] { bytes1' bytes2' null }).RunWith(TestSink(sinkProbe)' _materializer);                    //need to wait while both elements arrive to sink                  sinkProbe.ExpectMsgAllOf(GraphStageMessages.Push.Instance' GraphStageMessages.Push.Instance);                    var r1 = ReadN(inputStream' 15);                  r1.Item1.Should().Be(15);                  r1.Item2.ShouldBeEquivalentTo(bytes1.Concat(bytes2.Take(5)));                    var r2 = ReadN(inputStream' 15);                  r2.Item1.Should().Be(5);                  r2.Item2.ShouldBeEquivalentTo(bytes2.Drop(5));                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSinkSpec.cs,InputStreamSink_should_work_when_more_bytes_pulled_from_input_stream_than_available,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var inputStream = Source.Single(_byteString).RunWith(StreamConverters.AsInputStream()' _materializer);                    var r = ReadN(inputStream' _byteString.Count * 2);                  r.Item1.Should().Be(_byteString.Count);                  r.Item2.ShouldBeEquivalentTo(_byteString);                    inputStream.Close();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSourceSpec.cs,InputStreamSource_must_not_signal_when_no_demand,The following statement contains a magic number: f.TakeWithin(TimeSpan.FromSeconds(5)).RunForeach(it => { }' _materializer).Wait(TimeSpan.FromSeconds(10));
Magic Number,Akka.Streams.Tests.IO,InputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSourceSpec.cs,InputStreamSource_must_not_signal_when_no_demand,The following statement contains a magic number: f.TakeWithin(TimeSpan.FromSeconds(5)).RunForeach(it => { }' _materializer).Wait(TimeSpan.FromSeconds(10));
Magic Number,Akka.Streams.Tests.IO,InputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSourceSpec.cs,InputStreamSource_must_read_bytes_from_InputStream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var f = StreamConverters.FromInputStream(() => new ListInputStream(new[] {"a"' "b"' "c"}))                      .RunWith(Sink.First<ByteString>()' _materializer);                    f.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  f.Result.ShouldBeEquivalentTo(ByteString.FromString("abc"));              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,InputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSourceSpec.cs,InputStreamSource_must_emit_as_soon_as_read,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var latch = new TestLatch(1);                  var probe = StreamConverters.FromInputStream(() => new EmittedInputStream(latch)' chunkSize: 1)                      .RunWith(this.SinkProbe<ByteString>()' _materializer);                    probe.Request(4);                  probe.ExpectNext(ByteString.FromString("M"));                  latch.CountDown();                  probe.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,ConstInputStream,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSourceSpec.cs,Read,The following statement contains a magic number: buffer[0] = 42;
Magic Number,Akka.Streams.Tests.IO,ListInputStream,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\InputStreamSourceSpec.cs,Read,The following statement contains a magic number: return 3;
Magic Number,Akka.Streams.Tests.IO,OutputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSinkSpec.cs,OutputStreamSink_must_write_bytes_to_void_OutputStream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateTestProbe();                  var datas = new List<ByteString>                  {                      ByteString.FromString("a")'                      ByteString.FromString("c")'                      ByteString.FromString("c")                  };                    var completion = Source.From(datas)                      .RunWith(StreamConverters.FromOutputStream(() => new VoidOutputStream(p))' _materializer);                    p.ExpectMsg(datas[0].DecodeString());                  p.ExpectMsg(datas[1].DecodeString());                  p.ExpectMsg(datas[2].DecodeString());                  completion.Wait(TimeSpan.FromSeconds(3));              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,OutputStreamSinkSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSinkSpec.cs,OutputStreamSink_must_write_bytes_to_void_OutputStream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var p = CreateTestProbe();                  var datas = new List<ByteString>                  {                      ByteString.FromString("a")'                      ByteString.FromString("c")'                      ByteString.FromString("c")                  };                    var completion = Source.From(datas)                      .RunWith(StreamConverters.FromOutputStream(() => new VoidOutputStream(p))' _materializer);                    p.ExpectMsg(datas[0].DecodeString());                  p.ExpectMsg(datas[1].DecodeString());                  p.ExpectMsg(datas[2].DecodeString());                  completion.Wait(TimeSpan.FromSeconds(3));              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,OutputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSourceSpec.cs,OutputStreamSourceSpec,The following statement contains a magic number: _bytesArray = new[]              {                  Convert.ToByte(new Random().Next(256))'                  Convert.ToByte(new Random().Next(256))'                  Convert.ToByte(new Random().Next(256))              };
Magic Number,Akka.Streams.Tests.IO,OutputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSourceSpec.cs,OutputStreamSourceSpec,The following statement contains a magic number: _bytesArray = new[]              {                  Convert.ToByte(new Random().Next(256))'                  Convert.ToByte(new Random().Next(256))'                  Convert.ToByte(new Random().Next(256))              };
Magic Number,Akka.Streams.Tests.IO,OutputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSourceSpec.cs,OutputStreamSourceSpec,The following statement contains a magic number: _bytesArray = new[]              {                  Convert.ToByte(new Random().Next(256))'                  Convert.ToByte(new Random().Next(256))'                  Convert.ToByte(new Random().Next(256))              };
Magic Number,Akka.Streams.Tests.IO,OutputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSourceSpec.cs,OutputStreamSource_must_block_writes_when_buffer_is_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = StreamConverters.AsOutputStream()                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .ToMaterialized(this.SinkProbe<ByteString>()' Keep.Both)                      .Run(_materializer);                  var outputStream = t.Item1;                  var probe = t.Item2;                  var s = probe.ExpectSubscription();                    for (var i = 1; i <= 16; i++)                      outputStream.Write(_bytesArray' 0' _byteString.Count);                    //blocked call                  var f = Task.Run(() =>                  {                      outputStream.Write(_bytesArray' 0' _byteString.Count);                      return NotUsed.Instance;                  });                  ExpectTimeout(f' Timeout);                  probe.ExpectNoMsg(TimeSpan.MinValue);                    s.Request(17);                  ExpectSuccess(f' NotUsed.Instance);                  probe.ExpectNextN(Enumerable.Repeat(_byteString' 17).ToList());                    outputStream.Close();                  probe.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,OutputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSourceSpec.cs,OutputStreamSource_must_block_writes_when_buffer_is_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = StreamConverters.AsOutputStream()                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .ToMaterialized(this.SinkProbe<ByteString>()' Keep.Both)                      .Run(_materializer);                  var outputStream = t.Item1;                  var probe = t.Item2;                  var s = probe.ExpectSubscription();                    for (var i = 1; i <= 16; i++)                      outputStream.Write(_bytesArray' 0' _byteString.Count);                    //blocked call                  var f = Task.Run(() =>                  {                      outputStream.Write(_bytesArray' 0' _byteString.Count);                      return NotUsed.Instance;                  });                  ExpectTimeout(f' Timeout);                  probe.ExpectNoMsg(TimeSpan.MinValue);                    s.Request(17);                  ExpectSuccess(f' NotUsed.Instance);                  probe.ExpectNextN(Enumerable.Repeat(_byteString' 17).ToList());                    outputStream.Close();                  probe.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,OutputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSourceSpec.cs,OutputStreamSource_must_block_writes_when_buffer_is_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = StreamConverters.AsOutputStream()                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .ToMaterialized(this.SinkProbe<ByteString>()' Keep.Both)                      .Run(_materializer);                  var outputStream = t.Item1;                  var probe = t.Item2;                  var s = probe.ExpectSubscription();                    for (var i = 1; i <= 16; i++)                      outputStream.Write(_bytesArray' 0' _byteString.Count);                    //blocked call                  var f = Task.Run(() =>                  {                      outputStream.Write(_bytesArray' 0' _byteString.Count);                      return NotUsed.Instance;                  });                  ExpectTimeout(f' Timeout);                  probe.ExpectNoMsg(TimeSpan.MinValue);                    s.Request(17);                  ExpectSuccess(f' NotUsed.Instance);                  probe.ExpectNextN(Enumerable.Repeat(_byteString' 17).ToList());                    outputStream.Close();                  probe.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,OutputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSourceSpec.cs,OutputStreamSource_must_block_writes_when_buffer_is_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = StreamConverters.AsOutputStream()                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .ToMaterialized(this.SinkProbe<ByteString>()' Keep.Both)                      .Run(_materializer);                  var outputStream = t.Item1;                  var probe = t.Item2;                  var s = probe.ExpectSubscription();                    for (var i = 1; i <= 16; i++)                      outputStream.Write(_bytesArray' 0' _byteString.Count);                    //blocked call                  var f = Task.Run(() =>                  {                      outputStream.Write(_bytesArray' 0' _byteString.Count);                      return NotUsed.Instance;                  });                  ExpectTimeout(f' Timeout);                  probe.ExpectNoMsg(TimeSpan.MinValue);                    s.Request(17);                  ExpectSuccess(f' NotUsed.Instance);                  probe.ExpectNextN(Enumerable.Repeat(_byteString' 17).ToList());                    outputStream.Close();                  probe.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,OutputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSourceSpec.cs,OutputStreamSource_must_block_writes_when_buffer_is_full,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var t = StreamConverters.AsOutputStream()                      .WithAttributes(Attributes.CreateInputBuffer(16' 16))                      .ToMaterialized(this.SinkProbe<ByteString>()' Keep.Both)                      .Run(_materializer);                  var outputStream = t.Item1;                  var probe = t.Item2;                  var s = probe.ExpectSubscription();                    for (var i = 1; i <= 16; i++)                      outputStream.Write(_bytesArray' 0' _byteString.Count);                    //blocked call                  var f = Task.Run(() =>                  {                      outputStream.Write(_bytesArray' 0' _byteString.Count);                      return NotUsed.Instance;                  });                  ExpectTimeout(f' Timeout);                  probe.ExpectNoMsg(TimeSpan.MinValue);                    s.Request(17);                  ExpectSuccess(f' NotUsed.Instance);                  probe.ExpectNextN(Enumerable.Repeat(_byteString' 17).ToList());                    outputStream.Close();                  probe.ExpectComplete();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,OutputStreamSourceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\OutputStreamSourceSpec.cs,OutputStreamSource_must_throw_IOException_when_writing_to_the_stream_after_the_subscriber_has_cancelled_the_reactive_stream,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var sourceProbe = CreateTestProbe();                  var t =                      TestSourceStage<ByteString' Stream>.Create(new OutputStreamSourceStage(Timeout)' sourceProbe)                          .ToMaterialized(this.SinkProbe<ByteString>()' Keep.Both)                          .Run(_materializer);                  var outputStream = t.Item1;                  var probe = t.Item2;                    var s = probe.ExpectSubscription();                    outputStream.Write(_bytesArray' 0' _bytesArray.Length);                  s.Request(1);                  sourceProbe.ExpectMsg<GraphStageMessages.Pull>();                    probe.ExpectNext(_byteString);                    s.Cancel();                  sourceProbe.ExpectMsg<GraphStageMessages.DownstreamFinish>();                    Thread.Sleep(500);                  outputStream.Invoking(os => os.Write(_bytesArray' 0' _bytesArray.Length)).ShouldThrow<IOException>();              }' _materializer);
Magic Number,Akka.Streams.Tests.IO,TcpHelper,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpHelper.cs,TcpHelper,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(4' 4);
Magic Number,Akka.Streams.Tests.IO,TcpHelper,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpHelper.cs,TcpHelper,The following statement contains a magic number: Settings = ActorMaterializerSettings.Create(Sys).WithInputBuffer(4' 4);
Magic Number,Akka.Streams.Tests.IO,ServerConnection,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpHelper.cs,ExpectClosed,The following statement contains a magic number: max = max ?? TimeSpan.FromSeconds(3);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] {1' 2' 3' 4' 5});                    var server = new Server(this);                    var tcpReadProbe = new TcpReadProbe(this);                  var tcpWriteProbe = new TcpWriteProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    ValidateServerClientCommunication(testData' serverConnection' tcpReadProbe' tcpWriteProbe);                    tcpWriteProbe.Close();                  tcpReadProbe.Close();                  server.Close();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] {1' 2' 3' 4' 5});                    var server = new Server(this);                    var tcpReadProbe = new TcpReadProbe(this);                  var tcpWriteProbe = new TcpWriteProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    ValidateServerClientCommunication(testData' serverConnection' tcpReadProbe' tcpWriteProbe);                    tcpWriteProbe.Close();                  tcpReadProbe.Close();                  server.Close();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] {1' 2' 3' 4' 5});                    var server = new Server(this);                    var tcpReadProbe = new TcpReadProbe(this);                  var tcpWriteProbe = new TcpWriteProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    ValidateServerClientCommunication(testData' serverConnection' tcpReadProbe' tcpWriteProbe);                    tcpWriteProbe.Close();                  tcpReadProbe.Close();                  server.Close();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_in_the_happy_case,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] {1' 2' 3' 4' 5});                    var server = new Server(this);                    var tcpReadProbe = new TcpReadProbe(this);                  var tcpWriteProbe = new TcpWriteProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    ValidateServerClientCommunication(testData' serverConnection' tcpReadProbe' tcpWriteProbe);                    tcpWriteProbe.Close();                  tcpReadProbe.Close();                  server.Close();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_be_able_to_write_a_sequence_of_ByteStrings,The following statement contains a magic number: var testInput = Enumerable.Range(0' 256).Select(i => ByteString.Create(new[] {Convert.ToByte(i)}));
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_be_able_to_write_a_sequence_of_ByteStrings,The following statement contains a magic number: var expectedOutput = ByteString.Create(Enumerable.Range(0' 256).Select(Convert.ToByte).ToArray());
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_be_able_to_write_a_sequence_of_ByteStrings,The following statement contains a magic number: serverConnection.Read(256);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_be_able_to_read_a_sequence_of_ByteStrings,The following statement contains a magic number: var testInput = Enumerable.Range(0' 255).Select(i => ByteString.Create(new[] { Convert.ToByte(i) }));
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_be_able_to_read_a_sequence_of_ByteStrings,The following statement contains a magic number: var expectedOutput = ByteString.Create(Enumerable.Range(0' 255).Select(Convert.ToByte).ToArray());
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_be_able_to_read_a_sequence_of_ByteStrings,The following statement contains a magic number: resultFuture.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_write_then_remote_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.PeerClosed.Instance);                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_write_then_remote_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.PeerClosed.Instance);                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_write_then_remote_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.PeerClosed.Instance);                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_write_then_remote_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.PeerClosed.Instance);                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_write_then_remote_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.PeerClosed.Instance);                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_write_then_remote_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.PeerClosed.Instance);                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_remote_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] {1' 2' 3' 4' 5});                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_remote_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] {1' 2' 3' 4' 5});                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_remote_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] {1' 2' 3' 4' 5});                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_remote_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] {1' 2' 3' 4' 5});                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_remote_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] {1' 2' 3' 4' 5});                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_remote_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] {1' 2' 3' 4' 5});                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close server side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                    // Need a write on the server side to detect the close event                  AwaitAssert(() =>                  {                      serverConnection.Write(testData);                      serverConnection.ExpectClosed(c=>c.IsErrorClosed' TimeSpan.FromMilliseconds(500));                  }' TimeSpan.FromSeconds(5));                    serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                    // Need a write on the server side to detect the close event                  AwaitAssert(() =>                  {                      serverConnection.Write(testData);                      serverConnection.ExpectClosed(c=>c.IsErrorClosed' TimeSpan.FromMilliseconds(500));                  }' TimeSpan.FromSeconds(5));                    serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                    // Need a write on the server side to detect the close event                  AwaitAssert(() =>                  {                      serverConnection.Write(testData);                      serverConnection.ExpectClosed(c=>c.IsErrorClosed' TimeSpan.FromMilliseconds(500));                  }' TimeSpan.FromSeconds(5));                    serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                    // Need a write on the server side to detect the close event                  AwaitAssert(() =>                  {                      serverConnection.Write(testData);                      serverConnection.ExpectClosed(c=>c.IsErrorClosed' TimeSpan.FromMilliseconds(500));                  }' TimeSpan.FromSeconds(5));                    serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                    // Need a write on the server side to detect the close event                  AwaitAssert(() =>                  {                      serverConnection.Write(testData);                      serverConnection.ExpectClosed(c=>c.IsErrorClosed' TimeSpan.FromMilliseconds(500));                  }' TimeSpan.FromSeconds(5));                    serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                    // Need a write on the server side to detect the close event                  AwaitAssert(() =>                  {                      serverConnection.Write(testData);                      serverConnection.ExpectClosed(c=>c.IsErrorClosed' TimeSpan.FromMilliseconds(500));                  }' TimeSpan.FromSeconds(5));                    serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                    // Need a write on the server side to detect the close event                  AwaitAssert(() =>                  {                      serverConnection.Write(testData);                      serverConnection.ExpectClosed(c=>c.IsErrorClosed' TimeSpan.FromMilliseconds(500));                  }' TimeSpan.FromSeconds(5));                    serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Close client side write                  tcpWriteProbe.Close();                    // Need a write on the server side to detect the close event                  AwaitAssert(() =>                  {                      serverConnection.Write(testData);                      serverConnection.ExpectClosed(c=>c.IsErrorClosed' TimeSpan.FromMilliseconds(500));                  }' TimeSpan.FromSeconds(5));                    serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_server_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    serverConnection.ConfirmedClose();                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_server_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    serverConnection.ConfirmedClose();                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_server_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    serverConnection.ConfirmedClose();                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_server_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    serverConnection.ConfirmedClose();                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_server_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    serverConnection.ConfirmedClose();                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_work_when_client_closes_read_then_server_closes_write_then_client_closes_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close client side read                  tcpReadProbe.TcpReadSubscription.Value.Cancel();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    serverConnection.ConfirmedClose();                    // Close clint side write                  tcpWriteProbe.Close();                  serverConnection.ExpectClosed(Akka.IO.Tcp.ConfirmedClosed.Instance);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Cause error                  tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                    tcpReadProbe.SubscriberProbe.ExpectError();                  serverConnection.ExpectClosed(c=>c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Cause error                  tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                    tcpReadProbe.SubscriberProbe.ExpectError();                  serverConnection.ExpectClosed(c=>c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Cause error                  tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                    tcpReadProbe.SubscriberProbe.ExpectError();                  serverConnection.ExpectClosed(c=>c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Cause error                  tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                    tcpReadProbe.SubscriberProbe.ExpectError();                  serverConnection.ExpectClosed(c=>c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Cause error                  tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                    tcpReadProbe.SubscriberProbe.ExpectError();                  serverConnection.ExpectClosed(c=>c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                    // Cause error                  tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                    tcpReadProbe.SubscriberProbe.ExpectError();                  serverConnection.ExpectClosed(c=>c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error_after_remote_has_closed_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close remote side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                                    tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                  serverConnection.ExpectClosed(c => c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error_after_remote_has_closed_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close remote side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                                    tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                  serverConnection.ExpectClosed(c => c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error_after_remote_has_closed_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close remote side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                                    tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                  serverConnection.ExpectClosed(c => c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error_after_remote_has_closed_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close remote side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                                    tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                  serverConnection.ExpectClosed(c => c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error_after_remote_has_closed_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close remote side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                                    tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                  serverConnection.ExpectClosed(c => c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_shut_everything_down_if_client_signals_error_after_remote_has_closed_write,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });                  var server = new Server(this);                    var tcpWriteProbe = new TcpWriteProbe(this);                  var tcpReadProbe = new TcpReadProbe(this);                  Source.FromPublisher(tcpWriteProbe.PublisherProbe)                      .Via(Sys.TcpStream().OutgoingConnection(server.Address))                      .To(Sink.FromSubscriber(tcpReadProbe.SubscriberProbe))                      .Run(Materializer);                  var serverConnection = server.WaitAccept();                    // Server can still write                  serverConnection.Write(testData);                  tcpReadProbe.Read(5).ShouldBeEquivalentTo(testData);                    // Close remote side write                  serverConnection.ConfirmedClose();                  tcpReadProbe.SubscriberProbe.ExpectComplete();                    // Client can still write                  tcpWriteProbe.Write(testData);                  serverConnection.Read(5);                  serverConnection.WaitRead().ShouldBeEquivalentTo(testData);                                    tcpWriteProbe.TcpWriteSubscription.Value.SendError(new IllegalStateException("test"));                  serverConnection.ExpectClosed(c => c.IsErrorClosed);                  serverConnection.ExpectTerminated();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_materialize_correctly_when_used_in_multiple_flows,The following statement contains a magic number: var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_materialize_correctly_when_used_in_multiple_flows,The following statement contains a magic number: var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_materialize_correctly_when_used_in_multiple_flows,The following statement contains a magic number: var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_materialize_correctly_when_used_in_multiple_flows,The following statement contains a magic number: var testData = ByteString.Create(new byte[] { 1' 2' 3' 4' 5 });
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_properly_full_close_if_requested,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  var writeButIgnoreRead = Flow.FromSinkAndSource(Sink.Ignore<ByteString>()'                      Source.Single(ByteString.FromString("Early response"))' Keep.Right);                    var task =                      Sys.TcpStream()                          .Bind(serverAddress.Address.ToString()' serverAddress.Port' halfClose: false)                          .ToMaterialized(                              Sink.ForEach<Tcp.IncomingConnection>(conn => conn.Flow.Join(writeButIgnoreRead).Run(Materializer))'                              Keep.Left)                          .Run(Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var binding = task.Result;                    var t = Source.Maybe<ByteString>()                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress.Address.ToString()' serverAddress.Port))                      .ToMaterialized(Sink.Aggregate<ByteString' ByteString>(ByteString.Empty' (s' s1) => s + s1)' Keep.Both)                      .Run(Materializer);                  var promise = t.Item1;                  var result = t.Item2;                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldBeEquivalentTo(ByteString.FromString("Early response"));                    promise.SetResult(null); // close client upstream' no more data                  binding.Unbind();                }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_properly_full_close_if_requested,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  var writeButIgnoreRead = Flow.FromSinkAndSource(Sink.Ignore<ByteString>()'                      Source.Single(ByteString.FromString("Early response"))' Keep.Right);                    var task =                      Sys.TcpStream()                          .Bind(serverAddress.Address.ToString()' serverAddress.Port' halfClose: false)                          .ToMaterialized(                              Sink.ForEach<Tcp.IncomingConnection>(conn => conn.Flow.Join(writeButIgnoreRead).Run(Materializer))'                              Keep.Left)                          .Run(Materializer);                  task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  var binding = task.Result;                    var t = Source.Maybe<ByteString>()                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress.Address.ToString()' serverAddress.Port))                      .ToMaterialized(Sink.Aggregate<ByteString' ByteString>(ByteString.Empty' (s' s1) => s + s1)' Keep.Both)                      .Run(Materializer);                  var promise = t.Item1;                  var result = t.Item2;                    result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  result.Result.ShouldBeEquivalentTo(ByteString.FromString("Early response"));                    promise.SetResult(null); // close client upstream' no more data                  binding.Unbind();                }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_Echo_should_work_even_if_server_is_in_full_close_mode,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_Echo_should_work_even_if_server_is_in_full_close_mode,The following statement contains a magic number: var result = Source.From(Enumerable.Repeat(0' 1000)                  .Select(i => ByteString.Create(new[] {Convert.ToByte(i)})))                  .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                  .RunAggregate(0' (i' s) => i + s.Count' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_Echo_should_work_even_if_server_is_in_full_close_mode,The following statement contains a magic number: result.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_Echo_should_work_even_if_server_is_in_full_close_mode,The following statement contains a magic number: result.Result.Should().Be(1000);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Outgoing_TCP_stream_must_handle_when_connection_actor_terminates_unexpectedly,The following statement contains a magic number: result.Invoking(r => r.Wait(TimeSpan.FromSeconds(3))).ShouldThrow<StreamTcpException>();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,ValidateServerClientCommunication,The following statement contains a magic number: serverConnection.Read(5);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,ValidateServerClientCommunication,The following statement contains a magic number: readProbe.Read(5).ShouldBeEquivalentTo(testData);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_be_able_to_implement_echo,The following statement contains a magic number: bindingFuture.Wait(100).Should().BeTrue();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_be_able_to_implement_echo,The following statement contains a magic number: var testInput = Enumerable.Range(0' 255).Select(i => ByteString.Create(new[] {Convert.ToByte(i)})).ToList();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_be_able_to_implement_echo,The following statement contains a magic number: resultFuture.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_be_able_to_implement_echo,The following statement contains a magic number: binding.Unbind().Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_work_with_a_chain_of_echoes,The following statement contains a magic number: bindingFuture.Wait(100).Should().BeTrue();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_work_with_a_chain_of_echoes,The following statement contains a magic number: var testInput = Enumerable.Range(0' 255).Select(i => ByteString.Create(new[] { Convert.ToByte(i) })).ToList();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_work_with_a_chain_of_echoes,The following statement contains a magic number: resultFuture.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_work_with_a_chain_of_echoes,The following statement contains a magic number: binding.Unbind().Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_bind_and_unbind_correctly,The following statement contains a magic number: EventFilter.Exception<BindFailedException>().Expect(2' () =>              {                    // if (Helpers.isWindows) {                    //  info("On Windows unbinding is not immediate")                    //  pending                    //}                    //val address = temporaryServerAddress()                    //val probe1 = TestSubscriber.manualProbe[Tcp.IncomingConnection]()                    //val bind = Tcp(system).bind(address.getHostName' address.getPort) // TODO getHostString in Java7                    //// Bind succeeded' we have a local address                    //val binding1 = Await.result(bind.to(Sink.fromSubscriber(probe1)).run()' 3.second)                      //probe1.expectSubscription()                      //val probe2 = TestSubscriber.manualProbe[Tcp.IncomingConnection]()                    //val binding2F = bind.to(Sink.fromSubscriber(probe2)).run()                    //probe2.expectSubscriptionAndError(BindFailedException)                      //val probe3 = TestSubscriber.manualProbe[Tcp.IncomingConnection]()                    //val binding3F = bind.to(Sink.fromSubscriber(probe3)).run()                    //probe3.expectSubscriptionAndError()                      //a[BindFailedException] shouldBe thrownBy { Await.result(binding2F' 1.second) }                    //a[BindFailedException] shouldBe thrownBy { Await.result(binding3F' 1.second) }                      //// Now unbind first                    //Await.result(binding1.unbind()' 1.second)                    //probe1.expectComplete()                      //val probe4 = TestSubscriber.manualProbe[Tcp.IncomingConnection]()                    //// Bind succeeded' we have a local address                    //val binding4 = Await.result(bind.to(Sink.fromSubscriber(probe4)).run()' 3.second)                    //probe4.expectSubscription()                      //// clean up                    //Await.result(binding4.unbind()' 1.second)              });
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_not_shut_down_connections_after_the_connection_stream_cacelled,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  Sys.TcpStream()                      .Bind(serverAddress.Address.ToString()' serverAddress.Port)                      .Take(1).RunForeach(c =>                      {                          Thread.Sleep(1000);                          c.Flow.Join(Flow.Create<ByteString>()).Run(Materializer);                      }' Materializer);                    var total = Source.From(                      Enumerable.Range(0' 1000).Select(_ => ByteString.Create(new byte[] {0})))                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                      .RunAggregate(0' (i' s) => i + s.Count' Materializer);                    total.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  total.Result.Should().Be(1000);              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_not_shut_down_connections_after_the_connection_stream_cacelled,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  Sys.TcpStream()                      .Bind(serverAddress.Address.ToString()' serverAddress.Port)                      .Take(1).RunForeach(c =>                      {                          Thread.Sleep(1000);                          c.Flow.Join(Flow.Create<ByteString>()).Run(Materializer);                      }' Materializer);                    var total = Source.From(                      Enumerable.Range(0' 1000).Select(_ => ByteString.Create(new byte[] {0})))                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                      .RunAggregate(0' (i' s) => i + s.Count' Materializer);                    total.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  total.Result.Should().Be(1000);              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_not_shut_down_connections_after_the_connection_stream_cacelled,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  Sys.TcpStream()                      .Bind(serverAddress.Address.ToString()' serverAddress.Port)                      .Take(1).RunForeach(c =>                      {                          Thread.Sleep(1000);                          c.Flow.Join(Flow.Create<ByteString>()).Run(Materializer);                      }' Materializer);                    var total = Source.From(                      Enumerable.Range(0' 1000).Select(_ => ByteString.Create(new byte[] {0})))                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                      .RunAggregate(0' (i' s) => i + s.Count' Materializer);                    total.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  total.Result.Should().Be(1000);              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_not_shut_down_connections_after_the_connection_stream_cacelled,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  Sys.TcpStream()                      .Bind(serverAddress.Address.ToString()' serverAddress.Port)                      .Take(1).RunForeach(c =>                      {                          Thread.Sleep(1000);                          c.Flow.Join(Flow.Create<ByteString>()).Run(Materializer);                      }' Materializer);                    var total = Source.From(                      Enumerable.Range(0' 1000).Select(_ => ByteString.Create(new byte[] {0})))                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                      .RunAggregate(0' (i' s) => i + s.Count' Materializer);                    total.Wait(TimeSpan.FromSeconds(3)).Should().BeTrue();                  total.Result.Should().Be(1000);              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_shut_down_properly_even_if_some_accepted_connection_Flows_have_not_been_subscribed_to,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  var firstClientConnected = new TaskCompletionSource<NotUsed>();                  var takeTwoAndDropSecond = Flow.Create<Tcp.IncomingConnection>().Select(c =>                  {                      firstClientConnected.TrySetResult(NotUsed.Instance);                      return c;                  }).Grouped(2).Take(1).Select(e => e.First());                    Sys.TcpStream()                      .Bind(serverAddress.Address.ToString()' serverAddress.Port)                      .Via(takeTwoAndDropSecond)                      .RunForeach(c => c.Flow.Join(Flow.Create<ByteString>()).Run(Materializer)' Materializer);                    var folder = Source.From(Enumerable.Range(0' 100).Select(_ => ByteString.Create(new byte[] {0})))                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                      .Aggregate(0' (i' s) => i + s.Count)                      .ToMaterialized(Sink.First<int>()' Keep.Right);                    var total = folder.Run(Materializer);                    firstClientConnected.Task.Wait(TimeSpan.FromSeconds(2)).Should().BeTrue();                  var rejected = folder.Run(Materializer);                    total.Wait(TimeSpan.FromSeconds(10)).Should().BeTrue();                  total.Result.Should().Be(100);                    rejected.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  rejected.Exception.Flatten().InnerExceptions.Any(e => e is StreamTcpException).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_shut_down_properly_even_if_some_accepted_connection_Flows_have_not_been_subscribed_to,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  var firstClientConnected = new TaskCompletionSource<NotUsed>();                  var takeTwoAndDropSecond = Flow.Create<Tcp.IncomingConnection>().Select(c =>                  {                      firstClientConnected.TrySetResult(NotUsed.Instance);                      return c;                  }).Grouped(2).Take(1).Select(e => e.First());                    Sys.TcpStream()                      .Bind(serverAddress.Address.ToString()' serverAddress.Port)                      .Via(takeTwoAndDropSecond)                      .RunForeach(c => c.Flow.Join(Flow.Create<ByteString>()).Run(Materializer)' Materializer);                    var folder = Source.From(Enumerable.Range(0' 100).Select(_ => ByteString.Create(new byte[] {0})))                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                      .Aggregate(0' (i' s) => i + s.Count)                      .ToMaterialized(Sink.First<int>()' Keep.Right);                    var total = folder.Run(Materializer);                    firstClientConnected.Task.Wait(TimeSpan.FromSeconds(2)).Should().BeTrue();                  var rejected = folder.Run(Materializer);                    total.Wait(TimeSpan.FromSeconds(10)).Should().BeTrue();                  total.Result.Should().Be(100);                    rejected.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  rejected.Exception.Flatten().InnerExceptions.Any(e => e is StreamTcpException).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_shut_down_properly_even_if_some_accepted_connection_Flows_have_not_been_subscribed_to,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  var firstClientConnected = new TaskCompletionSource<NotUsed>();                  var takeTwoAndDropSecond = Flow.Create<Tcp.IncomingConnection>().Select(c =>                  {                      firstClientConnected.TrySetResult(NotUsed.Instance);                      return c;                  }).Grouped(2).Take(1).Select(e => e.First());                    Sys.TcpStream()                      .Bind(serverAddress.Address.ToString()' serverAddress.Port)                      .Via(takeTwoAndDropSecond)                      .RunForeach(c => c.Flow.Join(Flow.Create<ByteString>()).Run(Materializer)' Materializer);                    var folder = Source.From(Enumerable.Range(0' 100).Select(_ => ByteString.Create(new byte[] {0})))                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                      .Aggregate(0' (i' s) => i + s.Count)                      .ToMaterialized(Sink.First<int>()' Keep.Right);                    var total = folder.Run(Materializer);                    firstClientConnected.Task.Wait(TimeSpan.FromSeconds(2)).Should().BeTrue();                  var rejected = folder.Run(Materializer);                    total.Wait(TimeSpan.FromSeconds(10)).Should().BeTrue();                  total.Result.Should().Be(100);                    rejected.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  rejected.Exception.Flatten().InnerExceptions.Any(e => e is StreamTcpException).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_shut_down_properly_even_if_some_accepted_connection_Flows_have_not_been_subscribed_to,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  var firstClientConnected = new TaskCompletionSource<NotUsed>();                  var takeTwoAndDropSecond = Flow.Create<Tcp.IncomingConnection>().Select(c =>                  {                      firstClientConnected.TrySetResult(NotUsed.Instance);                      return c;                  }).Grouped(2).Take(1).Select(e => e.First());                    Sys.TcpStream()                      .Bind(serverAddress.Address.ToString()' serverAddress.Port)                      .Via(takeTwoAndDropSecond)                      .RunForeach(c => c.Flow.Join(Flow.Create<ByteString>()).Run(Materializer)' Materializer);                    var folder = Source.From(Enumerable.Range(0' 100).Select(_ => ByteString.Create(new byte[] {0})))                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                      .Aggregate(0' (i' s) => i + s.Count)                      .ToMaterialized(Sink.First<int>()' Keep.Right);                    var total = folder.Run(Materializer);                    firstClientConnected.Task.Wait(TimeSpan.FromSeconds(2)).Should().BeTrue();                  var rejected = folder.Run(Materializer);                    total.Wait(TimeSpan.FromSeconds(10)).Should().BeTrue();                  total.Result.Should().Be(100);                    rejected.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  rejected.Exception.Flatten().InnerExceptions.Any(e => e is StreamTcpException).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_shut_down_properly_even_if_some_accepted_connection_Flows_have_not_been_subscribed_to,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  var firstClientConnected = new TaskCompletionSource<NotUsed>();                  var takeTwoAndDropSecond = Flow.Create<Tcp.IncomingConnection>().Select(c =>                  {                      firstClientConnected.TrySetResult(NotUsed.Instance);                      return c;                  }).Grouped(2).Take(1).Select(e => e.First());                    Sys.TcpStream()                      .Bind(serverAddress.Address.ToString()' serverAddress.Port)                      .Via(takeTwoAndDropSecond)                      .RunForeach(c => c.Flow.Join(Flow.Create<ByteString>()).Run(Materializer)' Materializer);                    var folder = Source.From(Enumerable.Range(0' 100).Select(_ => ByteString.Create(new byte[] {0})))                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                      .Aggregate(0' (i' s) => i + s.Count)                      .ToMaterialized(Sink.First<int>()' Keep.Right);                    var total = folder.Run(Materializer);                    firstClientConnected.Task.Wait(TimeSpan.FromSeconds(2)).Should().BeTrue();                  var rejected = folder.Run(Materializer);                    total.Wait(TimeSpan.FromSeconds(10)).Should().BeTrue();                  total.Result.Should().Be(100);                    rejected.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  rejected.Exception.Flatten().InnerExceptions.Any(e => e is StreamTcpException).Should().BeTrue();              }' Materializer);
Magic Number,Akka.Streams.Tests.IO,TcpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Streams.Tests\IO\TcpSpec.cs,Tcp_listen_stream_must_shut_down_properly_even_if_some_accepted_connection_Flows_have_not_been_subscribed_to,The following statement contains a magic number: this.AssertAllStagesStopped(() =>              {                  var serverAddress = TestUtils.TemporaryServerAddress();                  var firstClientConnected = new TaskCompletionSource<NotUsed>();                  var takeTwoAndDropSecond = Flow.Create<Tcp.IncomingConnection>().Select(c =>                  {                      firstClientConnected.TrySetResult(NotUsed.Instance);                      return c;                  }).Grouped(2).Take(1).Select(e => e.First());                    Sys.TcpStream()                      .Bind(serverAddress.Address.ToString()' serverAddress.Port)                      .Via(takeTwoAndDropSecond)                      .RunForeach(c => c.Flow.Join(Flow.Create<ByteString>()).Run(Materializer)' Materializer);                    var folder = Source.From(Enumerable.Range(0' 100).Select(_ => ByteString.Create(new byte[] {0})))                      .Via(Sys.TcpStream().OutgoingConnection(serverAddress))                      .Aggregate(0' (i' s) => i + s.Count)                      .ToMaterialized(Sink.First<int>()' Keep.Right);                    var total = folder.Run(Materializer);                    firstClientConnected.Task.Wait(TimeSpan.FromSeconds(2)).Should().BeTrue();                  var rejected = folder.Run(Materializer);                    total.Wait(TimeSpan.FromSeconds(10)).Should().BeTrue();                  total.Result.Should().Be(100);                    rejected.Wait(TimeSpan.FromSeconds(5)).Should().BeTrue();                  rejected.Exception.Flatten().InnerExceptions.Any(e => e is StreamTcpException).Should().BeTrue();              }' Materializer);
