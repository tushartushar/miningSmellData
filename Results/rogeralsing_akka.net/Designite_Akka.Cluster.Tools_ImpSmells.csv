Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubMediator,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubMediator.cs,DistributedPubSubMediator,The method has 193 lines of code.
Long Method,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The method has 348 lines of code.
Complex Method,Akka.Cluster.Tools.Client,ClusterReceptionist,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs,Receive,Cyclomatic complexity of the method is 16
Complex Method,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,Cyclomatic complexity of the method is 13
Complex Method,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,Cyclomatic complexity of the method is 11
Complex Method,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,Cyclomatic complexity of the method is 13
Complex Method,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,Cyclomatic complexity of the method is 14
Complex Method,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,Cyclomatic complexity of the method is 11
Complex Method,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,Cyclomatic complexity of the method is 14
Complex Method,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,Cyclomatic complexity of the method is 14
Complex Method,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,Cyclomatic complexity of the method is 14
Complex Method,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,Cyclomatic complexity of the method is 13
Complex Method,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,Cyclomatic complexity of the method is 13
Long Parameter List,Akka.Cluster.Tools.Client,ClusterClientSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,ClusterClientSettings,The method has 6 parameters. Parameters: initialContacts' establishingGetContactsInterval' refreshContactsInterval' heartbeatInterval' acceptableHeartbeatPause' bufferSize
Long Parameter List,Akka.Cluster.Tools.Client,ClusterClientSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,Copy,The method has 6 parameters. Parameters: initialContacts' establishingGetContactsInterval' refreshContactsInterval' heartbeatInterval' acceptableHeartbeatPause' bufferSize
Long Parameter List,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubSettings.cs,DistributedPubSubSettings,The method has 5 parameters. Parameters: role' routingLogic' gossipInterval' removedTimeToLive' maxDeltaElements
Long Identifier,Akka.Cluster.Tools.Client,ClusterClientSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,ClusterClientSettings,The length of the parameter establishingGetContactsInterval is 31.
Long Identifier,Akka.Cluster.Tools.Client,ClusterClientSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,Copy,The length of the parameter establishingGetContactsInterval is 31.
Long Identifier,Akka.Cluster.Tools.Client,ClusterClientSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,,The length of the parameter EstablishingGetContactsInterval is 31.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Status__Descriptor is 35.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Status__FieldAccessorTable is 43.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Status_Version__Descriptor is 43.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Status_Version__FieldAccessorTable is 51.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Delta__Descriptor is 34.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Delta__FieldAccessorTable is 42.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Delta_Entry__Descriptor is 40.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Delta_Entry__FieldAccessorTable is 48.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Delta_Bucket__Descriptor is 41.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Delta_Bucket__FieldAccessorTable is 49.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Address__Descriptor is 36.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Address__FieldAccessorTable is 44.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Send__Descriptor is 33.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Send__FieldAccessorTable is 41.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_SendToAll__Descriptor is 38.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_SendToAll__FieldAccessorTable is 46.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Publish__Descriptor is 36.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Publish__FieldAccessorTable is 44.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Payload__Descriptor is 36.
Long Identifier,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,,The length of the parameter internal__static_Payload__FieldAccessorTable is 44.
Long Identifier,Akka.Cluster.Tools.Singleton,ClusterSingletonProxySettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxySettings.cs,ClusterSingletonProxySettings,The length of the parameter singletonIdentificationInterval is 31.
Long Identifier,Akka.Cluster.Tools.Singleton,ClusterSingletonProxySettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxySettings.cs,WithSingletonIdentificationInterval,The length of the parameter singletonIdentificationInterval is 31.
Long Identifier,Akka.Cluster.Tools.Singleton,ClusterSingletonProxySettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxySettings.cs,Copy,The length of the parameter singletonIdentificationInterval is 31.
Long Identifier,Akka.Cluster.Tools.Singleton,ClusterSingletonProxySettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxySettings.cs,,The length of the parameter SingletonIdentificationInterval is 31.
Long Statement,Akka.Cluster.Tools.Client,ClusterClientReceptionist,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientReceptionist.cs,CreateReceptionist,The length of the statement  "                return _system.SystemActorOf(ClusterReceptionist.Props(mediator' ClusterReceptionistSettings.Create(config)).WithDispatcher(dispatcher)' name); " is 143.
Long Statement,Akka.Cluster.Tools.Client,ClusterClientSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientSettings.cs,Create,The length of the statement  "                throw new ArgumentException(string.Format("Actor system [{0}] doesn't have `akka.cluster.client` config set up"' system.Name)); " is 127.
Long Statement,Akka.Cluster.Tools.Client,ClusterReceptionist,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs,Receive,The length of the statement  "                    var first = _nodes.Where(a => RingOrdering.Instance.Compare(a.Value' addr) == 1).Take(_settings.NumberOfContacts).ToArray(); " is 124.
Long Statement,Akka.Cluster.Tools.Client,ClusterReceptionist,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionist.cs,ResponseTunnel,The length of the statement  "                : Context.ActorOf(Actor.Props.Create(() => new ClientResponseTunnel(client' _settings.ResponseTunnelReceiveTimeout))' encName); " is 127.
Long Statement,Akka.Cluster.Tools.Client,ClusterReceptionistSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionistSettings.cs,Create,The length of the statement  "                throw new ArgumentException(string.Format("Actor system [{0}] doesn't have `akka.cluster.client.receptionist` config set up"' system.Name)); " is 140.
Long Statement,Akka.Cluster.Tools.Client,ClusterReceptionistSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionistSettings.cs,Create,The length of the statement  "            return new ClusterReceptionistSettings(config.GetString("role")' config.GetInt("number-of-contacts")' config.GetTimeSpan("response-tunnel-receive-timeout")); " is 157.
Long Statement,Akka.Cluster.Tools.Client,ClusterReceptionistSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterReceptionistSettings.cs,Copy,The length of the statement  "            return new ClusterReceptionistSettings(role ?? Role' numberOfContacts ?? NumberOfContacts' responseTunnelReceiveTimeout ?? ResponseTunnelReceiveTimeout); " is 153.
Long Statement,Akka.Cluster.Tools.Client.Serialization,ClusterClientMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\Serialization\ClusterClientMessageSerializer.cs,FromBinary,The length of the statement  "            throw new ArgumentException(string.Format("Unimplemented deserialization of message with manifest [{0}] in [{1}]"' manifest' GetType())); " is 137.
Long Statement,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubMediator,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubMediator.cs,PutToRegistry,The length of the statement  "                    new Bucket(_cluster.SelfAddress' v' ImmutableDictionary<string' ValueHolder>.Empty.Add(key' new ValueHolder(v' value)))); " is 121.
Long Statement,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubSettings.cs,Create,The length of the statement  "            if (config == null) throw new ArgumentException("Actor system settings has no configuration for akka.cluster.pub-sub defined"); " is 127.
Long Statement,Akka.Cluster.Tools.PublishSubscribe,Publish,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,ToString,The length of the statement  "            return string.Format("Publish<topic:{0}' sendOneToEachGroup:{1}' message:{2}>"' Topic' SendOneMessageToEachGroup' Message); " is 123.
Long Statement,Akka.Cluster.Tools.PublishSubscribe.Serialization,DistributedPubSubMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\DistributedPubSubMessageSerializer.cs,ToBinary,The length of the statement  "            else throw new ArgumentException(string.Format("Can't serialize object of type {0} with {1}"' obj.GetType()' GetType())); " is 121.
Long Statement,Akka.Cluster.Tools.PublishSubscribe.Serialization,DistributedPubSubMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\DistributedPubSubMessageSerializer.cs,FromBinary,The length of the statement  "                throw new ArgumentException(string.Format("Unimplemented deserialization of message with manifest [{0}] in serializer {1}"' manifestString' GetType())); " is 152.
Long Statement,Akka.Cluster.Tools.PublishSubscribe.Serialization,DistributedPubSubMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\DistributedPubSubMessageSerializer.cs,Manifest,The length of the statement  "            throw new ArgumentException(string.Format("Serializer {0} cannot serialize message of type {1}"' this.GetType()' o.GetType())); " is 127.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                int field_ordinal = global::System.Array.BinarySearch(_versionFieldNames' field_name' global::System.StringComparer.Ordinal); " is 125.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                        global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Address.CreateBuilder(); " is 145.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeAddress,The length of the statement  "                            result.address_ = global::Akka.Cluster.PubSub.Serializers.Proto.Address.CreateBuilder(result.address_).MergeFrom(value).BuildPartial(); " is 135.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                        int field_ordinal = global::System.Array.BinarySearch(_statusFieldNames' field_name' global::System.StringComparer.Ordinal); " is 124.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                input.ReadMessageArray(tag' field_name' result.versions_' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version.DefaultInstance' extensionRegistry); " is 161.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                int field_ordinal = global::System.Array.BinarySearch(_entryFieldNames' field_name' global::System.StringComparer.Ordinal); " is 123.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                int field_ordinal = global::System.Array.BinarySearch(_bucketFieldNames' field_name' global::System.StringComparer.Ordinal); " is 124.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                        global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Address.CreateBuilder(); " is 145.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                        input.ReadMessageArray(tag' field_name' result.content_' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.DefaultInstance' extensionRegistry); " is 157.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeOwner,The length of the statement  "                            result.owner_ = global::Akka.Cluster.PubSub.Serializers.Proto.Address.CreateBuilder(result.owner_).MergeFrom(value).BuildPartial(); " is 131.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                        int field_ordinal = global::System.Array.BinarySearch(_deltaFieldNames' field_name' global::System.StringComparer.Ordinal); " is 123.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                input.ReadMessageArray(tag' field_name' result.buckets_' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket.DefaultInstance' extensionRegistry); " is 158.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                        int field_ordinal = global::System.Array.BinarySearch(_addressFieldNames' field_name' global::System.StringComparer.Ordinal); " is 125.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                        int field_ordinal = global::System.Array.BinarySearch(_sendFieldNames' field_name' global::System.StringComparer.Ordinal); " is 122.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder(); " is 145.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergePayload,The length of the statement  "                    result.payload_ = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder(result.payload_).MergeFrom(value).BuildPartial(); " is 135.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                        int field_ordinal = global::System.Array.BinarySearch(_sendToAllFieldNames' field_name' global::System.StringComparer.Ordinal); " is 127.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder(); " is 145.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergePayload,The length of the statement  "                    result.payload_ = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder(result.payload_).MergeFrom(value).BuildPartial(); " is 135.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                        int field_ordinal = global::System.Array.BinarySearch(_publishFieldNames' field_name' global::System.StringComparer.Ordinal); " is 125.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                                global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder(); " is 145.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergePayload,The length of the statement  "                    result.payload_ = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder(result.payload_).MergeFrom(value).BuildPartial(); " is 135.
Long Statement,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The length of the statement  "                        int field_ordinal = global::System.Array.BinarySearch(_payloadFieldNames' field_name' global::System.StringComparer.Ordinal); " is 125.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,Props,The length of the statement  "            return Actor.Props.Create(() => new ClusterSingletonManager(singletonProps' terminationMessage' settings)).WithDeploy(Deploy.Local); " is 132.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                    _oldestChangedBuffer = Context.ActorOf(Actor.Props.Create<OldestChangedBuffer>(_settings.Role).WithDispatcher(Context.Props.Dispatcher)); " is 137.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                                    Log.Info("Ignoring HandOverDone in BecomingOldest from [{0}]. Expected previous oldest [{1}]"' Sender.Path.Address' becomingOldest.PreviousOldest); " is 147.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                                        Log.Info("Ignoring TakeOver request in BecomingOldest from [{0}]. Expected previous oldest [{1}]"' Sender.Path.Address' becomingOldest.PreviousOldest); " is 151.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                        SetTimer(HandOverRetryTimer' new HandOverRetry(handOverRetry.Count + 1)' _settings.HandOverRetryInterval' repeat: false); " is 121.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                        throw new ClusterSingletonManagerIsStuck(string.Format("Becoming singleton oldest was stuck because previous oldest [{0}] is unresponsive"' becomingOldest.PreviousOldest)); " is 172.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                        return GoTo(ClusterSingletonState.WasOldest).Using(new WasOldestData(oldestData.Singleton' oldestData.SingletonTerminated' null)); " is 130.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                        throw new ClusterSingletonManagerIsStuck(string.Format("Expected hand-over to [{0}] never occured"' wasOldestData.NewOldest)); " is 126.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The length of the statement  "                if (to == ClusterSingletonState.BecomingOldest) SetTimer(HandOverRetryTimer' new HandOverRetry(1)' _settings.HandOverRetryInterval); " is 132.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonManagerSettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManagerSettings.cs,Create,The length of the statement  "                throw new ConfigurationException(string.Format("Cannot initialize {0}: akka.cluster.singleton configuration node was not provided"' typeof(ClusterSingletonManagerSettings))); " is 174.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonProxy,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxy.cs,HandleInitial,The length of the statement  "            TrackChanges(() => _membersByAge = state.Members.Where(m => m.Status == MemberStatus.Up && MatchingRole(m)).ToImmutableSortedSet(MemberAgeOrdering.Descending)); " is 160.
Long Statement,Akka.Cluster.Tools.Singleton,ClusterSingletonProxySettings,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonProxySettings.cs,Create,The length of the statement  "                throw new ConfigurationException(string.Format("Cannot create {0}: akka.cluster.singleton-proxy configuration node not found"' typeof(ClusterSingletonProxySettings))); " is 167.
Long Statement,Akka.Cluster.Tools.Singleton,OldestChangedBuffer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\OldestChangedBuffer.cs,OnReceive,The length of the statement  "            else if (message is ClusterEvent.MemberExited || message is ClusterEvent.MemberRemoved) Remove(((ClusterEvent.IMemberEvent)(message)).Member); " is 142.
Long Statement,Akka.Cluster.Tools.Singleton.Serialization,ClusterSingletonMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\Serialization\ClusterSingletonMessageSerializer.cs,ToBinary,The length of the statement  "                    default: throw new ArgumentException(string.Format("Cannot serialize object of type [{0}] in [{1}]"' o.GetType()' GetType())); " is 126.
Long Statement,Akka.Cluster.Tools.Singleton.Serialization,ClusterSingletonMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\Serialization\ClusterSingletonMessageSerializer.cs,ToBinary,The length of the statement  "            else throw new ArgumentException(string.Format("Cannot serialize object of type [{0}] in [{1}]"' o.GetType()' GetType())); " is 122.
Long Statement,Akka.Cluster.Tools.Singleton.Serialization,ClusterSingletonMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\Serialization\ClusterSingletonMessageSerializer.cs,FromBinary,The length of the statement  "            else throw new ArgumentException(string.Format("Unimplemented deserialization of message with manifest [{0}] in [{1}]"' manifest' GetType())); " is 142.
Long Statement,Akka.Cluster.Tools.Singleton.Serialization,ClusterSingletonMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\Serialization\ClusterSingletonMessageSerializer.cs,Manifest,The length of the statement  "                    default: throw new ArgumentException(string.Format("Cannot serialize object of type [{0}] in [{1}]"' o.GetType()' GetType())); " is 126.
Long Statement,Akka.Cluster.Tools.Singleton.Serialization,ClusterSingletonMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\Serialization\ClusterSingletonMessageSerializer.cs,Manifest,The length of the statement  "            else throw new ArgumentException(string.Format("Cannot serialize object of type [{0}] in [{1}]"' o.GetType()' GetType())); " is 122.
Complex Conditional,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,InitializeFSM,The conditional expression  "(removed = e.FsmEvent as ClusterEvent.MemberRemoved) != null                           && wasOldestData != null && wasOldestData.NewOldest != null && !_selfExited                           && removed.Member.Address.Equals(wasOldestData.NewOldest)"  is complex.
Virtual Method Call from Constructor,Akka.Cluster.Tools.Client,ClusterClientReceptionist,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientReceptionist.cs,ClusterClientReceptionist,The constructor "ClusterClientReceptionist" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Client,ClusterClientReceptionist,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClientReceptionist.cs,ClusterClientReceptionist,The constructor "ClusterClientReceptionist" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,ClusterSingletonManager,The constructor "ClusterSingletonManager" calls a virtual method "GetInt".
Magic Number,Akka.Cluster.Tools.PublishSubscribe,DistributedPubSubMediator,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedPubSubMediator.cs,DistributedPubSubMediator,The following statement contains a magic number: _pruneInterval = new TimeSpan(_settings.RemovedTimeToLive.Ticks / 2);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Subscribe,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Group != null ? Group.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Subscribe,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Ref != null ? Ref.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Unsubscribe,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Group != null ? Group.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Unsubscribe,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Ref != null ? Ref.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Publish,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Message != null ? Message.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Publish,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ SendOneMessageToEachGroup.GetHashCode();
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Send,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Message != null ? Message.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,Send,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ LocalAffinity.GetHashCode();
Magic Number,Akka.Cluster.Tools.PublishSubscribe,SendToAll,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Message != null ? Message.GetHashCode() : 0);
Magic Number,Akka.Cluster.Tools.PublishSubscribe,SendToAll,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\DistributedMessages.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ExcludeSelf.GetHashCode();
Magic Number,Akka.Cluster.Tools.PublishSubscribe.Internal,TopicLike,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Internal\Topics.cs,TopicLike,The following statement contains a magic number: PruneInterval = new TimeSpan(emptyTimeToLive.Ticks / 2);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,DistributedPubSubMessages,The following statement contains a magic number: pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate (pbd::FileDescriptor root) {                  descriptor = root;                  internal__static_Status__Descriptor = Descriptor.MessageTypes[0];                  internal__static_Status__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Status' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Builder>(internal__static_Status__Descriptor'                          new string[] { "Versions"' });                  internal__static_Status_Version__Descriptor = internal__static_Status__Descriptor.NestedTypes[0];                  internal__static_Status_Version__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version.Builder>(internal__static_Status_Version__Descriptor'                          new string[] { "Address"' "Timestamp"' });                  internal__static_Delta__Descriptor = Descriptor.MessageTypes[1];                  internal__static_Delta__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Builder>(internal__static_Delta__Descriptor'                          new string[] { "Buckets"' });                  internal__static_Delta_Entry__Descriptor = internal__static_Delta__Descriptor.NestedTypes[0];                  internal__static_Delta_Entry__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.Builder>(internal__static_Delta_Entry__Descriptor'                          new string[] { "Key"' "Version"' "Ref"' });                  internal__static_Delta_Bucket__Descriptor = internal__static_Delta__Descriptor.NestedTypes[1];                  internal__static_Delta_Bucket__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket.Builder>(internal__static_Delta_Bucket__Descriptor'                          new string[] { "Owner"' "Version"' "Content"' });                  internal__static_Address__Descriptor = Descriptor.MessageTypes[2];                  internal__static_Address__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Address' global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder>(internal__static_Address__Descriptor'                          new string[] { "System"' "Hostname"' "Port"' "Protocol"' });                  internal__static_Send__Descriptor = Descriptor.MessageTypes[3];                  internal__static_Send__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Send' global::Akka.Cluster.PubSub.Serializers.Proto.Send.Builder>(internal__static_Send__Descriptor'                          new string[] { "Path"' "LocalAffinity"' "Payload"' });                  internal__static_SendToAll__Descriptor = Descriptor.MessageTypes[4];                  internal__static_SendToAll__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll' global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll.Builder>(internal__static_SendToAll__Descriptor'                          new string[] { "Path"' "AllButSelf"' "Payload"' });                  internal__static_Publish__Descriptor = Descriptor.MessageTypes[5];                  internal__static_Publish__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Publish' global::Akka.Cluster.PubSub.Serializers.Proto.Publish.Builder>(internal__static_Publish__Descriptor'                          new string[] { "Topic"' "Payload"' });                  internal__static_Payload__Descriptor = Descriptor.MessageTypes[6];                  internal__static_Payload__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Payload' global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder>(internal__static_Payload__Descriptor'                          new string[] { "EnclosedMessage"' "SerializerId"' "MessageManifest"' });                  return null;              };
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,DistributedPubSubMessages,The following statement contains a magic number: pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate (pbd::FileDescriptor root) {                  descriptor = root;                  internal__static_Status__Descriptor = Descriptor.MessageTypes[0];                  internal__static_Status__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Status' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Builder>(internal__static_Status__Descriptor'                          new string[] { "Versions"' });                  internal__static_Status_Version__Descriptor = internal__static_Status__Descriptor.NestedTypes[0];                  internal__static_Status_Version__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version.Builder>(internal__static_Status_Version__Descriptor'                          new string[] { "Address"' "Timestamp"' });                  internal__static_Delta__Descriptor = Descriptor.MessageTypes[1];                  internal__static_Delta__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Builder>(internal__static_Delta__Descriptor'                          new string[] { "Buckets"' });                  internal__static_Delta_Entry__Descriptor = internal__static_Delta__Descriptor.NestedTypes[0];                  internal__static_Delta_Entry__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.Builder>(internal__static_Delta_Entry__Descriptor'                          new string[] { "Key"' "Version"' "Ref"' });                  internal__static_Delta_Bucket__Descriptor = internal__static_Delta__Descriptor.NestedTypes[1];                  internal__static_Delta_Bucket__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket.Builder>(internal__static_Delta_Bucket__Descriptor'                          new string[] { "Owner"' "Version"' "Content"' });                  internal__static_Address__Descriptor = Descriptor.MessageTypes[2];                  internal__static_Address__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Address' global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder>(internal__static_Address__Descriptor'                          new string[] { "System"' "Hostname"' "Port"' "Protocol"' });                  internal__static_Send__Descriptor = Descriptor.MessageTypes[3];                  internal__static_Send__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Send' global::Akka.Cluster.PubSub.Serializers.Proto.Send.Builder>(internal__static_Send__Descriptor'                          new string[] { "Path"' "LocalAffinity"' "Payload"' });                  internal__static_SendToAll__Descriptor = Descriptor.MessageTypes[4];                  internal__static_SendToAll__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll' global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll.Builder>(internal__static_SendToAll__Descriptor'                          new string[] { "Path"' "AllButSelf"' "Payload"' });                  internal__static_Publish__Descriptor = Descriptor.MessageTypes[5];                  internal__static_Publish__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Publish' global::Akka.Cluster.PubSub.Serializers.Proto.Publish.Builder>(internal__static_Publish__Descriptor'                          new string[] { "Topic"' "Payload"' });                  internal__static_Payload__Descriptor = Descriptor.MessageTypes[6];                  internal__static_Payload__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Payload' global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder>(internal__static_Payload__Descriptor'                          new string[] { "EnclosedMessage"' "SerializerId"' "MessageManifest"' });                  return null;              };
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,DistributedPubSubMessages,The following statement contains a magic number: pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate (pbd::FileDescriptor root) {                  descriptor = root;                  internal__static_Status__Descriptor = Descriptor.MessageTypes[0];                  internal__static_Status__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Status' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Builder>(internal__static_Status__Descriptor'                          new string[] { "Versions"' });                  internal__static_Status_Version__Descriptor = internal__static_Status__Descriptor.NestedTypes[0];                  internal__static_Status_Version__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version.Builder>(internal__static_Status_Version__Descriptor'                          new string[] { "Address"' "Timestamp"' });                  internal__static_Delta__Descriptor = Descriptor.MessageTypes[1];                  internal__static_Delta__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Builder>(internal__static_Delta__Descriptor'                          new string[] { "Buckets"' });                  internal__static_Delta_Entry__Descriptor = internal__static_Delta__Descriptor.NestedTypes[0];                  internal__static_Delta_Entry__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.Builder>(internal__static_Delta_Entry__Descriptor'                          new string[] { "Key"' "Version"' "Ref"' });                  internal__static_Delta_Bucket__Descriptor = internal__static_Delta__Descriptor.NestedTypes[1];                  internal__static_Delta_Bucket__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket.Builder>(internal__static_Delta_Bucket__Descriptor'                          new string[] { "Owner"' "Version"' "Content"' });                  internal__static_Address__Descriptor = Descriptor.MessageTypes[2];                  internal__static_Address__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Address' global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder>(internal__static_Address__Descriptor'                          new string[] { "System"' "Hostname"' "Port"' "Protocol"' });                  internal__static_Send__Descriptor = Descriptor.MessageTypes[3];                  internal__static_Send__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Send' global::Akka.Cluster.PubSub.Serializers.Proto.Send.Builder>(internal__static_Send__Descriptor'                          new string[] { "Path"' "LocalAffinity"' "Payload"' });                  internal__static_SendToAll__Descriptor = Descriptor.MessageTypes[4];                  internal__static_SendToAll__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll' global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll.Builder>(internal__static_SendToAll__Descriptor'                          new string[] { "Path"' "AllButSelf"' "Payload"' });                  internal__static_Publish__Descriptor = Descriptor.MessageTypes[5];                  internal__static_Publish__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Publish' global::Akka.Cluster.PubSub.Serializers.Proto.Publish.Builder>(internal__static_Publish__Descriptor'                          new string[] { "Topic"' "Payload"' });                  internal__static_Payload__Descriptor = Descriptor.MessageTypes[6];                  internal__static_Payload__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Payload' global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder>(internal__static_Payload__Descriptor'                          new string[] { "EnclosedMessage"' "SerializerId"' "MessageManifest"' });                  return null;              };
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,DistributedPubSubMessages,The following statement contains a magic number: pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate (pbd::FileDescriptor root) {                  descriptor = root;                  internal__static_Status__Descriptor = Descriptor.MessageTypes[0];                  internal__static_Status__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Status' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Builder>(internal__static_Status__Descriptor'                          new string[] { "Versions"' });                  internal__static_Status_Version__Descriptor = internal__static_Status__Descriptor.NestedTypes[0];                  internal__static_Status_Version__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version.Builder>(internal__static_Status_Version__Descriptor'                          new string[] { "Address"' "Timestamp"' });                  internal__static_Delta__Descriptor = Descriptor.MessageTypes[1];                  internal__static_Delta__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Builder>(internal__static_Delta__Descriptor'                          new string[] { "Buckets"' });                  internal__static_Delta_Entry__Descriptor = internal__static_Delta__Descriptor.NestedTypes[0];                  internal__static_Delta_Entry__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.Builder>(internal__static_Delta_Entry__Descriptor'                          new string[] { "Key"' "Version"' "Ref"' });                  internal__static_Delta_Bucket__Descriptor = internal__static_Delta__Descriptor.NestedTypes[1];                  internal__static_Delta_Bucket__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket.Builder>(internal__static_Delta_Bucket__Descriptor'                          new string[] { "Owner"' "Version"' "Content"' });                  internal__static_Address__Descriptor = Descriptor.MessageTypes[2];                  internal__static_Address__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Address' global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder>(internal__static_Address__Descriptor'                          new string[] { "System"' "Hostname"' "Port"' "Protocol"' });                  internal__static_Send__Descriptor = Descriptor.MessageTypes[3];                  internal__static_Send__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Send' global::Akka.Cluster.PubSub.Serializers.Proto.Send.Builder>(internal__static_Send__Descriptor'                          new string[] { "Path"' "LocalAffinity"' "Payload"' });                  internal__static_SendToAll__Descriptor = Descriptor.MessageTypes[4];                  internal__static_SendToAll__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll' global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll.Builder>(internal__static_SendToAll__Descriptor'                          new string[] { "Path"' "AllButSelf"' "Payload"' });                  internal__static_Publish__Descriptor = Descriptor.MessageTypes[5];                  internal__static_Publish__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Publish' global::Akka.Cluster.PubSub.Serializers.Proto.Publish.Builder>(internal__static_Publish__Descriptor'                          new string[] { "Topic"' "Payload"' });                  internal__static_Payload__Descriptor = Descriptor.MessageTypes[6];                  internal__static_Payload__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Payload' global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder>(internal__static_Payload__Descriptor'                          new string[] { "EnclosedMessage"' "SerializerId"' "MessageManifest"' });                  return null;              };
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,DistributedPubSubMessages,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,DistributedPubSubMessages,The following statement contains a magic number: pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate (pbd::FileDescriptor root) {                  descriptor = root;                  internal__static_Status__Descriptor = Descriptor.MessageTypes[0];                  internal__static_Status__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Status' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Builder>(internal__static_Status__Descriptor'                          new string[] { "Versions"' });                  internal__static_Status_Version__Descriptor = internal__static_Status__Descriptor.NestedTypes[0];                  internal__static_Status_Version__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version.Builder>(internal__static_Status_Version__Descriptor'                          new string[] { "Address"' "Timestamp"' });                  internal__static_Delta__Descriptor = Descriptor.MessageTypes[1];                  internal__static_Delta__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Builder>(internal__static_Delta__Descriptor'                          new string[] { "Buckets"' });                  internal__static_Delta_Entry__Descriptor = internal__static_Delta__Descriptor.NestedTypes[0];                  internal__static_Delta_Entry__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.Builder>(internal__static_Delta_Entry__Descriptor'                          new string[] { "Key"' "Version"' "Ref"' });                  internal__static_Delta_Bucket__Descriptor = internal__static_Delta__Descriptor.NestedTypes[1];                  internal__static_Delta_Bucket__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket.Builder>(internal__static_Delta_Bucket__Descriptor'                          new string[] { "Owner"' "Version"' "Content"' });                  internal__static_Address__Descriptor = Descriptor.MessageTypes[2];                  internal__static_Address__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Address' global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder>(internal__static_Address__Descriptor'                          new string[] { "System"' "Hostname"' "Port"' "Protocol"' });                  internal__static_Send__Descriptor = Descriptor.MessageTypes[3];                  internal__static_Send__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Send' global::Akka.Cluster.PubSub.Serializers.Proto.Send.Builder>(internal__static_Send__Descriptor'                          new string[] { "Path"' "LocalAffinity"' "Payload"' });                  internal__static_SendToAll__Descriptor = Descriptor.MessageTypes[4];                  internal__static_SendToAll__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll' global::Akka.Cluster.PubSub.Serializers.Proto.SendToAll.Builder>(internal__static_SendToAll__Descriptor'                          new string[] { "Path"' "AllButSelf"' "Payload"' });                  internal__static_Publish__Descriptor = Descriptor.MessageTypes[5];                  internal__static_Publish__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Publish' global::Akka.Cluster.PubSub.Serializers.Proto.Publish.Builder>(internal__static_Publish__Descriptor'                          new string[] { "Topic"' "Payload"' });                  internal__static_Payload__Descriptor = Descriptor.MessageTypes[6];                  internal__static_Payload__FieldAccessorTable =                      new pb::FieldAccess.FieldAccessorTable<global::Akka.Cluster.PubSub.Serializers.Proto.Payload' global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder>(internal__static_Payload__Descriptor'                          new string[] { "EnclosedMessage"' "SerializerId"' "MessageManifest"' });                  return null;              };
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Version,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteInt64(2' field_names[1]' Timestamp);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                              {                                  case 0:                                      {                                          throw pb::InvalidProtocolBufferException.InvalidTag();                                      }                                  default:                                      {                                          if (pb::WireFormat.IsEndGroupTag(tag))                                          {                                              if (unknownFields != null)                                              {                                                  this.UnknownFields = unknownFields.Build();                                              }                                              return this;                                          }                                          if (unknownFields == null)                                          {                                              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                          }                                          ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                          break;                                      }                                  case 10:                                      {                                          global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Address.CreateBuilder();                                          if (result.hasAddress)                                          {                                              subBuilder.MergeFrom(Address);                                          }                                          input.ReadMessage(subBuilder' extensionRegistry);                                          Address = subBuilder.BuildPartial();                                          break;                                      }                                  case 16:                                      {                                          result.hasTimestamp = input.ReadInt64(ref result.timestamp_);                                          break;                                      }                              }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                              {                                  case 0:                                      {                                          throw pb::InvalidProtocolBufferException.InvalidTag();                                      }                                  default:                                      {                                          if (pb::WireFormat.IsEndGroupTag(tag))                                          {                                              if (unknownFields != null)                                              {                                                  this.UnknownFields = unknownFields.Build();                                              }                                              return this;                                          }                                          if (unknownFields == null)                                          {                                              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                          }                                          ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                          break;                                      }                                  case 10:                                      {                                          global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Address.CreateBuilder();                                          if (result.hasAddress)                                          {                                              subBuilder.MergeFrom(Address);                                          }                                          input.ReadMessage(subBuilder' extensionRegistry);                                          Address = subBuilder.BuildPartial();                                          break;                                      }                                  case 16:                                      {                                          result.hasTimestamp = input.ReadInt64(ref result.timestamp_);                                          break;                                      }                              }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  input.ReadMessageArray(tag' field_name' result.versions_' global::Akka.Cluster.PubSub.Serializers.Proto.Status.Types.Version.DefaultInstance' extensionRegistry);                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                              {                                  case 0:                                      {                                          throw pb::InvalidProtocolBufferException.InvalidTag();                                      }                                  default:                                      {                                          if (pb::WireFormat.IsEndGroupTag(tag))                                          {                                              if (unknownFields != null)                                              {                                                  this.UnknownFields = unknownFields.Build();                                              }                                              return this;                                          }                                          if (unknownFields == null)                                          {                                              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                          }                                          ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                          break;                                      }                                  case 10:                                      {                                          result.hasKey = input.ReadString(ref result.key_);                                          break;                                      }                                  case 16:                                      {                                          result.hasVersion = input.ReadInt64(ref result.version_);                                          break;                                      }                                  case 26:                                      {                                          result.hasRef = input.ReadString(ref result.ref_);                                          break;                                      }                              }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                              {                                  case 0:                                      {                                          throw pb::InvalidProtocolBufferException.InvalidTag();                                      }                                  default:                                      {                                          if (pb::WireFormat.IsEndGroupTag(tag))                                          {                                              if (unknownFields != null)                                              {                                                  this.UnknownFields = unknownFields.Build();                                              }                                              return this;                                          }                                          if (unknownFields == null)                                          {                                              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                          }                                          ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                          break;                                      }                                  case 10:                                      {                                          result.hasKey = input.ReadString(ref result.key_);                                          break;                                      }                                  case 16:                                      {                                          result.hasVersion = input.ReadInt64(ref result.version_);                                          break;                                      }                                  case 26:                                      {                                          result.hasRef = input.ReadString(ref result.ref_);                                          break;                                      }                              }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                              {                                  case 0:                                      {                                          throw pb::InvalidProtocolBufferException.InvalidTag();                                      }                                  default:                                      {                                          if (pb::WireFormat.IsEndGroupTag(tag))                                          {                                              if (unknownFields != null)                                              {                                                  this.UnknownFields = unknownFields.Build();                                              }                                              return this;                                          }                                          if (unknownFields == null)                                          {                                              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                          }                                          ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                          break;                                      }                                  case 10:                                      {                                          result.hasKey = input.ReadString(ref result.key_);                                          break;                                      }                                  case 16:                                      {                                          result.hasVersion = input.ReadInt64(ref result.version_);                                          break;                                      }                                  case 26:                                      {                                          result.hasRef = input.ReadString(ref result.ref_);                                          break;                                      }                              }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                              {                                  case 0:                                      {                                          throw pb::InvalidProtocolBufferException.InvalidTag();                                      }                                  default:                                      {                                          if (pb::WireFormat.IsEndGroupTag(tag))                                          {                                              if (unknownFields != null)                                              {                                                  this.UnknownFields = unknownFields.Build();                                              }                                              return this;                                          }                                          if (unknownFields == null)                                          {                                              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                          }                                          ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                          break;                                      }                                  case 10:                                      {                                          global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Address.CreateBuilder();                                          if (result.hasOwner)                                          {                                              subBuilder.MergeFrom(Owner);                                          }                                          input.ReadMessage(subBuilder' extensionRegistry);                                          Owner = subBuilder.BuildPartial();                                          break;                                      }                                  case 16:                                      {                                          result.hasVersion = input.ReadInt64(ref result.version_);                                          break;                                      }                                  case 26:                                      {                                          input.ReadMessageArray(tag' field_name' result.content_' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.DefaultInstance' extensionRegistry);                                          break;                                      }                              }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                              {                                  case 0:                                      {                                          throw pb::InvalidProtocolBufferException.InvalidTag();                                      }                                  default:                                      {                                          if (pb::WireFormat.IsEndGroupTag(tag))                                          {                                              if (unknownFields != null)                                              {                                                  this.UnknownFields = unknownFields.Build();                                              }                                              return this;                                          }                                          if (unknownFields == null)                                          {                                              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                          }                                          ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                          break;                                      }                                  case 10:                                      {                                          global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Address.CreateBuilder();                                          if (result.hasOwner)                                          {                                              subBuilder.MergeFrom(Owner);                                          }                                          input.ReadMessage(subBuilder' extensionRegistry);                                          Owner = subBuilder.BuildPartial();                                          break;                                      }                                  case 16:                                      {                                          result.hasVersion = input.ReadInt64(ref result.version_);                                          break;                                      }                                  case 26:                                      {                                          input.ReadMessageArray(tag' field_name' result.content_' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.DefaultInstance' extensionRegistry);                                          break;                                      }                              }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                              {                                  case 0:                                      {                                          throw pb::InvalidProtocolBufferException.InvalidTag();                                      }                                  default:                                      {                                          if (pb::WireFormat.IsEndGroupTag(tag))                                          {                                              if (unknownFields != null)                                              {                                                  this.UnknownFields = unknownFields.Build();                                              }                                              return this;                                          }                                          if (unknownFields == null)                                          {                                              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                          }                                          ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                          break;                                      }                                  case 10:                                      {                                          global::Akka.Cluster.PubSub.Serializers.Proto.Address.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Address.CreateBuilder();                                          if (result.hasOwner)                                          {                                              subBuilder.MergeFrom(Owner);                                          }                                          input.ReadMessage(subBuilder' extensionRegistry);                                          Owner = subBuilder.BuildPartial();                                          break;                                      }                                  case 16:                                      {                                          result.hasVersion = input.ReadInt64(ref result.version_);                                          break;                                      }                                  case 26:                                      {                                          input.ReadMessageArray(tag' field_name' result.content_' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Entry.DefaultInstance' extensionRegistry);                                          break;                                      }                              }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  input.ReadMessageArray(tag' field_name' result.buckets_' global::Akka.Cluster.PubSub.Serializers.Proto.Delta.Types.Bucket.DefaultInstance' extensionRegistry);                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasSystem = input.ReadString(ref result.system_);                                  break;                              }                          case 18:                              {                                  result.hasHostname = input.ReadString(ref result.hostname_);                                  break;                              }                          case 24:                              {                                  result.hasPort = input.ReadUInt32(ref result.port_);                                  break;                              }                          case 34:                              {                                  result.hasProtocol = input.ReadString(ref result.protocol_);                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasSystem = input.ReadString(ref result.system_);                                  break;                              }                          case 18:                              {                                  result.hasHostname = input.ReadString(ref result.hostname_);                                  break;                              }                          case 24:                              {                                  result.hasPort = input.ReadUInt32(ref result.port_);                                  break;                              }                          case 34:                              {                                  result.hasProtocol = input.ReadString(ref result.protocol_);                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasSystem = input.ReadString(ref result.system_);                                  break;                              }                          case 18:                              {                                  result.hasHostname = input.ReadString(ref result.hostname_);                                  break;                              }                          case 24:                              {                                  result.hasPort = input.ReadUInt32(ref result.port_);                                  break;                              }                          case 34:                              {                                  result.hasProtocol = input.ReadString(ref result.protocol_);                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasSystem = input.ReadString(ref result.system_);                                  break;                              }                          case 18:                              {                                  result.hasHostname = input.ReadString(ref result.hostname_);                                  break;                              }                          case 24:                              {                                  result.hasPort = input.ReadUInt32(ref result.port_);                                  break;                              }                          case 34:                              {                                  result.hasProtocol = input.ReadString(ref result.protocol_);                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasPath = input.ReadString(ref result.path_);                                  break;                              }                          case 16:                              {                                  result.hasLocalAffinity = input.ReadBool(ref result.localAffinity_);                                  break;                              }                          case 26:                              {                                  global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder();                                  if (result.hasPayload)                                  {                                      subBuilder.MergeFrom(Payload);                                  }                                  input.ReadMessage(subBuilder' extensionRegistry);                                  Payload = subBuilder.BuildPartial();                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasPath = input.ReadString(ref result.path_);                                  break;                              }                          case 16:                              {                                  result.hasLocalAffinity = input.ReadBool(ref result.localAffinity_);                                  break;                              }                          case 26:                              {                                  global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder();                                  if (result.hasPayload)                                  {                                      subBuilder.MergeFrom(Payload);                                  }                                  input.ReadMessage(subBuilder' extensionRegistry);                                  Payload = subBuilder.BuildPartial();                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasPath = input.ReadString(ref result.path_);                                  break;                              }                          case 16:                              {                                  result.hasLocalAffinity = input.ReadBool(ref result.localAffinity_);                                  break;                              }                          case 26:                              {                                  global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder();                                  if (result.hasPayload)                                  {                                      subBuilder.MergeFrom(Payload);                                  }                                  input.ReadMessage(subBuilder' extensionRegistry);                                  Payload = subBuilder.BuildPartial();                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasPath = input.ReadString(ref result.path_);                                  break;                              }                          case 16:                              {                                  result.hasAllButSelf = input.ReadBool(ref result.allButSelf_);                                  break;                              }                          case 26:                              {                                  global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder();                                  if (result.hasPayload)                                  {                                      subBuilder.MergeFrom(Payload);                                  }                                  input.ReadMessage(subBuilder' extensionRegistry);                                  Payload = subBuilder.BuildPartial();                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasPath = input.ReadString(ref result.path_);                                  break;                              }                          case 16:                              {                                  result.hasAllButSelf = input.ReadBool(ref result.allButSelf_);                                  break;                              }                          case 26:                              {                                  global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder();                                  if (result.hasPayload)                                  {                                      subBuilder.MergeFrom(Payload);                                  }                                  input.ReadMessage(subBuilder' extensionRegistry);                                  Payload = subBuilder.BuildPartial();                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasPath = input.ReadString(ref result.path_);                                  break;                              }                          case 16:                              {                                  result.hasAllButSelf = input.ReadBool(ref result.allButSelf_);                                  break;                              }                          case 26:                              {                                  global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder();                                  if (result.hasPayload)                                  {                                      subBuilder.MergeFrom(Payload);                                  }                                  input.ReadMessage(subBuilder' extensionRegistry);                                  Payload = subBuilder.BuildPartial();                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasTopic = input.ReadString(ref result.topic_);                                  break;                              }                          case 26:                              {                                  global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder();                                  if (result.hasPayload)                                  {                                      subBuilder.MergeFrom(Payload);                                  }                                  input.ReadMessage(subBuilder' extensionRegistry);                                  Payload = subBuilder.BuildPartial();                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasTopic = input.ReadString(ref result.topic_);                                  break;                              }                          case 26:                              {                                  global::Akka.Cluster.PubSub.Serializers.Proto.Payload.Builder subBuilder = global::Akka.Cluster.PubSub.Serializers.Proto.Payload.CreateBuilder();                                  if (result.hasPayload)                                  {                                      subBuilder.MergeFrom(Payload);                                  }                                  input.ReadMessage(subBuilder' extensionRegistry);                                  Payload = subBuilder.BuildPartial();                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasEnclosedMessage = input.ReadBytes(ref result.enclosedMessage_);                                  break;                              }                          case 16:                              {                                  result.hasSerializerId = input.ReadInt32(ref result.serializerId_);                                  break;                              }                          case 34:                              {                                  result.hasMessageManifest = input.ReadBytes(ref result.messageManifest_);                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasEnclosedMessage = input.ReadBytes(ref result.enclosedMessage_);                                  break;                              }                          case 16:                              {                                  result.hasSerializerId = input.ReadInt32(ref result.serializerId_);                                  break;                              }                          case 34:                              {                                  result.hasMessageManifest = input.ReadBytes(ref result.messageManifest_);                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,MergeFrom,The following statement contains a magic number: switch (tag)                      {                          case 0:                              {                                  throw pb::InvalidProtocolBufferException.InvalidTag();                              }                          default:                              {                                  if (pb::WireFormat.IsEndGroupTag(tag))                                  {                                      if (unknownFields != null)                                      {                                          this.UnknownFields = unknownFields.Build();                                      }                                      return this;                                  }                                  if (unknownFields == null)                                  {                                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                                  }                                  ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                                  break;                              }                          case 10:                              {                                  result.hasEnclosedMessage = input.ReadBytes(ref result.enclosedMessage_);                                  break;                              }                          case 16:                              {                                  result.hasSerializerId = input.ReadInt32(ref result.serializerId_);                                  break;                              }                          case 34:                              {                                  result.hasMessageManifest = input.ReadBytes(ref result.messageManifest_);                                  break;                              }                      }
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Entry,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteInt64(2' field_names[2]' Version);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Entry,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteInt64(2' field_names[2]' Version);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Entry,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteString(3' field_names[1]' Ref);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Bucket,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteInt64(2' field_names[2]' Version);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Bucket,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteInt64(2' field_names[2]' Version);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Bucket,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteMessageArray(3' field_names[0]' content_);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Address,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteString(1' field_names[3]' System);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Address,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteString(2' field_names[0]' Hostname);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Address,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32(3' field_names[1]' Port);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Address,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteString(4' field_names[2]' Protocol);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Address,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteString(4' field_names[2]' Protocol);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Send,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteBool(2' field_names[0]' LocalAffinity);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Send,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(3' field_names[2]' Payload);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Send,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(3' field_names[2]' Payload);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,SendToAll,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteBool(2' field_names[0]' AllButSelf);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,SendToAll,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(3' field_names[2]' Payload);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,SendToAll,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(3' field_names[2]' Payload);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Publish,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(3' field_names[0]' Payload);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Payload,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteInt32(2' field_names[2]' SerializerId);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Payload,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteInt32(2' field_names[2]' SerializerId);
Magic Number,Akka.Cluster.PubSub.Serializers.Proto,Payload,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\PublishSubscribe\Serialization\Proto\DistributedPubSubMessages.cs,WriteTo,The following statement contains a magic number: output.WriteBytes(4' field_names[1]' MessageManifest);
Magic Number,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,ClusterSingletonManager,The following statement contains a magic number: _maxHandOverRetries = Math.Max(minRetries' n + 3);
Magic Number,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,ClusterSingletonManager,The following statement contains a magic number: _maxTakeOverRetries = Math.Max(1' n - 3);
Magic Number,Akka.Cluster.Tools.Singleton,ClusterSingletonManager,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Singleton\ClusterSingletonManager.cs,AddRemoved,The following statement contains a magic number: _removed = _removed.Add(address' Deadline.Now + TimeSpan.FromMinutes(15.0));
Missing Default,Akka.Cluster.Tools.Client,ClusterClient,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClient.cs,Establishing,The following switch statement is missing a default case: switch (msg)                      {                          case InternalMessage.HeartbeatTick:                              _failureDetector.HeartBeat();                              break;                          case InternalMessage.RefreshContactsTick:                              SendGetContacts();                              break;                      }
Missing Default,Akka.Cluster.Tools.Client,ClusterClient,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools\Client\ClusterClient.cs,Active,The following switch statement is missing a default case: switch (m)                      {                          case InternalMessage.HeartbeatTick:                              if (!_failureDetector.IsAvailable)                              {                                  Log.Info("Lost contact with [{0}]' restablishing connection"' receptionist);                                  SendGetContacts();                                  ScheduleRefreshContactsTick(Settings.EstablishingGetContactsInterval);                                  Context.Become(Establishing);                                  _failureDetector.HeartBeat();                              }                              else                              {                                  receptionist.Tell(ClusterReceptionist.Heartbeat.Instance);                              }                              break;                          case InternalMessage.RefreshContactsTick:                              receptionist.Tell(ClusterReceptionist.GetContacts.Instance);                              break;                      }
