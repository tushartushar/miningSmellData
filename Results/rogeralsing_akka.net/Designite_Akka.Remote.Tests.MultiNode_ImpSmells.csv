Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Akka.Remote.Tests.MultiNode,NewRemoteActorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\NewRemoteActorSpec.cs,NewRemoteActorSpecs,The length of the statement  "            A_new_remote_actor_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref(); " is 123.
Long Statement,Akka.Remote.Tests.MultiNode,NewRemoteActorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\NewRemoteActorSpec.cs,NewRemoteActorSpecs,The length of the statement  "            A_new_remote_actor_must_be_locally_instantiated_on_a_remote_node_with_null_parameter_and_be_able_to_communicate_through_its_remote_actor_ref(); " is 143.
Long Statement,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,RemoteRoundRobinSpecs,The length of the statement  "            A_remote_round_robin_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref(); " is 125.
Long Statement,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref,The length of the statement  "                Log.Debug("Counts for RemoteRoundRobinSpec nodes. First: {0}' Second: {1}' Third: {2}"' replies[Node(_config.First).Address]' " is 125.
Long Statement,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_group_must_send_messages_with_actor_selection_to_remote_paths,The length of the statement  "                Log.Debug("Counts for RemoteRoundRobinSpec nodes. First: {0}' Second: {1}' Third: {2}"' replies[Node(_config.First).Address]' " is 125.
Long Statement,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_group_must_send_messages_with_actor_selection_to_remote_paths,The length of the statement  "                replies.ForEach(x => Assert.True(x.Value == iterationCount' $"Expected {x.Key} to have {iterationCount} replies but instead had {x.Value}")); " is 141.
Long Statement,Akka.Remote.Tests.MultiNode.Router,RemoteRandomSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRandomSpec.cs,RemoteRandomSpecs,The length of the statement  "            A_remote_random_pool_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref(); " is 125.
Virtual Method Call from Constructor,Akka.Remote.Tests.MultiNode,NewRemoteActorMultiNodeSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\NewRemoteActorSpec.cs,NewRemoteActorMultiNodeSpecConfig,The constructor "NewRemoteActorMultiNodeSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Remote.Tests.MultiNode,PiercingShouldKeepQuarantineMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\PiercingShouldKeepQuarantineSpec.cs,PiercingShouldKeepQuarantineMultiNodeConfig,The constructor "PiercingShouldKeepQuarantineMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Remote.Tests.MultiNode,RemoteGatePiercingMultiNetSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteGatePiercingSpec.cs,RemoteGatePiercingMultiNetSpec,The constructor "RemoteGatePiercingMultiNetSpec" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchMultiNetSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatchMultiNetSpec,The constructor "RemoteNodeDeathWatchMultiNetSpec" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Remote.Tests.MultiNode,RemoteNodeRestartDeathWatchSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeRestartDeathWatchSpec.cs,RemoteNodeRestartDeathWatchSpecConfig,The constructor "RemoteNodeRestartDeathWatchSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Remote.Tests.MultiNode,RemoteNodeShutdownAndComesBackMultiNetSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeShutdownAndComesBackSpec.cs,RemoteNodeShutdownAndComesBackMultiNetSpec,The constructor "RemoteNodeShutdownAndComesBackMultiNetSpec" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Remote.Tests.MultiNode,RemoteRestartedQuarantinedMultiNetSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteRestartedQuarantinedSpec.cs,RemoteRestartedQuarantinedMultiNetSpec,The constructor "RemoteRestartedQuarantinedMultiNetSpec" calls a virtual method "WithFallback".
Magic Number,Akka.Remote.Tests.MultiNode,AttemptSysMsgRedeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\AttemptSysMsgRedeliverySpec.cs,RedeliverSystemMessageAfterInactivity,The following statement contains a magic number: RunOn(() => ExpectTerminated(secondRef' TimeSpan.FromSeconds(10))'                  _config.First' _config.Third);
Magic Number,Akka.Remote.Tests.MultiNode,AttemptSysMsgRedeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\AttemptSysMsgRedeliverySpec.cs,RedeliverSystemMessageAfterInactivity,The following statement contains a magic number: RunOn(() => ExpectTerminated(firstRef' TimeSpan.FromSeconds(10))'                  _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,NewRemoteActorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\NewRemoteActorSpec.cs,A_new_remote_actor_must_be_able_to_shutdown_system_when_using_remote_deployed_actor,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      var actor = Sys.ActorOf(Props.Create(() => new NewRemoteActorMultiNodeSpecConfig.SomeActor())'                          "service-hello3");                      var foo = Assert.IsType<RemoteActorRef>(actor);                      actor.Path.Address.ShouldBe(Node(_config.Slave).Address);                        // This watch is in race with the shutdown of the watched system. This race should remain' as the test should                      // handle both cases:                      //  - remote system receives watch' replies with DeathWatchNotification                      //  - remote system never gets watch' but DeathWatch heartbeats time out' and AddressTerminated is generated                      //    (this needs some time to happen)                      Watch(actor);                      EnterBarrier("deployed");                        // master system is supposed to be shutdown after slave                      // this should be triggered by slave system shutdown                      ExpectTerminated(actor);                  }' _config.Master);                    RunOn(() =>                  {                      EnterBarrier("deployed");                  }' _config.Slave);                    // Important that this is the last test.                  // It should not be any barriers here.                  // verifySystemShutdown = true will ensure that system shutdown is successful                  VerifySystemShutdown.ShouldBeTrue("Shutdown should be verified!");              });
Magic Number,Akka.Remote.Tests.MultiNode,PiercingShouldKeepQuarantineSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\PiercingShouldKeepQuarantineSpec.cs,While_probing_through_the_quarantine_remoting_must_not_lose_existing_quarantine_marker,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("actors-started");                    // Communicate with second system                  Sys.ActorSelection(Node(_config.Second) / "user" / "subject").Tell("getuid");                  var uid = ExpectMsg<int>(TimeSpan.FromSeconds(10));                  EnterBarrier("actor-identified");                    // Manually Quarantine the other system                  RARP.For(Sys).Provider.Transport.Quarantine(Node(_config.Second).Address' uid);                    // Quarantining is not immedeiate                  Thread.Sleep(1000);                    // Quarantine is up - Should not be able to communicate with remote system any more                  for (var i = 1; i <= 4; i++)                  {                      Sys.ActorSelection(Node(_config.Second) / "user" / "subject").Tell("getuid");                        ExpectNoMsg(TimeSpan.FromSeconds(2));                  }                    EnterBarrier("quarantine-intact");                }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,PiercingShouldKeepQuarantineSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\PiercingShouldKeepQuarantineSpec.cs,While_probing_through_the_quarantine_remoting_must_not_lose_existing_quarantine_marker,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("actors-started");                    // Communicate with second system                  Sys.ActorSelection(Node(_config.Second) / "user" / "subject").Tell("getuid");                  var uid = ExpectMsg<int>(TimeSpan.FromSeconds(10));                  EnterBarrier("actor-identified");                    // Manually Quarantine the other system                  RARP.For(Sys).Provider.Transport.Quarantine(Node(_config.Second).Address' uid);                    // Quarantining is not immedeiate                  Thread.Sleep(1000);                    // Quarantine is up - Should not be able to communicate with remote system any more                  for (var i = 1; i <= 4; i++)                  {                      Sys.ActorSelection(Node(_config.Second) / "user" / "subject").Tell("getuid");                        ExpectNoMsg(TimeSpan.FromSeconds(2));                  }                    EnterBarrier("quarantine-intact");                }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,PiercingShouldKeepQuarantineSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\PiercingShouldKeepQuarantineSpec.cs,While_probing_through_the_quarantine_remoting_must_not_lose_existing_quarantine_marker,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("actors-started");                    // Communicate with second system                  Sys.ActorSelection(Node(_config.Second) / "user" / "subject").Tell("getuid");                  var uid = ExpectMsg<int>(TimeSpan.FromSeconds(10));                  EnterBarrier("actor-identified");                    // Manually Quarantine the other system                  RARP.For(Sys).Provider.Transport.Quarantine(Node(_config.Second).Address' uid);                    // Quarantining is not immedeiate                  Thread.Sleep(1000);                    // Quarantine is up - Should not be able to communicate with remote system any more                  for (var i = 1; i <= 4; i++)                  {                      Sys.ActorSelection(Node(_config.Second) / "user" / "subject").Tell("getuid");                        ExpectNoMsg(TimeSpan.FromSeconds(2));                  }                    EnterBarrier("quarantine-intact");                }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,PiercingShouldKeepQuarantineSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\PiercingShouldKeepQuarantineSpec.cs,While_probing_through_the_quarantine_remoting_must_not_lose_existing_quarantine_marker,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("actors-started");                    // Communicate with second system                  Sys.ActorSelection(Node(_config.Second) / "user" / "subject").Tell("getuid");                  var uid = ExpectMsg<int>(TimeSpan.FromSeconds(10));                  EnterBarrier("actor-identified");                    // Manually Quarantine the other system                  RARP.For(Sys).Provider.Transport.Quarantine(Node(_config.Second).Address' uid);                    // Quarantining is not immedeiate                  Thread.Sleep(1000);                    // Quarantine is up - Should not be able to communicate with remote system any more                  for (var i = 1; i <= 4; i++)                  {                      Sys.ActorSelection(Node(_config.Second) / "user" / "subject").Tell("getuid");                        ExpectNoMsg(TimeSpan.FromSeconds(2));                  }                    EnterBarrier("quarantine-intact");                }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteDeliverySpec.cs,RemoteDeliverySpec,The following statement contains a magic number: _identify = (role' actorName) => Within(TimeSpan.FromSeconds(10)' () =>                  {                      Sys.ActorSelection(Node(role)/"user"/actorName)                          .Tell(new Identify(actorName));                      return ExpectMsg<ActorIdentity>()                          .Subject;                  });
Magic Number,Akka.Remote.Tests.MultiNode,RemoteDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteDeliverySpec.cs,Remoting_with_TCP_must_not_drop_messages_under_normal_circumstances,The following statement contains a magic number: RunOn(() =>                  {                      var p1 = _identify(_config.First' "postman-first");                      var p2 = _identify(_config.Second' "postman-second");                      var p3 = _identify(_config.Third' "postman-third");                      var route = new List<IActorRef>                      {                          p2'                          p3'                          p2'                          p3'                          TestActor                      };                        for (var n = 1; n <= 500; n++)                      {                          p1.Tell(new RemoteDeliveryMultiNetSpec.Letter(n' route));                          var letterNumber = n;                          ExpectMsg<RemoteDeliveryMultiNetSpec.Letter>(                              letter => letter.N == letterNumber && letter.Route.Count == 0'                              TimeSpan.FromSeconds(5));                            // in case the loop count is increased it is good with some progress feedback                          if (n%10000 == 0)                          {                              Log.Info("Passed [{0}]"' n);                          }                      }                  }'                  _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteDeliverySpec.cs,Remoting_with_TCP_must_not_drop_messages_under_normal_circumstances,The following statement contains a magic number: RunOn(() =>                  {                      var p1 = _identify(_config.First' "postman-first");                      var p2 = _identify(_config.Second' "postman-second");                      var p3 = _identify(_config.Third' "postman-third");                      var route = new List<IActorRef>                      {                          p2'                          p3'                          p2'                          p3'                          TestActor                      };                        for (var n = 1; n <= 500; n++)                      {                          p1.Tell(new RemoteDeliveryMultiNetSpec.Letter(n' route));                          var letterNumber = n;                          ExpectMsg<RemoteDeliveryMultiNetSpec.Letter>(                              letter => letter.N == letterNumber && letter.Route.Count == 0'                              TimeSpan.FromSeconds(5));                            // in case the loop count is increased it is good with some progress feedback                          if (n%10000 == 0)                          {                              Log.Info("Passed [{0}]"' n);                          }                      }                  }'                  _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteDeliverySpec.cs,Remoting_with_TCP_must_not_drop_messages_under_normal_circumstances,The following statement contains a magic number: RunOn(() =>                  {                      var p1 = _identify(_config.First' "postman-first");                      var p2 = _identify(_config.Second' "postman-second");                      var p3 = _identify(_config.Third' "postman-third");                      var route = new List<IActorRef>                      {                          p2'                          p3'                          p2'                          p3'                          TestActor                      };                        for (var n = 1; n <= 500; n++)                      {                          p1.Tell(new RemoteDeliveryMultiNetSpec.Letter(n' route));                          var letterNumber = n;                          ExpectMsg<RemoteDeliveryMultiNetSpec.Letter>(                              letter => letter.N == letterNumber && letter.Route.Count == 0'                              TimeSpan.FromSeconds(5));                            // in case the loop count is increased it is good with some progress feedback                          if (n%10000 == 0)                          {                              Log.Info("Passed [{0}]"' n);                          }                      }                  }'                  _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteGatePiercingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteGatePiercingSpec.cs,RemoteGatePiercingSpec,The following statement contains a magic number: _identify = (role' actorName) =>              {                  Sys.ActorSelection(Node(role)/"user"/actorName).Tell(new Identify(actorName));                  return ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;              };
Magic Number,Akka.Remote.Tests.MultiNode,RemoteGatePiercingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteGatePiercingSpec.cs,RemoteGatePiercing_must_allow_restarted_node_to_pass_through_gate,The following statement contains a magic number: RunOn(() =>              {                  _identify(_config.Second' "subject");                  EnterBarrier("actors-communicate");                    EventFilter.Warning(null' null' contains: "address is now gated").ExpectOne(() =>                  {                      var cmd =                          RARP.For(Sys)                              .Provider.Transport.ManagementCommand(                                  new ForceDisassociateExplicitly(Node(_config.Second).Address' DisassociateInfo.Unknown));                      cmd.Wait(TimeSpan.FromSeconds(3));                  });                    EnterBarrier("gated");                  EnterBarrier("gate-pierced");              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteGatePiercingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteGatePiercingSpec.cs,RemoteGatePiercing_must_allow_restarted_node_to_pass_through_gate,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("actors-communicate");                  EnterBarrier("gated");                    // Pierce the gate                  Within(TimeSpan.FromSeconds(30)' () =>                  {                      AwaitAssert(() => _identify(_config.First' "subject"));                  });                    EnterBarrier("gate-pierced");              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatchSpec,The following statement contains a magic number: _remoteWatcher = new Lazy<IActorRef>(() =>              {                  Sys.ActorSelection("/system/remote-watcher").Tell(new Identify(null));                  return ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;              });
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatchSpec,The following statement contains a magic number: _identify = (role' actorName) =>              {                  Sys.ActorSelection(Node(role) / "user" / actorName).Tell(new Identify(actorName));                  return ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;              };
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,AssertCleanup,The following statement contains a magic number: timeout = timeout ?? TimeSpan.FromSeconds(5);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_receive_Terminated_when_remote_actor_is_stopped,The following statement contains a magic number: RunOn(() =>              {                  var subject = Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "subject1");                  EnterBarrier("actors-started-1");                    EnterBarrier("hello1-message-sent");                  ExpectMsg("hello1"' TimeSpan.FromSeconds(3));                  EnterBarrier("watch-established-1");                    Sleep();                  Sys.Stop(subject);              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_receive_Terminated_when_remote_actor_is_stopped,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromSeconds(2));
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_watch_unwatch,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromSeconds(2));
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_bi_directional_watch_unwatch,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromSeconds(2));
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_bi_directional_watch_stop_unwatch,The following statement contains a magic number: RunOn(() =>              {                  var watcher1 = Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "w1");                  var watcher2 = Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "w2");                  var s1 = Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "s1");                  var s2 = Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "s2");                  EnterBarrier("actors-started-4");                    var other = Myself == _config.First ? _config.Second : _config.First;                  var subject1 = _identify(other' "s1");                  var subject2 = _identify(other' "s2");                  watcher1.Tell(new WatchIt(subject1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  watcher2.Tell(new WatchIt(subject2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  EnterBarrier("watch-4");                    Sleep();                    watcher1.Tell(new UnwatchIt(subject1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  EnterBarrier("unwatch-s1-4");                  Sys.Stop(s1);                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  EnterBarrier("stop-s1-4");                    Sys.Stop(s2);                  EnterBarrier("stop-s2-4");                  ExpectMsg<WrappedTerminated>().T.ActorRef.ShouldBe(subject2);              }' _config.First' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_bi_directional_watch_stop_unwatch,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromSeconds(2));
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_stop,The following statement contains a magic number: RunOn(() =>              {                  var p1 = CreateTestProbe();                  var p2 = CreateTestProbe();                  var p3 = CreateTestProbe();                  var a1 = Sys.ActorOf(Props.Create(() => new ProbeActor(p1.Ref))' "a1");                  var a2 = Sys.ActorOf(Props.Create(() => new ProbeActor(p2.Ref))' "a2");                  var a3 = Sys.ActorOf(Props.Create(() => new ProbeActor(p3.Ref))' "a3");                    EnterBarrier("actors-started-5");                    var b1 = _identify(_config.Second' "b1");                  var b2 = _identify(_config.Second' "b2");                  var b3 = _identify(_config.Second' "b3");                    a1.Tell(new WatchIt(b1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  a1.Tell(new WatchIt(b2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  a2.Tell(new WatchIt(b2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  a3.Tell(new WatchIt(b3));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  Sleep();                  a2.Tell(new UnwatchIt(b2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-5");                    Sleep();                    a1.Tell(PoisonPill.Instance);                  a2.Tell(PoisonPill.Instance);                  a3.Tell(PoisonPill.Instance);                    EnterBarrier("stopped-5");                  EnterBarrier("terminated-verified-5");                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  AssertCleanup();              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_stop,The following statement contains a magic number: RunOn(() =>              {                  var p1 = CreateTestProbe();                  var p2 = CreateTestProbe();                  var p3 = CreateTestProbe();                  var b1 = Sys.ActorOf(Props.Create(() => new ProbeActor(p1.Ref))' "b1");                  var b2 = Sys.ActorOf(Props.Create(() => new ProbeActor(p2.Ref))' "b2");                  var b3 = Sys.ActorOf(Props.Create(() => new ProbeActor(p3.Ref))' "b3");                    EnterBarrier("actors-started-5");                    var a1 = _identify(_config.First' "a1");                  var a2 = _identify(_config.First' "a2");                  var a3 = _identify(_config.First' "a3");                    b1.Tell(new WatchIt(a1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b1.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b2.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b3.Tell(new WatchIt(a3));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  Sleep();                  b2.Tell(new UnwatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-5");                  EnterBarrier("stopped-5");                    p1.ReceiveN(2' TimeSpan.FromSeconds(20))                      .Cast<WrappedTerminated>()                      .Select(w => w.T.ActorRef)                      .OrderBy(r => r.Path.Name)                      .ShouldBe(new[] {a1' a2});                  p3.ExpectMsg<WrappedTerminated>(TimeSpan.FromSeconds(5)).T.ActorRef.ShouldBe(a3);                  p2.ExpectNoMsg(TimeSpan.FromSeconds(2));                  EnterBarrier("terminated-verified-5");                                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  p1.ExpectNoMsg(100);                  p2.ExpectNoMsg(100);                  p3.ExpectNoMsg(100);                  AssertCleanup();              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_stop,The following statement contains a magic number: RunOn(() =>              {                  var p1 = CreateTestProbe();                  var p2 = CreateTestProbe();                  var p3 = CreateTestProbe();                  var b1 = Sys.ActorOf(Props.Create(() => new ProbeActor(p1.Ref))' "b1");                  var b2 = Sys.ActorOf(Props.Create(() => new ProbeActor(p2.Ref))' "b2");                  var b3 = Sys.ActorOf(Props.Create(() => new ProbeActor(p3.Ref))' "b3");                    EnterBarrier("actors-started-5");                    var a1 = _identify(_config.First' "a1");                  var a2 = _identify(_config.First' "a2");                  var a3 = _identify(_config.First' "a3");                    b1.Tell(new WatchIt(a1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b1.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b2.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b3.Tell(new WatchIt(a3));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  Sleep();                  b2.Tell(new UnwatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-5");                  EnterBarrier("stopped-5");                    p1.ReceiveN(2' TimeSpan.FromSeconds(20))                      .Cast<WrappedTerminated>()                      .Select(w => w.T.ActorRef)                      .OrderBy(r => r.Path.Name)                      .ShouldBe(new[] {a1' a2});                  p3.ExpectMsg<WrappedTerminated>(TimeSpan.FromSeconds(5)).T.ActorRef.ShouldBe(a3);                  p2.ExpectNoMsg(TimeSpan.FromSeconds(2));                  EnterBarrier("terminated-verified-5");                                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  p1.ExpectNoMsg(100);                  p2.ExpectNoMsg(100);                  p3.ExpectNoMsg(100);                  AssertCleanup();              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_stop,The following statement contains a magic number: RunOn(() =>              {                  var p1 = CreateTestProbe();                  var p2 = CreateTestProbe();                  var p3 = CreateTestProbe();                  var b1 = Sys.ActorOf(Props.Create(() => new ProbeActor(p1.Ref))' "b1");                  var b2 = Sys.ActorOf(Props.Create(() => new ProbeActor(p2.Ref))' "b2");                  var b3 = Sys.ActorOf(Props.Create(() => new ProbeActor(p3.Ref))' "b3");                    EnterBarrier("actors-started-5");                    var a1 = _identify(_config.First' "a1");                  var a2 = _identify(_config.First' "a2");                  var a3 = _identify(_config.First' "a3");                    b1.Tell(new WatchIt(a1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b1.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b2.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b3.Tell(new WatchIt(a3));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  Sleep();                  b2.Tell(new UnwatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-5");                  EnterBarrier("stopped-5");                    p1.ReceiveN(2' TimeSpan.FromSeconds(20))                      .Cast<WrappedTerminated>()                      .Select(w => w.T.ActorRef)                      .OrderBy(r => r.Path.Name)                      .ShouldBe(new[] {a1' a2});                  p3.ExpectMsg<WrappedTerminated>(TimeSpan.FromSeconds(5)).T.ActorRef.ShouldBe(a3);                  p2.ExpectNoMsg(TimeSpan.FromSeconds(2));                  EnterBarrier("terminated-verified-5");                                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  p1.ExpectNoMsg(100);                  p2.ExpectNoMsg(100);                  p3.ExpectNoMsg(100);                  AssertCleanup();              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_stop,The following statement contains a magic number: RunOn(() =>              {                  var p1 = CreateTestProbe();                  var p2 = CreateTestProbe();                  var p3 = CreateTestProbe();                  var b1 = Sys.ActorOf(Props.Create(() => new ProbeActor(p1.Ref))' "b1");                  var b2 = Sys.ActorOf(Props.Create(() => new ProbeActor(p2.Ref))' "b2");                  var b3 = Sys.ActorOf(Props.Create(() => new ProbeActor(p3.Ref))' "b3");                    EnterBarrier("actors-started-5");                    var a1 = _identify(_config.First' "a1");                  var a2 = _identify(_config.First' "a2");                  var a3 = _identify(_config.First' "a3");                    b1.Tell(new WatchIt(a1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b1.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b2.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b3.Tell(new WatchIt(a3));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  Sleep();                  b2.Tell(new UnwatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-5");                  EnterBarrier("stopped-5");                    p1.ReceiveN(2' TimeSpan.FromSeconds(20))                      .Cast<WrappedTerminated>()                      .Select(w => w.T.ActorRef)                      .OrderBy(r => r.Path.Name)                      .ShouldBe(new[] {a1' a2});                  p3.ExpectMsg<WrappedTerminated>(TimeSpan.FromSeconds(5)).T.ActorRef.ShouldBe(a3);                  p2.ExpectNoMsg(TimeSpan.FromSeconds(2));                  EnterBarrier("terminated-verified-5");                                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  p1.ExpectNoMsg(100);                  p2.ExpectNoMsg(100);                  p3.ExpectNoMsg(100);                  AssertCleanup();              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_stop,The following statement contains a magic number: RunOn(() =>              {                  var p1 = CreateTestProbe();                  var p2 = CreateTestProbe();                  var p3 = CreateTestProbe();                  var b1 = Sys.ActorOf(Props.Create(() => new ProbeActor(p1.Ref))' "b1");                  var b2 = Sys.ActorOf(Props.Create(() => new ProbeActor(p2.Ref))' "b2");                  var b3 = Sys.ActorOf(Props.Create(() => new ProbeActor(p3.Ref))' "b3");                    EnterBarrier("actors-started-5");                    var a1 = _identify(_config.First' "a1");                  var a2 = _identify(_config.First' "a2");                  var a3 = _identify(_config.First' "a3");                    b1.Tell(new WatchIt(a1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b1.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b2.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b3.Tell(new WatchIt(a3));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  Sleep();                  b2.Tell(new UnwatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-5");                  EnterBarrier("stopped-5");                    p1.ReceiveN(2' TimeSpan.FromSeconds(20))                      .Cast<WrappedTerminated>()                      .Select(w => w.T.ActorRef)                      .OrderBy(r => r.Path.Name)                      .ShouldBe(new[] {a1' a2});                  p3.ExpectMsg<WrappedTerminated>(TimeSpan.FromSeconds(5)).T.ActorRef.ShouldBe(a3);                  p2.ExpectNoMsg(TimeSpan.FromSeconds(2));                  EnterBarrier("terminated-verified-5");                                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  p1.ExpectNoMsg(100);                  p2.ExpectNoMsg(100);                  p3.ExpectNoMsg(100);                  AssertCleanup();              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_stop,The following statement contains a magic number: RunOn(() =>              {                  var p1 = CreateTestProbe();                  var p2 = CreateTestProbe();                  var p3 = CreateTestProbe();                  var b1 = Sys.ActorOf(Props.Create(() => new ProbeActor(p1.Ref))' "b1");                  var b2 = Sys.ActorOf(Props.Create(() => new ProbeActor(p2.Ref))' "b2");                  var b3 = Sys.ActorOf(Props.Create(() => new ProbeActor(p3.Ref))' "b3");                    EnterBarrier("actors-started-5");                    var a1 = _identify(_config.First' "a1");                  var a2 = _identify(_config.First' "a2");                  var a3 = _identify(_config.First' "a3");                    b1.Tell(new WatchIt(a1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b1.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b2.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b3.Tell(new WatchIt(a3));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  Sleep();                  b2.Tell(new UnwatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-5");                  EnterBarrier("stopped-5");                    p1.ReceiveN(2' TimeSpan.FromSeconds(20))                      .Cast<WrappedTerminated>()                      .Select(w => w.T.ActorRef)                      .OrderBy(r => r.Path.Name)                      .ShouldBe(new[] {a1' a2});                  p3.ExpectMsg<WrappedTerminated>(TimeSpan.FromSeconds(5)).T.ActorRef.ShouldBe(a3);                  p2.ExpectNoMsg(TimeSpan.FromSeconds(2));                  EnterBarrier("terminated-verified-5");                                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  p1.ExpectNoMsg(100);                  p2.ExpectNoMsg(100);                  p3.ExpectNoMsg(100);                  AssertCleanup();              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_stop,The following statement contains a magic number: RunOn(() =>              {                  var p1 = CreateTestProbe();                  var p2 = CreateTestProbe();                  var p3 = CreateTestProbe();                  var b1 = Sys.ActorOf(Props.Create(() => new ProbeActor(p1.Ref))' "b1");                  var b2 = Sys.ActorOf(Props.Create(() => new ProbeActor(p2.Ref))' "b2");                  var b3 = Sys.ActorOf(Props.Create(() => new ProbeActor(p3.Ref))' "b3");                    EnterBarrier("actors-started-5");                    var a1 = _identify(_config.First' "a1");                  var a2 = _identify(_config.First' "a2");                  var a3 = _identify(_config.First' "a3");                    b1.Tell(new WatchIt(a1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b1.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b2.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b3.Tell(new WatchIt(a3));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  Sleep();                  b2.Tell(new UnwatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-5");                  EnterBarrier("stopped-5");                    p1.ReceiveN(2' TimeSpan.FromSeconds(20))                      .Cast<WrappedTerminated>()                      .Select(w => w.T.ActorRef)                      .OrderBy(r => r.Path.Name)                      .ShouldBe(new[] {a1' a2});                  p3.ExpectMsg<WrappedTerminated>(TimeSpan.FromSeconds(5)).T.ActorRef.ShouldBe(a3);                  p2.ExpectNoMsg(TimeSpan.FromSeconds(2));                  EnterBarrier("terminated-verified-5");                                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  p1.ExpectNoMsg(100);                  p2.ExpectNoMsg(100);                  p3.ExpectNoMsg(100);                  AssertCleanup();              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_after_stop,The following statement contains a magic number: RunOn(() =>              {                  var p1 = CreateTestProbe();                  var p2 = CreateTestProbe();                  var p3 = CreateTestProbe();                  var b1 = Sys.ActorOf(Props.Create(() => new ProbeActor(p1.Ref))' "b1");                  var b2 = Sys.ActorOf(Props.Create(() => new ProbeActor(p2.Ref))' "b2");                  var b3 = Sys.ActorOf(Props.Create(() => new ProbeActor(p3.Ref))' "b3");                    EnterBarrier("actors-started-5");                    var a1 = _identify(_config.First' "a1");                  var a2 = _identify(_config.First' "a2");                  var a3 = _identify(_config.First' "a3");                    b1.Tell(new WatchIt(a1));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b1.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b2.Tell(new WatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  b3.Tell(new WatchIt(a3));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  Sleep();                  b2.Tell(new UnwatchIt(a2));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-5");                  EnterBarrier("stopped-5");                    p1.ReceiveN(2' TimeSpan.FromSeconds(20))                      .Cast<WrappedTerminated>()                      .Select(w => w.T.ActorRef)                      .OrderBy(r => r.Path.Name)                      .ShouldBe(new[] {a1' a2});                  p3.ExpectMsg<WrappedTerminated>(TimeSpan.FromSeconds(5)).T.ActorRef.ShouldBe(a3);                  p2.ExpectNoMsg(TimeSpan.FromSeconds(2));                  EnterBarrier("terminated-verified-5");                                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  p1.ExpectNoMsg(100);                  p2.ExpectNoMsg(100);                  p3.ExpectNoMsg(100);                  AssertCleanup();              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_receive_Terminated_when_watched_node_crash,The following statement contains a magic number: RunOn(() =>              {                  var watcher = Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "watcher6");                  var watcher2 = Sys.ActorOf(Props.Create(() => new ProbeActor(Sys.DeadLetters)));                  EnterBarrier("actors-started-6");                    var subject = _identify(_config.Second' "subject6");                  watcher.Tell(new WatchIt(subject));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  watcher2.Tell(new WatchIt(subject));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  subject.Tell("hello6");                    // testing with this watch/unwatch of watcher2 to make sure that the unwatch doesn't                  // remove the first watch                  watcher2.Tell(new UnwatchIt(subject));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-6");                    Sleep();                    Log.Info("exit second");                  TestConductor.Exit(_config.Second' 0).Wait();                  ExpectMsg<WrappedTerminated>(TimeSpan.FromSeconds(15)).T.ActorRef.ShouldBe(subject);                                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  AssertCleanup();              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_receive_Terminated_when_watched_node_crash,The following statement contains a magic number: RunOn(() =>              {                  var watcher = Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "watcher6");                  var watcher2 = Sys.ActorOf(Props.Create(() => new ProbeActor(Sys.DeadLetters)));                  EnterBarrier("actors-started-6");                    var subject = _identify(_config.Second' "subject6");                  watcher.Tell(new WatchIt(subject));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  watcher2.Tell(new WatchIt(subject));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                  subject.Tell("hello6");                    // testing with this watch/unwatch of watcher2 to make sure that the unwatch doesn't                  // remove the first watch                  watcher2.Tell(new UnwatchIt(subject));                  ExpectMsg<RemoteNodeDeathWatchMultiNetSpec.Ack>(TimeSpan.FromSeconds(1));                    EnterBarrier("watch-established-6");                    Sleep();                    Log.Info("exit second");                  TestConductor.Exit(_config.Second' 0).Wait();                  ExpectMsg<WrappedTerminated>(TimeSpan.FromSeconds(15)).T.ActorRef.ShouldBe(subject);                                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup();                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  AssertCleanup();              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_receive_Terminated_when_watched_node_crash,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "subject6");                  EnterBarrier("actors-started-6");                    ExpectMsg("hello6"' TimeSpan.FromSeconds(3));                  EnterBarrier("watch-established-6");              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_when_watching_node_crash,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "subject7");                  EnterBarrier("actors-started-7");                    ExpectMsg("hello7"' TimeSpan.FromSeconds(3));                  EnterBarrier("watch-established-7");                    Sleep();                    Log.Info("exit third");                  TestConductor.Exit(_config.Third' 0).Wait();                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup(TimeSpan.FromSeconds(20));                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  AssertCleanup();              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_when_watching_node_crash,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "subject7");                  EnterBarrier("actors-started-7");                    ExpectMsg("hello7"' TimeSpan.FromSeconds(3));                  EnterBarrier("watch-established-7");                    Sleep();                    Log.Info("exit third");                  TestConductor.Exit(_config.Third' 0).Wait();                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup(TimeSpan.FromSeconds(20));                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  AssertCleanup();              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeDeathWatchSpec.cs,RemoteNodeDeathWatch_must_cleanup_when_watching_node_crash,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorOf(Props.Create(() => new ProbeActor(TestActor))' "subject7");                  EnterBarrier("actors-started-7");                    ExpectMsg("hello7"' TimeSpan.FromSeconds(3));                  EnterBarrier("watch-established-7");                    Sleep();                    Log.Info("exit third");                  TestConductor.Exit(_config.Third' 0).Wait();                    // verify that things are cleaned up' and heartbeating is stopped                  AssertCleanup(TimeSpan.FromSeconds(20));                  ExpectNoMsg(TimeSpan.FromSeconds(2));                  AssertCleanup();              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeRestartDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeRestartDeathWatchSpec.cs,Must_receive_terminated_when_remote_actor_system_is_restarted,The following statement contains a magic number: RunOn(() =>              {                  var secondAddress = Node(_specConfig.Second).Address;                  EnterBarrier("actors-started");                    var subject = Identify(_specConfig.Second' "subject");                  Watch(subject);                  subject.Tell("hello");                  ExpectMsg("hello");                  EnterBarrier("watch-established");                                    // simulate a hard shutdown' nothing sent from the shutdown node                  TestConductor.Blackhole(_specConfig.Second' _specConfig.First' ThrottleTransportAdapter.Direction.Send)                      .GetAwaiter()                      .GetResult();                  TestConductor.Shutdown(_specConfig.Second).GetAwaiter().GetResult();                  ExpectTerminated(subject' TimeSpan.FromSeconds(20));                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      // retry because the Subject actor might not be started yet                      AwaitAssert(() =>                      {                          Sys.ActorSelection(new RootActorPath(secondAddress)/"user"/                                             "subject").Tell("shutdown");                          ExpectMsg<string>(msg => { return "shutdown-ack" == msg; }' TimeSpan.FromSeconds(1));                      });                  });              }' _specConfig.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeRestartDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeRestartDeathWatchSpec.cs,Must_receive_terminated_when_remote_actor_system_is_restarted,The following statement contains a magic number: RunOn(() =>              {                  var secondAddress = Node(_specConfig.Second).Address;                  EnterBarrier("actors-started");                    var subject = Identify(_specConfig.Second' "subject");                  Watch(subject);                  subject.Tell("hello");                  ExpectMsg("hello");                  EnterBarrier("watch-established");                                    // simulate a hard shutdown' nothing sent from the shutdown node                  TestConductor.Blackhole(_specConfig.Second' _specConfig.First' ThrottleTransportAdapter.Direction.Send)                      .GetAwaiter()                      .GetResult();                  TestConductor.Shutdown(_specConfig.Second).GetAwaiter().GetResult();                  ExpectTerminated(subject' TimeSpan.FromSeconds(20));                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      // retry because the Subject actor might not be started yet                      AwaitAssert(() =>                      {                          Sys.ActorSelection(new RootActorPath(secondAddress)/"user"/                                             "subject").Tell("shutdown");                          ExpectMsg<string>(msg => { return "shutdown-ack" == msg; }' TimeSpan.FromSeconds(1));                      });                  });              }' _specConfig.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeRestartDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeRestartDeathWatchSpec.cs,Must_receive_terminated_when_remote_actor_system_is_restarted,The following statement contains a magic number: RunOn(() =>              {                  var addr = Sys.AsInstanceOf<ExtendedActorSystem>().Provider.DefaultAddress;                  Sys.ActorOf(Props.Create(() => new Subject())' "subject");                  EnterBarrier("actors-started");                    EnterBarrier("watch-established");                  Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(30));                    var sb = new StringBuilder().AppendLine("akka.remote.helios.tcp {").AppendLine("hostname = " + addr.Host)                          .AppendLine("port = " + addr.Port)                          .AppendLine("}");                  var freshSystem = ActorSystem.Create(Sys.Name'                      ConfigurationFactory.ParseString(sb.ToString()).WithFallback(Sys.Settings.Config));                  freshSystem.ActorOf(Props.Create(() => new Subject())' "subject");                    freshSystem.WhenTerminated.Wait(TimeSpan.FromSeconds(30));              }' _specConfig.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeRestartDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeRestartDeathWatchSpec.cs,Must_receive_terminated_when_remote_actor_system_is_restarted,The following statement contains a magic number: RunOn(() =>              {                  var addr = Sys.AsInstanceOf<ExtendedActorSystem>().Provider.DefaultAddress;                  Sys.ActorOf(Props.Create(() => new Subject())' "subject");                  EnterBarrier("actors-started");                    EnterBarrier("watch-established");                  Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(30));                    var sb = new StringBuilder().AppendLine("akka.remote.helios.tcp {").AppendLine("hostname = " + addr.Host)                          .AppendLine("port = " + addr.Port)                          .AppendLine("}");                  var freshSystem = ActorSystem.Create(Sys.Name'                      ConfigurationFactory.ParseString(sb.ToString()).WithFallback(Sys.Settings.Config));                  freshSystem.ActorOf(Props.Create(() => new Subject())' "subject");                    freshSystem.WhenTerminated.Wait(TimeSpan.FromSeconds(30));              }' _specConfig.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteDeploymentNodeDeathWatchSlowSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteDeploymentDeathWatchSpec.cs,Sleep,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeShutdownAndComesBackSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeShutdownAndComesBackSpec.cs,RemoteNodeShutdownAndComesBack_must_properly_reset_system_message_buffer_state_when_new_system_with_same_Address_comes_up,The following statement contains a magic number: RunOn(() =>              {                  var secondAddress = Node(_config.Second).Address;                  Sys.ActorOf<RemoteNodeShutdownAndComesBackMultiNetSpec.Subject>("subject");                  EnterBarrier("actors-started");                    var subject = _identify(_config.Second' "subject");                  var sysmsgBarrier = _identify(_config.Second' "sysmsgBarrier");                    // Prime up the system message buffer                  Watch(subject);                  EnterBarrier("watch-established");                    // Wait for proper system message propagation                  // (Using a helper actor to ensure that all previous system messages arrived)                  Watch(sysmsgBarrier);                  Sys.Stop(sysmsgBarrier);                  ExpectTerminated(sysmsgBarrier);                    // Drop all messages from this point so no SHUTDOWN is ever received                  TestConductor.Blackhole(_config.Second' _config.First' ThrottleTransportAdapter.Direction.Send).Wait();                    // Shut down all existing connections so that the system can enter recovery mode (association attempts)                  RARP.For(Sys)                      .Provider.Transport.ManagementCommand(new ForceDisassociate(Node(_config.Second).Address))                      .Wait(TimeSpan.FromSeconds(3));                    // Trigger reconnect attempt and also queue up a system message to be in limbo state (UID of remote system                  // is unknown' and system message is pending)                  Sys.Stop(subject);                    // Get rid of old system -- now SHUTDOWN is lost                  TestConductor.Shutdown(_config.Second).Wait();                    // At this point the second node is restarting' while the first node is trying to reconnect without resetting                  // the system message send state                    // Now wait until second system becomes alive again                  Within(TimeSpan.FromSeconds(30)' () =>                  {                      // retry because the Subject actor might not be started yet                      AwaitAssert(() =>                      {                          var p = CreateTestProbe();                          Sys.ActorSelection(new RootActorPath(secondAddress) / "user" / "subject").Tell(new Identify("subject")' p.Ref);                          p.ExpectMsg<ActorIdentity>(i => i.Subject != null && "subject".Equals(i.MessageId)' TimeSpan.FromSeconds(1));                      });                  });                    ExpectTerminated(subject' TimeSpan.FromSeconds(10));                    // Establish watch with the new system. This triggers additional system message traffic. If buffers are out                  // of sync the remote system will be quarantined and the rest of the test will fail (or even in earlier                  // stages depending on circumstances).                  Sys.ActorSelection(new RootActorPath(secondAddress) / "user" / "subject").Tell(new Identify("subject"));                  var subjectNew = ExpectMsg<ActorIdentity>(i => i.Subject != null).Subject;                  Watch(subjectNew);                    subjectNew.Tell("shutdown");                  // we are waiting for a Terminated here' but it is ok if it does not arrive                  ReceiveWhile(TimeSpan.FromSeconds(5)' msg => msg as ActorIdentity);              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeShutdownAndComesBackSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeShutdownAndComesBackSpec.cs,RemoteNodeShutdownAndComesBack_must_properly_reset_system_message_buffer_state_when_new_system_with_same_Address_comes_up,The following statement contains a magic number: RunOn(() =>              {                  var secondAddress = Node(_config.Second).Address;                  Sys.ActorOf<RemoteNodeShutdownAndComesBackMultiNetSpec.Subject>("subject");                  EnterBarrier("actors-started");                    var subject = _identify(_config.Second' "subject");                  var sysmsgBarrier = _identify(_config.Second' "sysmsgBarrier");                    // Prime up the system message buffer                  Watch(subject);                  EnterBarrier("watch-established");                    // Wait for proper system message propagation                  // (Using a helper actor to ensure that all previous system messages arrived)                  Watch(sysmsgBarrier);                  Sys.Stop(sysmsgBarrier);                  ExpectTerminated(sysmsgBarrier);                    // Drop all messages from this point so no SHUTDOWN is ever received                  TestConductor.Blackhole(_config.Second' _config.First' ThrottleTransportAdapter.Direction.Send).Wait();                    // Shut down all existing connections so that the system can enter recovery mode (association attempts)                  RARP.For(Sys)                      .Provider.Transport.ManagementCommand(new ForceDisassociate(Node(_config.Second).Address))                      .Wait(TimeSpan.FromSeconds(3));                    // Trigger reconnect attempt and also queue up a system message to be in limbo state (UID of remote system                  // is unknown' and system message is pending)                  Sys.Stop(subject);                    // Get rid of old system -- now SHUTDOWN is lost                  TestConductor.Shutdown(_config.Second).Wait();                    // At this point the second node is restarting' while the first node is trying to reconnect without resetting                  // the system message send state                    // Now wait until second system becomes alive again                  Within(TimeSpan.FromSeconds(30)' () =>                  {                      // retry because the Subject actor might not be started yet                      AwaitAssert(() =>                      {                          var p = CreateTestProbe();                          Sys.ActorSelection(new RootActorPath(secondAddress) / "user" / "subject").Tell(new Identify("subject")' p.Ref);                          p.ExpectMsg<ActorIdentity>(i => i.Subject != null && "subject".Equals(i.MessageId)' TimeSpan.FromSeconds(1));                      });                  });                    ExpectTerminated(subject' TimeSpan.FromSeconds(10));                    // Establish watch with the new system. This triggers additional system message traffic. If buffers are out                  // of sync the remote system will be quarantined and the rest of the test will fail (or even in earlier                  // stages depending on circumstances).                  Sys.ActorSelection(new RootActorPath(secondAddress) / "user" / "subject").Tell(new Identify("subject"));                  var subjectNew = ExpectMsg<ActorIdentity>(i => i.Subject != null).Subject;                  Watch(subjectNew);                    subjectNew.Tell("shutdown");                  // we are waiting for a Terminated here' but it is ok if it does not arrive                  ReceiveWhile(TimeSpan.FromSeconds(5)' msg => msg as ActorIdentity);              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeShutdownAndComesBackSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeShutdownAndComesBackSpec.cs,RemoteNodeShutdownAndComesBack_must_properly_reset_system_message_buffer_state_when_new_system_with_same_Address_comes_up,The following statement contains a magic number: RunOn(() =>              {                  var secondAddress = Node(_config.Second).Address;                  Sys.ActorOf<RemoteNodeShutdownAndComesBackMultiNetSpec.Subject>("subject");                  EnterBarrier("actors-started");                    var subject = _identify(_config.Second' "subject");                  var sysmsgBarrier = _identify(_config.Second' "sysmsgBarrier");                    // Prime up the system message buffer                  Watch(subject);                  EnterBarrier("watch-established");                    // Wait for proper system message propagation                  // (Using a helper actor to ensure that all previous system messages arrived)                  Watch(sysmsgBarrier);                  Sys.Stop(sysmsgBarrier);                  ExpectTerminated(sysmsgBarrier);                    // Drop all messages from this point so no SHUTDOWN is ever received                  TestConductor.Blackhole(_config.Second' _config.First' ThrottleTransportAdapter.Direction.Send).Wait();                    // Shut down all existing connections so that the system can enter recovery mode (association attempts)                  RARP.For(Sys)                      .Provider.Transport.ManagementCommand(new ForceDisassociate(Node(_config.Second).Address))                      .Wait(TimeSpan.FromSeconds(3));                    // Trigger reconnect attempt and also queue up a system message to be in limbo state (UID of remote system                  // is unknown' and system message is pending)                  Sys.Stop(subject);                    // Get rid of old system -- now SHUTDOWN is lost                  TestConductor.Shutdown(_config.Second).Wait();                    // At this point the second node is restarting' while the first node is trying to reconnect without resetting                  // the system message send state                    // Now wait until second system becomes alive again                  Within(TimeSpan.FromSeconds(30)' () =>                  {                      // retry because the Subject actor might not be started yet                      AwaitAssert(() =>                      {                          var p = CreateTestProbe();                          Sys.ActorSelection(new RootActorPath(secondAddress) / "user" / "subject").Tell(new Identify("subject")' p.Ref);                          p.ExpectMsg<ActorIdentity>(i => i.Subject != null && "subject".Equals(i.MessageId)' TimeSpan.FromSeconds(1));                      });                  });                    ExpectTerminated(subject' TimeSpan.FromSeconds(10));                    // Establish watch with the new system. This triggers additional system message traffic. If buffers are out                  // of sync the remote system will be quarantined and the rest of the test will fail (or even in earlier                  // stages depending on circumstances).                  Sys.ActorSelection(new RootActorPath(secondAddress) / "user" / "subject").Tell(new Identify("subject"));                  var subjectNew = ExpectMsg<ActorIdentity>(i => i.Subject != null).Subject;                  Watch(subjectNew);                    subjectNew.Tell("shutdown");                  // we are waiting for a Terminated here' but it is ok if it does not arrive                  ReceiveWhile(TimeSpan.FromSeconds(5)' msg => msg as ActorIdentity);              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeShutdownAndComesBackSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeShutdownAndComesBackSpec.cs,RemoteNodeShutdownAndComesBack_must_properly_reset_system_message_buffer_state_when_new_system_with_same_Address_comes_up,The following statement contains a magic number: RunOn(() =>              {                  var secondAddress = Node(_config.Second).Address;                  Sys.ActorOf<RemoteNodeShutdownAndComesBackMultiNetSpec.Subject>("subject");                  EnterBarrier("actors-started");                    var subject = _identify(_config.Second' "subject");                  var sysmsgBarrier = _identify(_config.Second' "sysmsgBarrier");                    // Prime up the system message buffer                  Watch(subject);                  EnterBarrier("watch-established");                    // Wait for proper system message propagation                  // (Using a helper actor to ensure that all previous system messages arrived)                  Watch(sysmsgBarrier);                  Sys.Stop(sysmsgBarrier);                  ExpectTerminated(sysmsgBarrier);                    // Drop all messages from this point so no SHUTDOWN is ever received                  TestConductor.Blackhole(_config.Second' _config.First' ThrottleTransportAdapter.Direction.Send).Wait();                    // Shut down all existing connections so that the system can enter recovery mode (association attempts)                  RARP.For(Sys)                      .Provider.Transport.ManagementCommand(new ForceDisassociate(Node(_config.Second).Address))                      .Wait(TimeSpan.FromSeconds(3));                    // Trigger reconnect attempt and also queue up a system message to be in limbo state (UID of remote system                  // is unknown' and system message is pending)                  Sys.Stop(subject);                    // Get rid of old system -- now SHUTDOWN is lost                  TestConductor.Shutdown(_config.Second).Wait();                    // At this point the second node is restarting' while the first node is trying to reconnect without resetting                  // the system message send state                    // Now wait until second system becomes alive again                  Within(TimeSpan.FromSeconds(30)' () =>                  {                      // retry because the Subject actor might not be started yet                      AwaitAssert(() =>                      {                          var p = CreateTestProbe();                          Sys.ActorSelection(new RootActorPath(secondAddress) / "user" / "subject").Tell(new Identify("subject")' p.Ref);                          p.ExpectMsg<ActorIdentity>(i => i.Subject != null && "subject".Equals(i.MessageId)' TimeSpan.FromSeconds(1));                      });                  });                    ExpectTerminated(subject' TimeSpan.FromSeconds(10));                    // Establish watch with the new system. This triggers additional system message traffic. If buffers are out                  // of sync the remote system will be quarantined and the rest of the test will fail (or even in earlier                  // stages depending on circumstances).                  Sys.ActorSelection(new RootActorPath(secondAddress) / "user" / "subject").Tell(new Identify("subject"));                  var subjectNew = ExpectMsg<ActorIdentity>(i => i.Subject != null).Subject;                  Watch(subjectNew);                    subjectNew.Tell("shutdown");                  // we are waiting for a Terminated here' but it is ok if it does not arrive                  ReceiveWhile(TimeSpan.FromSeconds(5)' msg => msg as ActorIdentity);              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeShutdownAndComesBackSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeShutdownAndComesBackSpec.cs,RemoteNodeShutdownAndComesBack_must_properly_reset_system_message_buffer_state_when_new_system_with_same_Address_comes_up,The following statement contains a magic number: RunOn(() =>              {                  var addr = ((ExtendedActorSystem)Sys).Provider.DefaultAddress;                  Sys.ActorOf<RemoteNodeShutdownAndComesBackMultiNetSpec.Subject>("subject");                  Sys.ActorOf<RemoteNodeShutdownAndComesBackMultiNetSpec.Subject>("sysmsgBarrier");                  EnterBarrier("actors-started");                    EnterBarrier("watch-established");                    Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(30));                    var freshConfig = new StringBuilder().AppendLine("akka.remote.helios.tcp {").AppendLine("hostname = " + addr.Host)                          .AppendLine("port = " + addr.Port)                          .AppendLine("}").ToString();                    var freshSystem = ActorSystem.Create(Sys.Name'                      ConfigurationFactory.ParseString(freshConfig)                      .WithFallback(Sys.Settings.Config));                    freshSystem.ActorOf<RemoteNodeShutdownAndComesBackMultiNetSpec.Subject>("subject");                    freshSystem.WhenTerminated.Wait(TimeSpan.FromSeconds(30));              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteNodeShutdownAndComesBackSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteNodeShutdownAndComesBackSpec.cs,RemoteNodeShutdownAndComesBack_must_properly_reset_system_message_buffer_state_when_new_system_with_same_Address_comes_up,The following statement contains a magic number: RunOn(() =>              {                  var addr = ((ExtendedActorSystem)Sys).Provider.DefaultAddress;                  Sys.ActorOf<RemoteNodeShutdownAndComesBackMultiNetSpec.Subject>("subject");                  Sys.ActorOf<RemoteNodeShutdownAndComesBackMultiNetSpec.Subject>("sysmsgBarrier");                  EnterBarrier("actors-started");                    EnterBarrier("watch-established");                    Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(30));                    var freshConfig = new StringBuilder().AppendLine("akka.remote.helios.tcp {").AppendLine("hostname = " + addr.Host)                          .AppendLine("port = " + addr.Port)                          .AppendLine("}").ToString();                    var freshSystem = ActorSystem.Create(Sys.Name'                      ConfigurationFactory.ParseString(freshConfig)                      .WithFallback(Sys.Settings.Config));                    freshSystem.ActorOf<RemoteNodeShutdownAndComesBackMultiNetSpec.Subject>("subject");                    freshSystem.WhenTerminated.Wait(TimeSpan.FromSeconds(30));              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteRestartedQuarantinedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteRestartedQuarantinedSpec.cs,A_restarted_quarantined_system_should_not_crash_the_other_system,The following statement contains a magic number: RunOn(() =>              {                  var secondAddress = Node(_config.Second).Address;                  var uid = _identifyWithUid(_config.Second' "subject").Item1;                    RARP.For(Sys).Provider.Transport.Quarantine(Node(_config.Second).Address' uid);                    EnterBarrier("quarantined");                  EnterBarrier("still-quarantined");                    TestConductor.Shutdown(_config.Second).Wait();                    Within(TimeSpan.FromSeconds(30)' () =>                  {                      AwaitAssert(() =>                      {                          Sys.ActorSelection(new RootActorPath(secondAddress)/"user"/"subject")                              .Tell(new Identify("subject"));                          ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(1));                      });                  });                    Sys.ActorSelection(new RootActorPath(secondAddress) / "user" / "subject").Tell("shutdown");              }' _config.First);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteRestartedQuarantinedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteRestartedQuarantinedSpec.cs,A_restarted_quarantined_system_should_not_crash_the_other_system,The following statement contains a magic number: RunOn(() =>              {                  var addr = ((ExtendedActorSystem) Sys).Provider.DefaultAddress;                  var firstAddress = Node(_config.First).Address;                  Sys.EventStream.Subscribe(TestActor' typeof (ThisActorSystemQuarantinedEvent));                    var actorRef = _identifyWithUid(_config.First' "subject").Item2;                    EnterBarrier("quarantined");                    // Check that quarantine is intact                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          EventFilter.Warning(null' null' "The remote system has quarantined this system")                              .ExpectOne(() => actorRef.Tell("boo!"));                      });                  });                    ExpectMsg<ThisActorSystemQuarantinedEvent>(TimeSpan.FromSeconds(10));                    EnterBarrier("still-quarantined");                    Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(10));                    var sb = new StringBuilder()                      .AppendLine("akka.remote.retry-gate-closed-for = 0.5 s")                      .AppendLine("akka.remote.helios.tcp {")                      .AppendLine("hostname = " + addr.Host)                      .AppendLine("port = " + addr.Port)                      .AppendLine("}");                  var freshSystem = ActorSystem.Create(Sys.Name'                      ConfigurationFactory.ParseString(sb.ToString()).WithFallback(Sys.Settings.Config));                    var probe = CreateTestProbe(freshSystem);                    freshSystem.ActorSelection(new RootActorPath(firstAddress)/"user"/"subject")                      .Tell(new Identify("subject")' probe.Ref);                    // TODO sometimes it takes long time until the new connection is established'                  //      It seems like there must first be a transport failure detector timeout' that triggers                  //      "No response from remote. Handshake timed out or transport failure detector triggered"                  probe.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(30));                    freshSystem.ActorOf<RemoteRestartedQuarantinedMultiNetSpec.Subject>("subject");                    freshSystem.WhenTerminated.Wait(TimeSpan.FromSeconds(10));              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteRestartedQuarantinedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteRestartedQuarantinedSpec.cs,A_restarted_quarantined_system_should_not_crash_the_other_system,The following statement contains a magic number: RunOn(() =>              {                  var addr = ((ExtendedActorSystem) Sys).Provider.DefaultAddress;                  var firstAddress = Node(_config.First).Address;                  Sys.EventStream.Subscribe(TestActor' typeof (ThisActorSystemQuarantinedEvent));                    var actorRef = _identifyWithUid(_config.First' "subject").Item2;                    EnterBarrier("quarantined");                    // Check that quarantine is intact                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          EventFilter.Warning(null' null' "The remote system has quarantined this system")                              .ExpectOne(() => actorRef.Tell("boo!"));                      });                  });                    ExpectMsg<ThisActorSystemQuarantinedEvent>(TimeSpan.FromSeconds(10));                    EnterBarrier("still-quarantined");                    Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(10));                    var sb = new StringBuilder()                      .AppendLine("akka.remote.retry-gate-closed-for = 0.5 s")                      .AppendLine("akka.remote.helios.tcp {")                      .AppendLine("hostname = " + addr.Host)                      .AppendLine("port = " + addr.Port)                      .AppendLine("}");                  var freshSystem = ActorSystem.Create(Sys.Name'                      ConfigurationFactory.ParseString(sb.ToString()).WithFallback(Sys.Settings.Config));                    var probe = CreateTestProbe(freshSystem);                    freshSystem.ActorSelection(new RootActorPath(firstAddress)/"user"/"subject")                      .Tell(new Identify("subject")' probe.Ref);                    // TODO sometimes it takes long time until the new connection is established'                  //      It seems like there must first be a transport failure detector timeout' that triggers                  //      "No response from remote. Handshake timed out or transport failure detector triggered"                  probe.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(30));                    freshSystem.ActorOf<RemoteRestartedQuarantinedMultiNetSpec.Subject>("subject");                    freshSystem.WhenTerminated.Wait(TimeSpan.FromSeconds(10));              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteRestartedQuarantinedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteRestartedQuarantinedSpec.cs,A_restarted_quarantined_system_should_not_crash_the_other_system,The following statement contains a magic number: RunOn(() =>              {                  var addr = ((ExtendedActorSystem) Sys).Provider.DefaultAddress;                  var firstAddress = Node(_config.First).Address;                  Sys.EventStream.Subscribe(TestActor' typeof (ThisActorSystemQuarantinedEvent));                    var actorRef = _identifyWithUid(_config.First' "subject").Item2;                    EnterBarrier("quarantined");                    // Check that quarantine is intact                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          EventFilter.Warning(null' null' "The remote system has quarantined this system")                              .ExpectOne(() => actorRef.Tell("boo!"));                      });                  });                    ExpectMsg<ThisActorSystemQuarantinedEvent>(TimeSpan.FromSeconds(10));                    EnterBarrier("still-quarantined");                    Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(10));                    var sb = new StringBuilder()                      .AppendLine("akka.remote.retry-gate-closed-for = 0.5 s")                      .AppendLine("akka.remote.helios.tcp {")                      .AppendLine("hostname = " + addr.Host)                      .AppendLine("port = " + addr.Port)                      .AppendLine("}");                  var freshSystem = ActorSystem.Create(Sys.Name'                      ConfigurationFactory.ParseString(sb.ToString()).WithFallback(Sys.Settings.Config));                    var probe = CreateTestProbe(freshSystem);                    freshSystem.ActorSelection(new RootActorPath(firstAddress)/"user"/"subject")                      .Tell(new Identify("subject")' probe.Ref);                    // TODO sometimes it takes long time until the new connection is established'                  //      It seems like there must first be a transport failure detector timeout' that triggers                  //      "No response from remote. Handshake timed out or transport failure detector triggered"                  probe.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(30));                    freshSystem.ActorOf<RemoteRestartedQuarantinedMultiNetSpec.Subject>("subject");                    freshSystem.WhenTerminated.Wait(TimeSpan.FromSeconds(10));              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteRestartedQuarantinedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteRestartedQuarantinedSpec.cs,A_restarted_quarantined_system_should_not_crash_the_other_system,The following statement contains a magic number: RunOn(() =>              {                  var addr = ((ExtendedActorSystem) Sys).Provider.DefaultAddress;                  var firstAddress = Node(_config.First).Address;                  Sys.EventStream.Subscribe(TestActor' typeof (ThisActorSystemQuarantinedEvent));                    var actorRef = _identifyWithUid(_config.First' "subject").Item2;                    EnterBarrier("quarantined");                    // Check that quarantine is intact                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          EventFilter.Warning(null' null' "The remote system has quarantined this system")                              .ExpectOne(() => actorRef.Tell("boo!"));                      });                  });                    ExpectMsg<ThisActorSystemQuarantinedEvent>(TimeSpan.FromSeconds(10));                    EnterBarrier("still-quarantined");                    Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(10));                    var sb = new StringBuilder()                      .AppendLine("akka.remote.retry-gate-closed-for = 0.5 s")                      .AppendLine("akka.remote.helios.tcp {")                      .AppendLine("hostname = " + addr.Host)                      .AppendLine("port = " + addr.Port)                      .AppendLine("}");                  var freshSystem = ActorSystem.Create(Sys.Name'                      ConfigurationFactory.ParseString(sb.ToString()).WithFallback(Sys.Settings.Config));                    var probe = CreateTestProbe(freshSystem);                    freshSystem.ActorSelection(new RootActorPath(firstAddress)/"user"/"subject")                      .Tell(new Identify("subject")' probe.Ref);                    // TODO sometimes it takes long time until the new connection is established'                  //      It seems like there must first be a transport failure detector timeout' that triggers                  //      "No response from remote. Handshake timed out or transport failure detector triggered"                  probe.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(30));                    freshSystem.ActorOf<RemoteRestartedQuarantinedMultiNetSpec.Subject>("subject");                    freshSystem.WhenTerminated.Wait(TimeSpan.FromSeconds(10));              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode,RemoteRestartedQuarantinedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\RemoteRestartedQuarantinedSpec.cs,A_restarted_quarantined_system_should_not_crash_the_other_system,The following statement contains a magic number: RunOn(() =>              {                  var addr = ((ExtendedActorSystem) Sys).Provider.DefaultAddress;                  var firstAddress = Node(_config.First).Address;                  Sys.EventStream.Subscribe(TestActor' typeof (ThisActorSystemQuarantinedEvent));                    var actorRef = _identifyWithUid(_config.First' "subject").Item2;                    EnterBarrier("quarantined");                    // Check that quarantine is intact                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          EventFilter.Warning(null' null' "The remote system has quarantined this system")                              .ExpectOne(() => actorRef.Tell("boo!"));                      });                  });                    ExpectMsg<ThisActorSystemQuarantinedEvent>(TimeSpan.FromSeconds(10));                    EnterBarrier("still-quarantined");                    Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(10));                    var sb = new StringBuilder()                      .AppendLine("akka.remote.retry-gate-closed-for = 0.5 s")                      .AppendLine("akka.remote.helios.tcp {")                      .AppendLine("hostname = " + addr.Host)                      .AppendLine("port = " + addr.Port)                      .AppendLine("}");                  var freshSystem = ActorSystem.Create(Sys.Name'                      ConfigurationFactory.ParseString(sb.ToString()).WithFallback(Sys.Settings.Config));                    var probe = CreateTestProbe(freshSystem);                    freshSystem.ActorSelection(new RootActorPath(firstAddress)/"user"/"subject")                      .Tell(new Identify("subject")' probe.Ref);                    // TODO sometimes it takes long time until the new connection is established'                  //      It seems like there must first be a transport failure detector timeout' that triggers                  //      "No response from remote. Handshake timed out or transport failure detector triggered"                  probe.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(30));                    freshSystem.ActorOf<RemoteRestartedQuarantinedMultiNetSpec.Subject>("subject");                    freshSystem.WhenTerminated.Wait(TimeSpan.FromSeconds(10));              }' _config.Second);
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref,The following statement contains a magic number: var runOnFourth = new Action(() =>              {                  EnterBarrier("start");                  var actor = Sys.ActorOf(new RoundRobinPool(nrOfInstances: 0)                      .Props(Props.Create<SomeActor>())' "service-hello");                    Assert.IsType<RoutedActorRef>(actor);                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)' x =>                  {                      if (x is IActorRef) return x.AsInstanceOf<IActorRef>().Path.Address;                      return null;                  }' connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                      EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  Log.Debug("Counts for RemoteRoundRobinSpec nodes. First: {0}' Second: {1}' Third: {2}"' replies[Node(_config.First).Address]'                     replies[Node(_config.Second).Address]' replies[Node(_config.Third).Address]);                  replies.Values.ForEach(x => Assert.Equal(x' iterationCount));                  Assert.False(replies.ContainsKey(Node(_config.Fourth).Address));                    Sys.Stop(actor);              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref,The following statement contains a magic number: var runOnFourth = new Action(() =>              {                  EnterBarrier("start");                  var actor = Sys.ActorOf(new RoundRobinPool(nrOfInstances: 0)                      .Props(Props.Create<SomeActor>())' "service-hello");                    Assert.IsType<RoutedActorRef>(actor);                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)' x =>                  {                      if (x is IActorRef) return x.AsInstanceOf<IActorRef>().Path.Address;                      return null;                  }' connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                      EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  Log.Debug("Counts for RemoteRoundRobinSpec nodes. First: {0}' Second: {1}' Third: {2}"' replies[Node(_config.First).Address]'                     replies[Node(_config.Second).Address]' replies[Node(_config.Third).Address]);                  replies.Values.ForEach(x => Assert.Equal(x' iterationCount));                  Assert.False(replies.ContainsKey(Node(_config.Fourth).Address));                    Sys.Stop(actor);              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref,The following statement contains a magic number: var runOnFourth = new Action(() =>              {                  EnterBarrier("start");                  var actor = Sys.ActorOf(new RoundRobinPool(nrOfInstances: 0)                      .Props(Props.Create<SomeActor>())' "service-hello");                    Assert.IsType<RoutedActorRef>(actor);                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)' x =>                  {                      if (x is IActorRef) return x.AsInstanceOf<IActorRef>().Path.Address;                      return null;                  }' connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                      EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  Log.Debug("Counts for RemoteRoundRobinSpec nodes. First: {0}' Second: {1}' Third: {2}"' replies[Node(_config.First).Address]'                     replies[Node(_config.Second).Address]' replies[Node(_config.Third).Address]);                  replies.Values.ForEach(x => Assert.Equal(x' iterationCount));                  Assert.False(replies.ContainsKey(Node(_config.Fourth).Address));                    Sys.Stop(actor);              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_pool_with_resizer_must_be_locally_instantiated_on_a_remote_node_after_several_resize_rounds,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() => { EnterBarrier("start"' "broadcast-end"' "end"); }'                      _config.First' _config.Second' _config.Third);                    var runOnFourth = new Action(() =>                  {                      EnterBarrier("start");                      var actor = Sys.ActorOf(new RoundRobinPool(                          nrOfInstances: 1'                          resizer: new TestResizer()                          ).Props(Props.Create<SomeActor>())' "service-hello2");                        Assert.IsType<RoutedActorRef>(actor);                        actor.Tell(RouterMessage.GetRoutees);                      ExpectMsg<Routees>().Members.Count().ShouldBe(2);                        var repliesFrom = Enumerable.Range(3' 7).Select(n =>                      {                          //each message triggers a resize' incrementing number of routees with 1                          actor.Tell("hit");                          var routees = actor.AskAndWait<Routees>(RouterMessage.GetRoutees' TimeSpan.FromSeconds(5));                          routees.Members.Count().ShouldBe(n);                          return ExpectMsg<IActorRef>();                      }).ToImmutableHashSet();                        EnterBarrier("broadcast-end");                      actor.Tell(new Broadcast(PoisonPill.Instance));                        EnterBarrier("end");                      Assert.Equal(repliesFrom.Count' 7);                      var repliesFromAddresses = repliesFrom.Select(x => x.Path.Address).Distinct();                      var expectedAddresses = new List<ActorPath>                      {                          Node(_config.First)'                          Node(_config.Second)'                          Node(_config.Third)                      }                          .Select(x => x.Address);                        // check if they have same elements (ignoring order)                      Assert.All(repliesFromAddresses' x => Assert.Contains(x' expectedAddresses));                      Assert.True(repliesFromAddresses.Count() == expectedAddresses.Count());                        Sys.Stop(actor);                  });                    RunOn(runOnFourth' _config.Fourth);                  EnterBarrier("done");              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_pool_with_resizer_must_be_locally_instantiated_on_a_remote_node_after_several_resize_rounds,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() => { EnterBarrier("start"' "broadcast-end"' "end"); }'                      _config.First' _config.Second' _config.Third);                    var runOnFourth = new Action(() =>                  {                      EnterBarrier("start");                      var actor = Sys.ActorOf(new RoundRobinPool(                          nrOfInstances: 1'                          resizer: new TestResizer()                          ).Props(Props.Create<SomeActor>())' "service-hello2");                        Assert.IsType<RoutedActorRef>(actor);                        actor.Tell(RouterMessage.GetRoutees);                      ExpectMsg<Routees>().Members.Count().ShouldBe(2);                        var repliesFrom = Enumerable.Range(3' 7).Select(n =>                      {                          //each message triggers a resize' incrementing number of routees with 1                          actor.Tell("hit");                          var routees = actor.AskAndWait<Routees>(RouterMessage.GetRoutees' TimeSpan.FromSeconds(5));                          routees.Members.Count().ShouldBe(n);                          return ExpectMsg<IActorRef>();                      }).ToImmutableHashSet();                        EnterBarrier("broadcast-end");                      actor.Tell(new Broadcast(PoisonPill.Instance));                        EnterBarrier("end");                      Assert.Equal(repliesFrom.Count' 7);                      var repliesFromAddresses = repliesFrom.Select(x => x.Path.Address).Distinct();                      var expectedAddresses = new List<ActorPath>                      {                          Node(_config.First)'                          Node(_config.Second)'                          Node(_config.Third)                      }                          .Select(x => x.Address);                        // check if they have same elements (ignoring order)                      Assert.All(repliesFromAddresses' x => Assert.Contains(x' expectedAddresses));                      Assert.True(repliesFromAddresses.Count() == expectedAddresses.Count());                        Sys.Stop(actor);                  });                    RunOn(runOnFourth' _config.Fourth);                  EnterBarrier("done");              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_pool_with_resizer_must_be_locally_instantiated_on_a_remote_node_after_several_resize_rounds,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() => { EnterBarrier("start"' "broadcast-end"' "end"); }'                      _config.First' _config.Second' _config.Third);                    var runOnFourth = new Action(() =>                  {                      EnterBarrier("start");                      var actor = Sys.ActorOf(new RoundRobinPool(                          nrOfInstances: 1'                          resizer: new TestResizer()                          ).Props(Props.Create<SomeActor>())' "service-hello2");                        Assert.IsType<RoutedActorRef>(actor);                        actor.Tell(RouterMessage.GetRoutees);                      ExpectMsg<Routees>().Members.Count().ShouldBe(2);                        var repliesFrom = Enumerable.Range(3' 7).Select(n =>                      {                          //each message triggers a resize' incrementing number of routees with 1                          actor.Tell("hit");                          var routees = actor.AskAndWait<Routees>(RouterMessage.GetRoutees' TimeSpan.FromSeconds(5));                          routees.Members.Count().ShouldBe(n);                          return ExpectMsg<IActorRef>();                      }).ToImmutableHashSet();                        EnterBarrier("broadcast-end");                      actor.Tell(new Broadcast(PoisonPill.Instance));                        EnterBarrier("end");                      Assert.Equal(repliesFrom.Count' 7);                      var repliesFromAddresses = repliesFrom.Select(x => x.Path.Address).Distinct();                      var expectedAddresses = new List<ActorPath>                      {                          Node(_config.First)'                          Node(_config.Second)'                          Node(_config.Third)                      }                          .Select(x => x.Address);                        // check if they have same elements (ignoring order)                      Assert.All(repliesFromAddresses' x => Assert.Contains(x' expectedAddresses));                      Assert.True(repliesFromAddresses.Count() == expectedAddresses.Count());                        Sys.Stop(actor);                  });                    RunOn(runOnFourth' _config.Fourth);                  EnterBarrier("done");              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_pool_with_resizer_must_be_locally_instantiated_on_a_remote_node_after_several_resize_rounds,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() => { EnterBarrier("start"' "broadcast-end"' "end"); }'                      _config.First' _config.Second' _config.Third);                    var runOnFourth = new Action(() =>                  {                      EnterBarrier("start");                      var actor = Sys.ActorOf(new RoundRobinPool(                          nrOfInstances: 1'                          resizer: new TestResizer()                          ).Props(Props.Create<SomeActor>())' "service-hello2");                        Assert.IsType<RoutedActorRef>(actor);                        actor.Tell(RouterMessage.GetRoutees);                      ExpectMsg<Routees>().Members.Count().ShouldBe(2);                        var repliesFrom = Enumerable.Range(3' 7).Select(n =>                      {                          //each message triggers a resize' incrementing number of routees with 1                          actor.Tell("hit");                          var routees = actor.AskAndWait<Routees>(RouterMessage.GetRoutees' TimeSpan.FromSeconds(5));                          routees.Members.Count().ShouldBe(n);                          return ExpectMsg<IActorRef>();                      }).ToImmutableHashSet();                        EnterBarrier("broadcast-end");                      actor.Tell(new Broadcast(PoisonPill.Instance));                        EnterBarrier("end");                      Assert.Equal(repliesFrom.Count' 7);                      var repliesFromAddresses = repliesFrom.Select(x => x.Path.Address).Distinct();                      var expectedAddresses = new List<ActorPath>                      {                          Node(_config.First)'                          Node(_config.Second)'                          Node(_config.Third)                      }                          .Select(x => x.Address);                        // check if they have same elements (ignoring order)                      Assert.All(repliesFromAddresses' x => Assert.Contains(x' expectedAddresses));                      Assert.True(repliesFromAddresses.Count() == expectedAddresses.Count());                        Sys.Stop(actor);                  });                    RunOn(runOnFourth' _config.Fourth);                  EnterBarrier("done");              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_pool_with_resizer_must_be_locally_instantiated_on_a_remote_node_after_several_resize_rounds,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() => { EnterBarrier("start"' "broadcast-end"' "end"); }'                      _config.First' _config.Second' _config.Third);                    var runOnFourth = new Action(() =>                  {                      EnterBarrier("start");                      var actor = Sys.ActorOf(new RoundRobinPool(                          nrOfInstances: 1'                          resizer: new TestResizer()                          ).Props(Props.Create<SomeActor>())' "service-hello2");                        Assert.IsType<RoutedActorRef>(actor);                        actor.Tell(RouterMessage.GetRoutees);                      ExpectMsg<Routees>().Members.Count().ShouldBe(2);                        var repliesFrom = Enumerable.Range(3' 7).Select(n =>                      {                          //each message triggers a resize' incrementing number of routees with 1                          actor.Tell("hit");                          var routees = actor.AskAndWait<Routees>(RouterMessage.GetRoutees' TimeSpan.FromSeconds(5));                          routees.Members.Count().ShouldBe(n);                          return ExpectMsg<IActorRef>();                      }).ToImmutableHashSet();                        EnterBarrier("broadcast-end");                      actor.Tell(new Broadcast(PoisonPill.Instance));                        EnterBarrier("end");                      Assert.Equal(repliesFrom.Count' 7);                      var repliesFromAddresses = repliesFrom.Select(x => x.Path.Address).Distinct();                      var expectedAddresses = new List<ActorPath>                      {                          Node(_config.First)'                          Node(_config.Second)'                          Node(_config.Third)                      }                          .Select(x => x.Address);                        // check if they have same elements (ignoring order)                      Assert.All(repliesFromAddresses' x => Assert.Contains(x' expectedAddresses));                      Assert.True(repliesFromAddresses.Count() == expectedAddresses.Count());                        Sys.Stop(actor);                  });                    RunOn(runOnFourth' _config.Fourth);                  EnterBarrier("done");              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_pool_with_resizer_must_be_locally_instantiated_on_a_remote_node_after_several_resize_rounds,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() => { EnterBarrier("start"' "broadcast-end"' "end"); }'                      _config.First' _config.Second' _config.Third);                    var runOnFourth = new Action(() =>                  {                      EnterBarrier("start");                      var actor = Sys.ActorOf(new RoundRobinPool(                          nrOfInstances: 1'                          resizer: new TestResizer()                          ).Props(Props.Create<SomeActor>())' "service-hello2");                        Assert.IsType<RoutedActorRef>(actor);                        actor.Tell(RouterMessage.GetRoutees);                      ExpectMsg<Routees>().Members.Count().ShouldBe(2);                        var repliesFrom = Enumerable.Range(3' 7).Select(n =>                      {                          //each message triggers a resize' incrementing number of routees with 1                          actor.Tell("hit");                          var routees = actor.AskAndWait<Routees>(RouterMessage.GetRoutees' TimeSpan.FromSeconds(5));                          routees.Members.Count().ShouldBe(n);                          return ExpectMsg<IActorRef>();                      }).ToImmutableHashSet();                        EnterBarrier("broadcast-end");                      actor.Tell(new Broadcast(PoisonPill.Instance));                        EnterBarrier("end");                      Assert.Equal(repliesFrom.Count' 7);                      var repliesFromAddresses = repliesFrom.Select(x => x.Path.Address).Distinct();                      var expectedAddresses = new List<ActorPath>                      {                          Node(_config.First)'                          Node(_config.Second)'                          Node(_config.Third)                      }                          .Select(x => x.Address);                        // check if they have same elements (ignoring order)                      Assert.All(repliesFromAddresses' x => Assert.Contains(x' expectedAddresses));                      Assert.True(repliesFromAddresses.Count() == expectedAddresses.Count());                        Sys.Stop(actor);                  });                    RunOn(runOnFourth' _config.Fourth);                  EnterBarrier("done");              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_group_must_send_messages_with_actor_selection_to_remote_paths,The following statement contains a magic number: var runOnFourth = new Action(() =>              {                  EnterBarrier("start");                  var actor = Sys.ActorOf(Props.Empty.WithRouter(FromConfig.Instance)' "service-hello3");                    Assert.IsType<RoutedActorRef>(actor);                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)' x =>                  {                      if (x is IActorRef) return x.AsInstanceOf<IActorRef>().Path.Address;                      return null;                  }' connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("end");                  Log.Debug("Counts for RemoteRoundRobinSpec nodes. First: {0}' Second: {1}' Third: {2}"' replies[Node(_config.First).Address]'                      replies[Node(_config.Second).Address]' replies[Node(_config.Third).Address]);                  replies.ForEach(x => Assert.True(x.Value == iterationCount' $"Expected {x.Key} to have {iterationCount} replies but instead had {x.Value}"));                  Assert.False(replies.ContainsKey(Node(_config.Fourth).Address));              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_group_must_send_messages_with_actor_selection_to_remote_paths,The following statement contains a magic number: var runOnFourth = new Action(() =>              {                  EnterBarrier("start");                  var actor = Sys.ActorOf(Props.Empty.WithRouter(FromConfig.Instance)' "service-hello3");                    Assert.IsType<RoutedActorRef>(actor);                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)' x =>                  {                      if (x is IActorRef) return x.AsInstanceOf<IActorRef>().Path.Address;                      return null;                  }' connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("end");                  Log.Debug("Counts for RemoteRoundRobinSpec nodes. First: {0}' Second: {1}' Third: {2}"' replies[Node(_config.First).Address]'                      replies[Node(_config.Second).Address]' replies[Node(_config.Third).Address]);                  replies.ForEach(x => Assert.True(x.Value == iterationCount' $"Expected {x.Key} to have {iterationCount} replies but instead had {x.Value}"));                  Assert.False(replies.ContainsKey(Node(_config.Fourth).Address));              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRoundRobinSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,A_remote_round_robin_group_must_send_messages_with_actor_selection_to_remote_paths,The following statement contains a magic number: var runOnFourth = new Action(() =>              {                  EnterBarrier("start");                  var actor = Sys.ActorOf(Props.Empty.WithRouter(FromConfig.Instance)' "service-hello3");                    Assert.IsType<RoutedActorRef>(actor);                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)' x =>                  {                      if (x is IActorRef) return x.AsInstanceOf<IActorRef>().Path.Address;                      return null;                  }' connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("end");                  Log.Debug("Counts for RemoteRoundRobinSpec nodes. First: {0}' Second: {1}' Third: {2}"' replies[Node(_config.First).Address]'                      replies[Node(_config.Second).Address]' replies[Node(_config.Third).Address]);                  replies.ForEach(x => Assert.True(x.Value == iterationCount' $"Expected {x.Key} to have {iterationCount} replies but instead had {x.Value}"));                  Assert.False(replies.ContainsKey(Node(_config.Fourth).Address));              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,TestResizer,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRoundRobinSpec.cs,IsTimeForResize,The following statement contains a magic number: return messageCounter <= 10;
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRandomSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRandomSpec.cs,A_remote_random_pool_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref,The following statement contains a magic number: var runOnFourth = new Action(() =>              {                  EnterBarrier("start");                  var actor = Sys.ActorOf(new RandomPool(nrOfInstances: 0)                      .Props(Props.Create<SomeActor>())' "service-hello");                    Assert.IsType<RoutedActorRef>(actor);                    var connectionCount = 3;                  var iterationCount = 100;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)' x =>                  {                      if (x is IActorRef) return x.AsInstanceOf<IActorRef>().Path.Address;                      return null;                  }' connectionCount * iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  // since it's random we can't be too strict in the assert                  replies.Values.Count(x => x > 0).ShouldBeGreaterThan(connectionCount - 2);                  Assert.False(replies.ContainsKey(Node(_config.Fourth).Address));                    Sys.Stop(actor);                  EnterBarrier("done");              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRandomSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRandomSpec.cs,A_remote_random_pool_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref,The following statement contains a magic number: var runOnFourth = new Action(() =>              {                  EnterBarrier("start");                  var actor = Sys.ActorOf(new RandomPool(nrOfInstances: 0)                      .Props(Props.Create<SomeActor>())' "service-hello");                    Assert.IsType<RoutedActorRef>(actor);                    var connectionCount = 3;                  var iterationCount = 100;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)' x =>                  {                      if (x is IActorRef) return x.AsInstanceOf<IActorRef>().Path.Address;                      return null;                  }' connectionCount * iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  // since it's random we can't be too strict in the assert                  replies.Values.Count(x => x > 0).ShouldBeGreaterThan(connectionCount - 2);                  Assert.False(replies.ContainsKey(Node(_config.Fourth).Address));                    Sys.Stop(actor);                  EnterBarrier("done");              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRandomSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRandomSpec.cs,A_remote_random_pool_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref,The following statement contains a magic number: var runOnFourth = new Action(() =>              {                  EnterBarrier("start");                  var actor = Sys.ActorOf(new RandomPool(nrOfInstances: 0)                      .Props(Props.Create<SomeActor>())' "service-hello");                    Assert.IsType<RoutedActorRef>(actor);                    var connectionCount = 3;                  var iterationCount = 100;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)' x =>                  {                      if (x is IActorRef) return x.AsInstanceOf<IActorRef>().Path.Address;                      return null;                  }' connectionCount * iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  // since it's random we can't be too strict in the assert                  replies.Values.Count(x => x > 0).ShouldBeGreaterThan(connectionCount - 2);                  Assert.False(replies.ContainsKey(Node(_config.Fourth).Address));                    Sys.Stop(actor);                  EnterBarrier("done");              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteRandomSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteRandomSpec.cs,A_remote_random_pool_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_remote_actor_ref,The following statement contains a magic number: var runOnFourth = new Action(() =>              {                  EnterBarrier("start");                  var actor = Sys.ActorOf(new RandomPool(nrOfInstances: 0)                      .Props(Props.Create<SomeActor>())' "service-hello");                    Assert.IsType<RoutedActorRef>(actor);                    var connectionCount = 3;                  var iterationCount = 100;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)' x =>                  {                      if (x is IActorRef) return x.AsInstanceOf<IActorRef>().Path.Address;                      return null;                  }' connectionCount * iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  // since it's random we can't be too strict in the assert                  replies.Values.Count(x => x > 0).ShouldBeGreaterThan(connectionCount - 2);                  Assert.False(replies.ContainsKey(Node(_config.Fourth).Address));                    Sys.Stop(actor);                  EnterBarrier("done");              });
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteScatterGatherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteScatterGatherSpec.cs,A_remote_ScatterGatherFirstCompleted_pool_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_RemoteActorRef,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("start");                  var actor =                      Sys.ActorOf(new ScatterGatherFirstCompletedPool(nrOfInstances: 1' within: TimeSpan.FromSeconds(10))                          .Props(Props.Create<SomeActor>())' "service-hello");                                    Assert.IsType<RoutedActorRef>(actor);                                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)'                      x => x is IActorRef ? x.AsInstanceOf<IActorRef>().Path.Address : null'                      connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  replies.Values.Sum().ShouldBe(30);                  replies.ContainsKey(Node(_config.Fourth).Address).ShouldBeFalse();                                    // shut down the actor before we let the other node(s) shut down so we don't try to send                  // "Terminate" to a shut down node                  Sys.Stop(actor);                  EnterBarrier("done");              }' _config.Fourth);
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteScatterGatherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteScatterGatherSpec.cs,A_remote_ScatterGatherFirstCompleted_pool_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_RemoteActorRef,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("start");                  var actor =                      Sys.ActorOf(new ScatterGatherFirstCompletedPool(nrOfInstances: 1' within: TimeSpan.FromSeconds(10))                          .Props(Props.Create<SomeActor>())' "service-hello");                                    Assert.IsType<RoutedActorRef>(actor);                                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)'                      x => x is IActorRef ? x.AsInstanceOf<IActorRef>().Path.Address : null'                      connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  replies.Values.Sum().ShouldBe(30);                  replies.ContainsKey(Node(_config.Fourth).Address).ShouldBeFalse();                                    // shut down the actor before we let the other node(s) shut down so we don't try to send                  // "Terminate" to a shut down node                  Sys.Stop(actor);                  EnterBarrier("done");              }' _config.Fourth);
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteScatterGatherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteScatterGatherSpec.cs,A_remote_ScatterGatherFirstCompleted_pool_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_RemoteActorRef,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("start");                  var actor =                      Sys.ActorOf(new ScatterGatherFirstCompletedPool(nrOfInstances: 1' within: TimeSpan.FromSeconds(10))                          .Props(Props.Create<SomeActor>())' "service-hello");                                    Assert.IsType<RoutedActorRef>(actor);                                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)'                      x => x is IActorRef ? x.AsInstanceOf<IActorRef>().Path.Address : null'                      connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  replies.Values.Sum().ShouldBe(30);                  replies.ContainsKey(Node(_config.Fourth).Address).ShouldBeFalse();                                    // shut down the actor before we let the other node(s) shut down so we don't try to send                  // "Terminate" to a shut down node                  Sys.Stop(actor);                  EnterBarrier("done");              }' _config.Fourth);
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteScatterGatherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteScatterGatherSpec.cs,A_remote_ScatterGatherFirstCompleted_pool_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_RemoteActorRef,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("start");                  var actor =                      Sys.ActorOf(new ScatterGatherFirstCompletedPool(nrOfInstances: 1' within: TimeSpan.FromSeconds(10))                          .Props(Props.Create<SomeActor>())' "service-hello");                                    Assert.IsType<RoutedActorRef>(actor);                                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)'                      x => x is IActorRef ? x.AsInstanceOf<IActorRef>().Path.Address : null'                      connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  replies.Values.Sum().ShouldBe(30);                  replies.ContainsKey(Node(_config.Fourth).Address).ShouldBeFalse();                                    // shut down the actor before we let the other node(s) shut down so we don't try to send                  // "Terminate" to a shut down node                  Sys.Stop(actor);                  EnterBarrier("done");              }' _config.Fourth);
Magic Number,Akka.Remote.Tests.MultiNode.Router,RemoteScatterGatherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\Router\RemoteScatterGatherSpec.cs,A_remote_ScatterGatherFirstCompleted_pool_must_be_locally_instantiated_on_a_remote_node_and_be_able_to_communicate_through_its_RemoteActorRef,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("start");                  var actor =                      Sys.ActorOf(new ScatterGatherFirstCompletedPool(nrOfInstances: 1' within: TimeSpan.FromSeconds(10))                          .Props(Props.Create<SomeActor>())' "service-hello");                                    Assert.IsType<RoutedActorRef>(actor);                                    var connectionCount = 3;                  var iterationCount = 10;                    for (var i = 0; i < iterationCount; i++)                      for (var k = 0; k < connectionCount; k++)                          actor.Tell("hit");                    var replies = ReceiveWhile(TimeSpan.FromSeconds(5)'                      x => x is IActorRef ? x.AsInstanceOf<IActorRef>().Path.Address : null'                      connectionCount*iterationCount)                      .Aggregate(ImmutableDictionary<Address' int>.Empty                          .Add(Node(_config.First).Address' 0)                          .Add(Node(_config.Second).Address' 0)                          .Add(Node(_config.Third).Address' 0)'                          (map' address) =>                          {                              var previous = map[address];                              return map.Remove(address).Add(address' previous + 1);                          });                    EnterBarrier("broadcast-end");                  actor.Tell(new Broadcast(PoisonPill.Instance));                    EnterBarrier("end");                  replies.Values.Sum().ShouldBe(30);                  replies.ContainsKey(Node(_config.Fourth).Address).ShouldBeFalse();                                    // shut down the actor before we let the other node(s) shut down so we don't try to send                  // "Terminate" to a shut down node                  Sys.Stop(actor);                  EnterBarrier("done");              }' _config.Fourth);
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: RunOn(() =>              {                  TestConductor.Throttle(_config.Slave' _config.Master' ThrottleTransportAdapter.Direction.Send' 0.01f).Wait();              }' _config.Master);
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: RunOn(() =>              {                  foreach(var i in Enumerable.Range(0' 10))                  {                      GetEchoActorRef().Tell(i);                  }              }' _config.Slave);
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: Within(TimeSpan.FromSeconds(0.5)' TimeSpan.FromSeconds(2)' () =>              {                  ExpectMsg(0' TimeSpan.FromMilliseconds(500));                  ReceiveN(9).ShouldOnlyContainInOrder(Enumerable.Range(1'9).Cast<object>().ToArray());              });
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: Within(TimeSpan.FromSeconds(0.5)' TimeSpan.FromSeconds(2)' () =>              {                  ExpectMsg(0' TimeSpan.FromMilliseconds(500));                  ReceiveN(9).ShouldOnlyContainInOrder(Enumerable.Range(1'9).Cast<object>().ToArray());              });
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: Within(TimeSpan.FromSeconds(0.5)' TimeSpan.FromSeconds(2)' () =>              {                  ExpectMsg(0' TimeSpan.FromMilliseconds(500));                  ReceiveN(9).ShouldOnlyContainInOrder(Enumerable.Range(1'9).Cast<object>().ToArray());              });
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: Within(TimeSpan.FromSeconds(0.5)' TimeSpan.FromSeconds(2)' () =>              {                  ExpectMsg(0' TimeSpan.FromMilliseconds(500));                  ReceiveN(9).ShouldOnlyContainInOrder(Enumerable.Range(1'9).Cast<object>().ToArray());              });
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: Within(TimeSpan.FromSeconds(0.5)' TimeSpan.FromSeconds(2)' () =>              {                  ExpectMsg(0' TimeSpan.FromMilliseconds(500));                  ReceiveN(9).ShouldOnlyContainInOrder(Enumerable.Range(1'9).Cast<object>().ToArray());              });
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: RunOn(() =>              {                  TestConductor.Throttle(_config.Slave' _config.Master' ThrottleTransportAdapter.Direction.Send' -1).Wait();                  TestConductor.Throttle(_config.Slave' _config.Master' ThrottleTransportAdapter.Direction.Receive' 0.01F).Wait();              }' _config.Master);
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: RunOn(() =>              {                  foreach (var i in Enumerable.Range(10' 10))                  {                      GetEchoActorRef().Tell(i);                  }              }' _config.Slave);
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: RunOn(() =>              {                  foreach (var i in Enumerable.Range(10' 10))                  {                      GetEchoActorRef().Tell(i);                  }              }' _config.Slave);
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: var minMax = IsNode(_config.Master)                  ? new Tuple<TimeSpan' TimeSpan>(TimeSpan.Zero' TimeSpan.FromMilliseconds(500))                  : new Tuple<TimeSpan' TimeSpan>(TimeSpan.FromSeconds(0.3)' TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: var minMax = IsNode(_config.Master)                  ? new Tuple<TimeSpan' TimeSpan>(TimeSpan.Zero' TimeSpan.FromMilliseconds(500))                  : new Tuple<TimeSpan' TimeSpan>(TimeSpan.FromSeconds(0.3)' TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: var minMax = IsNode(_config.Master)                  ? new Tuple<TimeSpan' TimeSpan>(TimeSpan.Zero' TimeSpan.FromMilliseconds(500))                  : new Tuple<TimeSpan' TimeSpan>(TimeSpan.FromSeconds(0.3)' TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: Within(minMax.Item1' minMax.Item2' () =>              {                  ExpectMsg(10' TimeSpan.FromMilliseconds(500));                  ReceiveN(9).ShouldOnlyContainInOrder(Enumerable.Range(11' 9).Cast<object>().ToArray());              });
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: Within(minMax.Item1' minMax.Item2' () =>              {                  ExpectMsg(10' TimeSpan.FromMilliseconds(500));                  ReceiveN(9).ShouldOnlyContainInOrder(Enumerable.Range(11' 9).Cast<object>().ToArray());              });
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: Within(minMax.Item1' minMax.Item2' () =>              {                  ExpectMsg(10' TimeSpan.FromMilliseconds(500));                  ReceiveN(9).ShouldOnlyContainInOrder(Enumerable.Range(11' 9).Cast<object>().ToArray());              });
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: Within(minMax.Item1' minMax.Item2' () =>              {                  ExpectMsg(10' TimeSpan.FromMilliseconds(500));                  ReceiveN(9).ShouldOnlyContainInOrder(Enumerable.Range(11' 9).Cast<object>().ToArray());              });
Magic Number,Akka.Remote.Tests.MultiNode.TestConductor,TestConductorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests.MultiNode\TestConductor\TestConductorSpec.cs,Support_Throttling_of_Network_Connections,The following statement contains a magic number: Within(minMax.Item1' minMax.Item2' () =>              {                  ExpectMsg(10' TimeSpan.FromMilliseconds(500));                  ReceiveN(9).ShouldOnlyContainInOrder(Enumerable.Range(11' 9).Cast<object>().ToArray());              });
