Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,Cyclomatic complexity of the method is 25
Complex Method,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,Manifest,Cyclomatic complexity of the method is 25
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The method has 7 parameters. Parameters: typeName' entityProps' settings' idExtractor' shardResolver' allocationStrategy' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The method has 7 parameters. Parameters: typeName' entityProps' settings' idExtractor' shardResolver' allocationStrategy' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The method has 5 parameters. Parameters: typeName' entityProps' settings' idExtractor' shardResolver
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The method has 5 parameters. Parameters: typeName' entityProps' settings' idExtractor' shardResolver
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The method has 6 parameters. Parameters: typeName' entityProps' settings' messageExtractor' allocationStrategy' handOffMessage
Long Parameter List,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The method has 6 parameters. Parameters: typeName' entityProps' settings' messageExtractor' allocationStrategy' handOffMessage
Long Parameter List,Akka.Cluster.Sharding,Start,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingGuardian.cs,Start,The method has 7 parameters. Parameters: typeName' entityProps' settings' idIdExtractor' shardResolver' allocationStrategy' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,TunningParameters,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,TunningParameters,The method has 11 parameters. Parameters: coordinatorFailureBackoff' retryInterval' bufferSize' handOffTimeout' shardStartTimeout' shardFailureBackoff' entityRestartBackoff' rebalanceInterval' snapshotAfter' leastShardAllocationRebalanceThreshold' leastShardAllocationMaxSimultaneousRebalance
Long Parameter List,Akka.Cluster.Sharding,ClusterShardingSettings,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,ClusterShardingSettings,The method has 6 parameters. Parameters: role' rememberEntities' journalPluginId' snapshotPluginId' tunningParameters' coordinatorSingletonSettings
Long Parameter List,Akka.Cluster.Sharding,ClusterShardingSettings,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,Copy,The method has 6 parameters. Parameters: role' rememberEntities' journalPluginId' snapshotPluginId' tunningParameters' coordinatorSingletonSettings
Long Parameter List,Akka.Cluster.Sharding,PersistentShard,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,PersistentShard,The method has 7 parameters. Parameters: typeName' shardId' entityProps' settings' extractEntityId' extractShardId' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,PersistentShard,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,Props,The method has 7 parameters. Parameters: typeName' shardId' entryProps' settings' idExtractor' shardResolver' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,Shard,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,Shard,The method has 7 parameters. Parameters: typeName' shardId' entityProps' settings' extractEntityId' extractShardId' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,Props,The method has 7 parameters. Parameters: typeName' entityProps' settings' coordinatorPath' extractEntityId' extractShardId' handOffStopMessage
Long Parameter List,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,ProxyProps,The method has 5 parameters. Parameters: typeName' settings' coordinatorPath' extractEntityId' extractShardId
Long Parameter List,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,ShardRegion,The method has 7 parameters. Parameters: typeName' entityProps' settings' coordinatorPath' extractEntityId' extractShardId' handOffStopMessage
Long Identifier,Akka.Cluster.Sharding,TunningParameters,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,TunningParameters,The length of the parameter leastShardAllocationRebalanceThreshold is 38.
Long Identifier,Akka.Cluster.Sharding,TunningParameters,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,TunningParameters,The length of the parameter leastShardAllocationMaxSimultaneousRebalance is 44.
Long Identifier,Akka.Cluster.Sharding,TunningParameters,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,,The length of the parameter LeastShardAllocationRebalanceThreshold is 38.
Long Identifier,Akka.Cluster.Sharding,TunningParameters,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,,The length of the parameter LeastShardAllocationMaxSimultaneousRebalance is 44.
Long Identifier,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,,The length of the parameter ShardRegionProxyRegisteredManifest is 34.
Long Identifier,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,,The length of the parameter ShardRegionProxyTerminatedManifest is 34.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,Start,The length of the statement  "            var startMsg = new ClusterShardingGuardian.Start(typeName' entityProps' settings' idExtractor' shardResolver' allocationStrategy' handOffStopMessage); " is 150.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The length of the statement  "            var startMsg = new ClusterShardingGuardian.Start(typeName' entityProps' settings' idExtractor' shardResolver' allocationStrategy' handOffStopMessage); " is 150.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,StartAsync,The length of the statement  "            return StartAsync(typeName' entityProps' settings' idExtractor' shardResolver' allocationStrategy' PoisonPill.Instance); " is 120.
Long Statement,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,RequireClusterRole,The length of the statement  "                throw new IllegalStateException(string.Format("This cluster member [{0}] doesn't have the role [{1}]"' _cluster.SelfAddress' role)); " is 132.
Long Statement,Akka.Cluster.Sharding,ClusterShardingSettings,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingSettings.cs,Create,The length of the statement  "                leastShardAllocationMaxSimultaneousRebalance: config.GetInt("least-shard-allocation-strategy.max-simultaneous-rebalance")); " is 123.
Long Statement,Akka.Cluster.Sharding,PersistentShard,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,EntityTerminated,The length of the statement  "                        Context.System.Scheduler.ScheduleTellOnce(Settings.TunningParameters.EntityRestartBackoff' Sender' new RestartEntity(id)' Self); " is 128.
Long Statement,Akka.Cluster.Sharding,PersistentShard,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,DeliverTo,The length of the statement  "                MessageBuffers = MessageBuffers.SetItem(id' ImmutableList<Tuple<object' IActorRef>>.Empty.Add(Tuple.Create(message' sender))); " is 126.
Long Statement,Akka.Cluster.Sharding,PersistentShard,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShard.cs,Props,The length of the statement  "            return Actor.Props.Create(() => new PersistentShard(typeName' shardId' entryProps' settings' idExtractor' shardResolver' handOffStopMessage)).WithDeploy(Deploy.Local); " is 167.
Long Statement,Akka.Cluster.Sharding,PersistentShardCoordinator,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Props,The length of the statement  "            return Actor.Props.Create(() => new PersistentShardCoordinator(typeName' settings' allocationStrategy)).WithDeploy(Deploy.Local); " is 129.
Long Statement,Akka.Cluster.Sharding,PersistentShardCoordinator,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,IsMember,The length of the statement  "            return addr == Self.Path.Address || Cluster.ReadView.Members.Any(m => m.Address == addr && m.Status == MemberStatus.Up); " is 120.
Long Statement,Akka.Cluster.Sharding,PersistentShardCoordinator,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,SendHostShardMessage,The length of the statement  "            Context.System.Scheduler.ScheduleTellOnce(Settings.TunningParameters.ShardStartTimeout' Self' new ResendShardHost(shard' region)' Self' cancelable); " is 148.
Long Statement,Akka.Cluster.Sharding,PersistentShardCoordinator,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,ReceiveTerminated,The length of the statement  "                        Context.System.Scheduler.ScheduleTellOnce(DownRemovalMargin' Self' new DelayedShardRegionTerminated(terminatedRef)' Self); " is 122.
Long Statement,Akka.Cluster.Sharding,PersistentShardCoordinator,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,HandleRegister,The length of the statement  "            else Log.Debug("ShardRegion [{0}] was not registered since the coordinator currently does not know about a node of that region"' region); " is 137.
Long Statement,Akka.Cluster.Sharding,PersistentShardCoordinator,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,HandleSnapshotResult,The length of the statement  "            else if (message is SaveSnapshotFailure) Log.Warning("Persistent snapshot failure: {0}"' ((SaveSnapshotFailure)message).Cause.Message); " is 135.
Long Statement,Akka.Cluster.Sharding,State,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Updated,The length of the statement  "                    if (Regions.ContainsKey(message.Region)) throw new ArgumentException(string.Format("Region {0} is already registered"' message.Region)); " is 136.
Long Statement,Akka.Cluster.Sharding,State,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Updated,The length of the statement  "                    if (RegionProxies.Contains(message.RegionProxy)) throw new ArgumentException(string.Format("Region proxy {0} is already registered"' message.RegionProxy)); " is 155.
Long Statement,Akka.Cluster.Sharding,State,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Updated,The length of the statement  "                    if (!Regions.TryGetValue(message.Region' out shardRegions)) throw new ArgumentException(string.Format("Region {0} not registered"' message.Region)); " is 148.
Long Statement,Akka.Cluster.Sharding,State,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Updated,The length of the statement  "                    if (!RegionProxies.Contains(message.RegionProxy)) throw new ArgumentException(string.Format("Region proxy {0} not registered"' message.RegionProxy)); " is 149.
Long Statement,Akka.Cluster.Sharding,State,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Updated,The length of the statement  "                    if (!Regions.TryGetValue(message.Region' out shardRegions)) throw new ArgumentException(string.Format("Region {0} not registered"' message.Region)); " is 148.
Long Statement,Akka.Cluster.Sharding,State,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Updated,The length of the statement  "                    if (Shards.ContainsKey(message.Shard)) throw new ArgumentException(string.Format("Shard {0} is already allocated"' message.Shard)); " is 131.
Long Statement,Akka.Cluster.Sharding,State,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Updated,The length of the statement  "                    if (!Shards.TryGetValue(message.Shard' out region)) throw new ArgumentException(string.Format("Shard {0} not allocated"' message.Shard)); " is 137.
Long Statement,Akka.Cluster.Sharding,State,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Updated,The length of the statement  "                    if (!Regions.TryGetValue(region' out shardRegions)) throw new ArgumentException(string.Format("Region {0} for shard {1} not registered"' region' message.Shard)); " is 161.
Long Statement,Akka.Cluster.Sharding,State,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Copy,The length of the statement  "                return new State(shards ?? Shards' regions ?? Regions' regionProxies ?? RegionProxies' unallocatedShards ?? UnallocatedShards); " is 127.
Long Statement,Akka.Cluster.Sharding,Shard,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Shard.cs,HandleCommand,The length of the statement  "            else if (message is PersistentShardCoordinator.ICoordinatorMessage) HandleCoordinatorMessage(message as PersistentShardCoordinator.ICoordinatorMessage); " is 152.
Long Statement,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,Props,The length of the statement  "            return Actor.Props.Create(() => new ShardRegion(typeName' entityProps' settings' coordinatorPath' extractEntityId' extractShardId' handOffStopMessage)).WithDeploy(Deploy.Local); " is 177.
Long Statement,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,ProxyProps,The length of the statement  "            return Actor.Props.Create(() => new ShardRegion(typeName' null' settings' coordinatorPath' extractEntityId' extractShardId' PoisonPill.Instance)).WithDeploy(Deploy.Local); " is 171.
Long Statement,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,Receive,The length of the statement  "            else if (message is PersistentShardCoordinator.ICoordinatorMessage) HandleCoordinatorMessage(message as PersistentShardCoordinator.ICoordinatorMessage); " is 152.
Long Statement,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,BufferMessage,The length of the statement  "                        Log.Warning(logMsg + " The coordinator might not be available. You might want to check cluster membership status."' TypeName' 100 * total / bufferSize); " is 152.
Long Statement,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,ReplyToRegionStateQuery,The length of the statement  "                    success: shardStates => new CurrentShardRegionState(new HashSet<ShardState>(shardStates.Select(x => new ShardState(x.Item1' x.Item2.EntityIds))))' " is 146.
Long Statement,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,AskAllShardsAsync,The length of the statement  "            var tasks = Shards.Select(entity => entity.Value.Ask<T>(message' timeout).ContinueWith(t => Tuple.Create(entity.Key' t.Result))); " is 129.
Long Statement,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,HandleCoordinatorMessage,The length of the statement  "                        throw new IllegalStateException(string.Format("Unexpected change of shard [{0}] from self to [{1}]"' home.Shard' home.Ref)); " is 124.
Long Statement,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,HandleTerminated,The length of the statement  "                        Context.System.Scheduler.ScheduleTellOnce(Settings.TunningParameters.ShardFailureBackoff' Self' new RestartShard(shard)' Self); " is 127.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.State) return Compress(CoordinatorStateToProto((PersistentShardCoordinator.State)obj)); " is 125.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.ShardRegionRegistered) return ActorRefMessageToProto(((PersistentShardCoordinator.ShardRegionRegistered)obj).Region).ToByteArray(); " is 169.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.ShardRegionProxyRegistered) return ActorRefMessageToProto(((PersistentShardCoordinator.ShardRegionProxyRegistered)obj).RegionProxy).ToByteArray(); " is 184.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.ShardRegionTerminated) return ActorRefMessageToProto(((PersistentShardCoordinator.ShardRegionTerminated)obj).Region).ToByteArray(); " is 169.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.ShardRegionProxyTerminated) return ActorRefMessageToProto(((PersistentShardCoordinator.ShardRegionProxyTerminated)obj).RegionProxy).ToByteArray(); " is 184.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.ShardHomeAllocated) return ShardHomeAllocatedToProto((PersistentShardCoordinator.ShardHomeAllocated)obj).ToByteArray(); " is 157.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.ShardHomeDeallocated) return ShardIdMessageToProto(((PersistentShardCoordinator.ShardHomeDeallocated)obj).Shard).ToByteArray(); " is 165.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.Register) return ActorRefMessageToProto(((PersistentShardCoordinator.Register)obj).ShardRegion).ToByteArray(); " is 148.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.RegisterProxy) return ActorRefMessageToProto(((PersistentShardCoordinator.RegisterProxy)obj).ShardRegionProxy).ToByteArray(); " is 163.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.RegisterAck) return ActorRefMessageToProto(((PersistentShardCoordinator.RegisterAck)obj).Coordinator).ToByteArray(); " is 154.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.GetShardHome) return ShardIdMessageToProto(((PersistentShardCoordinator.GetShardHome)obj).Shard).ToByteArray(); " is 149.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.ShardHome) return ShardHomeToProto((PersistentShardCoordinator.ShardHome)obj).ToByteArray(); " is 130.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.HostShard) return ShardIdMessageToProto(((PersistentShardCoordinator.HostShard)obj).Shard).ToByteArray(); " is 143.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.ShardStarted) return ShardIdMessageToProto(((PersistentShardCoordinator.ShardStarted)obj).Shard).ToByteArray(); " is 149.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.BeginHandOff) return ShardIdMessageToProto(((PersistentShardCoordinator.BeginHandOff)obj).Shard).ToByteArray(); " is 149.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.BeginHandOffAck) return ShardIdMessageToProto(((PersistentShardCoordinator.BeginHandOffAck)obj).Shard).ToByteArray(); " is 155.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.HandOff) return ShardIdMessageToProto(((PersistentShardCoordinator.HandOff)obj).Shard).ToByteArray(); " is 139.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.ShardStopped) return ShardIdMessageToProto(((PersistentShardCoordinator.ShardStopped)obj).Shard).ToByteArray(); " is 149.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            if (obj is PersistentShardCoordinator.GracefulShutdownRequest) return ActorRefMessageToProto(((PersistentShardCoordinator.GracefulShutdownRequest)obj).ShardRegion).ToByteArray(); " is 178.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,ToBinary,The length of the statement  "            throw new ArgumentException(string.Format("Can't serialize object of type [{0}] in [{1}]"' obj.GetType()' this.GetType())); " is 123.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,FromBinary,The length of the statement  "            throw new ArgumentException(string.Format("Unimplemented deserialization of message with manifest [{0}] in [{1}]"' manifest' this.GetType())); " is 142.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,Manifest,The length of the statement  "            throw new ArgumentException(string.Format("Can't serialize object of type [{0}] in [{1}]"' o.GetType()' this.GetType())); " is 121.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,CoordinatorStateFromBinary,The length of the statement  "                var shards = ImmutableDictionary.CreateRange(state.ShardsList.Select(entry => new KeyValuePair<string' IActorRef>(entry.ShardId' ResolveActorRef(entry.RegionRef)))); " is 165.
Long Statement,Akka.Cluster.Sharding.Serialization,ClusterShardingMessageSerializer,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\Serialization\ClusterShardingMessageSerializer.cs,CoordinatorStateFromBinary,The length of the statement  "                var regionsZero = ImmutableDictionary.CreateRange(state.RegionsList.Select(region => new KeyValuePair<IActorRef' IImmutableList<string>>(ResolveActorRef(region)' ImmutableList<string>.Empty))); " is 193.
Complex Conditional,Akka.Cluster.Sharding,State,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,Copy,The conditional expression  "shards == null && regions == null && regionProxies == null && unallocatedShards == null"  is complex.
Virtual Method Call from Constructor,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,ClusterSharding,The constructor "ClusterSharding" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,ClusterSharding,The constructor "ClusterSharding" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Cluster.Sharding,ClusterSharding,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterSharding.cs,ClusterSharding,The constructor "ClusterSharding" calls a virtual method "ActorOf".
Magic Number,Akka.Cluster.Sharding,ClusterShardingGuardian,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingGuardian.cs,ClusterShardingGuardian,The following statement contains a magic number: Receive<Start>(start =>              {                  var settings = start.Settings;                  var encName = Uri.EscapeDataString(start.TypeName);                  var coordinatorSingletonManagerName = CoordinatorSingletonManagerName(encName);                  var coordinatorPath = CoordinatorPath(encName);                  var shardRegion = Context.Child(encName);                    if (Equals(shardRegion' ActorRefs.Nobody))                  {                      var minBackoff = settings.TunningParameters.CoordinatorFailureBackoff;                      var maxBackoff = new TimeSpan(minBackoff.Ticks * 5);                      var coordinatorProps = PersistentShardCoordinator.Props(start.TypeName' settings' start.AllocationStrategy);                      var singletonProps = Props.Create(() => new BackoffSupervisor(coordinatorProps' "coordinator"' minBackoff' maxBackoff' 0.2)).WithDeploy(Deploy.Local);                      var singletonSettings = settings.CoordinatorSingletonSettings.WithSingletonName("singleton").WithRole(settings.Role);                        var shardCoordinatorSingleton = Context.ActorOf(ClusterSingletonManager.Props(singletonProps' PoisonPill.Instance' singletonSettings)' coordinatorSingletonManagerName);                  }                    shardRegion = Context.ActorOf(ShardRegion.Props(                      typeName: start.TypeName'                      entityProps: start.EntityProps'                      settings: settings'                      coordinatorPath: coordinatorPath'                      extractEntityId: start.IdExtractor'                      extractShardId: start.ShardResolver'                      handOffStopMessage: start.HandOffStopMessage)' encName);                    Sender.Tell(new Started(shardRegion));              });
Magic Number,Akka.Cluster.Sharding,ClusterShardingGuardian,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ClusterShardingGuardian.cs,ClusterShardingGuardian,The following statement contains a magic number: Receive<Start>(start =>              {                  var settings = start.Settings;                  var encName = Uri.EscapeDataString(start.TypeName);                  var coordinatorSingletonManagerName = CoordinatorSingletonManagerName(encName);                  var coordinatorPath = CoordinatorPath(encName);                  var shardRegion = Context.Child(encName);                    if (Equals(shardRegion' ActorRefs.Nobody))                  {                      var minBackoff = settings.TunningParameters.CoordinatorFailureBackoff;                      var maxBackoff = new TimeSpan(minBackoff.Ticks * 5);                      var coordinatorProps = PersistentShardCoordinator.Props(start.TypeName' settings' start.AllocationStrategy);                      var singletonProps = Props.Create(() => new BackoffSupervisor(coordinatorProps' "coordinator"' minBackoff' maxBackoff' 0.2)).WithDeploy(Deploy.Local);                      var singletonSettings = settings.CoordinatorSingletonSettings.WithSingletonName("singleton").WithRole(settings.Role);                        var shardCoordinatorSingleton = Context.ActorOf(ClusterSingletonManager.Props(singletonProps' PoisonPill.Instance' singletonSettings)' coordinatorSingletonManagerName);                  }                    shardRegion = Context.ActorOf(ShardRegion.Props(                      typeName: start.TypeName'                      entityProps: start.EntityProps'                      settings: settings'                      coordinatorPath: coordinatorPath'                      extractEntityId: start.IdExtractor'                      extractShardId: start.ShardResolver'                      handOffStopMessage: start.HandOffStopMessage)' encName);                    Sender.Tell(new Started(shardRegion));              });
Magic Number,Akka.Cluster.Sharding,PersistentShardCoordinator,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\PersistentShardCoordinator.cs,WatchStateActors,The following statement contains a magic number: Context.System.Scheduler.ScheduleTellOnce(TimeSpan.FromMilliseconds(500)' Self' StateInitialized.Instance' Self);
Magic Number,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,BufferMessage,The following statement contains a magic number: if (totalBufferSize >= Settings.TunningParameters.BufferSize)              {                  if (_loggedFullBufferWarning)                      Log.Debug("Buffer is full' dropping message for shard [{0}]"' shardId);                  else                  {                      Log.Warning("Buffer is full' dropping message for shard [{0}]"' shardId);                      _loggedFullBufferWarning = true;                  }                    Context.System.DeadLetters.Tell(message);              }              else              {                  IImmutableList<KeyValuePair<Msg' IActorRef>> buffer;                  if (!ShardBuffers.TryGetValue(shardId' out buffer)) buffer = ImmutableList<KeyValuePair<Msg' IActorRef>>.Empty;                  ShardBuffers = ShardBuffers.SetItem(shardId' buffer.Add(new KeyValuePair<object' IActorRef>(message' sender)));                    // log some insight to how buffers are filled up every 10% of the buffer capacity                  var total = totalBufferSize + 1;                  var bufferSize = Settings.TunningParameters.BufferSize;                  if (total % (bufferSize / 10) == 0)                  {                      var logMsg = "ShardRegion for [{0}] is using [{1}] of it's buffer capacity";                      if ((total > bufferSize / 2))                          Log.Warning(logMsg + " The coordinator might not be available. You might want to check cluster membership status."' TypeName' 100 * total / bufferSize);                      else                          Log.Warning(logMsg' TypeName' 100 * total / bufferSize);                  }              }
Magic Number,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,BufferMessage,The following statement contains a magic number: if (totalBufferSize >= Settings.TunningParameters.BufferSize)              {                  if (_loggedFullBufferWarning)                      Log.Debug("Buffer is full' dropping message for shard [{0}]"' shardId);                  else                  {                      Log.Warning("Buffer is full' dropping message for shard [{0}]"' shardId);                      _loggedFullBufferWarning = true;                  }                    Context.System.DeadLetters.Tell(message);              }              else              {                  IImmutableList<KeyValuePair<Msg' IActorRef>> buffer;                  if (!ShardBuffers.TryGetValue(shardId' out buffer)) buffer = ImmutableList<KeyValuePair<Msg' IActorRef>>.Empty;                  ShardBuffers = ShardBuffers.SetItem(shardId' buffer.Add(new KeyValuePair<object' IActorRef>(message' sender)));                    // log some insight to how buffers are filled up every 10% of the buffer capacity                  var total = totalBufferSize + 1;                  var bufferSize = Settings.TunningParameters.BufferSize;                  if (total % (bufferSize / 10) == 0)                  {                      var logMsg = "ShardRegion for [{0}] is using [{1}] of it's buffer capacity";                      if ((total > bufferSize / 2))                          Log.Warning(logMsg + " The coordinator might not be available. You might want to check cluster membership status."' TypeName' 100 * total / bufferSize);                      else                          Log.Warning(logMsg' TypeName' 100 * total / bufferSize);                  }              }
Magic Number,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,BufferMessage,The following statement contains a magic number: if (totalBufferSize >= Settings.TunningParameters.BufferSize)              {                  if (_loggedFullBufferWarning)                      Log.Debug("Buffer is full' dropping message for shard [{0}]"' shardId);                  else                  {                      Log.Warning("Buffer is full' dropping message for shard [{0}]"' shardId);                      _loggedFullBufferWarning = true;                  }                    Context.System.DeadLetters.Tell(message);              }              else              {                  IImmutableList<KeyValuePair<Msg' IActorRef>> buffer;                  if (!ShardBuffers.TryGetValue(shardId' out buffer)) buffer = ImmutableList<KeyValuePair<Msg' IActorRef>>.Empty;                  ShardBuffers = ShardBuffers.SetItem(shardId' buffer.Add(new KeyValuePair<object' IActorRef>(message' sender)));                    // log some insight to how buffers are filled up every 10% of the buffer capacity                  var total = totalBufferSize + 1;                  var bufferSize = Settings.TunningParameters.BufferSize;                  if (total % (bufferSize / 10) == 0)                  {                      var logMsg = "ShardRegion for [{0}] is using [{1}] of it's buffer capacity";                      if ((total > bufferSize / 2))                          Log.Warning(logMsg + " The coordinator might not be available. You might want to check cluster membership status."' TypeName' 100 * total / bufferSize);                      else                          Log.Warning(logMsg' TypeName' 100 * total / bufferSize);                  }              }
Magic Number,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,BufferMessage,The following statement contains a magic number: if (totalBufferSize >= Settings.TunningParameters.BufferSize)              {                  if (_loggedFullBufferWarning)                      Log.Debug("Buffer is full' dropping message for shard [{0}]"' shardId);                  else                  {                      Log.Warning("Buffer is full' dropping message for shard [{0}]"' shardId);                      _loggedFullBufferWarning = true;                  }                    Context.System.DeadLetters.Tell(message);              }              else              {                  IImmutableList<KeyValuePair<Msg' IActorRef>> buffer;                  if (!ShardBuffers.TryGetValue(shardId' out buffer)) buffer = ImmutableList<KeyValuePair<Msg' IActorRef>>.Empty;                  ShardBuffers = ShardBuffers.SetItem(shardId' buffer.Add(new KeyValuePair<object' IActorRef>(message' sender)));                    // log some insight to how buffers are filled up every 10% of the buffer capacity                  var total = totalBufferSize + 1;                  var bufferSize = Settings.TunningParameters.BufferSize;                  if (total % (bufferSize / 10) == 0)                  {                      var logMsg = "ShardRegion for [{0}] is using [{1}] of it's buffer capacity";                      if ((total > bufferSize / 2))                          Log.Warning(logMsg + " The coordinator might not be available. You might want to check cluster membership status."' TypeName' 100 * total / bufferSize);                      else                          Log.Warning(logMsg' TypeName' 100 * total / bufferSize);                  }              }
Magic Number,Akka.Cluster.Sharding,ShardRegion,C:\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding\ShardRegion.cs,AskAllShardsAsync,The following statement contains a magic number: var timeout = TimeSpan.FromSeconds(3);
