Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Akka.Remote.Tests,FailureDetectorSpecHelpers,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,CreateFailureDetector,The method has 6 parameters. Parameters: threshold' maxSampleSize' minStdDeviation' acceptableLostDuration' firstHeartbeatEstimate' clock
Long Parameter List,Akka.Remote.Tests,FailureDetectorSpecHelpers,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,CreateFailureDetectorRegistry,The method has 6 parameters. Parameters: threshold' maxSampleSize' minStdDeviation' acceptableLostDuration' firstHeartbeatEstimate' clock
Long Identifier,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_when_missing_first_heartbeat,The length of the parameter heartbeatExpectedResponseAfter is 30.
Long Identifier,Akka.Remote.Tests,TestRemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,TestRemoteWatcher,The length of the parameter heartbeatExpectedResponseAfter is 30.
Long Statement,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The length of the statement  "            var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } }; " is 147.
Long Statement,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The length of the statement  "            var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList(); " is 130.
Long Statement,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The length of the statement  "            var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' " is 126.
Long Statement,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The length of the statement  "            var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //3 seconds acceptableLostDuration " is 161.
Long Statement,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The length of the statement  "            var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' " is 126.
Long Statement,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The length of the statement  "            var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 3' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' " is 123.
Long Statement,Akka.Remote.Tests,FailureDetectorSpecHelpers,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,CreateFailureDetector,The length of the statement  "            return new PhiAccrualFailureDetector(threshold' maxSampleSize' minStdDeviation' acceptableLostDuration' firstHeartbeatEstimate' clock); " is 135.
Long Statement,Akka.Remote.Tests,FailureDetectorSpecHelpers,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,CreateFailureDetectorRegistry,The length of the statement  "            return new DefaultFailureDetectorRegistry<string>(() => CreateFailureDetector(threshold' maxSampleSize' minStdDeviation' acceptableLostDuration' firstHeartbeatEstimate' clock)); " is 177.
Long Statement,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_and_ReceiveBuffer_must_correctly_cooperate_with_each_other,The length of the statement  "            global::System.Diagnostics.Debug.WriteLine("Starting unreliable delivery for {0} messages' with delivery probably P = {1}"' msgCount' deliveryProbability); " is 155.
Long Statement,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_must_be_able_to_register_Gated_policy_for_an_address,The length of the statement  "            Assert.Equal(deadline' reg.WritableEndpointWithPolicyFor(address1).AsInstanceOf<EndpointManager.Gated>().TimeOfRelease); " is 120.
Long Statement,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_must_keep_tombstones_when_removing_an_endpoint,The length of the statement  "            Assert.Equal(deadline' reg.WritableEndpointWithPolicyFor(address1).AsInstanceOf<EndpointManager.Gated>().TimeOfRelease); " is 120.
Long Statement,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_must_keep_tombstones_when_removing_an_endpoint,The length of the statement  "            Assert.Equal(deadline' reg.WritableEndpointWithPolicyFor(address2).AsInstanceOf<EndpointManager.Quarantined>().Deadline); " is 121.
Long Statement,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_prune_outdated_Gated_directives_properly,The length of the statement  "            Assert.Equal(farIntheFuture' reg.WritableEndpointWithPolicyFor(address2).AsInstanceOf<EndpointManager.Gated>().TimeOfRelease); " is 126.
Long Statement,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_be_able_to_register_Quarantined_policy_for_an_address,The length of the statement  "            Assert.Equal(deadline' reg.WritableEndpointWithPolicyFor(address1).AsInstanceOf<EndpointManager.Quarantined>().Deadline); " is 121.
Long Statement,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The length of the statement  "                FailureDetectorSpecHelpers.CreateFailureDetectorRegistry(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //changed to 3 seconds " is 148.
Long Statement,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The length of the statement  "                FailureDetectorSpecHelpers.CreateFailureDetectorRegistry(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //changed to 3 seconds " is 148.
Long Statement,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The length of the statement  "            Assert.Equal(TimeSpan.FromSeconds(10)' remoteSettings.WatchFailureDetectorConfig.GetTimeSpan("acceptable-heartbeat-pause")); " is 124.
Long Statement,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The length of the statement  "            Assert.Equal(TimeSpan.FromMilliseconds(100)' remoteSettings.WatchFailureDetectorConfig.GetTimeSpan("min-std-deviation")); " is 121.
Long Statement,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_be_able_to_parse_AkkaProtocol_related_config_elements,The length of the statement  "            var settings = new AkkaProtocolSettings(((RemoteActorRefProvider)((ExtendedActorSystem)Sys).Provider).RemoteSettings.Config); " is 125.
Long Statement,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_be_able_to_parse_AkkaProtocol_related_config_elements,The length of the statement  "            Assert.Equal(TimeSpan.FromSeconds(20)' settings.TransportFailureDetectorConfig.GetTimeSpan("acceptable-heartbeat-pause")); " is 122.
Long Statement,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_heliosTCP_values_in_ReferenceConf,The length of the statement  "            var c = ((RemoteActorRefProvider)((ActorSystemImpl)Sys).Provider).RemoteSettings.Config.GetConfig("akka.remote.helios.tcp"); " is 124.
Long Statement,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_socket_worker_pool_configuration_values_in_ReferenceConf,The length of the statement  "            var c = ((RemoteActorRefProvider)((ActorSystemImpl)Sys).Provider).RemoteSettings.Config.GetConfig("akka.remote.helios.tcp"); " is 124.
Long Statement,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_hostname_values_in_ReferenceConf,The length of the statement  "           var c = ((RemoteActorRefProvider)((ActorSystemImpl)Sys).Provider).RemoteSettings.Config.GetConfig("akka.remote.helios.tcp"); " is 124.
Long Statement,Akka.Remote.Tests,RemoteConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConsistentHashingRouterSpec.cs,ConsistentHashingGroup_must_use_same_hash_ring_indepenent_of_self_address,The length of the statement  "            var nodes1 = new List<ConsistentRoutee>(new [] { new ConsistentRoutee(s1' a1)' new ConsistentRoutee(s2' a1)' new ConsistentRoutee(s3' a1)}); " is 140.
Long Statement,Akka.Remote.Tests,RemoteMessageLocalDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMessageLocalDeliverySpec.cs,RemoteActorRefProvider_should_correctly_resolve_valid_LocalActorRef_from_remote_address,The length of the statement  "            var resolvedActorRef = RARP.For(Sys).Provider.ResolveActorRefWithLocalAddress(actorPath.ToStringWithAddress()' localAddress); " is 125.
Long Statement,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_its_children_on_remote_host_driven_by_programmatic_definition,The length of the statement  "            var router = masterActorSystem.ActorOf(new RemoteRouterConfig(new RoundRobinPool(2)' new[] { new Address("akka.tcp"' sysName' "127.0.0.1"' port) }) " is 147.
Long Statement,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_set_supplied_SupervisorStrategy,The length of the statement  "            // Need to be able to bind EventFilter to additional actor system (masterActorSystem in this case) before this code works " is 121.
Long Statement,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_when_missing_first_heartbeat,The length of the statement  "            var monitorA = Sys.ActorOf(new Props(new Deploy()' typeof(TestRemoteWatcher)' new object[] {heartbeatExpectedResponseAfter})' "monitor5"); " is 138.
Long Statement,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Remoting_must_create_and_supervise_children_on_remote_Node,The length of the statement  "            Assert.Equal("akka.test://remote-sys@localhost:12346/remote/akka.test/RemotingSpec@localhost:12345/user/blub"' r.Path.ToString()); " is 130.
Long Statement,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Remoting_must_create_by_IndirectActorProducer,The length of the statement  "                Assert.Equal("akka.test://remote-sys@localhost:12346/remote/akka.test/RemotingSpec@localhost:12345/user/echo"' r.Path.ToString()); " is 130.
Long Statement,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Remoting_must_create_by_IndirectActorProducer_and_ping,The length of the statement  "                Assert.Equal("akka.test://remote-sys@localhost:12346/remote/akka.test/RemotingSpec@localhost:12345/user/echo"' r.Path.ToString()); " is 130.
Long Statement,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Addr,The length of the statement  "            return ((ExtendedActorSystem) system).Provider.GetExternalAddressFor(new Address(string.Format("akka.{0}"' proto)' ""' ""' 0)); " is 127.
Long Statement,Akka.Remote.Tests.Serialization,DaemonMsgCreateSerializerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Serialization\DaemonMsgCreateSerializerSpec.cs,Serialization_must_serialize_and_deserialize_DaemonMsgCreate_with_Deploy_and_RouterConfig,The length of the statement  "            VerifySerialization(new DaemonMsgCreate(Props.Create<MyActor>().WithDispatcher("my-disp").WithDeploy(deploy1)' deploy2' "foo"' _supervisor)); " is 141.
Long Statement,Akka.Remote.Tests.Transport,AkkaProtocolStressTest,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolStressTest.cs,BeforeTermination,The length of the statement  "            systemB.EventStream.Publish(new Mute(new WarningFilter(new RegexMatcher(new Regex("received dead letter.*(InboundPayload|Disassociate)")))' " is 139.
Long Statement,Akka.Remote.Tests.Transport,GenericTransportSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\GenericTransportSpec.cs,WrapTransport,The length of the statement  "                return new AkkaProtocolTransport(transport' Sys' new AkkaProtocolSettings(provider.RemoteSettings.Config)' new AkkaPduProtobuffCodec()); " is 136.
Long Statement,Akka.Remote.Tests.Transport,GenericTransportSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\GenericTransportSpec.cs,Transport_must_associate_successfully_with_another_transport_of_its_kind,The length of the statement  "                registry.LogSnapshot().OfType<AssociateAttempt>().Any(x => x.LocalAddress == addressATest && x.RemoteAddress == addressBTest) " is 125.
Long Statement,Akka.Remote.Tests.Transport,GenericTransportSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\GenericTransportSpec.cs,Transport_must_successfully_send_PDUs,The length of the statement  "                registry.LogSnapshot().OfType<WriteAttempt>().Any(x => x.Sender == addressATest && x.Recipient == addressBTest && x.Payload.Equals(pdu)) " is 136.
Long Statement,Akka.Remote.Tests.Transport,TestTransportSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\TestTransportSpec.cs,TestTransport_should_emulate_disassociation,The length of the statement  "            var disassociateAttempt = registry.LogSnapshot().Single(x => x is DisassociateAttempt).AsInstanceOf<DisassociateAttempt>(); " is 123.
Long Statement,Akka.Remote.Tests.Transport,ThrottlerTransportAdapterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottlerTransportAdapterSpec.cs,ThrottlerTransportAdapter_must_maintain_average_message_rate,The length of the statement  "            Throttle(ThrottleTransportAdapter.Direction.Send' new TokenBucket(PingPacketSize*4' BytesPerSecond' 0' 0)).ShouldBeTrue(); " is 122.
Long Statement,Akka.Remote.Tests.Transport,ThrottlerTransportAdapterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottlerTransportAdapterSpec.cs,BeforeTermination,The length of the statement  "            systemB.EventStream.Publish(new Mute(new WarningFilter(new RegexMatcher(new Regex("received dead letter.*(InboundPayload|Disassociate)")))'  " is 139.
Virtual Method Call from Constructor,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouterSpec,The constructor "RemoteRouterSpec" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,RemotingSpec,The constructor "RemotingSpec" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Remote.Tests,RemoteMetricsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMetricsSpec.cs,RemoteMetricsSpec,The constructor "RemoteMetricsSpec" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Remote.Tests,UntrustedSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\UntrustedSpec.cs,UntrustedSpec,The constructor "UntrustedSpec" calls a virtual method "WithFallback".
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(0' 0' 10))' 0.5d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(0' 0' 10))' 0.5d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(6L' 0' 10))' 0.7257d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(6L' 0' 10))' 0.7257d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(6L' 0' 10))' 0.7257d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(15L' 0' 10))' 0.9332d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(15L' 0' 10))' 0.9332d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(15L' 0' 10))' 0.9332d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(20L' 0' 10))' 0.97725d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(20L' 0' 10))' 0.97725d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(20L' 0' 10))' 0.97725d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(25L' 0' 10))' 0.99379d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(25L' 0' 10))' 0.99379d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(25L' 0' 10))' 0.99379d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(35L' 0' 10))' 0.99977d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(35L' 0' 10))' 0.99977d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(35L' 0' 10))' 0.99977d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(40L' 0' 10))' 0.99997d' 0.0001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(40L' 0' 10))' 0.99997d' 0.0001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(40L' 0' 10))' 0.99997d' 0.0001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(40L' 0' 10))' 0.99997d' 0.0001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: Assert.True(fd.Phi(pair.Item1' 0' 10) < fd.Phi(pair.Item2' 0' 10));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: Assert.True(fd.Phi(pair.Item1' 0' 10) < fd.Phi(pair.Item2' 0' 10));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: Slide(Enumerable.Range(0' 40))
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(22' 20.0' 3))' 0.7475d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(22' 20.0' 3))' 0.7475d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(22' 20.0' 3))' 0.7475d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_good_enough_cumulative_distribution_function,The following statement contains a magic number: ShouldBe(FailureDetectorSpecHelpers.cdf(fd.Phi(22' 20.0' 3))' 0.7475d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_handle_outliers_without_losing_precision_or_hitting_exception,The following statement contains a magic number: ShouldBe(fd.Phi(10L' 0' 1)' 38.0D' 1.0D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_handle_outliers_without_losing_precision_or_hitting_exception,The following statement contains a magic number: ShouldBe(fd.Phi(10L' 0' 1)' 38.0D' 1.0D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_handle_outliers_without_losing_precision_or_hitting_exception,The following statement contains a magic number: ShouldBe(fd.Phi(-25L' 0' 1)' 0.0d' 0.0d);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: var test = new Dictionary<int' double>() { { 0' 0.0 }' { 500' 0.1 }' { 1000' 0.3 }' { 1200' 1.6 }' { 1400' 4.7 }' { 1600' 10.8 }' { 1700' 15.3 } };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: ShouldBe(fd.Phi(kv.Key' 1000.0' 100.0)' kv.Value' 0.1);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: ShouldBe(fd.Phi(kv.Key' 1000.0' 100.0)' kv.Value' 0.1);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: ShouldBe(fd.Phi(kv.Key' 1000.0' 100.0)' kv.Value' 0.1);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: Assert.True(fd.Phi(1100' 1000.0' 500.0) < fd.Phi(1100' 1000.0' 100.0));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: Assert.True(fd.Phi(1100' 1000.0' 500.0) < fd.Phi(1100' 1000.0' 100.0));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: Assert.True(fd.Phi(1100' 1000.0' 500.0) < fd.Phi(1100' 1000.0' 100.0));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: Assert.True(fd.Phi(1100' 1000.0' 500.0) < fd.Phi(1100' 1000.0' 100.0));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: Assert.True(fd.Phi(1100' 1000.0' 500.0) < fd.Phi(1100' 1000.0' 100.0));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_realistic_phi_values,The following statement contains a magic number: Assert.True(fd.Phi(1100' 1000.0' 500.0) < fd.Phi(1100' 1000.0' 100.0));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: ShouldBe(fd.CurrentPhi' 0.3D' 0.2D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: ShouldBe(fd.CurrentPhi' 0.3D' 0.2D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: ShouldBe(fd.CurrentPhi' 4.5D' 0.3D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: ShouldBe(fd.CurrentPhi' 4.5D' 0.3D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_based_on_guess_when_only_one_heartbeat,The following statement contains a magic number: Assert.True(fd.CurrentPhi > 15.0D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_value_using_first_interval_after_second_heartbeat,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 100' 100' 100' 100 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_value_using_first_interval_after_second_heartbeat,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 100' 100' 100' 100 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_value_using_first_interval_after_second_heartbeat,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 100' 100' 100' 100 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_value_using_first_interval_after_second_heartbeat,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 100' 100' 100' 100 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_value_using_first_interval_after_second_heartbeat,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_value_using_first_interval_after_second_heartbeat,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_return_phi_value_using_first_interval_after_second_heartbeat,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_monitored_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_monitored_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_monitored_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_monitored_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_monitored_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_monitored_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100' 7000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100' 7000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100' 7000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100' 7000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(3.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(3.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(3.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var regularIntervals = new List<long>() { 0L }.Concat(Enumerable.Repeat(1000L' 999)).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var regularIntervals = new List<long>() { 0L }.Concat(Enumerable.Repeat(1000L' 999)).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var timeIntervals = regularIntervals.Concat(new[] { (5 * 60 * 1000L)' 100L' 900L' 100L' 7000L' 100L' 900L' 100L' 900L }).ToList();
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_mark_node_as_available_if_it_starts_heartbeats_again_after_being_marked_dead_due_to_detection_of_failure,The following statement contains a magic number: i < 1000
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 1000L' 1000L' 4000L' 1000L' 1000L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 1000L' 1000L' 4000L' 1000L' 1000L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 1000L' 1000L' 4000L' 1000L' 1000L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 1000L' 1000L' 4000L' 1000L' 1000L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 1000L' 1000L' 4000L' 1000L' 1000L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 1000L' 1000L' 4000L' 1000L' 1000L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //3 seconds acceptableLostDuration                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //3 seconds acceptableLostDuration                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //3 seconds acceptableLostDuration                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //3 seconds acceptableLostDuration                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 100' 100' 100' 100' 600' 500' 500' 500' 500' 500 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 100' 100' 100' 100' 600' 500' 500' 500' 500' 500 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 100' 100' 100' 100' 600' 500' 500' 500' 500' 500 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 100' 100' 100' 100' 600' 500' 500' 500' 500' 500 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 100' 100' 100' 100' 600' 500' 500' 500' 500' 500 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 100' 100' 100' 100' 600' 500' 500' 500' 500' 500 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 100' 100' 100' 100' 600' 500' 500' 500' 500' 500 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 100' 100' 100' 100' 600' 500' 500' 500' 500' 500 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 100' 100' 100' 100' 600' 500' 500' 500' 500' 500 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 100' 100' 100' 100' 600' 500' 500' 500' 500' 500 };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 3' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 3' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 3' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,AccrualFailureDetector_must_use_maxSampleSize_heartbeats,The following statement contains a magic number: var fd = FailureDetectorSpecHelpers.CreateFailureDetector(8.0d' 3' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_calculate_correct_mean_and_variance,The following statement contains a magic number: var samples = new[] { 100L' 200L' 125L' 340L' 130L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_calculate_correct_mean_and_variance,The following statement contains a magic number: var samples = new[] { 100L' 200L' 125L' 340L' 130L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_calculate_correct_mean_and_variance,The following statement contains a magic number: var samples = new[] { 100L' 200L' 125L' 340L' 130L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_calculate_correct_mean_and_variance,The following statement contains a magic number: var samples = new[] { 100L' 200L' 125L' 340L' 130L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_calculate_correct_mean_and_variance,The following statement contains a magic number: var samples = new[] { 100L' 200L' 125L' 340L' 130L };
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_calculate_correct_mean_and_variance,The following statement contains a magic number: var stats = samples.Aggregate(HeartbeatHistory.Apply(20)' (current' stat) => current + stat);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_calculate_correct_mean_and_variance,The following statement contains a magic number: ShouldBe(stats.Mean' 179.0D' 0.00001);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_calculate_correct_mean_and_variance,The following statement contains a magic number: ShouldBe(stats.Mean' 179.0D' 0.00001);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_calculate_correct_mean_and_variance,The following statement contains a magic number: ShouldBe(stats.Variance' 7584.0D' 0.00001);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_calculate_correct_mean_and_variance,The following statement contains a magic number: ShouldBe(stats.Variance' 7584.0D' 0.00001);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_have_zero_variance_for_one_sample,The following statement contains a magic number: var history = HeartbeatHistory.Apply(600) + 1000L;
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_have_zero_variance_for_one_sample,The following statement contains a magic number: var history = HeartbeatHistory.Apply(600) + 1000L;
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_have_zero_variance_for_one_sample,The following statement contains a magic number: ShouldBe(history.Variance' 0.0' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: var history3 = HeartbeatHistory.Apply(3) + 100 + 110 + 90;
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: var history3 = HeartbeatHistory.Apply(3) + 100 + 110 + 90;
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: var history3 = HeartbeatHistory.Apply(3) + 100 + 110 + 90;
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: var history3 = HeartbeatHistory.Apply(3) + 100 + 110 + 90;
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history3.Mean' 100.0D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history3.Mean' 100.0D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history3.Variance' 66.6666667D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history3.Variance' 66.6666667D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: var history4 = history3 + 140;
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history4.Mean' 113.333333D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history4.Mean' 113.333333D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history4.Variance' 422.222222D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history4.Variance' 422.222222D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: var history5 = history4 + 80;
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history5.Mean' 103.333333D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history5.Mean' 103.333333D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history5.Variance' 688.88888889D' 0.00001D);
Magic Number,Akka.Remote.Tests,AccrualFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,StatisticsForHeartbeats_must_be_capped_by_the_specified_maxSampleSize,The following statement contains a magic number: ShouldBe(history5.Variance' 688.88888889D' 0.00001D);
Magic Number,Akka.Remote.Tests,FailureDetectorSpecHelpers,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,CreateFailureDetector,The following statement contains a magic number: return CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' clock ?? FailureDetector.DefaultClock);
Magic Number,Akka.Remote.Tests,FailureDetectorSpecHelpers,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,CreateFailureDetector,The following statement contains a magic number: return CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' clock ?? FailureDetector.DefaultClock);
Magic Number,Akka.Remote.Tests,FailureDetectorSpecHelpers,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,CreateFailureDetector,The following statement contains a magic number: return CreateFailureDetector(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero'                  TimeSpan.FromSeconds(1)' clock ?? FailureDetector.DefaultClock);
Magic Number,Akka.Remote.Tests,FailureDetectorSpecHelpers,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AccrualFailureDetectorSpec.cs,cdf,The following statement contains a magic number: return 1.0d - Math.Pow(10' -phi);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SeqNo_must_implement_simple_ordering,The following statement contains a magic number: var s2 = new SeqNo(2);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_aggregate_unacked_messages_in_order,The following statement contains a magic number: var b0 = new AckedSendBuffer<Sequenced>(10);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_aggregate_unacked_messages_in_order,The following statement contains a magic number: var msg2 = Msg(2);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_refuse_buffering_new_messages_if_capacity_reached,The following statement contains a magic number: var buffer = new AckedSendBuffer<Sequenced>(4).Buffer(Msg(0)).Buffer(Msg(1)).Buffer(Msg(2)).Buffer(Msg(3));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_refuse_buffering_new_messages_if_capacity_reached,The following statement contains a magic number: var buffer = new AckedSendBuffer<Sequenced>(4).Buffer(Msg(0)).Buffer(Msg(1)).Buffer(Msg(2)).Buffer(Msg(3));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_refuse_buffering_new_messages_if_capacity_reached,The following statement contains a magic number: var buffer = new AckedSendBuffer<Sequenced>(4).Buffer(Msg(0)).Buffer(Msg(1)).Buffer(Msg(2)).Buffer(Msg(3));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_refuse_buffering_new_messages_if_capacity_reached,The following statement contains a magic number: XAssert.Throws<ResendBufferCapacityReachedException>(() => buffer.Buffer(Msg(4)));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_remove_messages_from_buffer_when_cumulative_ack_received,The following statement contains a magic number: var b0 = new AckedSendBuffer<Sequenced>(10);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_remove_messages_from_buffer_when_cumulative_ack_received,The following statement contains a magic number: var msg2 = Msg(2);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_remove_messages_from_buffer_when_cumulative_ack_received,The following statement contains a magic number: var msg3 = Msg(3);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_remove_messages_from_buffer_when_cumulative_ack_received,The following statement contains a magic number: var msg4 = Msg(4);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_remove_messages_from_buffer_when_cumulative_ack_received,The following statement contains a magic number: var b8 = b7.Acknowledge(new Ack(new SeqNo(2)));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_remove_messages_from_buffer_when_cumulative_ack_received,The following statement contains a magic number: var b9 = b8.Acknowledge(new Ack(new SeqNo(5)));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_keep_NACKed_messages_in_buffer_if_selective_nacks_are_received,The following statement contains a magic number: var b0 = new AckedSendBuffer<Sequenced>(10);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_keep_NACKed_messages_in_buffer_if_selective_nacks_are_received,The following statement contains a magic number: var msg2 = Msg(2);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_keep_NACKed_messages_in_buffer_if_selective_nacks_are_received,The following statement contains a magic number: var msg3 = Msg(3);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_keep_NACKed_messages_in_buffer_if_selective_nacks_are_received,The following statement contains a magic number: var msg4 = Msg(4);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_keep_NACKed_messages_in_buffer_if_selective_nacks_are_received,The following statement contains a magic number: var b6 = b5.Acknowledge(new Ack(new SeqNo(4)' new []{new SeqNo(2)' new SeqNo(3)}));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_keep_NACKed_messages_in_buffer_if_selective_nacks_are_received,The following statement contains a magic number: var b6 = b5.Acknowledge(new Ack(new SeqNo(4)' new []{new SeqNo(2)' new SeqNo(3)}));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_keep_NACKed_messages_in_buffer_if_selective_nacks_are_received,The following statement contains a magic number: var b6 = b5.Acknowledge(new Ack(new SeqNo(4)' new []{new SeqNo(2)' new SeqNo(3)}));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_keep_NACKed_messages_in_buffer_if_selective_nacks_are_received,The following statement contains a magic number: var b7 = b6.Acknowledge(new Ack(new SeqNo(5)));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_throw_exception_if_nonbuffered_sequence_number_is_NACKed,The following statement contains a magic number: var b0 = new AckedSendBuffer<Sequenced>(10);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_throw_exception_if_nonbuffered_sequence_number_is_NACKed,The following statement contains a magic number: var msg2 = Msg(2);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_must_throw_exception_if_nonbuffered_sequence_number_is_NACKed,The following statement contains a magic number: XAssert.Throws<ResendUnfulfillableException>(() => b1.Acknowledge(new Ack(new SeqNo(2)' new []{ new SeqNo(0) })));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: var msg2 = Msg(2);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: var msg3 = Msg(3);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: var msg4 = Msg(4);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: var msg5 = Msg(5);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: Assert.Equal(new SeqNo(4)' d3.Ack.CumulativeAck);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: Assert.True(d3.Ack.Nacks.SequenceEqual(new[] { new SeqNo(2)' new SeqNo(3) }));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: Assert.True(d3.Ack.Nacks.SequenceEqual(new[] { new SeqNo(2)' new SeqNo(3) }));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: Assert.Equal(new SeqNo(4)' d4.Ack.CumulativeAck);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: Assert.True(d4.Ack.Nacks.SequenceEqual(new[] { new SeqNo(3) }));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: Assert.Equal(new SeqNo(5)' d5.Ack.CumulativeAck);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: Assert.True(d5.Ack.Nacks.SequenceEqual(new[] { new SeqNo(3) }));
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_enqueue_message_in_buffer_if_needed_return_the_list_of_deliverable_messages_and_acks,The following statement contains a magic number: Assert.Equal(new SeqNo(5)' d6.Ack.CumulativeAck);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_handle_duplicate_arrivals_correctly,The following statement contains a magic number: var msg2 = Msg(2);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_handle_duplicate_arrivals_correctly,The following statement contains a magic number: Assert.Equal(new SeqNo(2)' d.Ack.CumulativeAck);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_be_able_to_correctly_merge_with_another_receive_buffer,The following statement contains a magic number: var msg2 = Msg(2);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_be_able_to_correctly_merge_with_another_receive_buffer,The following statement contains a magic number: var msg3 = Msg(3);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,ReceiveBuffer_must_be_able_to_correctly_merge_with_another_receive_buffer,The following statement contains a magic number: Assert.Equal(new SeqNo(3)' d.Ack.CumulativeAck);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_and_ReceiveBuffer_must_correctly_cooperate_with_each_other,The following statement contains a magic number: var msgCount = 1000;
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_and_ReceiveBuffer_must_correctly_cooperate_with_each_other,The following statement contains a magic number: var deliveryProbability = 0.5D;
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_and_ReceiveBuffer_must_correctly_cooperate_with_each_other,The following statement contains a magic number: var sndBuf = new AckedSendBuffer<Sequenced>(10);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_and_ReceiveBuffer_must_correctly_cooperate_with_each_other,The following statement contains a magic number: var nextSteps = msgCount*2;
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_and_ReceiveBuffer_must_correctly_cooperate_with_each_other,The following statement contains a magic number: var s = Geom(0.3' limit: 5);
Magic Number,Akka.Remote.Tests,AckedDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AckedDeliverySpec.cs,SendBuffer_and_ReceiveBuffer_must_correctly_cooperate_with_each_other,The following statement contains a magic number: var s = Geom(0.3' limit: 5);
Magic Number,Akka.Remote.Tests,AddressUidExtensionSpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\AddressUidExtensionSpecs.cs,AddressUidExtension_should_always_report_same_value,The following statement contains a magic number: var parallelOps = 1000;
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_monitored_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() {0' 1000' 100' 100};
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_monitored_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() {0' 1000' 100' 100};
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_monitored_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() {0' 1000' 100' 100};
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_monitored_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var fd = CreateFailureDetector(TimeSpan.FromSeconds(5)'                  FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100' 7000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100' 7000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100' 7000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 100' 100' 7000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var fd = CreateFailureDetector(TimeSpan.FromSeconds(5)'                  FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var regularIntervals = new List<long>() {0L}.Concat(Enumerable.Repeat(1000L' 999));
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var regularIntervals = new List<long>() {0L}.Concat(Enumerable.Repeat(1000L' 999));
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var timeIntervals =                  regularIntervals.Concat(new List<long>() {(5*60*1000)' 100' 900' 100' 7000' 100' 900' 100' 900}).ToList();
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: var fd = CreateFailureDetector(TimeSpan.FromSeconds(7)'                  FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_mark_node_as_available_if_it_starts_heartbeat_again_after_being_marked_dead,The following statement contains a magic number: i < 1000
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var fd = CreateFailureDetector(TimeSpan.FromSeconds(5)'                  FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeInterval = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,DeadlineFailureDetectorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\DeadlineFailureDetectorSpec.cs,DeadlineFailureDetector_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var fd = CreateFailureDetector(TimeSpan.FromSeconds(5)'                  FailureDetectorSpecHelpers.FakeTimeGenerator(timeInterval));
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_must_be_able_to_register_a_writeable_endpoint_and_policy,The following statement contains a magic number: Assert.False(reg.IsQuarantined(address1' 42));
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_must_be_able_to_register_a_readonly_endpoint,The following statement contains a magic number: Assert.False(reg.IsQuarantined(address1' 42));
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_must_remove_readonly_endpoints_if_marked_as_failed,The following statement contains a magic number: reg.RegisterReadOnlyEndpoint(address1' actorA' 2);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_must_keep_tombstones_when_removing_an_endpoint,The following statement contains a magic number: reg.MarkAsQuarantined(address2' 42' deadline);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_must_keep_tombstones_when_removing_an_endpoint,The following statement contains a magic number: Assert.Equal(42' reg.WritableEndpointWithPolicyFor(address2).AsInstanceOf<EndpointManager.Quarantined>().Uid);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_prune_outdated_Gated_directives_properly,The following statement contains a magic number: var farIntheFuture = Deadline.Now + TimeSpan.FromSeconds(60);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_be_able_to_register_Quarantined_policy_for_an_address,The following statement contains a magic number: var deadline = Deadline.Now + TimeSpan.FromMinutes(30);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_be_able_to_register_Quarantined_policy_for_an_address,The following statement contains a magic number: reg.MarkAsQuarantined(address1' 42' deadline);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_be_able_to_register_Quarantined_policy_for_an_address,The following statement contains a magic number: Assert.True(reg.IsQuarantined(address1' 42));
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_be_able_to_register_Quarantined_policy_for_an_address,The following statement contains a magic number: Assert.False(reg.IsQuarantined(address1' 33));
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_be_able_to_register_Quarantined_policy_for_an_address,The following statement contains a magic number: Assert.Equal(42' reg.WritableEndpointWithPolicyFor(address1).AsInstanceOf<EndpointManager.Quarantined>().Uid);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,Fix_1845_EndpointRegistry_should_override_ReadOnly_endpoint,The following statement contains a magic number: reg.RegisterReadOnlyEndpoint(address1' endpoint' 2);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,Fix_1845_EndpointRegistry_should_override_ReadOnly_endpoint,The following statement contains a magic number: ep.Item2.ShouldBe(2);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_overwrite_Quarantine_policy_with_Pass_on_RegisterWritableEndpoint,The following statement contains a magic number: var deadline = Deadline.Now + TimeSpan.FromMinutes(30);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_overwrite_Quarantine_policy_with_Pass_on_RegisterWritableEndpoint,The following statement contains a magic number: var quarantinedUid = 42;
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_overwrite_Quarantine_policy_with_Pass_on_RegisterWritableEndpoint,The following statement contains a magic number: var writableUid = 43;
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_overwrite_Gated_policy_with_Pass_on_RegisterWritableEndpoint,The following statement contains a magic number: var deadline = Deadline.Now + TimeSpan.FromMinutes(30);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_overwrite_Gated_policy_with_Pass_on_RegisterWritableEndpoint,The following statement contains a magic number: var willBeGated = 42;
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegistry_should_overwrite_Gated_policy_with_Pass_on_RegisterWritableEndpoint,The following statement contains a magic number: var writableUid = 43;
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegister_should_not_report_endpoint_as_writeable_if_no_Pass_policy,The following statement contains a magic number: var deadline = Deadline.Now + TimeSpan.FromMinutes(30);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegister_should_not_report_endpoint_as_writeable_if_no_Pass_policy,The following statement contains a magic number: reg.RegisterWritableEndpoint(address1' TestActor' 42' null);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegister_should_not_report_endpoint_as_writeable_if_no_Pass_policy,The following statement contains a magic number: reg.RegisterWritableEndpoint(address1' TestActor' 43' 42);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegister_should_not_report_endpoint_as_writeable_if_no_Pass_policy,The following statement contains a magic number: reg.RegisterWritableEndpoint(address1' TestActor' 43' 42);
Magic Number,Akka.Remote.Tests,EndpointRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\EndpointRegistrySpec.cs,EndpointRegister_should_not_report_endpoint_as_writeable_if_no_Pass_policy,The following statement contains a magic number: reg.MarkAsQuarantined(address1' 43' deadline);
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() {0L' 1000L' 100L' 100L};
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() {0L' 1000L' 100L' 100L};
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_a_series_of_successful_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() {0L' 1000L' 100L' 100L};
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 100L' 100L' 4000L' 3000L };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 100L' 100L' 4000L' 3000L };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 100L' 100L' 4000L' 3000L };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 100L' 100L' 4000L' 3000L };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_dead_if_heartbeats_are_missed,The following statement contains a magic number: var timeIntervals = new List<long>() { 0L' 1000L' 100L' 100L' 4000L' 3000L };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 4000' 1000' 1000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var fd =                  FailureDetectorSpecHelpers.CreateFailureDetectorRegistry(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //changed to 3 seconds                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var fd =                  FailureDetectorSpecHelpers.CreateFailureDetectorRegistry(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //changed to 3 seconds                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var fd =                  FailureDetectorSpecHelpers.CreateFailureDetectorRegistry(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //changed to 3 seconds                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_accept_some_configured_missing_heartbeats,The following statement contains a magic number: var fd =                  FailureDetectorSpecHelpers.CreateFailureDetectorRegistry(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //changed to 3 seconds                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 1000' 1000' 1000' 1000' 500' 500' 5000 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var fd =                  FailureDetectorSpecHelpers.CreateFailureDetectorRegistry(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //changed to 3 seconds                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var fd =                  FailureDetectorSpecHelpers.CreateFailureDetectorRegistry(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //changed to 3 seconds                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var fd =                  FailureDetectorSpecHelpers.CreateFailureDetectorRegistry(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //changed to 3 seconds                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_fail_after_configured_acceptable_missing_heartbeats,The following statement contains a magic number: var fd =                  FailureDetectorSpecHelpers.CreateFailureDetectorRegistry(8.0d' 1000' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(3)' //changed to 3 seconds                  TimeSpan.FromSeconds(1)' FailureDetectorSpecHelpers.FakeTimeGenerator(timeIntervals));
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection_and_receiving_heartbeat_again,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 1100' 1100' 1100' 1100' 1100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection_and_receiving_heartbeat_again,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 1100' 1100' 1100' 1100' 1100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection_and_receiving_heartbeat_again,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 1100' 1100' 1100' 1100' 1100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection_and_receiving_heartbeat_again,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 1100' 1100' 1100' 1100' 1100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection_and_receiving_heartbeat_again,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 1100' 1100' 1100' 1100' 1100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection_and_receiving_heartbeat_again,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 1100' 1100' 1100' 1100' 1100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection_and_receiving_heartbeat_again,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 1100' 1100' 1100' 1100' 1100' 100 };
Magic Number,Akka.Remote.Tests,FailureDetectorRegistrySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\FailureDetectorRegistrySpec.cs,FailureDetectorRegistry_must_mark_node_as_available_after_explicit_removal_of_connection_and_receiving_heartbeat_again,The following statement contains a magic number: var timeIntervals = new List<long>() { 0' 1000' 100' 1100' 1100' 1100' 1100' 1100' 100 };
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(10)' remoteSettings.ShutdownTimeout);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(2)' remoteSettings.FlushWait);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(10)' remoteSettings.StartupTimeout);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(5)' remoteSettings.RetryGateClosedFor);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMilliseconds(50)' remoteSettings.BackoffPeriod);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(0.3d)' remoteSettings.SysMsgAckTimeout);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(2)' remoteSettings.SysResendTimeout);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(20000' remoteSettings.SysMsgBufferSize);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMinutes(3)' remoteSettings.InitialSysMsgDeliveryTimeout);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromDays(5)' remoteSettings.QuarantineDuration);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromDays(5)' remoteSettings.QuarantineSilentSystemTimeout);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(30)' remoteSettings.CommandAckTimeout);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(3)' remoteSettings.WatchHeartbeatExpectedResponseAfter);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(10' remoteSettings.WatchFailureDetectorConfig.GetDouble("threshold"));
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(200' remoteSettings.WatchFailureDetectorConfig.GetDouble("max-sample-size"));
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(10)' remoteSettings.WatchFailureDetectorConfig.GetTimeSpan("acceptable-heartbeat-pause"));
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMilliseconds(100)' remoteSettings.WatchFailureDetectorConfig.GetTimeSpan("min-std-deviation"));
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_be_able_to_parse_AkkaProtocol_related_config_elements,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(4)' settings.TransportHeartBeatInterval);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_be_able_to_parse_AkkaProtocol_related_config_elements,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(20)' settings.TransportFailureDetectorConfig.GetTimeSpan("acceptable-heartbeat-pause"));
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_heliosTCP_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(15)' s.ConnectTimeout);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_heliosTCP_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(256000' s.SendBufferSize.Value);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_heliosTCP_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(256000' s.ReceiveBufferSize.Value);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_heliosTCP_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(128000' s.MaxFrameSize);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_heliosTCP_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(4096' s.Backlog);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_heliosTCP_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(2' s.ServerSocketWorkerPoolSize);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_heliosTCP_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(2' s.ClientSocketWorkerPoolSize);
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_socket_worker_pool_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(2' pool.GetInt("pool-size-min"));
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_socket_worker_pool_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(2' pool.GetInt("pool-size-max"));
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_socket_worker_pool_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(2' pool.GetInt("pool-size-min"));
Magic Number,Akka.Remote.Tests,RemoteConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConfigSpec.cs,Remoting_should_contain_correct_socket_worker_pool_configuration_values_in_ReferenceConf,The following statement contains a magic number: Assert.Equal(2' pool.GetInt("pool-size-max"));
Magic Number,Akka.Remote.Tests,RemoteDeployerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteDeployerSpec.cs,RemoteDeployer_must_be_able_to_parse_akka_actor_deployment_with_specified_remote_nodes,The following statement contains a magic number: deployment.RouterConfig.AsInstanceOf<RoundRobinPool>().NrOfInstances.ShouldBe(3);
Magic Number,Akka.Remote.Tests,RemoteDeployerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteDeployerSpec.cs,RemoteDeployer_must_be_able_to_parse_akka_actor_deployment_with_specified_remote_nodes,The following statement contains a magic number: deployment.Scope.AsInstanceOf<RemoteScope>().Address.ShouldBe(new Address("akka.tcp"' "sys"' "wallace"' 2552));
Magic Number,Akka.Remote.Tests,RemoteConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConsistentHashingRouterSpec.cs,ConsistentHashingGroup_must_use_same_hash_ring_indepenent_of_self_address,The following statement contains a magic number: var a1 = new Address("akka.tcp"' "Sys"' "client1"' 2552);
Magic Number,Akka.Remote.Tests,RemoteConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConsistentHashingRouterSpec.cs,ConsistentHashingGroup_must_use_same_hash_ring_indepenent_of_self_address,The following statement contains a magic number: var a2 = new Address("akka.tcp"' "Sys"' "client2"' 2552);
Magic Number,Akka.Remote.Tests,RemoteConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConsistentHashingRouterSpec.cs,ConsistentHashingGroup_must_use_same_hash_ring_indepenent_of_self_address,The following statement contains a magic number: var consistentHash1 = ConsistentHash.Create(nodes1' 10);
Magic Number,Akka.Remote.Tests,RemoteConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteConsistentHashingRouterSpec.cs,ConsistentHashingGroup_must_use_same_hash_ring_indepenent_of_self_address,The following statement contains a magic number: var consistentHash2 = ConsistentHash.Create(nodes2' 10);
Magic Number,Akka.Remote.Tests,RemoteMessageLocalDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMessageLocalDeliverySpec.cs,RemoteActorRefProvider_should_correctly_resolve_valid_LocalActorRef_from_second_remote_system,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>                  {                      var actorRef = sys2.ActorOf(BlackHoleActor.Props' "myActor");                      var sys2Address = RARP.For(sys2).Provider.DefaultAddress;                      var actorPath = new RootActorPath(sys2Address) / "user" / "myActor";                        // get a remoteactorref for the second system                      var remoteActorRef = Sys.ActorSelection(actorPath).ResolveOne(TimeSpan.FromSeconds(3)).Result;                        // disconnect us from the second actorsystem                      var mc =                          RARP.For(Sys)                              .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                  ThrottleTransportAdapter.Direction.Both' Blackhole.Instance));                      Assert.True(mc.Wait(TimeSpan.FromSeconds(3)));                        // start deathwatch (won't be delivered initially)                      Watch(remoteActorRef);                      Task.Delay(TimeSpan.FromSeconds(3)).Wait(); // if we delay the initial send' this spec will fail                        var mc2 =                         RARP.For(Sys)                             .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                 ThrottleTransportAdapter.Direction.Both' Unthrottled.Instance));                      Assert.True(mc2.Wait(TimeSpan.FromSeconds(3)));                        // fire off another non-system message                      var ai =                          Sys.ActorSelection(actorPath).Ask<ActorIdentity>(new Identify(null)' TimeSpan.FromSeconds(3)).Result;                                             remoteActorRef.Tell(PoisonPill.Instance); // WATCH should be applied first                      ExpectTerminated(remoteActorRef);                  });
Magic Number,Akka.Remote.Tests,RemoteMessageLocalDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMessageLocalDeliverySpec.cs,RemoteActorRefProvider_should_correctly_resolve_valid_LocalActorRef_from_second_remote_system,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>                  {                      var actorRef = sys2.ActorOf(BlackHoleActor.Props' "myActor");                      var sys2Address = RARP.For(sys2).Provider.DefaultAddress;                      var actorPath = new RootActorPath(sys2Address) / "user" / "myActor";                        // get a remoteactorref for the second system                      var remoteActorRef = Sys.ActorSelection(actorPath).ResolveOne(TimeSpan.FromSeconds(3)).Result;                        // disconnect us from the second actorsystem                      var mc =                          RARP.For(Sys)                              .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                  ThrottleTransportAdapter.Direction.Both' Blackhole.Instance));                      Assert.True(mc.Wait(TimeSpan.FromSeconds(3)));                        // start deathwatch (won't be delivered initially)                      Watch(remoteActorRef);                      Task.Delay(TimeSpan.FromSeconds(3)).Wait(); // if we delay the initial send' this spec will fail                        var mc2 =                         RARP.For(Sys)                             .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                 ThrottleTransportAdapter.Direction.Both' Unthrottled.Instance));                      Assert.True(mc2.Wait(TimeSpan.FromSeconds(3)));                        // fire off another non-system message                      var ai =                          Sys.ActorSelection(actorPath).Ask<ActorIdentity>(new Identify(null)' TimeSpan.FromSeconds(3)).Result;                                             remoteActorRef.Tell(PoisonPill.Instance); // WATCH should be applied first                      ExpectTerminated(remoteActorRef);                  });
Magic Number,Akka.Remote.Tests,RemoteMessageLocalDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMessageLocalDeliverySpec.cs,RemoteActorRefProvider_should_correctly_resolve_valid_LocalActorRef_from_second_remote_system,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>                  {                      var actorRef = sys2.ActorOf(BlackHoleActor.Props' "myActor");                      var sys2Address = RARP.For(sys2).Provider.DefaultAddress;                      var actorPath = new RootActorPath(sys2Address) / "user" / "myActor";                        // get a remoteactorref for the second system                      var remoteActorRef = Sys.ActorSelection(actorPath).ResolveOne(TimeSpan.FromSeconds(3)).Result;                        // disconnect us from the second actorsystem                      var mc =                          RARP.For(Sys)                              .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                  ThrottleTransportAdapter.Direction.Both' Blackhole.Instance));                      Assert.True(mc.Wait(TimeSpan.FromSeconds(3)));                        // start deathwatch (won't be delivered initially)                      Watch(remoteActorRef);                      Task.Delay(TimeSpan.FromSeconds(3)).Wait(); // if we delay the initial send' this spec will fail                        var mc2 =                         RARP.For(Sys)                             .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                 ThrottleTransportAdapter.Direction.Both' Unthrottled.Instance));                      Assert.True(mc2.Wait(TimeSpan.FromSeconds(3)));                        // fire off another non-system message                      var ai =                          Sys.ActorSelection(actorPath).Ask<ActorIdentity>(new Identify(null)' TimeSpan.FromSeconds(3)).Result;                                             remoteActorRef.Tell(PoisonPill.Instance); // WATCH should be applied first                      ExpectTerminated(remoteActorRef);                  });
Magic Number,Akka.Remote.Tests,RemoteMessageLocalDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMessageLocalDeliverySpec.cs,RemoteActorRefProvider_should_correctly_resolve_valid_LocalActorRef_from_second_remote_system,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>                  {                      var actorRef = sys2.ActorOf(BlackHoleActor.Props' "myActor");                      var sys2Address = RARP.For(sys2).Provider.DefaultAddress;                      var actorPath = new RootActorPath(sys2Address) / "user" / "myActor";                        // get a remoteactorref for the second system                      var remoteActorRef = Sys.ActorSelection(actorPath).ResolveOne(TimeSpan.FromSeconds(3)).Result;                        // disconnect us from the second actorsystem                      var mc =                          RARP.For(Sys)                              .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                  ThrottleTransportAdapter.Direction.Both' Blackhole.Instance));                      Assert.True(mc.Wait(TimeSpan.FromSeconds(3)));                        // start deathwatch (won't be delivered initially)                      Watch(remoteActorRef);                      Task.Delay(TimeSpan.FromSeconds(3)).Wait(); // if we delay the initial send' this spec will fail                        var mc2 =                         RARP.For(Sys)                             .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                 ThrottleTransportAdapter.Direction.Both' Unthrottled.Instance));                      Assert.True(mc2.Wait(TimeSpan.FromSeconds(3)));                        // fire off another non-system message                      var ai =                          Sys.ActorSelection(actorPath).Ask<ActorIdentity>(new Identify(null)' TimeSpan.FromSeconds(3)).Result;                                             remoteActorRef.Tell(PoisonPill.Instance); // WATCH should be applied first                      ExpectTerminated(remoteActorRef);                  });
Magic Number,Akka.Remote.Tests,RemoteMessageLocalDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMessageLocalDeliverySpec.cs,RemoteActorRefProvider_should_correctly_resolve_valid_LocalActorRef_from_second_remote_system,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>                  {                      var actorRef = sys2.ActorOf(BlackHoleActor.Props' "myActor");                      var sys2Address = RARP.For(sys2).Provider.DefaultAddress;                      var actorPath = new RootActorPath(sys2Address) / "user" / "myActor";                        // get a remoteactorref for the second system                      var remoteActorRef = Sys.ActorSelection(actorPath).ResolveOne(TimeSpan.FromSeconds(3)).Result;                        // disconnect us from the second actorsystem                      var mc =                          RARP.For(Sys)                              .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                  ThrottleTransportAdapter.Direction.Both' Blackhole.Instance));                      Assert.True(mc.Wait(TimeSpan.FromSeconds(3)));                        // start deathwatch (won't be delivered initially)                      Watch(remoteActorRef);                      Task.Delay(TimeSpan.FromSeconds(3)).Wait(); // if we delay the initial send' this spec will fail                        var mc2 =                         RARP.For(Sys)                             .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                 ThrottleTransportAdapter.Direction.Both' Unthrottled.Instance));                      Assert.True(mc2.Wait(TimeSpan.FromSeconds(3)));                        // fire off another non-system message                      var ai =                          Sys.ActorSelection(actorPath).Ask<ActorIdentity>(new Identify(null)' TimeSpan.FromSeconds(3)).Result;                                             remoteActorRef.Tell(PoisonPill.Instance); // WATCH should be applied first                      ExpectTerminated(remoteActorRef);                  });
Magic Number,Akka.Remote.Tests,RemoteMessageLocalDeliverySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMessageLocalDeliverySpec.cs,RemoteActorRefProvider_should_correctly_resolve_valid_LocalActorRef_from_second_remote_system,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>                  {                      var actorRef = sys2.ActorOf(BlackHoleActor.Props' "myActor");                      var sys2Address = RARP.For(sys2).Provider.DefaultAddress;                      var actorPath = new RootActorPath(sys2Address) / "user" / "myActor";                        // get a remoteactorref for the second system                      var remoteActorRef = Sys.ActorSelection(actorPath).ResolveOne(TimeSpan.FromSeconds(3)).Result;                        // disconnect us from the second actorsystem                      var mc =                          RARP.For(Sys)                              .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                  ThrottleTransportAdapter.Direction.Both' Blackhole.Instance));                      Assert.True(mc.Wait(TimeSpan.FromSeconds(3)));                        // start deathwatch (won't be delivered initially)                      Watch(remoteActorRef);                      Task.Delay(TimeSpan.FromSeconds(3)).Wait(); // if we delay the initial send' this spec will fail                        var mc2 =                         RARP.For(Sys)                             .Provider.Transport.ManagementCommand(new SetThrottle(sys2Address'                                 ThrottleTransportAdapter.Direction.Both' Unthrottled.Instance));                      Assert.True(mc2.Wait(TimeSpan.FromSeconds(3)));                        // fire off another non-system message                      var ai =                          Sys.ActorSelection(actorPath).Ask<ActorIdentity>(new Identify(null)' TimeSpan.FromSeconds(3)).Result;                                             remoteActorRef.Tell(PoisonPill.Instance); // WATCH should be applied first                      ExpectTerminated(remoteActorRef);                  });
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_its_children_on_remote_host_driven_by_configuration,The following statement contains a magic number: var router = masterActorSystem.ActorOf(new RoundRobinPool(2).Props(Props.Create<Echo>())' "blub");
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_its_children_on_remote_host_driven_by_configuration,The following statement contains a magic number: i < 5
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_its_children_on_remote_host_driven_by_configuration,The following statement contains a magic number: Assert.Equal(2' replies.Count);
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_its_children_on_remote_host_driven_by_programmatic_definition,The following statement contains a magic number: var router = masterActorSystem.ActorOf(new RemoteRouterConfig(new RoundRobinPool(2)' new[] { new Address("akka.tcp"' sysName' "127.0.0.1"' port) })                  .Props(Props.Create<Echo>())' "blub2");
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_its_children_on_remote_host_driven_by_programmatic_definition,The following statement contains a magic number: i < 5
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_its_children_on_remote_host_driven_by_programmatic_definition,The following statement contains a magic number: Assert.Equal(2' replies.Count);
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_dynamic_resizable_number_of_children_on_remote_host_driven_by_configuration,The following statement contains a magic number: i < 5000
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_dynamic_resizable_number_of_children_on_remote_host_driven_by_configuration,The following statement contains a magic number: Assert.True(replies.Count >= 2);
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_remote_routers_based_on_configuration,The following statement contains a magic number: i < 5
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_remote_routers_based_on_configuration,The following statement contains a magic number: Assert.Equal(2' replies.Count);
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_remote_routers_based_on_explicit_deployment,The following statement contains a magic number: var router = masterActorSystem.ActorOf(new RoundRobinPool(2).Props(Props.Create<Echo>())                  .WithDeploy(                  new Deploy(new RemoteScope(intendedRemoteAddress)))' "remote-blub2");
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_remote_routers_based_on_explicit_deployment,The following statement contains a magic number: i < 5
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_deploy_remote_routers_based_on_explicit_deployment,The following statement contains a magic number: Assert.Equal(2' replies.Count);
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_let_remote_deployment_be_overridden_by_local_configuration,The following statement contains a magic number: var router = masterActorSystem.ActorOf(new RoundRobinPool(2).Props(Props.Create<Echo>())                  .WithDeploy(                  new Deploy(new RemoteScope(intendedRemoteAddress)))' "local-blub");
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_let_remote_deployment_be_overridden_by_local_configuration,The following statement contains a magic number: i < 5
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_let_remote_deployment_be_overridden_by_local_configuration,The following statement contains a magic number: Assert.Equal(2' replies.Count);
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_let_remote_deployment_router_be_overridden_by_local_configuration,The following statement contains a magic number: var router = masterActorSystem.ActorOf(new RoundRobinPool(2).Props(Props.Create<Echo>())                  .WithDeploy(                  new Deploy(new RemoteScope(intendedRemoteAddress)))' "local-blub2");
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_let_remote_deployment_router_be_overridden_by_local_configuration,The following statement contains a magic number: i < 5
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_let_remote_deployment_router_be_overridden_by_local_configuration,The following statement contains a magic number: Assert.Equal(4' replies.Count);
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_let_remote_deployment_be_overridden_by_remote_configuration,The following statement contains a magic number: var router = masterActorSystem.ActorOf(new RoundRobinPool(2).Props(Props.Create<Echo>())                  .WithDeploy(                  new Deploy(new RemoteScope(intendedRemoteAddress)))' "remote-override");
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_let_remote_deployment_be_overridden_by_remote_configuration,The following statement contains a magic number: i < 5
Magic Number,Akka.Remote.Tests,RemoteRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteRouterSpec.cs,RemoteRouter_must_let_remote_deployment_be_overridden_by_remote_configuration,The following statement contains a magic number: Assert.Equal(4' replies.Count);
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,CreateFailureDetectorRegistry,The following statement contains a magic number: return new DefaultFailureDetectorRegistry<Address>(() => new PhiAccrualFailureDetector(                  8'                  200'                  TimeSpan.FromMilliseconds(100)'                  TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,CreateFailureDetectorRegistry,The following statement contains a magic number: return new DefaultFailureDetectorRegistry<Address>(() => new PhiAccrualFailureDetector(                  8'                  200'                  TimeSpan.FromMilliseconds(100)'                  TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,CreateFailureDetectorRegistry,The following statement contains a magic number: return new DefaultFailureDetectorRegistry<Address>(() => new PhiAccrualFailureDetector(                  8'                  200'                  TimeSpan.FromMilliseconds(100)'                  TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,CreateFailureDetectorRegistry,The following statement contains a magic number: return new DefaultFailureDetectorRegistry<Address>(() => new PhiAccrualFailureDetector(                  8'                  200'                  TimeSpan.FromMilliseconds(100)'                  TimeSpan.FromSeconds(3)'                  TimeSpan.FromSeconds(1)));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectMsg(RemoteWatcher.Stats.Counts(3' 1));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectMsg(RemoteWatcher.Stats.Counts(2' 1));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromMilliseconds(100));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_have_correct_interaction_when_watching,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromSeconds(2));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_when_missing_heartbeats,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      monitorA.Tell(RemoteWatcher.HeartbeatTick.Instance' TestActor);                      ExpectMsg<RemoteWatcher.Heartbeat>();                      //but no HeartbeatRsp                      monitorA.Tell(RemoteWatcher.ReapUnreachableTick.Instance);                      p.ExpectMsg(new TestRemoteWatcher.AddressTerm(b.Path.Address)' TimeSpan.FromSeconds(1));                      q.ExpectMsg(new TestRemoteWatcher.Quarantined(b.Path.Address' RemoteAddressUid)' TimeSpan.FromSeconds(1));                  });                  return true;              });
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_when_missing_heartbeats,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromSeconds(2));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_when_missing_first_heartbeat,The following statement contains a magic number: var heartbeatExpectedResponseAfter = TimeSpan.FromSeconds(2);
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_when_missing_first_heartbeat,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  AwaitAssert(() =>                  {                      monitorA.Tell(RemoteWatcher.HeartbeatTick.Instance' TestActor);                      ExpectMsg<RemoteWatcher.Heartbeat>();                      //but no HeartbeatRsp                      monitorA.Tell(RemoteWatcher.ReapUnreachableTick.Instance);                      p.ExpectMsg(new TestRemoteWatcher.AddressTerm(b.Path.Address)' TimeSpan.FromSeconds(1));                      // no real quarantine when missing first heartbeat' uid unknown                      q.ExpectMsg(new TestRemoteWatcher.Quarantined(b.Path.Address' null)' TimeSpan.FromSeconds(1));                  });                  return true;              });
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_when_missing_first_heartbeat,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromSeconds(2));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_for_new_watch_after_broken_connection_was_reestablished_and_broken_again,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      monitorA.Tell(RemoteWatcher.HeartbeatTick.Instance' TestActor);                      ExpectMsg<RemoteWatcher.Heartbeat>();                      //but no HeartbeatRsp                      monitorA.Tell(RemoteWatcher.ReapUnreachableTick.Instance);                      p.ExpectMsg(new TestRemoteWatcher.AddressTerm(b.Path.Address)' TimeSpan.FromSeconds(1));                      q.ExpectMsg(new TestRemoteWatcher.Quarantined(b.Path.Address' RemoteAddressUid)' TimeSpan.FromSeconds(1));                  });                  return true;              });
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_for_new_watch_after_broken_connection_was_reestablished_and_broken_again,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromSeconds(2));
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_for_new_watch_after_broken_connection_was_reestablished_and_broken_again,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      monitorA.Tell(RemoteWatcher.HeartbeatTick.Instance' TestActor);                      ExpectMsg<RemoteWatcher.Heartbeat>();                      //but no HeartbeatRsp                      monitorA.Tell(RemoteWatcher.ReapUnreachableTick.Instance);                      p.ExpectMsg(new TestRemoteWatcher.AddressTerm(b.Path.Address)' TimeSpan.FromSeconds(1));                      q.ExpectMsg(new TestRemoteWatcher.Quarantined(b.Path.Address' RemoteAddressUid)' TimeSpan.FromSeconds(1));                  });                  return true;              });
Magic Number,Akka.Remote.Tests,RemoteWatcherSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,A_RemoteWatcher_must_generate_address_terminated_for_new_watch_after_broken_connection_was_reestablished_and_broken_again,The following statement contains a magic number: ExpectNoMsg(TimeSpan.FromSeconds(2));
Magic Number,Akka.Remote.Tests,Quarantined,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteWatcherSpec.cs,GetHashCode,The following statement contains a magic number: return ((_address != null ? _address.GetHashCode() : 0)*397) ^ _uid.GetHashCode();
Magic Number,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Remoting_must_support_remote_lookups,The following statement contains a magic number: ExpectMsg(Tuple.Create("pong"' TestActor)' TimeSpan.FromSeconds(1.5));
Magic Number,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Remoting_must_support_Ask,The following statement contains a magic number: var msg = await here.Ask<Tuple<string'IActorRef>>("ping"' TimeSpan.FromSeconds(1.5));
Magic Number,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Remoting_must_create_by_IndirectActorProducer_and_ping,The following statement contains a magic number: ExpectMsg(Tuple.Create("pong"' TestActor)' TimeSpan.FromSeconds(1.5));
Magic Number,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Bug_884_Remoting_must_support_reply_to_Routee,The following statement contains a magic number: var router = Sys.ActorOf(new RoundRobinPool(3).Props(Props.Create(() => new Reporter(TestActor))));
Magic Number,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Bug_884_Remoting_must_support_reply_to_Routee,The following statement contains a magic number: var msg = ExpectMsg<Tuple<string' IActorRef>>(TimeSpan.FromSeconds(1.5));
Magic Number,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Bug_884_Remoting_must_support_reply_to_child_of_Routee,The following statement contains a magic number: var router = Sys.ActorOf(new RoundRobinPool(3).Props(Props.Create(() => new NestedDeployer(props))));
Magic Number,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Bug_884_Remoting_must_support_reply_to_child_of_Routee,The following statement contains a magic number: var msg = ExpectMsg<Tuple<string' IActorRef>>(TimeSpan.FromSeconds(1.5));
Magic Number,Akka.Remote.Tests,RemotingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingSpec.cs,Nobody_should_be_converted_back_to_its_singleton,The following statement contains a magic number: ExpectMsg(ActorRefs.Nobody' TimeSpan.FromSeconds(1.5));
Magic Number,Akka.Remote.Tests,RemotingTerminatorSpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingTerminatorSpecs.cs,RemotingTerminator_should_shutdown_promptly_with_no_associations,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  Sys.EventStream.Subscribe(TestActor' typeof (RemotingShutdownEvent));                  Sys.EventStream.Subscribe(TestActor' typeof (RemotingErrorEvent));                  var terminationTask = Sys.Terminate();                  Assert.True(terminationTask.Wait(RemainingOrDefault)' "Expected to terminate within 10 seconds' but didn't.");              });
Magic Number,Akka.Remote.Tests,RemotingTerminatorSpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingTerminatorSpecs.cs,RemotingTerminator_should_shutdown_promptly_with_some_associations,The following statement contains a magic number: var associated =                  Sys.ActorSelection(new RootActorPath(sys2Address)/"system"/"remote-watcher")                      .ResolveOne(TimeSpan.FromSeconds(4))                      .Result;
Magic Number,Akka.Remote.Tests,RemotingTerminatorSpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingTerminatorSpecs.cs,RemotingTerminator_should_shutdown_promptly_with_some_associations,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  Sys.EventStream.Subscribe(TestActor' typeof(RemotingShutdownEvent));                  Sys.EventStream.Subscribe(TestActor' typeof(RemotingErrorEvent));                  var terminationTask = Sys.Terminate();                  Assert.True(terminationTask.Wait(RemainingOrDefault)' "Expected to terminate within 10 seconds' but didn't.");              });
Magic Number,Akka.Remote.Tests,RemotingTerminatorSpecs,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemotingTerminatorSpecs.cs,RemotingTerminator_should_shutdown_promptly_with_some_associations,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  var terminationTask = sys2.Terminate();                  Assert.True(terminationTask.Wait(RemainingOrDefault)' "Expected to terminate within 10 seconds' but didn't.");              });
Magic Number,Akka.Remote.Tests,RemoteMetricsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMetricsSpec.cs,RemoteMetricsMustNotLogMessagesLargerThanFrameSizeExceeding,The following statement contains a magic number: sel.Tell(new byte[200]);
Magic Number,Akka.Remote.Tests,RemoteMetricsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMetricsSpec.cs,RemoteMetricsMustLogNewMessageSizeForTheSameMessageTypeLargerThanThePreviousOneOnTheThreshold,The following statement contains a magic number: sel.Tell(new byte[200]);
Magic Number,Akka.Remote.Tests,RemoteMetricsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMetricsSpec.cs,RemoteMetricsMustLogNewMessageSizeForTheSameMessageTypeLargerThanThePreviousOneOnTheThreshold,The following statement contains a magic number: sel.Tell(new byte[300]);
Magic Number,Akka.Remote.Tests,RemoteMetricsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMetricsSpec.cs,RemoteMetricsMustNotLogTheSameMessageSizeTwice,The following statement contains a magic number: sel.Tell(new byte[200]);
Magic Number,Akka.Remote.Tests,RemoteMetricsSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\RemoteMetricsSpec.cs,RemoteMetricsMustNotLogTheSameMessageSizeTwice,The following statement contains a magic number: sel.Tell(new byte[200]);
Magic Number,Akka.Remote.Tests.Serialization,DaemonMsgCreateSerializerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Serialization\DaemonMsgCreateSerializerSpec.cs,Serialization_must_serialize_and_deserialize_DaemonMsgCreate_with_Deploy_and_RouterConfig,The following statement contains a magic number: var supervisorStrategy = new OneForOneStrategy(3' TimeSpan.FromSeconds(10)' decider);
Magic Number,Akka.Remote.Tests.Serialization,DaemonMsgCreateSerializerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Serialization\DaemonMsgCreateSerializerSpec.cs,Serialization_must_serialize_and_deserialize_DaemonMsgCreate_with_Deploy_and_RouterConfig,The following statement contains a magic number: var supervisorStrategy = new OneForOneStrategy(3' TimeSpan.FromSeconds(10)' decider);
Magic Number,Akka.Remote.Tests.Serialization,DaemonMsgCreateSerializerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Serialization\DaemonMsgCreateSerializerSpec.cs,Serialization_must_serialize_and_deserialize_DaemonMsgCreate_with_Deploy_and_RouterConfig,The following statement contains a magic number: var deploy1 = new Deploy("path1"'                  ConfigurationFactory.ParseString("a=1")'                  new RoundRobinPool(5' null' supervisorStrategy' null)'                  new RemoteScope(new Address("akka"' "Test"' "host1"' 1921))'                  "mydispatcher");
Magic Number,Akka.Remote.Tests.Serialization,DaemonMsgCreateSerializerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Serialization\DaemonMsgCreateSerializerSpec.cs,Serialization_must_serialize_and_deserialize_DaemonMsgCreate_with_Deploy_and_RouterConfig,The following statement contains a magic number: var deploy1 = new Deploy("path1"'                  ConfigurationFactory.ParseString("a=1")'                  new RoundRobinPool(5' null' supervisorStrategy' null)'                  new RemoteScope(new Address("akka"' "Test"' "host1"' 1921))'                  "mydispatcher");
Magic Number,Akka.Remote.Tests.Serialization,DaemonMsgCreateSerializerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Serialization\DaemonMsgCreateSerializerSpec.cs,Serialization_must_serialize_and_deserialize_DaemonMsgCreate_with_Deploy_and_RouterConfig,The following statement contains a magic number: var deploy2 = new Deploy("path2"'                  ConfigurationFactory.ParseString("a=2")'                  FromConfig.Instance'                  new RemoteScope(new Address("akka"' "Test"' "host2"' 1922))'                  Deploy.NoDispatcherGiven);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_register_itself_as_reader_on_injected_handles,The following statement contains a magic number: Sys.ActorOf(ProtocolStateActor.InboundProps(new HandshakeInfo(localAddress' 42)' collaborators.Handle'                  new ActorAssociationEventListener(TestActor)' new AkkaProtocolSettings(config)' codec'                  collaborators.FailureDetector));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_in_inbound_mode_accept_payload_after_Associate_PDU_received,The following statement contains a magic number: var reader =                  Sys.ActorOf(ProtocolStateActor.InboundProps(new HandshakeInfo(localAddress' 42)' collaborators.Handle'                      new ActorAssociationEventListener(TestActor)' new AkkaProtocolSettings(config)' codec'                      collaborators.FailureDetector));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_in_inbound_mode_accept_payload_after_Associate_PDU_received,The following statement contains a magic number: reader.Tell(testAssociate(33)' Self);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_in_inbound_mode_accept_payload_after_Associate_PDU_received,The following statement contains a magic number: var wrappedHandle = ExpectMsgPf<AkkaProtocolHandle>(DefaultTimeout' "expected InboundAssociation"' o =>              {                  var inbound = o.AsInstanceOf<InboundAssociation>();                  if (inbound == null) return null;                  Assert.Equal(33' inbound.Association.AsInstanceOf<AkkaProtocolHandle>().HandshakeInfo.Uid);                  return inbound.Association.AsInstanceOf<AkkaProtocolHandle>();              });
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_in_inbound_mode_disassociate_when_an_unexpected_message_arrives_instead_of_Associate,The following statement contains a magic number: var reader =                  Sys.ActorOf(ProtocolStateActor.InboundProps(new HandshakeInfo(localAddress' 42)' collaborators.Handle'                      new ActorAssociationEventListener(TestActor)' new AkkaProtocolSettings(config)' codec'                      collaborators.FailureDetector));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_in_inbound_mode_disassociate_when_an_unexpected_message_arrives_instead_of_Associate,The following statement contains a magic number: reader.Tell(testAssociate(33)' Self);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_in_outbound_mode_delay_readiness_until_handshake_finished,The following statement contains a magic number: var reader =                  Sys.ActorOf(ProtocolStateActor.OutboundProps(new HandshakeInfo(localAddress' 42)' remoteAddress'                      statusPromise' collaborators.Transport'                      new AkkaProtocolSettings(config)' codec' collaborators.FailureDetector));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_in_outbound_mode_delay_readiness_until_handshake_finished,The following statement contains a magic number: AwaitCondition(() => LastActivityIsAssociate(collaborators.Registry' 42)' DefaultTimeout);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_in_outbound_mode_delay_readiness_until_handshake_finished,The following statement contains a magic number: reader.Tell(testAssociate(33)' Self);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_in_outbound_mode_delay_readiness_until_handshake_finished,The following statement contains a magic number: statusPromise.Task.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_in_outbound_mode_delay_readiness_until_handshake_finished,The following statement contains a magic number: statusPromise.Task.Result.Match()                  .With<AkkaProtocolHandle>(h =>                  {                      Assert.Equal(remoteAkkaAddress' h.RemoteAddress);                      Assert.Equal(localAkkaAddress' h.LocalAddress);                      Assert.Equal(33' h.HandshakeInfo.Uid);                  })                  .Default(msg => Assert.True(false'"Did not receive expected AkkaProtocolHandle from handshake"));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_explicit_disassociate_messages,The following statement contains a magic number: var reader =                  Sys.ActorOf(ProtocolStateActor.OutboundProps(new HandshakeInfo(localAddress' 42)' remoteAddress'                      statusPromise' collaborators.Transport'                      new AkkaProtocolSettings(config)' codec' collaborators.FailureDetector));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_explicit_disassociate_messages,The following statement contains a magic number: AwaitCondition(() => LastActivityIsAssociate(collaborators.Registry' 42)' DefaultTimeout);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_explicit_disassociate_messages,The following statement contains a magic number: reader.Tell(testAssociate(33)' Self);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_explicit_disassociate_messages,The following statement contains a magic number: statusPromise.Task.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_transport_level_disassociations,The following statement contains a magic number: var reader =                  Sys.ActorOf(ProtocolStateActor.OutboundProps(new HandshakeInfo(localAddress' 42)' remoteAddress'                      statusPromise' collaborators.Transport'                      new AkkaProtocolSettings(config)' codec' collaborators.FailureDetector));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_transport_level_disassociations,The following statement contains a magic number: AwaitCondition(() => LastActivityIsAssociate(collaborators.Registry' 42)' DefaultTimeout);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_transport_level_disassociations,The following statement contains a magic number: reader.Tell(testAssociate(33)' Self);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_transport_level_disassociations,The following statement contains a magic number: statusPromise.Task.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_disassociate_when_failure_detector_signals_failure,The following statement contains a magic number: var stateActor =                  Sys.ActorOf(ProtocolStateActor.OutboundProps(new HandshakeInfo(localAddress' 42)' remoteAddress'                      statusPromise' collaborators.Transport'                      new AkkaProtocolSettings(config)' codec' collaborators.FailureDetector));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_disassociate_when_failure_detector_signals_failure,The following statement contains a magic number: AwaitCondition(() => LastActivityIsAssociate(collaborators.Registry' 42)' DefaultTimeout);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_disassociate_when_failure_detector_signals_failure,The following statement contains a magic number: stateActor.Tell(testAssociate(33)' Self);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_disassociate_when_failure_detector_signals_failure,The following statement contains a magic number: statusPromise.Task.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_correctly_when_the_handler_is_registered_only_after_the_association_is_already_closed,The following statement contains a magic number: var stateActor =                  Sys.ActorOf(ProtocolStateActor.OutboundProps(new HandshakeInfo(localAddress' 42)' remoteAddress'                      statusPromise' collaborators.Transport'                      new AkkaProtocolSettings(config)' codec' collaborators.FailureDetector));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_correctly_when_the_handler_is_registered_only_after_the_association_is_already_closed,The following statement contains a magic number: AwaitCondition(() => LastActivityIsAssociate(collaborators.Registry' 42)' DefaultTimeout);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_correctly_when_the_handler_is_registered_only_after_the_association_is_already_closed,The following statement contains a magic number: stateActor.Tell(testAssociate(33)' Self);
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolSpec.cs,ProtocolStateActor_must_handle_correctly_when_the_handler_is_registered_only_after_the_association_is_already_closed,The following statement contains a magic number: statusPromise.Task.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolStressTest,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolStressTest.cs,AkkaProtocolTransport_must_guarantee_at_most_once_delivery_and_message_ordering_despite_packet_loss,The following statement contains a magic number: var mc =                  RARP.For(Sys)                      .Provider.Transport.ManagementCommand(new FailureInjectorTransportAdapter.One(AddressB'                          new FailureInjectorTransportAdapter.Drop(0.1' 0.1)));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolStressTest,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolStressTest.cs,AkkaProtocolTransport_must_guarantee_at_most_once_delivery_and_message_ordering_despite_packet_loss,The following statement contains a magic number: var mc =                  RARP.For(Sys)                      .Provider.Transport.ManagementCommand(new FailureInjectorTransportAdapter.One(AddressB'                          new FailureInjectorTransportAdapter.Drop(0.1' 0.1)));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolStressTest,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolStressTest.cs,AkkaProtocolTransport_must_guarantee_at_most_once_delivery_and_message_ordering_despite_packet_loss,The following statement contains a magic number: AwaitCondition(() => mc.IsCompleted && mc.Result' TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.Transport,AkkaProtocolStressTest,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\AkkaProtocolStressTest.cs,AkkaProtocolTransport_must_guarantee_at_most_once_delivery_and_message_ordering_despite_packet_loss,The following statement contains a magic number: ExpectMsg<Tuple<int'int>>(TimeSpan.FromSeconds(60));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_consumption_of_infinite_amount_of_tokens_when_unthrottled,The following statement contains a magic number: bucket.TryConsumeTokens(0' 100).ShouldBe(Tuple.Create<ThrottleMode'bool>(Unthrottled.Instance' true));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_consumption_of_infinite_amount_of_tokens_when_unthrottled,The following statement contains a magic number: bucket.TryConsumeTokens(100000' 1000).ShouldBe(Tuple.Create<ThrottleMode' bool>(Unthrottled.Instance' true));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_consumption_of_infinite_amount_of_tokens_when_unthrottled,The following statement contains a magic number: bucket.TryConsumeTokens(100000' 1000).ShouldBe(Tuple.Create<ThrottleMode' bool>(Unthrottled.Instance' true));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_consumption_of_infinite_amount_of_tokens_when_unthrottled,The following statement contains a magic number: bucket.TryConsumeTokens(1000000' 10000).ShouldBe(Tuple.Create<ThrottleMode' bool>(Unthrottled.Instance' true));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_consumption_of_infinite_amount_of_tokens_when_unthrottled,The following statement contains a magic number: bucket.TryConsumeTokens(1000000' 10000).ShouldBe(Tuple.Create<ThrottleMode' bool>(Unthrottled.Instance' true));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_deny_consumption_of_any_amount_of_tokens_when_blackhole,The following statement contains a magic number: bucket.TryConsumeTokens(0' 100).ShouldBe(Tuple.Create<ThrottleMode' bool>(Blackhole.Instance' false));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_deny_consumption_of_any_amount_of_tokens_when_blackhole,The following statement contains a magic number: bucket.TryConsumeTokens(100000' 1000).ShouldBe(Tuple.Create<ThrottleMode' bool>(Blackhole.Instance' false));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_deny_consumption_of_any_amount_of_tokens_when_blackhole,The following statement contains a magic number: bucket.TryConsumeTokens(100000' 1000).ShouldBe(Tuple.Create<ThrottleMode' bool>(Blackhole.Instance' false));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_deny_consumption_of_any_amount_of_tokens_when_blackhole,The following statement contains a magic number: bucket.TryConsumeTokens(1000000' 10000).ShouldBe(Tuple.Create<ThrottleMode' bool>(Blackhole.Instance' false));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_deny_consumption_of_any_amount_of_tokens_when_blackhole,The following statement contains a magic number: bucket.TryConsumeTokens(1000000' 10000).ShouldBe(Tuple.Create<ThrottleMode' bool>(Blackhole.Instance' false));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 100);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 100);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 100);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: var bucket1 = bucket.TryConsumeTokens(0L' 10);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 90));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 90));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 90));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: var bucket2 = bucket1.Item1.TryConsumeTokens(0L' 40);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 50));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 50));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 50));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: var bucket3 = bucket2.Item1.TryConsumeTokens(0L' 50);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 0));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 0));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 0));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_in_tokenbucket_mode_allow_consuming_tokens_up_to_capacity,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 0));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 0);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 0);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 0));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 0));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' 50));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' 50));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' 50));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: var bucket3 = bucket2.Item1.TryConsumeTokens(HalfSecond * 2' 0);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 100));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 100));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 100));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 100));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: var bucket4 = bucket3.Item1.TryConsumeTokens(HalfSecond * 3' 0);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 3' 100));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 3' 100));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 3' 100));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_replenish_tokens,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 3' 100));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 20);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 20);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 20);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: var bucket1 = bucket.TryConsumeTokens(0L' 10);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: var bucket2 = bucket1.Item1.TryConsumeTokens(HalfSecond' 60);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' 0));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' 0));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: var bucket3 = bucket2.Item1.TryConsumeTokens(HalfSecond * 2' 40);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: var bucket3 = bucket2.Item1.TryConsumeTokens(HalfSecond * 2' 40);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: var bucket4 = bucket3.Item1.TryConsumeTokens(HalfSecond * 3' 70);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: var bucket4 = bucket3.Item1.TryConsumeTokens(HalfSecond * 3' 70);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_accurately_interleave_replenish_and_consume,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 2' 10));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 20);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 20);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: var bucket = new TokenBucket(100' 100' 0L' 20);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: var bucket1 = bucket.TryConsumeTokens(0L' 30);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 20));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 20));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket1.Item1.ShouldBe(new TokenBucket(100' 100' 0L' 20));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: var bucket2 = bucket1.Item1.TryConsumeTokens(HalfSecond' 110);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' -40));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' -40));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket2.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' -40));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: var bucket3 = bucket2.Item1.TryConsumeTokens(HalfSecond * 2' 20);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: var bucket3 = bucket2.Item1.TryConsumeTokens(HalfSecond * 2' 20);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' -40));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' -40));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket3.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond' -40));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: var bucket4 = bucket3.Item1.TryConsumeTokens(HalfSecond * 3'20);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: var bucket4 = bucket3.Item1.TryConsumeTokens(HalfSecond * 3'20);
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 3' 40));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 3' 40));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 3' 40));
Magic Number,Akka.Remote.Tests.Transport,ThrottleModeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottleModeSpec.cs,ThrottleMode_must_allow_oversized_packets_through_by_loaning,The following statement contains a magic number: bucket4.Item1.ShouldBe(new TokenBucket(100' 100' HalfSecond * 3' 40));
Magic Number,Akka.Remote.Tests.Transport,ThrottlerTransportAdapterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottlerTransportAdapterSpec.cs,Throttle,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.Transport,ThrottlerTransportAdapterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottlerTransportAdapterSpec.cs,Disassociate,The following statement contains a magic number: task.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Tests.Transport,ThrottlerTransportAdapterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottlerTransportAdapterSpec.cs,ThrottlerTransportAdapter_must_maintain_average_message_rate,The following statement contains a magic number: Throttle(ThrottleTransportAdapter.Direction.Send' new TokenBucket(PingPacketSize*4' BytesPerSecond' 0' 0)).ShouldBeTrue();
Magic Number,Akka.Remote.Tests.Transport,ThrottlerTransportAdapterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottlerTransportAdapterSpec.cs,ThrottlerTransportAdapter_must_maintain_average_message_rate,The following statement contains a magic number: var time = TimeSpan.FromTicks(ExpectMsg<long>(TimeSpan.FromSeconds(TotalTime + 12))).TotalSeconds;
Magic Number,Akka.Remote.Tests.Transport,ThrottlerTransportAdapterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottlerTransportAdapterSpec.cs,ThrottlerTransportAdapter_must_maintain_average_message_rate,The following statement contains a magic number: Assert.True(time > TotalTime - 12);
Magic Number,Akka.Remote.Tests.Transport,ThrottlerTransportAdapterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottlerTransportAdapterSpec.cs,ThrottlerTransportAdapter_must_survive_blackholing,The following statement contains a magic number: AwaitCondition(() =>              {                  var received = ReceiveOne(TimeSpan.Zero);                  if (received != null && received.Equals(new ThrottlingTester.Lost("BlackHole 3")))                      return true;                    here.Tell(new ThrottlingTester.Lost("BlackHole 3"));                    return false;              }' TimeSpan.FromSeconds(15));
Magic Number,Akka.Remote.Tests.Transport,ThrottlerTransportAdapterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.Tests\Transport\ThrottlerTransportAdapterSpec.cs,ThrottlerTransportAdapter_must_survive_blackholing,The following statement contains a magic number: FishForMessage(o => o.Equals("Cleanup")' TimeSpan.FromSeconds(5));
