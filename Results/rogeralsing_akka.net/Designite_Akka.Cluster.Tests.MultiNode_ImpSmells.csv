Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,ClusterDeathWatchSpecTests,The length of the statement  "            An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_watch_actor_before_node_joins_cluster_and_cluster_remote_watcher_takes_over_from_remote_watcher(); " is 162.
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,ClusterDeathWatchSpecTests,The length of the statement  "            An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_shutdown_system_when_using_remote_deployed_actor_on_node_that_crashed(); " is 136.
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_receive_terminated_when_watched_node_becomes_down_removed,The length of the statement  "                    AwaitAssert(() => Assert.True(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Third)))); " is 122.
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_receive_terminated_when_watched_node_becomes_down_removed,The length of the statement  "                    AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Third)))); " is 123.
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_receive_terminated_when_watched_node_becomes_down_removed,The length of the statement  "                        AwaitAssert(() => Assert.True(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Second)))); " is 123.
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_receive_terminated_when_watched_node_becomes_down_removed,The length of the statement  "                        AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Second)))); " is 124.
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_watch_actor_before_node_joins_cluster_and_cluster_remote_watcher_takes_over_from_remote_watcher,The length of the statement  "                    Sys.ActorSelection(new RootActorPath(GetAddress(_config.Fifth)) / "user" / "subject5").Tell(new Identify("subject5")' TestActor); " is 129.
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_watch_actor_before_node_joins_cluster_and_cluster_remote_watcher_takes_over_from_remote_watcher,The length of the statement  "                    AwaitAssert(() => ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Fifth)).ShouldBeTrue()); " is 124.
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_watch_actor_before_node_joins_cluster_and_cluster_remote_watcher_takes_over_from_remote_watcher,The length of the statement  "                    AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Fifth)))); " is 123.
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_shutdown_system_when_using_remote_deployed_actor_on_node_that_crashed,The length of the statement  "                    AwaitAssert(() => ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.First)).ShouldBeTrue()); " is 124.
Long Statement,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_shutdown_system_when_using_remote_deployed_actor_on_node_that_crashed,The length of the statement  "                    AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.First)))); " is 123.
Long Statement,Akka.Cluster.Tests.MultiNode,NodeMembershipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\NodeMembershipSpec.cs,NodeMembershipSpecs,The length of the statement  "            Set_of_connected_cluster_systems_must_with_two_nodes_start_gossiping_to_each_other_so_that_both_nodes_gets_same_gossip_info(); " is 126.
Long Statement,Akka.Cluster.Tests.MultiNode,NodeMembershipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\NodeMembershipSpec.cs,NodeMembershipSpecs,The length of the statement  "            Set_of_connected_cluster_systems_must_with_three_nodes_start_gossiping_to_each_other_so_that_all_nodes_gets_same_gossip_info(); " is 127.
Long Statement,Akka.Cluster.Tests.MultiNode,RestartNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,ClusterNodesMustBeAbleToRestartAndJoinAgain,The length of the statement  "                    AwaitAssert(() => Assert.True(Cluster.Get(_secondSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up))); " is 135.
Long Statement,Akka.Cluster.Tests.MultiNode,RestartNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,ClusterNodesMustBeAbleToRestartAndJoinAgain,The length of the statement  "                    AwaitAssert(() => Assert.True(Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up))); " is 144.
Long Statement,Akka.Cluster.Tests.MultiNode,RestartNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,ClusterNodesMustBeAbleToRestartAndJoinAgain,The length of the statement  "                                .ReadView.Members.Any(m => m.Address.Equals(SecondUniqueAddress.Address) && m.UniqueAddress.Uid != SecondUniqueAddress.Uid)); " is 125.
Long Statement,Akka.Cluster.Tests.MultiNode,UnreachableNodeJoinsAgainSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\UnreachableNodeJoinsAgainSpec.cs,AllowFreshNodeWithSameHostAndPortToJoinAgainWhenTheNetworkIsPluggedBackIn,The length of the statement  "                        AwaitAssert(() => Assert.True(Cluster.Get(freshSystem).ReadView.Members.Select(x => x.Address).Contains(victimAddress))); " is 121.
Long Statement,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,ClusterConsistentHashingRouterSpecs,The length of the statement  "            A_cluster_router_with_consistent_hashing_pool_must_deploy_programatically_defined_routees_to_the_member_nodes_in_the_cluster(); " is 127.
Long Statement,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,ClusterConsistentHashingRouterSpecs,The length of the statement  "            A_cluster_router_with_consistent_hashing_pool_must_handle_combination_of_configured_router_and_programatically_defined_hash_mapping(); " is 134.
Long Statement,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,ClusterConsistentHashingRouterSpecs,The length of the statement  "            A_cluster_router_with_consistent_hashing_pool_must_handle_combination_of_configured_router_and_programatically_defined_hash_mapping_and_cluster_config(); " is 153.
Long Statement,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_deploy_programatically_defined_routees_to_the_member_nodes_in_the_cluster,The length of the statement  "                                allowLocalRoutees: true' useRole: null)).Props(Props.Create<ConsistentHashingRouterMultiNodeConfig.Echo>())' "router2"); " is 120.
Long Statement,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_handle_combination_of_configured_router_and_programatically_defined_hash_mapping,The length of the statement  "                    Sys.ActorOf(new ConsistentHashingPool(0).WithHashMapping(hashMapping).Props(Props.Create<ConsistentHashingRouterMultiNodeConfig.Echo>())' "router3"); " is 149.
Long Statement,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_handle_combination_of_configured_router_and_programatically_defined_hash_mapping_and_cluster_config,The length of the statement  "                                allowLocalRoutees: true' useRole: null)).Props(Props.Create<ConsistentHashingRouterMultiNodeConfig.Echo>())' "router4"); " is 120.
Long Statement,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_remove_routees_from_downed_node,The length of the statement  "                AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Third)))); " is 123.
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,ClientDowningNodeThatIsUnreachableMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClientDowningNodeThatIsUnreachableSpec.cs,ClientDowningNodeThatIsUnreachableMultiNodeConfig,The constructor "ClientDowningNodeThatIsUnreachableMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,ClusterDeathWatchSpecConfig,The constructor "ClusterDeathWatchSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,ClusterDeathWatchSpecConfig,The constructor "ClusterDeathWatchSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,ClusterDeathWatchSpecConfig,The constructor "ClusterDeathWatchSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,ConvergenceSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ConvergenceSpec.cs,ConvergenceSpecConfig,The constructor "ConvergenceSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,ConvergenceSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ConvergenceSpec.cs,ConvergenceSpecConfig,The constructor "ConvergenceSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,ConvergenceSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ConvergenceSpec.cs,ConvergenceSpecConfig,The constructor "ConvergenceSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,ConvergenceSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ConvergenceSpec.cs,ConvergenceSpecConfig,The constructor "ConvergenceSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,DisallowJoinOfTwoClusterSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\DisallowJoinOfTwoClustersSpec.cs,DisallowJoinOfTwoClusterSpecConfig,The constructor "DisallowJoinOfTwoClusterSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,InitialHeartbeatMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\InitialHeartbeatSpec.cs,InitialHeartbeatMultiNodeConfig,The constructor "InitialHeartbeatMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,InitialHeartbeatMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\InitialHeartbeatSpec.cs,InitialHeartbeatMultiNodeConfig,The constructor "InitialHeartbeatMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,InitialHeartbeatMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\InitialHeartbeatSpec.cs,InitialHeartbeatMultiNodeConfig,The constructor "InitialHeartbeatMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,JoinInProgressMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinInProgressSpec.cs,JoinInProgressMultiNodeConfig,The constructor "JoinInProgressMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,JoinInProgressMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinInProgressSpec.cs,JoinInProgressMultiNodeConfig,The constructor "JoinInProgressMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,JoinInProgressMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinInProgressSpec.cs,JoinInProgressMultiNodeConfig,The constructor "JoinInProgressMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,JoinSeedNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinSeedNodeSpec.cs,JoinSeedNodeConfig,The constructor "JoinSeedNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,JoinSeedNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinSeedNodeSpec.cs,JoinSeedNodeConfig,The constructor "JoinSeedNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,JoinSeedNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinSeedNodeSpec.cs,JoinSeedNodeConfig,The constructor "JoinSeedNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,LeaderLeavingSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\LeaderLeavingSpec.cs,LeaderLeavingSpecConfig,The constructor "LeaderLeavingSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,LeaderLeavingSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\LeaderLeavingSpec.cs,LeaderLeavingSpecConfig,The constructor "LeaderLeavingSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,LeaderLeavingSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\LeaderLeavingSpec.cs,LeaderLeavingSpecConfig,The constructor "LeaderLeavingSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,MinMembersBeforeUpSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\MinMembersBeforeUpSpec.cs,MinMembersBeforeUpSpecConfig,The constructor "MinMembersBeforeUpSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,MinMembersOfRoleBeforeUpSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\MinMembersBeforeUpSpec.cs,MinMembersOfRoleBeforeUpSpecConfig,The constructor "MinMembersOfRoleBeforeUpSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,RestartFirstSeedNodeSpecConfig,The constructor "RestartFirstSeedNodeSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,RestartFirstSeedNodeSpec,The constructor "RestartFirstSeedNodeSpec" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,RestartNodeSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,RestartNodeSpecConfig,The constructor "RestartNodeSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,RestartNodeSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,RestartNodeSpecConfig,The constructor "RestartNodeSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,RestartNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,RestartNodeSpec,The constructor "RestartNodeSpec" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,UnreachableNodeJoinsAgainConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\UnreachableNodeJoinsAgainSpec.cs,UnreachableNodeJoinsAgainConfig,The constructor "UnreachableNodeJoinsAgainConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode,UnreachableNodeJoinsAgainConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\UnreachableNodeJoinsAgainSpec.cs,UnreachableNodeJoinsAgainConfig,The constructor "UnreachableNodeJoinsAgainConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.TestKit,ClientDowningNodeThatIsUpMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClientDowningNodeThatIsUpSpec.cs,ClientDowningNodeThatIsUpMultiNodeConfig,The constructor "ClientDowningNodeThatIsUpMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingGroupSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingGroupSpec.cs,ClusterConsistentHashingGroupSpecConfig,The constructor "ClusterConsistentHashingGroupSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingGroupSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingGroupSpec.cs,ClusterConsistentHashingGroupSpecConfig,The constructor "ClusterConsistentHashingGroupSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingGroupSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingGroupSpec.cs,ClusterConsistentHashingGroupSpecConfig,The constructor "ClusterConsistentHashingGroupSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode.Routing,ConsistentHashingRouterMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,ConsistentHashingRouterMultiNodeConfig,The constructor "ConsistentHashingRouterMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode.Routing,ConsistentHashingRouterMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,ConsistentHashingRouterMultiNodeConfig,The constructor "ConsistentHashingRouterMultiNodeConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tests.MultiNode.Routing,ConsistentHashingRouterMultiNodeConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,ConsistentHashingRouterMultiNodeConfig,The constructor "ConsistentHashingRouterMultiNodeConfig" calls a virtual method "WithFallback".
Magic Number,Akka.Cluster.Tests.MultiNode,ClientDowningNodeThatIsUnreachableSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClientDowningNodeThatIsUnreachableSpec.cs,Client_of_a_4_node_cluster_must_be_able_to_DOWN_a_node_that_is_UNREACHABLE,The following statement contains a magic number: RunOn(() =>              {                  // kill 'third' node                  TestConductor.Exit(_config.Third' 0).Wait();                  MarkNodeAsUnavailable(thirdAddress);                    // mark 'third' node as DOWN                  Cluster.Down(thirdAddress);                  EnterBarrier("down-third-node");                    AwaitMembersUp(3' ImmutableHashSet.Create(thirdAddress));                  ClusterView.Members.Any(x => x.Address == thirdAddress).ShouldBeFalse();              }' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode,ClientDowningNodeThatIsUnreachableSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClientDowningNodeThatIsUnreachableSpec.cs,Client_of_a_4_node_cluster_must_be_able_to_DOWN_a_node_that_is_UNREACHABLE,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("down-third-node");                    AwaitMembersUp(3' ImmutableHashSet.Create(thirdAddress));              }' _config.Second' _config.Fourth);
Magic Number,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_receive_terminated_when_watched_node_becomes_down_removed,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  AwaitClusterUp(_config.First' _config.Second' _config.Third' _config.Fourth);                  EnterBarrier("cluster-up");                    RunOn(() =>                  {                      EnterBarrier("subjected-started");                        var path2 = new RootActorPath(GetAddress(_config.Second)) / "user" / "subject";                      var path3 = new RootActorPath(GetAddress(_config.Third)) / "user" / "subject";                      var watchEstablished = new TestLatch(2);                      Sys.ActorOf(Props.Create(() => new Observer(path2' path3' watchEstablished' TestActor))                          .WithDeploy(Deploy.Local)' "observer1");                        watchEstablished.Ready();                      EnterBarrier("watch-established");                      ExpectMsg(path2);                      ExpectNoMsg(TimeSpan.FromSeconds(2));                      EnterBarrier("second-terminated");                      MarkNodeAsUnavailable(GetAddress(_config.Third));                      AwaitAssert(() => Assert.True(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Third))));                      Cluster.Down(GetAddress(_config.Third));                      //removed                      AwaitAssert(() => Assert.False(ClusterView.Members.Select(x => x.Address).Contains(GetAddress(_config.Third))));                      AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Third))));                      ExpectMsg(path3);                      EnterBarrier("third-terminated");                  }' _config.First);                    RunOn(() =>                  {                      Sys.ActorOf(BlackHoleActor.Props' "subject");                      EnterBarrier("subjected-started");                      EnterBarrier("watch-established");                      RunOn(() =>                      {                          MarkNodeAsUnavailable(GetAddress(_config.Second));                          AwaitAssert(() => Assert.True(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Second))));                          Cluster.Down(GetAddress(_config.Second));                          //removed                          AwaitAssert(() => Assert.False(ClusterView.Members.Select(x => x.Address).Contains(GetAddress(_config.Second))));                          AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Second))));                      }' _config.Third);                      EnterBarrier("second-terminated");                      EnterBarrier("third-terminated");                  }' _config.Second' _config.Third' _config.Fourth);                    RunOn(() =>                  {                      EnterBarrier("subjected-started");                      EnterBarrier("watch-established");                      EnterBarrier("second-terminated");                      EnterBarrier("third-terminated");                  }' _config.Fifth);                    EnterBarrier("after-1");              });
Magic Number,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_receive_terminated_when_watched_node_becomes_down_removed,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  AwaitClusterUp(_config.First' _config.Second' _config.Third' _config.Fourth);                  EnterBarrier("cluster-up");                    RunOn(() =>                  {                      EnterBarrier("subjected-started");                        var path2 = new RootActorPath(GetAddress(_config.Second)) / "user" / "subject";                      var path3 = new RootActorPath(GetAddress(_config.Third)) / "user" / "subject";                      var watchEstablished = new TestLatch(2);                      Sys.ActorOf(Props.Create(() => new Observer(path2' path3' watchEstablished' TestActor))                          .WithDeploy(Deploy.Local)' "observer1");                        watchEstablished.Ready();                      EnterBarrier("watch-established");                      ExpectMsg(path2);                      ExpectNoMsg(TimeSpan.FromSeconds(2));                      EnterBarrier("second-terminated");                      MarkNodeAsUnavailable(GetAddress(_config.Third));                      AwaitAssert(() => Assert.True(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Third))));                      Cluster.Down(GetAddress(_config.Third));                      //removed                      AwaitAssert(() => Assert.False(ClusterView.Members.Select(x => x.Address).Contains(GetAddress(_config.Third))));                      AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Third))));                      ExpectMsg(path3);                      EnterBarrier("third-terminated");                  }' _config.First);                    RunOn(() =>                  {                      Sys.ActorOf(BlackHoleActor.Props' "subject");                      EnterBarrier("subjected-started");                      EnterBarrier("watch-established");                      RunOn(() =>                      {                          MarkNodeAsUnavailable(GetAddress(_config.Second));                          AwaitAssert(() => Assert.True(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Second))));                          Cluster.Down(GetAddress(_config.Second));                          //removed                          AwaitAssert(() => Assert.False(ClusterView.Members.Select(x => x.Address).Contains(GetAddress(_config.Second))));                          AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Second))));                      }' _config.Third);                      EnterBarrier("second-terminated");                      EnterBarrier("third-terminated");                  }' _config.Second' _config.Third' _config.Fourth);                    RunOn(() =>                  {                      EnterBarrier("subjected-started");                      EnterBarrier("watch-established");                      EnterBarrier("second-terminated");                      EnterBarrier("third-terminated");                  }' _config.Fifth);                    EnterBarrier("after-1");              });
Magic Number,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_receive_terminated_when_watched_node_becomes_down_removed,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  AwaitClusterUp(_config.First' _config.Second' _config.Third' _config.Fourth);                  EnterBarrier("cluster-up");                    RunOn(() =>                  {                      EnterBarrier("subjected-started");                        var path2 = new RootActorPath(GetAddress(_config.Second)) / "user" / "subject";                      var path3 = new RootActorPath(GetAddress(_config.Third)) / "user" / "subject";                      var watchEstablished = new TestLatch(2);                      Sys.ActorOf(Props.Create(() => new Observer(path2' path3' watchEstablished' TestActor))                          .WithDeploy(Deploy.Local)' "observer1");                        watchEstablished.Ready();                      EnterBarrier("watch-established");                      ExpectMsg(path2);                      ExpectNoMsg(TimeSpan.FromSeconds(2));                      EnterBarrier("second-terminated");                      MarkNodeAsUnavailable(GetAddress(_config.Third));                      AwaitAssert(() => Assert.True(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Third))));                      Cluster.Down(GetAddress(_config.Third));                      //removed                      AwaitAssert(() => Assert.False(ClusterView.Members.Select(x => x.Address).Contains(GetAddress(_config.Third))));                      AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Third))));                      ExpectMsg(path3);                      EnterBarrier("third-terminated");                  }' _config.First);                    RunOn(() =>                  {                      Sys.ActorOf(BlackHoleActor.Props' "subject");                      EnterBarrier("subjected-started");                      EnterBarrier("watch-established");                      RunOn(() =>                      {                          MarkNodeAsUnavailable(GetAddress(_config.Second));                          AwaitAssert(() => Assert.True(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Second))));                          Cluster.Down(GetAddress(_config.Second));                          //removed                          AwaitAssert(() => Assert.False(ClusterView.Members.Select(x => x.Address).Contains(GetAddress(_config.Second))));                          AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Second))));                      }' _config.Third);                      EnterBarrier("second-terminated");                      EnterBarrier("third-terminated");                  }' _config.Second' _config.Third' _config.Fourth);                    RunOn(() =>                  {                      EnterBarrier("subjected-started");                      EnterBarrier("watch-established");                      EnterBarrier("second-terminated");                      EnterBarrier("third-terminated");                  }' _config.Fifth);                    EnterBarrier("after-1");              });
Magic Number,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_watch_actor_before_node_joins_cluster_and_cluster_remote_watcher_takes_over_from_remote_watcher,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() => Sys.ActorOf(BlackHoleActor.Props.WithDeploy(Deploy.Local)' "subject5")' _config.Fifth);                  EnterBarrier("subjected-started");                    RunOn(() =>                  {                      Sys.ActorSelection(new RootActorPath(GetAddress(_config.Fifth)) / "user" / "subject5").Tell(new Identify("subject5")' TestActor);                      var subject5 = ExpectMsg<ActorIdentity>().Subject;                      Watch(subject5);                        //fifth is not a cluster member' so the watch is handled by the RemoteWatcher                      AwaitAssert(() =>                      {                          RemoteWatcher.Tell(Remote.RemoteWatcher.Stats.Empty);                          var stats = ExpectMsg<Remote.RemoteWatcher.Stats>();                          stats.WatchingRefs.Contains(new Tuple<IActorRef' IActorRef>(subject5' TestActor)).ShouldBeTrue();                          stats.WatchingAddresses.Contains(GetAddress(_config.Fifth)).ShouldBeTrue();                      });                  }' _config.First);                  EnterBarrier("remote-watch");                    // second and third are already removed                  AwaitClusterUp(_config.First' _config.Fourth' _config.Fifth);                    RunOn(() =>                  {                      // fifth is member' so the watch is handled by the ClusterRemoteWatcher'                      // and cleaned up from RemoteWatcher                      AwaitAssert(() =>                      {                          RemoteWatcher.Tell(Remote.RemoteWatcher.Stats.Empty);                          var stats = ExpectMsg<Remote.RemoteWatcher.Stats>();                          stats.WatchingRefs.Select(x => x.Item1.Path.Name).Contains("subject5").ShouldBeTrue();                          stats.WatchingAddresses.Contains(GetAddress(_config.Fifth)).ShouldBeFalse();                      });                  }' _config.First);                    EnterBarrier("cluster-watch");                    RunOn(() =>                  {                      MarkNodeAsUnavailable(GetAddress(_config.Fifth));                      AwaitAssert(() => ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Fifth)).ShouldBeTrue());                      Cluster.Down(GetAddress(_config.Fifth));                      // removed                      AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Fifth))));                      AwaitAssert(() => Assert.False(ClusterView.Members.Select(x => x.Address).Contains(GetAddress(_config.Fifth))));                  }' _config.Fourth);                    EnterBarrier("fifth-terminated");                  RunOn(() =>                  {                      ExpectMsg<Terminated>().ActorRef.Path.Name.ShouldBe("subject5");                  }' _config.First);                    EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_shutdown_system_when_using_remote_deployed_actor_on_node_that_crashed,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  // fourth actor system will be shutdown' not part of testConductor any more                  // so we can't use barriers to synchronize with it                  var firstAddress = GetAddress(_config.First);                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create(() => new EndActor(TestActor' null))' "end");                  }' _config.First);                  EnterBarrier("end-actor-created");                    RunOn(() =>                  {                      var hello = Sys.ActorOf(BlackHoleActor.Props' "hello");                      Assert.IsType<RemoteActorRef>(hello);                      hello.Path.Address.ShouldBe(GetAddress(_config.First));                      Watch(hello);                      EnterBarrier("hello-deployed");                      MarkNodeAsUnavailable(GetAddress(_config.First));                      AwaitAssert(() => ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.First)).ShouldBeTrue());                      Cluster.Down(GetAddress(_config.First));                      // removed                      AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.First))));                      AwaitAssert(() => Assert.False(ClusterView.Members.Select(x => x.Address).Contains(GetAddress(_config.First))));                        ExpectTerminated(hello);                      EnterBarrier("first-unavailable");                        var timeout = RemainingOrDefault;                      try                      {                          if (!Sys.WhenTerminated.Wait(timeout)) // TestConductor.Shutdown called by First MUST terminate this actor system                          {                              Assert.True(false' String.Format("Failed to stop [{0}] within [{1}]"' Sys.Name' timeout));                          }                      }                      catch (TimeoutException)                      {                          Assert.True(false' String.Format("Failed to stop [{0}] within [{1}]"' Sys.Name' timeout));                      }                                              // signal to the first node that the fourth node is done                      var endSystem = ActorSystem.Create("EndSystem"' Sys.Settings.Config);                      try                      {                          var endProbe = CreateTestProbe(endSystem);                          var endActor = endSystem.ActorOf(Props.Create(() => new EndActor(endProbe.Ref' firstAddress))'                              "end");                          endActor.Tell(EndActor.SendEnd.Instance);                          endProbe.ExpectMsg<EndActor.EndAck>();                      }                      finally                      {                          Shutdown(endSystem' TimeSpan.FromSeconds(10));                      }                        // no barrier here' because it is not part of TestConductor roles any more                    }' _config.Fourth);                    RunOn(() =>                  {                      EnterBarrier("hello-deployed");                      EnterBarrier("first-unavailable");                        // don't end the test until fourth is done                      RunOn(() =>                      {                          // fourth system will be shutdown' remove to not participate in barriers any more                          TestConductor.Shutdown(_config.Fourth).Wait();                          ExpectMsg<EndActor.End>();                      }' _config.First);                        EnterBarrier("after-4");                  }' _config.First' _config.Second' _config.Third' _config.Fifth);                });
Magic Number,Akka.Cluster.Tests.MultiNode,ClusterDeathWatchSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClusterDeathWatchSpec.cs,An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_shutdown_system_when_using_remote_deployed_actor_on_node_that_crashed,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  // fourth actor system will be shutdown' not part of testConductor any more                  // so we can't use barriers to synchronize with it                  var firstAddress = GetAddress(_config.First);                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create(() => new EndActor(TestActor' null))' "end");                  }' _config.First);                  EnterBarrier("end-actor-created");                    RunOn(() =>                  {                      var hello = Sys.ActorOf(BlackHoleActor.Props' "hello");                      Assert.IsType<RemoteActorRef>(hello);                      hello.Path.Address.ShouldBe(GetAddress(_config.First));                      Watch(hello);                      EnterBarrier("hello-deployed");                      MarkNodeAsUnavailable(GetAddress(_config.First));                      AwaitAssert(() => ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.First)).ShouldBeTrue());                      Cluster.Down(GetAddress(_config.First));                      // removed                      AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.First))));                      AwaitAssert(() => Assert.False(ClusterView.Members.Select(x => x.Address).Contains(GetAddress(_config.First))));                        ExpectTerminated(hello);                      EnterBarrier("first-unavailable");                        var timeout = RemainingOrDefault;                      try                      {                          if (!Sys.WhenTerminated.Wait(timeout)) // TestConductor.Shutdown called by First MUST terminate this actor system                          {                              Assert.True(false' String.Format("Failed to stop [{0}] within [{1}]"' Sys.Name' timeout));                          }                      }                      catch (TimeoutException)                      {                          Assert.True(false' String.Format("Failed to stop [{0}] within [{1}]"' Sys.Name' timeout));                      }                                              // signal to the first node that the fourth node is done                      var endSystem = ActorSystem.Create("EndSystem"' Sys.Settings.Config);                      try                      {                          var endProbe = CreateTestProbe(endSystem);                          var endActor = endSystem.ActorOf(Props.Create(() => new EndActor(endProbe.Ref' firstAddress))'                              "end");                          endActor.Tell(EndActor.SendEnd.Instance);                          endProbe.ExpectMsg<EndActor.EndAck>();                      }                      finally                      {                          Shutdown(endSystem' TimeSpan.FromSeconds(10));                      }                        // no barrier here' because it is not part of TestConductor roles any more                    }' _config.Fourth);                    RunOn(() =>                  {                      EnterBarrier("hello-deployed");                      EnterBarrier("first-unavailable");                        // don't end the test until fourth is done                      RunOn(() =>                      {                          // fourth system will be shutdown' remove to not participate in barriers any more                          TestConductor.Shutdown(_config.Fourth).Wait();                          ExpectMsg<EndActor.End>();                      }' _config.First);                        EnterBarrier("after-4");                  }' _config.First' _config.Second' _config.Third' _config.Fifth);                });
Magic Number,Akka.Cluster.Tests.MultiNode,ConvergenceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ConvergenceSpec.cs,A_cluster_of_3_members_must_not_reach_convergence_while_any_nodes_are_unreachable,The following statement contains a magic number: RunOn(() => Within(TimeSpan.FromSeconds(28)' () =>              {                  //third becomes unreachable                  AwaitAssert(() => ClusterView.UnreachableMembers.Count.ShouldBe(1));                  AwaitSeenSameState(GetAddress(_config.First)' GetAddress(_config.Second));                  // still one unreachable                  ClusterView.UnreachableMembers.Count.ShouldBe(1);                  ClusterView.UnreachableMembers.First().Address.ShouldBe(thirdAddress);                  ClusterView.Members.Count.ShouldBe(3);              })' _config.First' _config.Second);
Magic Number,Akka.Cluster.Tests.MultiNode,ConvergenceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ConvergenceSpec.cs,A_cluster_of_3_members_must_not_reach_convergence_while_any_nodes_are_unreachable,The following statement contains a magic number: RunOn(() => Within(TimeSpan.FromSeconds(28)' () =>              {                  //third becomes unreachable                  AwaitAssert(() => ClusterView.UnreachableMembers.Count.ShouldBe(1));                  AwaitSeenSameState(GetAddress(_config.First)' GetAddress(_config.Second));                  // still one unreachable                  ClusterView.UnreachableMembers.Count.ShouldBe(1);                  ClusterView.UnreachableMembers.First().Address.ShouldBe(thirdAddress);                  ClusterView.Members.Count.ShouldBe(3);              })' _config.First' _config.Second);
Magic Number,Akka.Cluster.Tests.MultiNode,ConvergenceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ConvergenceSpec.cs,A_cluster_of_3_members_must_not_move_a_new_joining_node_to_up_while_there_is_no_convergence,The following statement contains a magic number: RunOn(() =>              {                  for (var i = 0; i < 5; i++)                  {                      AwaitAssert(() => ClusterView.Members.Count.ShouldBe(3));                      AwaitSeenSameState(GetAddress(_config.First)' GetAddress(_config.Second)' GetAddress(_config.Fourth));                      MemberStatus(GetAddress(_config.First)).ShouldBe(Akka.Cluster.MemberStatus.Up);                      MemberStatus(GetAddress(_config.Second)).ShouldBe(Akka.Cluster.MemberStatus.Up);                      Assert.True(MemberStatus(GetAddress(_config.Fourth)) == null);                      // wait and then check again                      //TODO: Dilation?                      Thread.Sleep(TimeSpan.FromSeconds(1));                  }              }' _config.First' _config.Second' _config.Fourth);
Magic Number,Akka.Cluster.Tests.MultiNode,ConvergenceSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ConvergenceSpec.cs,A_cluster_of_3_members_must_not_move_a_new_joining_node_to_up_while_there_is_no_convergence,The following statement contains a magic number: RunOn(() =>              {                  for (var i = 0; i < 5; i++)                  {                      AwaitAssert(() => ClusterView.Members.Count.ShouldBe(3));                      AwaitSeenSameState(GetAddress(_config.First)' GetAddress(_config.Second)' GetAddress(_config.Fourth));                      MemberStatus(GetAddress(_config.First)).ShouldBe(Akka.Cluster.MemberStatus.Up);                      MemberStatus(GetAddress(_config.Second)).ShouldBe(Akka.Cluster.MemberStatus.Up);                      Assert.True(MemberStatus(GetAddress(_config.Fourth)) == null);                      // wait and then check again                      //TODO: Dilation?                      Thread.Sleep(TimeSpan.FromSeconds(1));                  }              }' _config.First' _config.Second' _config.Fourth);
Magic Number,Akka.Cluster.Tests.MultiNode,DisallowJoinOfTwoClusterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\DisallowJoinOfTwoClustersSpec.cs,Three_different_clusters_must_not_be_able_to_join,The following statement contains a magic number: int expectedSize = Myself == _config.c1 ? 1 : 2;
Magic Number,Akka.Cluster.Tests.MultiNode,DisallowJoinOfTwoClusterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\DisallowJoinOfTwoClustersSpec.cs,Three_different_clusters_must_not_be_able_to_join,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Akka.Cluster.Tests.MultiNode,DisallowJoinOfTwoClusterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\DisallowJoinOfTwoClustersSpec.cs,Three_different_clusters_must_not_be_able_to_join,The following statement contains a magic number: Enumerable.Range(1' 5)
Magic Number,Akka.Cluster.Tests.MultiNode,InitialHeartbeatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\InitialHeartbeatSpec.cs,A_member_must_detect_failure_even_though_no_heartbeats_have_been_received,The following statement contains a magic number: RunOn(() =>                      AwaitAssert(() =>                      {                          Cluster.SendCurrentClusterState(TestActor);                          Assert.True(                              ExpectMsg<ClusterEvent.CurrentClusterState>()                                  .Members.Select(m => m.Address)                                  .Contains(secondAddress));                      }' TimeSpan.FromSeconds(20)' TimeSpan.FromMilliseconds(50))                      ' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode,InitialHeartbeatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\InitialHeartbeatSpec.cs,A_member_must_detect_failure_even_though_no_heartbeats_have_been_received,The following statement contains a magic number: RunOn(() =>                      AwaitAssert(() =>                      {                          Cluster.SendCurrentClusterState(TestActor);                          Assert.True(                              ExpectMsg<ClusterEvent.CurrentClusterState>()                                  .Members.Select(m => m.Address)                                  .Contains(secondAddress));                      }' TimeSpan.FromSeconds(20)' TimeSpan.FromMilliseconds(50))                      ' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode,InitialHeartbeatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\InitialHeartbeatSpec.cs,A_member_must_detect_failure_even_though_no_heartbeats_have_been_received,The following statement contains a magic number: RunOn(() =>                  {                      Cluster.Join(GetAddress(_config.First));                      AwaitAssert(() =>                      {                          Cluster.SendCurrentClusterState(TestActor);                          Assert.True(                              ExpectMsg<ClusterEvent.CurrentClusterState>()                                  .Members.Select(m => m.Address)                                  .Contains(firstAddress));                      }' TimeSpan.FromSeconds(20)' TimeSpan.FromMilliseconds(50));                  }' _config.Second);
Magic Number,Akka.Cluster.Tests.MultiNode,InitialHeartbeatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\InitialHeartbeatSpec.cs,A_member_must_detect_failure_even_though_no_heartbeats_have_been_received,The following statement contains a magic number: RunOn(() =>                  {                      Cluster.Join(GetAddress(_config.First));                      AwaitAssert(() =>                      {                          Cluster.SendCurrentClusterState(TestActor);                          Assert.True(                              ExpectMsg<ClusterEvent.CurrentClusterState>()                                  .Members.Select(m => m.Address)                                  .Contains(firstAddress));                      }' TimeSpan.FromSeconds(20)' TimeSpan.FromMilliseconds(50));                  }' _config.Second);
Magic Number,Akka.Cluster.Tests.MultiNode,InitialHeartbeatSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\InitialHeartbeatSpec.cs,A_member_must_detect_failure_even_though_no_heartbeats_have_been_received,The following statement contains a magic number: RunOn(                      () => AwaitCondition(                          () => !Cluster.FailureDetector.IsAvailable(GetAddress(_config.First))                          ' TimeSpan.FromSeconds(15))                      ' _config.Second);
Magic Number,Akka.Cluster.Tests.MultiNode,JoinInProgressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinInProgressSpec.cs,A_cluster_node_must_send_heartbeats_immediately_when_joining_to_avoid_false_failure_detection_due_to_delayed_gossip,The following statement contains a magic number: RunOn(() =>              {                  var until = Deadline.Now + TimeSpan.FromSeconds(5);                  while (!until.IsOverdue)                  {                      Thread.Sleep(200);                      Assert.True(Cluster.FailureDetector.IsAvailable(GetAddress(_config.Second)));                  }              }' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode,JoinInProgressSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinInProgressSpec.cs,A_cluster_node_must_send_heartbeats_immediately_when_joining_to_avoid_false_failure_detection_due_to_delayed_gossip,The following statement contains a magic number: RunOn(() =>              {                  var until = Deadline.Now + TimeSpan.FromSeconds(5);                  while (!until.IsOverdue)                  {                      Thread.Sleep(200);                      Assert.True(Cluster.FailureDetector.IsAvailable(GetAddress(_config.Second)));                  }              }' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode,JoinSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinSeedNodeSpec.cs,A_cluster_with_seed_nodes_must_be_able_to_start_the_seed_nodes_concurrently,The following statement contains a magic number: RunOn(() =>              {                  // test that first seed doesn't have to be started first                  Thread.Sleep(3000);              }' _config.Seed1);
Magic Number,Akka.Cluster.Tests.MultiNode,JoinSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\JoinSeedNodeSpec.cs,A_cluster_with_seed_nodes_must_be_able_to_start_the_seed_nodes_concurrently,The following statement contains a magic number: RunOn(() =>              {                  Cluster.JoinSeedNodes(_seedNodes);                  RunOn(() =>                  {                      //verify that we can call this multiple times with no issue                                          Cluster.JoinSeedNodes(_seedNodes);                  }' _config.Seed3);                  AwaitMembersUp(3);              }' _config.Seed1' _config.Seed2' _config.Seed3);
Magic Number,Akka.Cluster.Tests.MultiNode,LeaderLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\LeaderLeavingSpec.cs,A_leader_that_is_leaving_must_be_moved_to_leaving_then_exiting_then_removed_then_be_shut_down_and_then_a_new_leader_should_be_elected,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>                  {                      if (ClusterView.IsLeader)                      {                          EnterBarrier("registered-listener");                            Cluster.Leave(oldLeaderAddress);                          EnterBarrier("leader-left");                            // verify that the LEADER is shut down                          AwaitCondition(() => Cluster.IsTerminated);                          EnterBarrier("leader-shutdown");                      }                      else                      {                          var exitingLatch = new TestLatch();                            var listener = Sys.ActorOf(Props.Create(() => new Listener(oldLeaderAddress' exitingLatch)).WithDeploy(Deploy.Local));                            Cluster.Subscribe(listener' new []{typeof(ClusterEvent.IMemberEvent)});                            EnterBarrier("registered-listener");                            EnterBarrier("leader-left");                            // verify that the LEADER is EXITING                          exitingLatch.Ready(TestLatch.DefaultTimeout);                            EnterBarrier("leader-shutdown");                          MarkNodeAsUnavailable(oldLeaderAddress);                            // verify that the LEADER is no longer part of the 'members' set                          AwaitAssert(() => ClusterView.Members.Select(m => m.Address).Contains(oldLeaderAddress).ShouldBeFalse());                            // verify that the LEADER is not part of the 'unreachable' set                          AwaitAssert(() => ClusterView.UnreachableMembers.Select(m => m.Address).Contains(oldLeaderAddress).ShouldBeFalse());                            // verify that we have a new LEADER                          AwaitAssert(() => ClusterView.Leader.ShouldNotBe(oldLeaderAddress));                      }                        EnterBarrier("finished");                  });
Magic Number,Akka.Cluster.Tests.MultiNode,NodeMembershipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\NodeMembershipSpec.cs,Set_of_connected_cluster_systems_must_with_two_nodes_start_gossiping_to_each_other_so_that_both_nodes_gets_same_gossip_info,The following statement contains a magic number: RunOn(() =>              {                  Cluster.Join(GetAddress(_config.First));                  AwaitAssert(() => ClusterView.Members.Count.ShouldBe(2));                  AssertMembers(ClusterView.Members' GetAddress(_config.First)' GetAddress(_config.Second));                  AwaitAssert(() => ClusterView.Members.All(c => c.Status == MemberStatus.Up).ShouldBeTrue());              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Tests.MultiNode,NodeMembershipSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\NodeMembershipSpec.cs,Set_of_connected_cluster_systems_must_with_three_nodes_start_gossiping_to_each_other_so_that_all_nodes_gets_same_gossip_info,The following statement contains a magic number: AwaitAssert(() => ClusterView.Members.Count.ShouldBe(3));
Magic Number,Akka.Cluster.Tests.MultiNode,MinMembersBeforeUpBase,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\MinMembersBeforeUpSpec.cs,TestWaitMovingMembersToUp,The following statement contains a magic number: RunOn(() =>              {                  var expectedAddresses = new List<Address> { GetAddress(First)' GetAddress(Second) };                  AwaitAssert(() =>                  {                      ClusterView.RefreshCurrentState();                      ClusterView.Members.Select(c => c.Address).Except(expectedAddresses).Count().ShouldBe(0);                  });                  ClusterView.Members.All(c => c.Status == MemberStatus.Joining).ShouldBeTrue();                  // and it should not change                  foreach (var _ in Enumerable.Range(1' 5))                  {                      Thread.Sleep(1000);                      ClusterView.Members.Select(c => c.Address).Except(expectedAddresses).Count().ShouldBe(0);                      ClusterView.Members.All(c => c.Status == MemberStatus.Joining).ShouldBeTrue();                  }              }' First' Second);
Magic Number,Akka.Cluster.Tests.MultiNode,MinMembersBeforeUpBase,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\MinMembersBeforeUpSpec.cs,TestWaitMovingMembersToUp,The following statement contains a magic number: RunOn(() =>              {                  var expectedAddresses = new List<Address> { GetAddress(First)' GetAddress(Second) };                  AwaitAssert(() =>                  {                      ClusterView.RefreshCurrentState();                      ClusterView.Members.Select(c => c.Address).Except(expectedAddresses).Count().ShouldBe(0);                  });                  ClusterView.Members.All(c => c.Status == MemberStatus.Joining).ShouldBeTrue();                  // and it should not change                  foreach (var _ in Enumerable.Range(1' 5))                  {                      Thread.Sleep(1000);                      ClusterView.Members.Select(c => c.Address).Except(expectedAddresses).Count().ShouldBe(0);                      ClusterView.Members.All(c => c.Status == MemberStatus.Joining).ShouldBeTrue();                  }              }' First' Second);
Magic Number,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,RestartFirstSeedNodeSpec,The following statement contains a magic number: _missedSeed = GetAddress(config.Seed3).WithPort(61313);
Magic Number,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,Cluster_seed_nodes__must_be_able_to_restart_first_seed_node_and_join_other_seed_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(40)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create(() => new Listener())                          .WithDeploy(Deploy.Local)' "address-receiver");                        EnterBarrier("seed1-address-receiver-ready");                  }' _config.Seed2' _config.Seed3);                    RunOn(() =>                  {                      EnterBarrier("seed1-address-receiver-ready");                      _seedNode1Address = Cluster.Get(seed1System.Value).SelfAddress;                      foreach (var r in new List<RoleName> { _config.Seed2' _config.Seed3 })                      {                          Sys.ActorSelection(new RootActorPath(GetAddress(r)) / "user" / "address-receiver").Tell(_seedNode1Address);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Seed1);                  EnterBarrier("seed1-address-transfered");                    // now we can join seed1System' seed2' seed3 together                  RunOn(() =>                  {                      Cluster.Get(seed1System.Value).JoinSeedNodes(GetSeedNodes());                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.Count                              .Should()                              .Be(3);                      }' TimeSpan.FromSeconds(10));                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.All(c => c.Status == MemberStatus.Up)                              .Should()                              .BeTrue();                      });                  }' _config.Seed1);                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(GetSeedNodes());                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("started");                    // shutdown seed1System                  RunOn(() =>                  {                      Shutdown(seed1System.Value' RemainingOrDefault);                  }' _config.Seed1);                  EnterBarrier("seed1-shutdown");                    RunOn(() =>                  {                      Cluster.Get(restartedSeed1System.Value).JoinSeedNodes(GetSeedNodes());                      Within(TimeSpan.FromSeconds(20)' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.Count                                  .Should()                                  .Be(3);                          });                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.All(c => c.Status == MemberStatus.Up)                                  .Should()                                  .BeTrue();                          });                      });                  }' _config.Seed1);                    RunOn(() =>                  {                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("seed1-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,Cluster_seed_nodes__must_be_able_to_restart_first_seed_node_and_join_other_seed_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(40)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create(() => new Listener())                          .WithDeploy(Deploy.Local)' "address-receiver");                        EnterBarrier("seed1-address-receiver-ready");                  }' _config.Seed2' _config.Seed3);                    RunOn(() =>                  {                      EnterBarrier("seed1-address-receiver-ready");                      _seedNode1Address = Cluster.Get(seed1System.Value).SelfAddress;                      foreach (var r in new List<RoleName> { _config.Seed2' _config.Seed3 })                      {                          Sys.ActorSelection(new RootActorPath(GetAddress(r)) / "user" / "address-receiver").Tell(_seedNode1Address);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Seed1);                  EnterBarrier("seed1-address-transfered");                    // now we can join seed1System' seed2' seed3 together                  RunOn(() =>                  {                      Cluster.Get(seed1System.Value).JoinSeedNodes(GetSeedNodes());                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.Count                              .Should()                              .Be(3);                      }' TimeSpan.FromSeconds(10));                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.All(c => c.Status == MemberStatus.Up)                              .Should()                              .BeTrue();                      });                  }' _config.Seed1);                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(GetSeedNodes());                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("started");                    // shutdown seed1System                  RunOn(() =>                  {                      Shutdown(seed1System.Value' RemainingOrDefault);                  }' _config.Seed1);                  EnterBarrier("seed1-shutdown");                    RunOn(() =>                  {                      Cluster.Get(restartedSeed1System.Value).JoinSeedNodes(GetSeedNodes());                      Within(TimeSpan.FromSeconds(20)' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.Count                                  .Should()                                  .Be(3);                          });                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.All(c => c.Status == MemberStatus.Up)                                  .Should()                                  .BeTrue();                          });                      });                  }' _config.Seed1);                    RunOn(() =>                  {                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("seed1-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,Cluster_seed_nodes__must_be_able_to_restart_first_seed_node_and_join_other_seed_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(40)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create(() => new Listener())                          .WithDeploy(Deploy.Local)' "address-receiver");                        EnterBarrier("seed1-address-receiver-ready");                  }' _config.Seed2' _config.Seed3);                    RunOn(() =>                  {                      EnterBarrier("seed1-address-receiver-ready");                      _seedNode1Address = Cluster.Get(seed1System.Value).SelfAddress;                      foreach (var r in new List<RoleName> { _config.Seed2' _config.Seed3 })                      {                          Sys.ActorSelection(new RootActorPath(GetAddress(r)) / "user" / "address-receiver").Tell(_seedNode1Address);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Seed1);                  EnterBarrier("seed1-address-transfered");                    // now we can join seed1System' seed2' seed3 together                  RunOn(() =>                  {                      Cluster.Get(seed1System.Value).JoinSeedNodes(GetSeedNodes());                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.Count                              .Should()                              .Be(3);                      }' TimeSpan.FromSeconds(10));                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.All(c => c.Status == MemberStatus.Up)                              .Should()                              .BeTrue();                      });                  }' _config.Seed1);                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(GetSeedNodes());                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("started");                    // shutdown seed1System                  RunOn(() =>                  {                      Shutdown(seed1System.Value' RemainingOrDefault);                  }' _config.Seed1);                  EnterBarrier("seed1-shutdown");                    RunOn(() =>                  {                      Cluster.Get(restartedSeed1System.Value).JoinSeedNodes(GetSeedNodes());                      Within(TimeSpan.FromSeconds(20)' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.Count                                  .Should()                                  .Be(3);                          });                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.All(c => c.Status == MemberStatus.Up)                                  .Should()                                  .BeTrue();                          });                      });                  }' _config.Seed1);                    RunOn(() =>                  {                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("seed1-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,Cluster_seed_nodes__must_be_able_to_restart_first_seed_node_and_join_other_seed_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(40)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create(() => new Listener())                          .WithDeploy(Deploy.Local)' "address-receiver");                        EnterBarrier("seed1-address-receiver-ready");                  }' _config.Seed2' _config.Seed3);                    RunOn(() =>                  {                      EnterBarrier("seed1-address-receiver-ready");                      _seedNode1Address = Cluster.Get(seed1System.Value).SelfAddress;                      foreach (var r in new List<RoleName> { _config.Seed2' _config.Seed3 })                      {                          Sys.ActorSelection(new RootActorPath(GetAddress(r)) / "user" / "address-receiver").Tell(_seedNode1Address);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Seed1);                  EnterBarrier("seed1-address-transfered");                    // now we can join seed1System' seed2' seed3 together                  RunOn(() =>                  {                      Cluster.Get(seed1System.Value).JoinSeedNodes(GetSeedNodes());                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.Count                              .Should()                              .Be(3);                      }' TimeSpan.FromSeconds(10));                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.All(c => c.Status == MemberStatus.Up)                              .Should()                              .BeTrue();                      });                  }' _config.Seed1);                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(GetSeedNodes());                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("started");                    // shutdown seed1System                  RunOn(() =>                  {                      Shutdown(seed1System.Value' RemainingOrDefault);                  }' _config.Seed1);                  EnterBarrier("seed1-shutdown");                    RunOn(() =>                  {                      Cluster.Get(restartedSeed1System.Value).JoinSeedNodes(GetSeedNodes());                      Within(TimeSpan.FromSeconds(20)' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.Count                                  .Should()                                  .Be(3);                          });                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.All(c => c.Status == MemberStatus.Up)                                  .Should()                                  .BeTrue();                          });                      });                  }' _config.Seed1);                    RunOn(() =>                  {                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("seed1-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,Cluster_seed_nodes__must_be_able_to_restart_first_seed_node_and_join_other_seed_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(40)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create(() => new Listener())                          .WithDeploy(Deploy.Local)' "address-receiver");                        EnterBarrier("seed1-address-receiver-ready");                  }' _config.Seed2' _config.Seed3);                    RunOn(() =>                  {                      EnterBarrier("seed1-address-receiver-ready");                      _seedNode1Address = Cluster.Get(seed1System.Value).SelfAddress;                      foreach (var r in new List<RoleName> { _config.Seed2' _config.Seed3 })                      {                          Sys.ActorSelection(new RootActorPath(GetAddress(r)) / "user" / "address-receiver").Tell(_seedNode1Address);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Seed1);                  EnterBarrier("seed1-address-transfered");                    // now we can join seed1System' seed2' seed3 together                  RunOn(() =>                  {                      Cluster.Get(seed1System.Value).JoinSeedNodes(GetSeedNodes());                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.Count                              .Should()                              .Be(3);                      }' TimeSpan.FromSeconds(10));                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.All(c => c.Status == MemberStatus.Up)                              .Should()                              .BeTrue();                      });                  }' _config.Seed1);                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(GetSeedNodes());                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("started");                    // shutdown seed1System                  RunOn(() =>                  {                      Shutdown(seed1System.Value' RemainingOrDefault);                  }' _config.Seed1);                  EnterBarrier("seed1-shutdown");                    RunOn(() =>                  {                      Cluster.Get(restartedSeed1System.Value).JoinSeedNodes(GetSeedNodes());                      Within(TimeSpan.FromSeconds(20)' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.Count                                  .Should()                                  .Be(3);                          });                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.All(c => c.Status == MemberStatus.Up)                                  .Should()                                  .BeTrue();                          });                      });                  }' _config.Seed1);                    RunOn(() =>                  {                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("seed1-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,Cluster_seed_nodes__must_be_able_to_restart_first_seed_node_and_join_other_seed_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(40)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create(() => new Listener())                          .WithDeploy(Deploy.Local)' "address-receiver");                        EnterBarrier("seed1-address-receiver-ready");                  }' _config.Seed2' _config.Seed3);                    RunOn(() =>                  {                      EnterBarrier("seed1-address-receiver-ready");                      _seedNode1Address = Cluster.Get(seed1System.Value).SelfAddress;                      foreach (var r in new List<RoleName> { _config.Seed2' _config.Seed3 })                      {                          Sys.ActorSelection(new RootActorPath(GetAddress(r)) / "user" / "address-receiver").Tell(_seedNode1Address);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Seed1);                  EnterBarrier("seed1-address-transfered");                    // now we can join seed1System' seed2' seed3 together                  RunOn(() =>                  {                      Cluster.Get(seed1System.Value).JoinSeedNodes(GetSeedNodes());                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.Count                              .Should()                              .Be(3);                      }' TimeSpan.FromSeconds(10));                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.All(c => c.Status == MemberStatus.Up)                              .Should()                              .BeTrue();                      });                  }' _config.Seed1);                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(GetSeedNodes());                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("started");                    // shutdown seed1System                  RunOn(() =>                  {                      Shutdown(seed1System.Value' RemainingOrDefault);                  }' _config.Seed1);                  EnterBarrier("seed1-shutdown");                    RunOn(() =>                  {                      Cluster.Get(restartedSeed1System.Value).JoinSeedNodes(GetSeedNodes());                      Within(TimeSpan.FromSeconds(20)' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.Count                                  .Should()                                  .Be(3);                          });                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.All(c => c.Status == MemberStatus.Up)                                  .Should()                                  .BeTrue();                          });                      });                  }' _config.Seed1);                    RunOn(() =>                  {                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("seed1-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,Cluster_seed_nodes__must_be_able_to_restart_first_seed_node_and_join_other_seed_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(40)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create(() => new Listener())                          .WithDeploy(Deploy.Local)' "address-receiver");                        EnterBarrier("seed1-address-receiver-ready");                  }' _config.Seed2' _config.Seed3);                    RunOn(() =>                  {                      EnterBarrier("seed1-address-receiver-ready");                      _seedNode1Address = Cluster.Get(seed1System.Value).SelfAddress;                      foreach (var r in new List<RoleName> { _config.Seed2' _config.Seed3 })                      {                          Sys.ActorSelection(new RootActorPath(GetAddress(r)) / "user" / "address-receiver").Tell(_seedNode1Address);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Seed1);                  EnterBarrier("seed1-address-transfered");                    // now we can join seed1System' seed2' seed3 together                  RunOn(() =>                  {                      Cluster.Get(seed1System.Value).JoinSeedNodes(GetSeedNodes());                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.Count                              .Should()                              .Be(3);                      }' TimeSpan.FromSeconds(10));                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.All(c => c.Status == MemberStatus.Up)                              .Should()                              .BeTrue();                      });                  }' _config.Seed1);                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(GetSeedNodes());                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("started");                    // shutdown seed1System                  RunOn(() =>                  {                      Shutdown(seed1System.Value' RemainingOrDefault);                  }' _config.Seed1);                  EnterBarrier("seed1-shutdown");                    RunOn(() =>                  {                      Cluster.Get(restartedSeed1System.Value).JoinSeedNodes(GetSeedNodes());                      Within(TimeSpan.FromSeconds(20)' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.Count                                  .Should()                                  .Be(3);                          });                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.All(c => c.Status == MemberStatus.Up)                                  .Should()                                  .BeTrue();                          });                      });                  }' _config.Seed1);                    RunOn(() =>                  {                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("seed1-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartFirstSeedNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartFirstSeedNodeSpec.cs,Cluster_seed_nodes__must_be_able_to_restart_first_seed_node_and_join_other_seed_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(40)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create(() => new Listener())                          .WithDeploy(Deploy.Local)' "address-receiver");                        EnterBarrier("seed1-address-receiver-ready");                  }' _config.Seed2' _config.Seed3);                    RunOn(() =>                  {                      EnterBarrier("seed1-address-receiver-ready");                      _seedNode1Address = Cluster.Get(seed1System.Value).SelfAddress;                      foreach (var r in new List<RoleName> { _config.Seed2' _config.Seed3 })                      {                          Sys.ActorSelection(new RootActorPath(GetAddress(r)) / "user" / "address-receiver").Tell(_seedNode1Address);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Seed1);                  EnterBarrier("seed1-address-transfered");                    // now we can join seed1System' seed2' seed3 together                  RunOn(() =>                  {                      Cluster.Get(seed1System.Value).JoinSeedNodes(GetSeedNodes());                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.Count                              .Should()                              .Be(3);                      }' TimeSpan.FromSeconds(10));                      AwaitAssert(() =>                      {                          Cluster.Get(seed1System.Value)                              .ReadView.Members.All(c => c.Status == MemberStatus.Up)                              .Should()                              .BeTrue();                      });                  }' _config.Seed1);                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(GetSeedNodes());                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("started");                    // shutdown seed1System                  RunOn(() =>                  {                      Shutdown(seed1System.Value' RemainingOrDefault);                  }' _config.Seed1);                  EnterBarrier("seed1-shutdown");                    RunOn(() =>                  {                      Cluster.Get(restartedSeed1System.Value).JoinSeedNodes(GetSeedNodes());                      Within(TimeSpan.FromSeconds(20)' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.Count                                  .Should()                                  .Be(3);                          });                          AwaitAssert(() =>                          {                              Cluster.Get(restartedSeed1System.Value)                                  .ReadView.Members.All(c => c.Status == MemberStatus.Up)                                  .Should()                                  .BeTrue();                          });                      });                  }' _config.Seed1);                    RunOn(() =>                  {                      AwaitMembersUp(3);                  }' _config.Seed2' _config.Seed3);                  EnterBarrier("seed1-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,ClusterNodesMustBeAbleToRestartAndJoinAgain,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  // secondSystem is a separate ActorSystem' to be able to simulate restart                  // we must transfer its address to first                  RunOn(() =>                  {                      Sys.ActorOf(c => c.Receive<UniqueAddress>((address' ctx) =>                      {                          _secondUniqueAddress = address;                          ctx.Sender.Tell("ok");                      })' "address-receiver");                        EnterBarrier("second-address-receiver-ready");                    }' _config.First' _config.Third);                    RunOn(() =>                  {                      EnterBarrier("second-address-receiver-ready");                      _secondUniqueAddress = Cluster.Get(_secondSystem.Value).SelfUniqueAddress;                      foreach (var r in new[] {GetAddress(_config.First)' GetAddress(_config.Third)})                      {                          Sys.ActorSelection(new RootActorPath(r) / "user" / "address-receiver").Tell(_secondUniqueAddress);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Second);                  EnterBarrier("second-address-transfered");                    // now we can join first' secondSystem' third together                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(SeedNodes);                      AwaitMembersUp(3);                  }' _config.First' _config.Third);                    RunOn(() =>                  {                      Cluster.Get(_secondSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                  EnterBarrier("started");                    // shutdown _secondSystem                  RunOn(() =>                  {                      // send system message just before shutdown                      _secondSystem.Value.ActorOf(Props.Create(() => new Watcher(GetAddress(_config.First)' TestActor))'                          "testWatcher");                      ExpectMsg<Done>();                        Shutdown(_secondSystem.Value' Remaining);                  }' _config.Second);                    EnterBarrier("second-shutdown");                    // then immediately start restartedSecondSystem' which has the same address as secondSystem                  RunOn(() =>                  {                      Cluster.Get(_secondRestartedSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          Assert.Equal(3' Cluster.Get(Sys).ReadView.Members.Count);                          Assert.True(                              Cluster.Get(Sys)                                  .ReadView.Members.Any(m => m.Address.Equals(SecondUniqueAddress.Address) && m.UniqueAddress.Uid != SecondUniqueAddress.Uid));                      });                  }' _config.First' _config.Third);                    EnterBarrier("second-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,ClusterNodesMustBeAbleToRestartAndJoinAgain,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  // secondSystem is a separate ActorSystem' to be able to simulate restart                  // we must transfer its address to first                  RunOn(() =>                  {                      Sys.ActorOf(c => c.Receive<UniqueAddress>((address' ctx) =>                      {                          _secondUniqueAddress = address;                          ctx.Sender.Tell("ok");                      })' "address-receiver");                        EnterBarrier("second-address-receiver-ready");                    }' _config.First' _config.Third);                    RunOn(() =>                  {                      EnterBarrier("second-address-receiver-ready");                      _secondUniqueAddress = Cluster.Get(_secondSystem.Value).SelfUniqueAddress;                      foreach (var r in new[] {GetAddress(_config.First)' GetAddress(_config.Third)})                      {                          Sys.ActorSelection(new RootActorPath(r) / "user" / "address-receiver").Tell(_secondUniqueAddress);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Second);                  EnterBarrier("second-address-transfered");                    // now we can join first' secondSystem' third together                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(SeedNodes);                      AwaitMembersUp(3);                  }' _config.First' _config.Third);                    RunOn(() =>                  {                      Cluster.Get(_secondSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                  EnterBarrier("started");                    // shutdown _secondSystem                  RunOn(() =>                  {                      // send system message just before shutdown                      _secondSystem.Value.ActorOf(Props.Create(() => new Watcher(GetAddress(_config.First)' TestActor))'                          "testWatcher");                      ExpectMsg<Done>();                        Shutdown(_secondSystem.Value' Remaining);                  }' _config.Second);                    EnterBarrier("second-shutdown");                    // then immediately start restartedSecondSystem' which has the same address as secondSystem                  RunOn(() =>                  {                      Cluster.Get(_secondRestartedSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          Assert.Equal(3' Cluster.Get(Sys).ReadView.Members.Count);                          Assert.True(                              Cluster.Get(Sys)                                  .ReadView.Members.Any(m => m.Address.Equals(SecondUniqueAddress.Address) && m.UniqueAddress.Uid != SecondUniqueAddress.Uid));                      });                  }' _config.First' _config.Third);                    EnterBarrier("second-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,ClusterNodesMustBeAbleToRestartAndJoinAgain,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  // secondSystem is a separate ActorSystem' to be able to simulate restart                  // we must transfer its address to first                  RunOn(() =>                  {                      Sys.ActorOf(c => c.Receive<UniqueAddress>((address' ctx) =>                      {                          _secondUniqueAddress = address;                          ctx.Sender.Tell("ok");                      })' "address-receiver");                        EnterBarrier("second-address-receiver-ready");                    }' _config.First' _config.Third);                    RunOn(() =>                  {                      EnterBarrier("second-address-receiver-ready");                      _secondUniqueAddress = Cluster.Get(_secondSystem.Value).SelfUniqueAddress;                      foreach (var r in new[] {GetAddress(_config.First)' GetAddress(_config.Third)})                      {                          Sys.ActorSelection(new RootActorPath(r) / "user" / "address-receiver").Tell(_secondUniqueAddress);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Second);                  EnterBarrier("second-address-transfered");                    // now we can join first' secondSystem' third together                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(SeedNodes);                      AwaitMembersUp(3);                  }' _config.First' _config.Third);                    RunOn(() =>                  {                      Cluster.Get(_secondSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                  EnterBarrier("started");                    // shutdown _secondSystem                  RunOn(() =>                  {                      // send system message just before shutdown                      _secondSystem.Value.ActorOf(Props.Create(() => new Watcher(GetAddress(_config.First)' TestActor))'                          "testWatcher");                      ExpectMsg<Done>();                        Shutdown(_secondSystem.Value' Remaining);                  }' _config.Second);                    EnterBarrier("second-shutdown");                    // then immediately start restartedSecondSystem' which has the same address as secondSystem                  RunOn(() =>                  {                      Cluster.Get(_secondRestartedSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          Assert.Equal(3' Cluster.Get(Sys).ReadView.Members.Count);                          Assert.True(                              Cluster.Get(Sys)                                  .ReadView.Members.Any(m => m.Address.Equals(SecondUniqueAddress.Address) && m.UniqueAddress.Uid != SecondUniqueAddress.Uid));                      });                  }' _config.First' _config.Third);                    EnterBarrier("second-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,ClusterNodesMustBeAbleToRestartAndJoinAgain,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  // secondSystem is a separate ActorSystem' to be able to simulate restart                  // we must transfer its address to first                  RunOn(() =>                  {                      Sys.ActorOf(c => c.Receive<UniqueAddress>((address' ctx) =>                      {                          _secondUniqueAddress = address;                          ctx.Sender.Tell("ok");                      })' "address-receiver");                        EnterBarrier("second-address-receiver-ready");                    }' _config.First' _config.Third);                    RunOn(() =>                  {                      EnterBarrier("second-address-receiver-ready");                      _secondUniqueAddress = Cluster.Get(_secondSystem.Value).SelfUniqueAddress;                      foreach (var r in new[] {GetAddress(_config.First)' GetAddress(_config.Third)})                      {                          Sys.ActorSelection(new RootActorPath(r) / "user" / "address-receiver").Tell(_secondUniqueAddress);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Second);                  EnterBarrier("second-address-transfered");                    // now we can join first' secondSystem' third together                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(SeedNodes);                      AwaitMembersUp(3);                  }' _config.First' _config.Third);                    RunOn(() =>                  {                      Cluster.Get(_secondSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                  EnterBarrier("started");                    // shutdown _secondSystem                  RunOn(() =>                  {                      // send system message just before shutdown                      _secondSystem.Value.ActorOf(Props.Create(() => new Watcher(GetAddress(_config.First)' TestActor))'                          "testWatcher");                      ExpectMsg<Done>();                        Shutdown(_secondSystem.Value' Remaining);                  }' _config.Second);                    EnterBarrier("second-shutdown");                    // then immediately start restartedSecondSystem' which has the same address as secondSystem                  RunOn(() =>                  {                      Cluster.Get(_secondRestartedSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          Assert.Equal(3' Cluster.Get(Sys).ReadView.Members.Count);                          Assert.True(                              Cluster.Get(Sys)                                  .ReadView.Members.Any(m => m.Address.Equals(SecondUniqueAddress.Address) && m.UniqueAddress.Uid != SecondUniqueAddress.Uid));                      });                  }' _config.First' _config.Third);                    EnterBarrier("second-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,ClusterNodesMustBeAbleToRestartAndJoinAgain,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  // secondSystem is a separate ActorSystem' to be able to simulate restart                  // we must transfer its address to first                  RunOn(() =>                  {                      Sys.ActorOf(c => c.Receive<UniqueAddress>((address' ctx) =>                      {                          _secondUniqueAddress = address;                          ctx.Sender.Tell("ok");                      })' "address-receiver");                        EnterBarrier("second-address-receiver-ready");                    }' _config.First' _config.Third);                    RunOn(() =>                  {                      EnterBarrier("second-address-receiver-ready");                      _secondUniqueAddress = Cluster.Get(_secondSystem.Value).SelfUniqueAddress;                      foreach (var r in new[] {GetAddress(_config.First)' GetAddress(_config.Third)})                      {                          Sys.ActorSelection(new RootActorPath(r) / "user" / "address-receiver").Tell(_secondUniqueAddress);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Second);                  EnterBarrier("second-address-transfered");                    // now we can join first' secondSystem' third together                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(SeedNodes);                      AwaitMembersUp(3);                  }' _config.First' _config.Third);                    RunOn(() =>                  {                      Cluster.Get(_secondSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                  EnterBarrier("started");                    // shutdown _secondSystem                  RunOn(() =>                  {                      // send system message just before shutdown                      _secondSystem.Value.ActorOf(Props.Create(() => new Watcher(GetAddress(_config.First)' TestActor))'                          "testWatcher");                      ExpectMsg<Done>();                        Shutdown(_secondSystem.Value' Remaining);                  }' _config.Second);                    EnterBarrier("second-shutdown");                    // then immediately start restartedSecondSystem' which has the same address as secondSystem                  RunOn(() =>                  {                      Cluster.Get(_secondRestartedSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          Assert.Equal(3' Cluster.Get(Sys).ReadView.Members.Count);                          Assert.True(                              Cluster.Get(Sys)                                  .ReadView.Members.Any(m => m.Address.Equals(SecondUniqueAddress.Address) && m.UniqueAddress.Uid != SecondUniqueAddress.Uid));                      });                  }' _config.First' _config.Third);                    EnterBarrier("second-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,RestartNodeSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\RestartNodeSpec.cs,ClusterNodesMustBeAbleToRestartAndJoinAgain,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  // secondSystem is a separate ActorSystem' to be able to simulate restart                  // we must transfer its address to first                  RunOn(() =>                  {                      Sys.ActorOf(c => c.Receive<UniqueAddress>((address' ctx) =>                      {                          _secondUniqueAddress = address;                          ctx.Sender.Tell("ok");                      })' "address-receiver");                        EnterBarrier("second-address-receiver-ready");                    }' _config.First' _config.Third);                    RunOn(() =>                  {                      EnterBarrier("second-address-receiver-ready");                      _secondUniqueAddress = Cluster.Get(_secondSystem.Value).SelfUniqueAddress;                      foreach (var r in new[] {GetAddress(_config.First)' GetAddress(_config.Third)})                      {                          Sys.ActorSelection(new RootActorPath(r) / "user" / "address-receiver").Tell(_secondUniqueAddress);                          ExpectMsg("ok"' TimeSpan.FromSeconds(5));                      }                  }' _config.Second);                  EnterBarrier("second-address-transfered");                    // now we can join first' secondSystem' third together                  RunOn(() =>                  {                      Cluster.JoinSeedNodes(SeedNodes);                      AwaitMembersUp(3);                  }' _config.First' _config.Third);                    RunOn(() =>                  {                      Cluster.Get(_secondSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                  EnterBarrier("started");                    // shutdown _secondSystem                  RunOn(() =>                  {                      // send system message just before shutdown                      _secondSystem.Value.ActorOf(Props.Create(() => new Watcher(GetAddress(_config.First)' TestActor))'                          "testWatcher");                      ExpectMsg<Done>();                        Shutdown(_secondSystem.Value' Remaining);                  }' _config.Second);                    EnterBarrier("second-shutdown");                    // then immediately start restartedSecondSystem' which has the same address as secondSystem                  RunOn(() =>                  {                      Cluster.Get(_secondRestartedSystem.Value).JoinSeedNodes(SeedNodes);                      AwaitAssert(() => Assert.Equal(3' Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Count));                      AwaitAssert(() => Assert.True(Cluster.Get(_secondRestartedSystem.Value).ReadView.Members.Select(x => x.Status).All(s => s == MemberStatus.Up)));                  }' _config.Second);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          Assert.Equal(3' Cluster.Get(Sys).ReadView.Members.Count);                          Assert.True(                              Cluster.Get(Sys)                                  .ReadView.Members.Any(m => m.Address.Equals(SecondUniqueAddress.Address) && m.UniqueAddress.Uid != SecondUniqueAddress.Uid));                      });                  }' _config.First' _config.Third);                    EnterBarrier("second-restarted");              });
Magic Number,Akka.Cluster.Tests.MultiNode,UnreachableNodeJoinsAgainSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\UnreachableNodeJoinsAgainSpec.cs,MarkNodeAsUNREACHABLEWhenWePullTheNetwork,The following statement contains a magic number: Thread.Sleep(Dilated(TimeSpan.FromSeconds(2)));
Magic Number,Akka.Cluster.Tests.MultiNode,UnreachableNodeJoinsAgainSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\UnreachableNodeJoinsAgainSpec.cs,MarkNodeAsUNREACHABLEWhenWePullTheNetwork,The following statement contains a magic number: RunOn(() =>              {                  var victimAddress = GetAddress(_victim.Value);                  allButVictim.ForEach(name => MarkNodeAsUnavailable(GetAddress(name)));                  Within(TimeSpan.FromSeconds(30)' () =>                  {                      // victim becomes all alone                      AwaitAssert(() =>                      {                          var members = ClusterView.Members; // to snapshot the object                          Assert.Equal(Roles.Count - 1' ClusterView.UnreachableMembers.Count);                      });                      var addresses = allButVictim.Select(GetAddress).ToList();                      Assert.True(ClusterView.UnreachableMembers.Select(x => x.Address).All(y => addresses.Contains(y)));                  });              }' _victim.Value);
Magic Number,Akka.Cluster.Tests.MultiNode,UnreachableNodeJoinsAgainSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\UnreachableNodeJoinsAgainSpec.cs,MarkNodeAsUNREACHABLEWhenWePullTheNetwork,The following statement contains a magic number: RunOn(() =>              {                  MarkNodeAsUnavailable(GetAddress(_victim.Value));                  Within(TimeSpan.FromSeconds(30)' () =>                  {                      // victim becomes unreachable                      AwaitAssert(() =>                      {                          var members = ClusterView.Members; // to snapshot the object                          Assert.Equal(1' ClusterView.UnreachableMembers.Count);                      });                      AwaitSeenSameState(allButVictim.Select(GetAddress).ToArray());                        // still once unreachable                      Assert.Equal(1' ClusterView.UnreachableMembers.Count);                      Assert.Equal(Node(_victim.Value).Address' ClusterView.UnreachableMembers.First().Address);                      Assert.Equal(MemberStatus.Up' ClusterView.UnreachableMembers.First().Status);                  });              }' allButVictim);
Magic Number,Akka.Cluster.Tests.MultiNode,UnreachableNodeJoinsAgainSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\UnreachableNodeJoinsAgainSpec.cs,MarkTheNodeAsDOWN,The following statement contains a magic number: RunOn(() =>              {                  // eventually removed                  AwaitMembersUp(Roles.Count - 1' ImmutableHashSet.Create(GetAddress(_victim.Value)));                  AwaitAssert(() => Assert.True(ClusterView.UnreachableMembers.IsEmpty)' TimeSpan.FromSeconds(15));                  var addresses = allButVictim.Select(GetAddress).ToList();                  AwaitAssert(() => Assert.True(ClusterView.Members.Select(x => x.Address).All(y => addresses.Contains(y))));              }' allButVictim);
Magic Number,Akka.Cluster.Tests.MultiNode,UnreachableNodeJoinsAgainSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\UnreachableNodeJoinsAgainSpec.cs,AllowFreshNodeWithSameHostAndPortToJoinAgainWhenTheNetworkIsPluggedBackIn,The following statement contains a magic number: RunOn(() =>              {                  var victimAddress = Sys.AsInstanceOf<ExtendedActorSystem>().Provider.DefaultAddress;                  Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(10));                    // create new ActorSystem with same host:port                  var freshSystem = ActorSystem.Create(Sys.Name' ConfigurationFactory.ParseString(@"akka.remote.helios.tcp{                      hostname = "+ victimAddress.Host + @"                      port = "+ victimAddress.Port + @"                  }").WithFallback(Sys.Settings.Config));                    try                  {                      Cluster.Get(freshSystem).Join(masterAddress);                      Within(TimeSpan.FromSeconds(15)' () =>                      {                          AwaitAssert(() => Assert.True(Cluster.Get(freshSystem).ReadView.Members.Select(x => x.Address).Contains(victimAddress)));                          AwaitAssert(() => Assert.Equal(expectedNumberOfMembers'Cluster.Get(freshSystem).ReadView.Members.Count));                          AwaitAssert(() => Assert.True(Cluster.Get(freshSystem).ReadView.Members.All(y => y.Status == MemberStatus.Up)));                      });                        // signal to master node that victim is done                      var endProbe = CreateTestProbe(freshSystem);                      var endActor = freshSystem.ActorOf(Props.Create(() => new EndActor(endProbe.Ref' masterAddress))'                          "end");                      endActor.Tell(EndActor.SendEnd.Instance);                      endProbe.ExpectMsg<EndActor.EndAck>();                  }                  finally                  {                      Shutdown(freshSystem);                  }                  // no barrier here' because it is not part of testConductor roles any more              }' _victim.Value);
Magic Number,Akka.Cluster.Tests.MultiNode,UnreachableNodeJoinsAgainSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\UnreachableNodeJoinsAgainSpec.cs,AllowFreshNodeWithSameHostAndPortToJoinAgainWhenTheNetworkIsPluggedBackIn,The following statement contains a magic number: RunOn(() =>              {                  var victimAddress = Sys.AsInstanceOf<ExtendedActorSystem>().Provider.DefaultAddress;                  Sys.WhenTerminated.Wait(TimeSpan.FromSeconds(10));                    // create new ActorSystem with same host:port                  var freshSystem = ActorSystem.Create(Sys.Name' ConfigurationFactory.ParseString(@"akka.remote.helios.tcp{                      hostname = "+ victimAddress.Host + @"                      port = "+ victimAddress.Port + @"                  }").WithFallback(Sys.Settings.Config));                    try                  {                      Cluster.Get(freshSystem).Join(masterAddress);                      Within(TimeSpan.FromSeconds(15)' () =>                      {                          AwaitAssert(() => Assert.True(Cluster.Get(freshSystem).ReadView.Members.Select(x => x.Address).Contains(victimAddress)));                          AwaitAssert(() => Assert.Equal(expectedNumberOfMembers'Cluster.Get(freshSystem).ReadView.Members.Count));                          AwaitAssert(() => Assert.True(Cluster.Get(freshSystem).ReadView.Members.All(y => y.Status == MemberStatus.Up)));                      });                        // signal to master node that victim is done                      var endProbe = CreateTestProbe(freshSystem);                      var endActor = freshSystem.ActorOf(Props.Create(() => new EndActor(endProbe.Ref' masterAddress))'                          "end");                      endActor.Tell(EndActor.SendEnd.Instance);                      endProbe.ExpectMsg<EndActor.EndAck>();                  }                  finally                  {                      Shutdown(freshSystem);                  }                  // no barrier here' because it is not part of testConductor roles any more              }' _victim.Value);
Magic Number,Akka.Cluster.Tests.MultiNode,UnreachableNodeJoinsAgainSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\UnreachableNodeJoinsAgainSpec.cs,AllowFreshNodeWithSameHostAndPortToJoinAgainWhenTheNetworkIsPluggedBackIn,The following statement contains a magic number: RunOn(() =>              {                  AwaitMembersUp(expectedNumberOfMembers);                  // don't end the test until the freshSystem is done                  RunOn(() =>                  {                      ExpectMsg<EndActor.End>(TimeSpan.FromSeconds(20));                  }' _master.Value);                  EndBarrier();              }' AllBut(_victim.Value).ToArray());
Magic Number,Akka.Cluster.TestKit,ClientDowningNodeThatIsUpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClientDowningNodeThatIsUpSpec.cs,Client_of_4_node_cluster_must_be_able_to_DOWN_a_node_that_is_UP,The following statement contains a magic number: RunOn(() =>              {                  Cluster.Down(thirdAddress);                  EnterBarrier("down-third-node");                    MarkNodeAsUnavailable(thirdAddress);                    AwaitMembersUp(3' ImmutableHashSet.Create(thirdAddress));                    ClusterView.Members.Any(x => x.Address == thirdAddress).ShouldBeFalse();              }' _config.First);
Magic Number,Akka.Cluster.TestKit,ClientDowningNodeThatIsUpSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\ClientDowningNodeThatIsUpSpec.cs,Client_of_4_node_cluster_must_be_able_to_DOWN_a_node_that_is_UP,The following statement contains a magic number: RunOn(() =>              {                  EnterBarrier("down-third-node");                    AwaitMembersUp(3' ImmutableHashSet.Create(thirdAddress));              }' _config.Second' _config.Fourth);
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingGroupSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingGroupSpec.cs,A_cluster_router_with_consistent_hashing_group_must_send_to_same_destinations_from_different_nodes,The following statement contains a magic number: var router =                  Sys.ActorOf(                      new ClusterRouterGroup(new ConsistentHashingGroup(paths).WithHashMapping(hashMapping)'                          new ClusterRouterGroupSettings(10' true' null' ImmutableHashSet.Create(paths.ToArray())))                          .Props()' "router");
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingGroupSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingGroupSpec.cs,A_cluster_router_with_consistent_hashing_group_must_send_to_same_destinations_from_different_nodes,The following statement contains a magic number: AwaitAssert(() =>              {                  var members = CurrentRoutees(router).Members;                  members.Count().ShouldBe(3);              });
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingGroupSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingGroupSpec.cs,A_cluster_router_with_consistent_hashing_group_must_send_to_same_destinations_from_different_nodes,The following statement contains a magic number: Enumerable.Range(1' 10).SelectMany(i => keys)
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,AssertHashMapping,The following statement contains a magic number: AwaitAssert(() =>              {                  CurrentRoutees(router).Members.Count().ShouldBe(6);              });
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_create_routees_from_configuration,The following statement contains a magic number: RunOn(() =>              {                  // it may take some time until router receives cluster member events                  AwaitAssert(() =>                  {                      CurrentRoutees(Router1).Members.Count().ShouldBe(4);                  });                  var routees = CurrentRoutees(Router1);                  var routerMembers = routees.Members.Select(x => FullAddress(((ActorRefRoutee)x).Actor)).Distinct().ToList();                  routerMembers.ShouldBe(new List<Address>(){ GetAddress(_config.First)' GetAddress(_config.Second) });              }' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_deploy_routees_to_new_member_nodes_in_the_cluster,The following statement contains a magic number: RunOn(() =>              {                  //it may take some time until router receives cluster member events                  AwaitAssert(() =>                  {                      CurrentRoutees(Router1).Members.Count().ShouldBe(6);                  });                  var routees = CurrentRoutees(Router1);                  var routerMembers = routees.Members.Select(x => FullAddress(((ActorRefRoutee)x).Actor)).Distinct().ToList();                  routerMembers.ShouldBe(Roles.Select(GetAddress).ToList());              }' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_deploy_programatically_defined_routees_to_the_member_nodes_in_the_cluster,The following statement contains a magic number: RunOn(() =>              {                  var router2 =                      Sys.ActorOf(                          new ClusterRouterPool(local: new ConsistentHashingPool(0)'                              settings: new ClusterRouterPoolSettings(totalInstances: 10' maxInstancesPerNode: 2'                                  allowLocalRoutees: true' useRole: null)).Props(Props.Create<ConsistentHashingRouterMultiNodeConfig.Echo>())' "router2");                    //it may take some time until router receives cluster member events                  AwaitAssert(() =>                  {                      var members = CurrentRoutees(router2).Members.Count();                      members.ShouldBe(6);                  });                  var routees = CurrentRoutees(router2);                  var routerMembers = routees.Members.Select(x => FullAddress(((ActorRefRoutee)x).Actor)).Distinct().ToList();                  routerMembers.ShouldBe(Roles.Select(GetAddress).ToList());              }' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_deploy_programatically_defined_routees_to_the_member_nodes_in_the_cluster,The following statement contains a magic number: RunOn(() =>              {                  var router2 =                      Sys.ActorOf(                          new ClusterRouterPool(local: new ConsistentHashingPool(0)'                              settings: new ClusterRouterPoolSettings(totalInstances: 10' maxInstancesPerNode: 2'                                  allowLocalRoutees: true' useRole: null)).Props(Props.Create<ConsistentHashingRouterMultiNodeConfig.Echo>())' "router2");                    //it may take some time until router receives cluster member events                  AwaitAssert(() =>                  {                      var members = CurrentRoutees(router2).Members.Count();                      members.ShouldBe(6);                  });                  var routees = CurrentRoutees(router2);                  var routerMembers = routees.Members.Select(x => FullAddress(((ActorRefRoutee)x).Actor)).Distinct().ToList();                  routerMembers.ShouldBe(Roles.Select(GetAddress).ToList());              }' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_deploy_programatically_defined_routees_to_the_member_nodes_in_the_cluster,The following statement contains a magic number: RunOn(() =>              {                  var router2 =                      Sys.ActorOf(                          new ClusterRouterPool(local: new ConsistentHashingPool(0)'                              settings: new ClusterRouterPoolSettings(totalInstances: 10' maxInstancesPerNode: 2'                                  allowLocalRoutees: true' useRole: null)).Props(Props.Create<ConsistentHashingRouterMultiNodeConfig.Echo>())' "router2");                    //it may take some time until router receives cluster member events                  AwaitAssert(() =>                  {                      var members = CurrentRoutees(router2).Members.Count();                      members.ShouldBe(6);                  });                  var routees = CurrentRoutees(router2);                  var routerMembers = routees.Members.Select(x => FullAddress(((ActorRefRoutee)x).Actor)).Distinct().ToList();                  routerMembers.ShouldBe(Roles.Select(GetAddress).ToList());              }' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_handle_combination_of_configured_router_and_programatically_defined_hash_mapping_and_cluster_config,The following statement contains a magic number: RunOn(() =>              {                  ConsistentHashMapping hashMapping = msg =>                  {                      if (msg is string) return msg;                      return null;                  };                    var router4 =                      Sys.ActorOf(                          new ClusterRouterPool(local: new ConsistentHashingPool(0).WithHashMapping(hashMapping)'                              settings: new ClusterRouterPoolSettings(totalInstances: 10' maxInstancesPerNode: 2'                                  allowLocalRoutees: true' useRole: null)).Props(Props.Create<ConsistentHashingRouterMultiNodeConfig.Echo>())' "router4");                    AssertHashMapping(router4);              }' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_handle_combination_of_configured_router_and_programatically_defined_hash_mapping_and_cluster_config,The following statement contains a magic number: RunOn(() =>              {                  ConsistentHashMapping hashMapping = msg =>                  {                      if (msg is string) return msg;                      return null;                  };                    var router4 =                      Sys.ActorOf(                          new ClusterRouterPool(local: new ConsistentHashingPool(0).WithHashMapping(hashMapping)'                              settings: new ClusterRouterPoolSettings(totalInstances: 10' maxInstancesPerNode: 2'                                  allowLocalRoutees: true' useRole: null)).Props(Props.Create<ConsistentHashingRouterMultiNodeConfig.Echo>())' "router4");                    AssertHashMapping(router4);              }' _config.First);
Magic Number,Akka.Cluster.Tests.MultiNode.Routing,ClusterConsistentHashingRouterSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Cluster.Tests.MultiNode\Routing\ClusterConsistentHashingRouterSpec.cs,A_cluster_router_with_consistent_hashing_pool_must_remove_routees_from_downed_node,The following statement contains a magic number: RunOn(() =>              {                  Cluster.Down(GetAddress(_config.Third));                  //removed                  AwaitAssert(() => Assert.False(ClusterView.UnreachableMembers.Select(x => x.Address).Contains(GetAddress(_config.Third))));                  AwaitAssert(() => Assert.False(ClusterView.Members.Select(x => x.Address).Contains(GetAddress(_config.Third))));                    // it may take some time until router receives cluster member events                  AwaitAssert(() =>                  {                      CurrentRoutees(Router1).Members.Count().ShouldBe(4);                  });                  var routees = CurrentRoutees(Router1);                  var routerMembers = routees.Members.Select(x => FullAddress(((ActorRefRoutee)x).Actor)).Distinct().ToList();                  routerMembers.ShouldBe(new List<Address>() { GetAddress(_config.First)' GetAddress(_config.Second) });                }' _config.First);
