Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,GetConfig,The length of the statement  "            return ConfigurationFactory.ParseString("akka.actor.provider = \"Akka.Cluster.ClusterActorRefProvider' Akka.Cluster\""); " is 120.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingLeavingSpec.cs,Join,The length of the statement  "                    AwaitAssert(() => Assert.True(Cluster.ReadView.State.Members.Any(m => m.UniqueAddress == Cluster.SelfUniqueAddress && m.Status == MemberStatus.Up))); " is 149.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,CreateRegion,The length of the statement  "            var settings = ClusterShardingSettings.Create(config' Sys.Settings.Config.GetConfig("akka.cluster.singleton")).WithRememberEntities(rememberEntities); " is 150.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_failover_shards_on_crashed_node,The length of the statement  "                if (!Log.IsDebugEnabled) Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(x => true)' new PredicateMatcher(x => true)))); " is 148.
Virtual Method Call from Constructor,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterShardingFailureSpec,The constructor "ClusterShardingFailureSpec" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingGracefulShutdownSpec.cs,ClusterShardingGracefulShutdownSpec,The constructor "ClusterShardingGracefulShutdownSpec" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingLeavingSpec.cs,ClusterShardinLeavingSpec,The constructor "ClusterShardinLeavingSpec" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterShardingSpec,The constructor "ClusterShardingSpec" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Cluster.Sharding.Tests,LeastShardAllocationStrategySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\LeastShardAllocationStrategySpec.cs,LeastShardAllocationStrategySpec,The constructor "LeastShardAllocationStrategySpec" calls a virtual method "ActorOf".
Virtual Method Call from Constructor,Akka.Cluster.Sharding.Tests,LeastShardAllocationStrategySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\LeastShardAllocationStrategySpec.cs,LeastShardAllocationStrategySpec,The constructor "LeastShardAllocationStrategySpec" calls a virtual method "ActorOf".
Virtual Method Call from Constructor,Akka.Cluster.Sharding.Tests,LeastShardAllocationStrategySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\LeastShardAllocationStrategySpec.cs,LeastShardAllocationStrategySpec,The constructor "LeastShardAllocationStrategySpec" calls a virtual method "ActorOf".
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(5)' config.GetTimeSpan("coordinator-failure-backoff"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(2)' config.GetTimeSpan("retry-interval"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(100000' config.GetInt("buffer-size"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(60)' config.GetTimeSpan("handoff-timeout"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(10)' config.GetTimeSpan("shard-start-timeout"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(10)' config.GetTimeSpan("entity-restart-backoff"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(10)' config.GetTimeSpan("rebalance-interval"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(5)' config.GetTimeSpan("waiting-for-state-timeout"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(5)' config.GetTimeSpan("updating-state-timeout"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(10' config.GetInt("least-shard-allocation-strategy.rebalance-threshold"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(3' config.GetInt("least-shard-allocation-strategy.max-simultaneous-rebalance"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingConfigSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingConfigSpec.cs,Should_cluster_sharding_settings_have_default_config,The following statement contains a magic number: Assert.Equal(10' singletonConfig.GetInt("min-number-of-hand-over-retries"));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_first' _first);                  Join(_second' _first);                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("21"' 3));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 1);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 2);                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                  }' _first);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_first' _first);                  Join(_second' _first);                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("21"' 3));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 1);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 2);                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                  }' _first);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_first' _first);                  Join(_second' _first);                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("21"' 3));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 1);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 2);                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                  }' _first);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_first' _first);                  Join(_second' _first);                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("21"' 3));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 1);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 2);                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                  }' _first);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_first' _first);                  Join(_second' _first);                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("21"' 3));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 1);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 2);                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                  }' _first);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_should_recover_after_journal_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      TestConductor.Blackhole(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.Blackhole(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _first);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      TestConductor.PassThrough(_controller' _first' ThrottleTransportAdapter.Direction.Both).Wait();                      TestConductor.PassThrough(_controller' _second' ThrottleTransportAdapter.Direction.Both).Wait();                  }' _controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                      region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _first);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingGracefulShutdownSpec.cs,StartSharding,The following statement contains a magic number: var allocationStrategy = new LeastShardAllocationStrategy(2' 1);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_start_some_shards_in_both_regions,The following statement contains a magic number: AwaitAssert(() =>              {                  var probe = CreateTestProbe();                  var regionAddresses = Enumerable.Range(1' 100)                      .Select(n =>                      {                          _region.Value.Tell(n' probe.Ref);                          probe.ExpectMsg(n' TimeSpan.FromSeconds(1));                          return probe.LastSender.Path.Address;                      })                      .ToArray();                    Assert.Equal(2' regionAddresses.Length);              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_start_some_shards_in_both_regions,The following statement contains a magic number: AwaitAssert(() =>              {                  var probe = CreateTestProbe();                  var regionAddresses = Enumerable.Range(1' 100)                      .Select(n =>                      {                          _region.Value.Tell(n' probe.Ref);                          probe.ExpectMsg(n' TimeSpan.FromSeconds(1));                          return probe.LastSender.Path.Address;                      })                      .ToArray();                    Assert.Equal(2' regionAddresses.Length);              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_gracefully_shutdown_a_region,The following statement contains a magic number: RunOn(() =>              {                  var probe = CreateTestProbe();                  for (int i = 1; i <= 200; i++)                  {                      _region.Value.Tell(i' probe.Ref);                      probe.ExpectMsg(i' TimeSpan.FromSeconds(1));                      Assert.Equal(_region.Value.Path / i.ToString() / i.ToString()' probe.LastSender.Path);                  }              }' _first);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingLeavingSpec.cs,Join,The following statement contains a magic number: RunOn(() =>              {                  Cluster.Join(Node(to).Address);                  StartSharding();                  Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() => Assert.True(Cluster.ReadView.State.Members.Any(m => m.UniqueAddress == Cluster.SelfUniqueAddress && m.Status == MemberStatus.Up)));                  });              }' from);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingLeavingSpec.cs,ClusterSharding_with_leaving_member_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_first' _first);                  Join(_second' _first);                  Join(_third' _first);                  Join(_fourth' _first);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingLeavingSpec.cs,ClusterSharding_with_leaving_member_should_initialize_shards,The following statement contains a magic number: RunOn(() =>              {                  var shardLocations = Sys.ActorOf(Props.Create<ShardLocations>()' "shardLocations");                  var locations = Enumerable.Range(1' 10)                      .Select(n =>                      {                          var id = n.ToString();                          _region.Value.Tell(new Ping(id));                          return new KeyValuePair<string' IActorRef>(id' ExpectMsg<IActorRef>());                      })                      .ToDictionary(kv => kv.Key' kv => kv.Value);                    shardLocations.Tell(new Locations(locations));              }' _first);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingLeavingSpec.cs,ClusterSharding_with_leaving_member_should_recover_after_leaving_coordinator_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      Cluster.Leave(Node(_first).Address);                  }' _third);                    RunOn(() =>                  {                      var region = _region.Value;                      Watch(region);                      ExpectTerminated(region' TimeSpan.FromSeconds(15));                  }' _first);                  EnterBarrier("stopped");                    RunOn(() =>                  {                      Sys.ActorSelection(Node(_first) / "user" / "sharedLocations").Tell(GetLocations.Instance);                      var locations = ExpectMsg<Locations>();                      var firstAddress = Node(_first).Address;                      AwaitAssert(() =>                      {                          var region = _region.Value;                          var probe = CreateTestProbe();                          foreach (var kv in locations.LocationMap)                          {                              var id = kv.Key;                              var r = kv.Value;                              region.Tell(new Ping(id)' probe.Ref);                              if (r.Path.Address.Equals(firstAddress))                              {                                  Assert.NotEqual(r' probe.ExpectMsg<IActorRef>(TimeSpan.FromSeconds(1)));                              }                              else                              {                                  probe.ExpectMsg(r' TimeSpan.FromSeconds(1)); // should not move                              }                          }                      });                  }' _second' _third' _fourth);                  EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingLeavingSpec.cs,ClusterSharding_with_leaving_member_should_recover_after_leaving_coordinator_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      Cluster.Leave(Node(_first).Address);                  }' _third);                    RunOn(() =>                  {                      var region = _region.Value;                      Watch(region);                      ExpectTerminated(region' TimeSpan.FromSeconds(15));                  }' _first);                  EnterBarrier("stopped");                    RunOn(() =>                  {                      Sys.ActorSelection(Node(_first) / "user" / "sharedLocations").Tell(GetLocations.Instance);                      var locations = ExpectMsg<Locations>();                      var firstAddress = Node(_first).Address;                      AwaitAssert(() =>                      {                          var region = _region.Value;                          var probe = CreateTestProbe();                          foreach (var kv in locations.LocationMap)                          {                              var id = kv.Key;                              var r = kv.Value;                              region.Tell(new Ping(id)' probe.Ref);                              if (r.Path.Address.Equals(firstAddress))                              {                                  Assert.NotEqual(r' probe.ExpectMsg<IActorRef>(TimeSpan.FromSeconds(1)));                              }                              else                              {                                  probe.ExpectMsg(r' TimeSpan.FromSeconds(1)); // should not move                              }                          }                      });                  }' _second' _third' _fourth);                  EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Sharding.Tests,Counter,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Counter,The following statement contains a magic number: Context.SetReceiveTimeout(TimeSpan.FromMinutes(2));
Magic Number,Akka.Cluster.Sharding.Tests,Counter,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,PostStop,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,CreateCoordinator,The following statement contains a magic number: var singletonProps = Props.Create(() => new BackoffSupervisor(                      CoordinatorProps(typeName' rebalanceEnabled)'                      "coordinator"'                      TimeSpan.FromSeconds(5)'                      TimeSpan.FromSeconds(5)'                      0.1)).WithDeploy(Deploy.Local);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,CreateCoordinator,The following statement contains a magic number: var singletonProps = Props.Create(() => new BackoffSupervisor(                      CoordinatorProps(typeName' rebalanceEnabled)'                      "coordinator"'                      TimeSpan.FromSeconds(5)'                      TimeSpan.FromSeconds(5)'                      0.1)).WithDeploy(Deploy.Local);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,CreateCoordinator,The following statement contains a magic number: var singletonProps = Props.Create(() => new BackoffSupervisor(                      CoordinatorProps(typeName' rebalanceEnabled)'                      "coordinator"'                      TimeSpan.FromSeconds(5)'                      TimeSpan.FromSeconds(5)'                      0.1)).WithDeploy(Deploy.Local);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,CoordinatorProps,The following statement contains a magic number: var allocationStrategy = new LeastShardAllocationStrategy(2' 1);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_work_in_single_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_first' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(1));                        ExpectMsg(2);                      r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(m => m.Regions.Length == 1 && m.Regions[0].Equals(Cluster.SelfAddress));                  }' _first);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_work_in_single_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_first' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(1));                        ExpectMsg(2);                      r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(m => m.Regions.Length == 1 && m.Regions[0].Equals(Cluster.SelfAddress));                  }' _first);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_second' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "2" / "2"' LastSender.Path);                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      // local on first                      Assert.Equal(r.Path / "11" / "11"' LastSender.Path);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      Assert.Equal(Node(_second) / "user" / "counterRegion" / "0" / "12"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      Assert.Equal(r.Path / "2" / "2"' LastSender.Path);                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.Length == 2                                                     && x.Regions[0].Equals(Cluster.SelfAddress)                                                     && x.Regions[1].Equals(Node(_first).Address));                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3); //TODO: shouldn't we tell increment 3x first?                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3); //TODO: shouldn't we tell increment 3x first?                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3); //TODO: shouldn't we tell increment 3x first?                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3); //TODO: shouldn't we tell increment 3x first?                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3); //TODO: shouldn't we tell increment 3x first?                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3); //TODO: shouldn't we tell increment 3x first?                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3); //TODO: shouldn't we tell increment 3x first?                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: "counter"'                          settings: settings'                          coordinatorPath: "/user/counterCoordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId));                        proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: "counter"'                          settings: settings'                          coordinatorPath: "/user/counterCoordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId));                        proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: "counter"'                          settings: settings'                          coordinatorPath: "/user/counterCoordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId));                        proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: "counter"'                          settings: settings'                          coordinatorPath: "/user/counterCoordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId));                        proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: "counter"'                          settings: settings'                          coordinatorPath: "/user/counterCoordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId));                        proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: "counter"'                          settings: settings'                          coordinatorPath: "/user/counterCoordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId));                        proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: "counter"'                          settings: settings'                          coordinatorPath: "/user/counterCoordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId));                        proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: "counter"'                          settings: settings'                          coordinatorPath: "/user/counterCoordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId));                        proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      proxy.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_failover_shards_on_crashed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled) Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(x => true)' new PredicateMatcher(x => true))));                  EnterBarrier("logs-muted");                    RunOn(() =>                  {                      TestConductor.Exit(_second' 0).Wait();                  }' _controller);                  EnterBarrier("crash-second");                    RunOn(() =>                  {                      var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(2)' probe1.Ref);                              probe1.ExpectMsg(4);                              Assert.Equal(r.Path / "2" / "2"' probe1.LastSender.Path);                          });                      });                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(12)' probe2.Ref);                              probe2.ExpectMsg(1);                              Assert.Equal(r.Path / "0" / "12"' probe2.LastSender.Path);                          });                      });                  }' _first);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_failover_shards_on_crashed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled) Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(x => true)' new PredicateMatcher(x => true))));                  EnterBarrier("logs-muted");                    RunOn(() =>                  {                      TestConductor.Exit(_second' 0).Wait();                  }' _controller);                  EnterBarrier("crash-second");                    RunOn(() =>                  {                      var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(2)' probe1.Ref);                              probe1.ExpectMsg(4);                              Assert.Equal(r.Path / "2" / "2"' probe1.LastSender.Path);                          });                      });                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(12)' probe2.Ref);                              probe2.ExpectMsg(1);                              Assert.Equal(r.Path / "0" / "12"' probe2.LastSender.Path);                          });                      });                  }' _first);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_failover_shards_on_crashed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled) Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(x => true)' new PredicateMatcher(x => true))));                  EnterBarrier("logs-muted");                    RunOn(() =>                  {                      TestConductor.Exit(_second' 0).Wait();                  }' _controller);                  EnterBarrier("crash-second");                    RunOn(() =>                  {                      var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(2)' probe1.Ref);                              probe1.ExpectMsg(4);                              Assert.Equal(r.Path / "2" / "2"' probe1.LastSender.Path);                          });                      });                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(12)' probe2.Ref);                              probe2.ExpectMsg(1);                              Assert.Equal(r.Path / "0" / "12"' probe2.LastSender.Path);                          });                      });                  }' _first);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_failover_shards_on_crashed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled) Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(x => true)' new PredicateMatcher(x => true))));                  EnterBarrier("logs-muted");                    RunOn(() =>                  {                      TestConductor.Exit(_second' 0).Wait();                  }' _controller);                  EnterBarrier("crash-second");                    RunOn(() =>                  {                      var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(2)' probe1.Ref);                              probe1.ExpectMsg(4);                              Assert.Equal(r.Path / "2" / "2"' probe1.LastSender.Path);                          });                      });                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(12)' probe2.Ref);                              probe2.ExpectMsg(1);                              Assert.Equal(r.Path / "0" / "12"' probe2.LastSender.Path);                          });                      });                  }' _first);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                  EnterBarrier("third-update");                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' LastSender.Path);                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(Node(_third) / "user" / "counterRegion" / "4" / "4"' LastSender.Path);                  }' _first);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      Assert.Equal(r.Path / "3" / "3"' LastSender.Path);                  }' _third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      Assert.Equal(r.Path / "4" / "4"' LastSender.Path);                  }' _fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_recover_coordinator_state_after_coordinator_crash,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Join(_fifth' _fourth);                  RunOn(() =>                  {                      TestConductor.Exit(_first' 0).Wait();                  }' _controller);                  EnterBarrier("crash-first");                    RunOn(() =>                  {                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(3)' probe3.Ref);                              probe3.ExpectMsg(11);                              Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' probe3.LastSender.Path);                          });                      });                        var probe4 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(4)' probe4.Ref);                              probe4.ExpectMsg(21);                              Assert.Equal(Node(_fourth) / "user" / "counterRegion" / "4" / "4"' probe4.LastSender.Path);                          });                      });                  }' _fifth);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_recover_coordinator_state_after_coordinator_crash,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Join(_fifth' _fourth);                  RunOn(() =>                  {                      TestConductor.Exit(_first' 0).Wait();                  }' _controller);                  EnterBarrier("crash-first");                    RunOn(() =>                  {                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(3)' probe3.Ref);                              probe3.ExpectMsg(11);                              Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' probe3.LastSender.Path);                          });                      });                        var probe4 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(4)' probe4.Ref);                              probe4.ExpectMsg(21);                              Assert.Equal(Node(_fourth) / "user" / "counterRegion" / "4" / "4"' probe4.LastSender.Path);                          });                      });                  }' _fifth);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_recover_coordinator_state_after_coordinator_crash,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Join(_fifth' _fourth);                  RunOn(() =>                  {                      TestConductor.Exit(_first' 0).Wait();                  }' _controller);                  EnterBarrier("crash-first");                    RunOn(() =>                  {                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(3)' probe3.Ref);                              probe3.ExpectMsg(11);                              Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' probe3.LastSender.Path);                          });                      });                        var probe4 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(4)' probe4.Ref);                              probe4.ExpectMsg(21);                              Assert.Equal(Node(_fourth) / "user" / "counterRegion" / "4" / "4"' probe4.LastSender.Path);                          });                      });                  }' _fifth);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_recover_coordinator_state_after_coordinator_crash,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Join(_fifth' _fourth);                  RunOn(() =>                  {                      TestConductor.Exit(_first' 0).Wait();                  }' _controller);                  EnterBarrier("crash-first");                    RunOn(() =>                  {                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(3)' probe3.Ref);                              probe3.ExpectMsg(11);                              Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' probe3.LastSender.Path);                          });                      });                        var probe4 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(4)' probe4.Ref);                              probe4.ExpectMsg(21);                              Assert.Equal(Node(_fourth) / "user" / "counterRegion" / "4" / "4"' probe4.LastSender.Path);                          });                      });                  }' _fifth);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_recover_coordinator_state_after_coordinator_crash,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Join(_fifth' _fourth);                  RunOn(() =>                  {                      TestConductor.Exit(_first' 0).Wait();                  }' _controller);                  EnterBarrier("crash-first");                    RunOn(() =>                  {                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(3)' probe3.Ref);                              probe3.ExpectMsg(11);                              Assert.Equal(Node(_third) / "user" / "counterRegion" / "3" / "3"' probe3.LastSender.Path);                          });                      });                        var probe4 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(4)' probe4.Ref);                              probe4.ExpectMsg(21);                              Assert.Equal(Node(_fourth) / "user" / "counterRegion" / "4" / "4"' probe4.LastSender.Path);                          });                      });                  }' _fifth);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_sixth' _third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                Assert.True(count >= 2);                          });                      });                  }' _sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_sixth' _third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                Assert.True(count >= 2);                          });                      });                  }' _sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_sixth' _third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                Assert.True(count >= 2);                          });                      });                  }' _sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_sixth' _third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                Assert.True(count >= 2);                          });                      });                  }' _sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_sixth' _third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                Assert.True(count >= 2);                          });                      });                  }' _sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_sixth' _third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                Assert.True(count >= 2);                          });                      });                  }' _sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "Counter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "AnotherCounter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                  }' _third' _fourth' _fifth' _sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion("Counter");                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(1);                        //#counter-usage                      var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion("AnotherCounter");                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(123));                      ExpectMsg(-1);                  }' _fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.Get(i));                          ExpectMsg(1);                          Assert.NotEqual(Cluster.SelfAddress' LastSender.Path.Address);                      }                  }' _sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "Counter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "AnotherCounter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                  }' _third' _fourth' _fifth' _sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion("Counter");                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(1);                        //#counter-usage                      var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion("AnotherCounter");                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(123));                      ExpectMsg(-1);                  }' _fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.Get(i));                          ExpectMsg(1);                          Assert.NotEqual(Cluster.SelfAddress' LastSender.Path.Address);                      }                  }' _sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "Counter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "AnotherCounter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                  }' _third' _fourth' _fifth' _sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion("Counter");                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(1);                        //#counter-usage                      var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion("AnotherCounter");                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(123));                      ExpectMsg(-1);                  }' _fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.Get(i));                          ExpectMsg(1);                          Assert.NotEqual(Cluster.SelfAddress' LastSender.Path.Address);                      }                  }' _sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "Counter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "AnotherCounter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                  }' _third' _fourth' _fifth' _sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion("Counter");                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(1);                        //#counter-usage                      var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion("AnotherCounter");                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(123));                      ExpectMsg(-1);                  }' _fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.Get(i));                          ExpectMsg(1);                          Assert.NotEqual(Cluster.SelfAddress' LastSender.Path.Address);                      }                  }' _sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "Counter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "AnotherCounter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                  }' _third' _fourth' _fifth' _sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion("Counter");                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(1);                        //#counter-usage                      var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion("AnotherCounter");                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(123));                      ExpectMsg(-1);                  }' _fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.Get(i));                          ExpectMsg(1);                          Assert.NotEqual(Cluster.SelfAddress' LastSender.Path.Address);                      }                  }' _sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "Counter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "AnotherCounter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                  }' _third' _fourth' _fifth' _sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion("Counter");                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(1);                        //#counter-usage                      var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion("AnotherCounter");                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(123));                      ExpectMsg(-1);                  }' _fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.Get(i));                          ExpectMsg(1);                          Assert.NotEqual(Cluster.SelfAddress' LastSender.Path.Address);                      }                  }' _sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "Counter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "AnotherCounter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                  }' _third' _fourth' _fifth' _sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion("Counter");                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(1);                        //#counter-usage                      var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion("AnotherCounter");                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(123));                      ExpectMsg(-1);                  }' _fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.Get(i));                          ExpectMsg(1);                          Assert.NotEqual(Cluster.SelfAddress' LastSender.Path.Address);                      }                  }' _sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "Counter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: "AnotherCounter"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                  }' _third' _fourth' _fifth' _sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion("Counter");                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(123));                      ExpectMsg(1);                        //#counter-usage                      var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion("AnotherCounter");                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(123' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(123));                      ExpectMsg(-1);                  }' _fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion("Counter").Tell(new Counter.Get(i));                          ExpectMsg(1);                          Assert.NotEqual(Cluster.SelfAddress' LastSender.Path.Address);                      }                  }' _sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_API_for_starting,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var counterRegionViaStart = ClusterSharding.Get(Sys).Start(                          typeName: "ApiTest"'                          entityProps: Props.Create<Counter>()'                          settings: ClusterShardingSettings.Create(Sys)'                          idExtractor: Counter.ExtractEntityId'                          shardResolver: Counter.ExtractShardId);                        var counterRegionViaGet = ClusterSharding.Get(Sys).ShardRegion("ApiTest");                        Assert.Equal(counterRegionViaGet' counterRegionViaStart);                  }' _first);                  EnterBarrier("after-11");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        // stop shard                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      counter1.Tell(new Identify(2));                      Assert.NotNull(ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(3)).Subject);                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth' _fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        Assert.Equal(counter1.Path.Parent' counter13.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10));                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1));                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      Sys.ActorSelection(shard / "13").Tell(new Identify(4));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                    }' _fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_restart_entities_which_stop_without_passivation,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        var counter1 = Sys.ActorSelection(LastSender.Path);                      counter1.Tell(Counter.Stop.Instance);                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          Assert.NotNull(probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _third);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_restart_entities_which_stop_without_passivation,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        var counter1 = Sys.ActorSelection(LastSender.Path);                      counter1.Tell(Counter.Stop.Instance);                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          Assert.NotNull(probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _third);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_restart_entities_which_stop_without_passivation,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        var counter1 = Sys.ActorSelection(LastSender.Path);                      counter1.Tell(Counter.Stop.Instance);                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          Assert.NotNull(probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _third);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_restart_entities_which_stop_without_passivation,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _third' _fourth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        var counter1 = Sys.ActorSelection(LastSender.Path);                      counter1.Tell(Counter.Stop.Instance);                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          Assert.NotNull(probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _third);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_be_migrated_to_new_regions_upon_region_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  //Start only one region' and force an entity onto that region                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("shard1-region3");                    //Start another region and test it talks to node 3                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        Assert.Equal(Node(_third) / "user" / "AutoMigrateRegionTestRegion" / "1" / "1"' LastSender.Path);                        // kill region 3                      Sys.ActorSelection(LastSender.Path.Parent.Parent).Tell(PoisonPill.Instance);                  }' _fourth);                  EnterBarrier("region4-up");                    // Wait for migration to happen                  //Test the shard' thus counter was moved onto node 4 and started.                  RunOn(() =>                  {                      var counter1 = Sys.ActorSelection(ActorPath.Parse("user") / "AutoMigrateRegionTestRegion" / "1" / "1");                      var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          Assert.NotNull(probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(2);                  }' _fourth);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_be_migrated_to_new_regions_upon_region_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  //Start only one region' and force an entity onto that region                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("shard1-region3");                    //Start another region and test it talks to node 3                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        Assert.Equal(Node(_third) / "user" / "AutoMigrateRegionTestRegion" / "1" / "1"' LastSender.Path);                        // kill region 3                      Sys.ActorSelection(LastSender.Path.Parent.Parent).Tell(PoisonPill.Instance);                  }' _fourth);                  EnterBarrier("region4-up");                    // Wait for migration to happen                  //Test the shard' thus counter was moved onto node 4 and started.                  RunOn(() =>                  {                      var counter1 = Sys.ActorSelection(ActorPath.Parse("user") / "AutoMigrateRegionTestRegion" / "1" / "1");                      var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          Assert.NotNull(probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(2);                  }' _fourth);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_be_migrated_to_new_regions_upon_region_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  //Start only one region' and force an entity onto that region                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("shard1-region3");                    //Start another region and test it talks to node 3                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        Assert.Equal(Node(_third) / "user" / "AutoMigrateRegionTestRegion" / "1" / "1"' LastSender.Path);                        // kill region 3                      Sys.ActorSelection(LastSender.Path.Parent.Parent).Tell(PoisonPill.Instance);                  }' _fourth);                  EnterBarrier("region4-up");                    // Wait for migration to happen                  //Test the shard' thus counter was moved onto node 4 and started.                  RunOn(() =>                  {                      var counter1 = Sys.ActorSelection(ActorPath.Parse("user") / "AutoMigrateRegionTestRegion" / "1" / "1");                      var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          Assert.NotNull(probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(2);                  }' _fourth);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_be_migrated_to_new_regions_upon_region_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  //Start only one region' and force an entity onto that region                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("shard1-region3");                    //Start another region and test it talks to node 3                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        Assert.Equal(Node(_third) / "user" / "AutoMigrateRegionTestRegion" / "1" / "1"' LastSender.Path);                        // kill region 3                      Sys.ActorSelection(LastSender.Path.Parent.Parent).Tell(PoisonPill.Instance);                  }' _fourth);                  EnterBarrier("region4-up");                    // Wait for migration to happen                  //Test the shard' thus counter was moved onto node 4 and started.                  RunOn(() =>                  {                      var counter1 = Sys.ActorSelection(ActorPath.Parse("user") / "AutoMigrateRegionTestRegion" / "1" / "1");                      var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          Assert.NotNull(probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(2);                  }' _fourth);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_be_migrated_to_new_regions_upon_region_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  //Start only one region' and force an entity onto that region                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _third);                  EnterBarrier("shard1-region3");                    //Start another region and test it talks to node 3                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        Assert.Equal(Node(_third) / "user" / "AutoMigrateRegionTestRegion" / "1" / "1"' LastSender.Path);                        // kill region 3                      Sys.ActorSelection(LastSender.Path.Parent.Parent).Tell(PoisonPill.Instance);                  }' _fourth);                  EnterBarrier("region4-up");                    // Wait for migration to happen                  //Test the shard' thus counter was moved onto node 4 and started.                  RunOn(() =>                  {                      var counter1 = Sys.ActorSelection(ActorPath.Parse("user") / "AutoMigrateRegionTestRegion" / "1" / "1");                      var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          Assert.NotNull(probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(2);                  }' _fourth);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 1; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null)                                  count++;                          }                            Assert.True(count >= 2);                      });                  }' _fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 1; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null)                                  count++;                          }                            Assert.True(count >= 2);                      });                  }' _fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 1; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null)                                  count++;                          }                            Assert.True(count >= 2);                      });                  }' _fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 1; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null)                                  count++;                          }                            Assert.True(count >= 2);                      });                  }' _fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 1; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null)                                  count++;                          }                            Assert.True(count >= 2);                      });                  }' _fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 1; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null)                                  count++;                          }                            Assert.True(count >= 2);                      });                  }' _fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 1; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null)                                  count++;                          }                            Assert.True(count >= 2);                      });                  }' _fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\ClusterShardingSpec.cs,Persistent_cluster_shards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 1; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null)                                  count++;                          }                            Assert.True(count >= 2);                      });                  }' _fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,LeastShardAllocationStrategySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\LeastShardAllocationStrategySpec.cs,LeastShardAllocationStrategySpec,The following statement contains a magic number: _allocationStrategy = new LeastShardAllocationStrategy(3' 2);
Magic Number,Akka.Cluster.Sharding.Tests,LeastShardAllocationStrategySpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Sharding.Tests\LeastShardAllocationStrategySpec.cs,LeastShardAllocationStrategySpec,The following statement contains a magic number: _allocationStrategy = new LeastShardAllocationStrategy(3' 2);
