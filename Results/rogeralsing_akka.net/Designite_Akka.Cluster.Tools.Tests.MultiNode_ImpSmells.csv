Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_communicate_to_any_node_in_cluster,The length of the statement  "                    var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client1"); " is 131.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_demonstrate_usage,The length of the statement  "                    var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client"); " is 130.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The length of the statement  "                    var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2"); " is 131.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_reestablish_connection_to_receptionist_after_partition,The length of the statement  "                    var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client3"); " is 131.
Long Statement,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,AwaitMemberUp,The length of the statement  "                Assert.Equal(Node(nodes[0]).Address' memberProbe.ExpectMsg<ClusterEvent.MemberUp>(TimeSpan.FromSeconds(15)).Member.Address); " is 124.
Long Statement,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_takeover_when_oldest_crashes_in_5_node_cluster,The length of the statement  "                    Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(s => true)' new PredicateMatcher(s => true)))); " is 123.
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClientSpecConfig,The constructor "ClusterClientSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediatorSpecConfig,The constructor "DistributedPubSubMediatorSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,ClusterSingletonManagerChaosConfig,The constructor "ClusterSingletonManagerChaosConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,ClusterSingletonManagerChaosConfig,The constructor "ClusterSingletonManagerChaosConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,ClusterSingletonManagerChaosConfig,The constructor "ClusterSingletonManagerChaosConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerStartupConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerStartupSpec.cs,ClusterSingletonManagerStartupConfig,The constructor "ClusterSingletonManagerStartupConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerStartupConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerStartupSpec.cs,ClusterSingletonManagerStartupConfig,The constructor "ClusterSingletonManagerStartupConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerStartupConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerStartupSpec.cs,ClusterSingletonManagerStartupConfig,The constructor "ClusterSingletonManagerStartupConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerLeaveSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,ClusterSingletonManagerLeaveSpecConfig,The constructor "ClusterSingletonManagerLeaveSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerLeaveSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,ClusterSingletonManagerLeaveSpecConfig,The constructor "ClusterSingletonManagerLeaveSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManagerSpecConfig,The constructor "ClusterSingletonManagerSpecConfig" calls a virtual method "WithFallback".
Virtual Method Call from Constructor,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpecConfig,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManagerSpecConfig,The constructor "ClusterSingletonManagerSpecConfig" calls a virtual method "WithFallback".
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_startup_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_first' _first);                  Join(_second' _first);                  Join(_third' _first);                  Join(_fourth' _first);                    RunOn(() =>                  {                      var service = Sys.ActorOf(Props.Create(() => new TestService(TestActor))' "testService");                      ClusterClientReceptionist.Get(Sys).RegisterService(service);                  }' _fourth);                    RunOn(() =>                  {                      AwaitCount(1);                  }' _first' _second' _third' _fourth);                  EnterBarrier("after-1");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_communicate_to_any_node_in_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client1");                      c.Tell(new Client.ClusterClient.Send("/user/testService"' "hello"' localAffinity: true));                      ExpectMsg("hello-ack");                      Sys.Stop(c);                  }' _client);                    RunOn(() =>                  {                      ExpectMsg("hello");                  }' _fourth);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_demonstrate_usage,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var serviceA = Sys.ActorOf(Props.Create<Service>()' "serviceA");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceA);                  }' _first);                    RunOn(() =>                  {                      var serviceB = Sys.ActorOf(Props.Create<Service>()' "serviceB");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceB);                  }' _second' _third);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second' _third' _fourth);                    RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client");                      c.Tell(new Client.ClusterClient.Send("/user/serviceA"' "hello"' localAffinity: true));                      c.Tell(new Client.ClusterClient.SendToAll("/user/serviceB"' "hi"));                  }' _client);                    RunOn(() =>                  {                      // note that "hi" was sent to 2 "serviceB"                      var received = ReceiveN(3);                      Assert.True(received.Contains("hello"));                      Assert.True(received.Contains("hi"));                  }' _client);                    // strange' barriers fail without this sleep                  Thread.Sleep(1000);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_demonstrate_usage,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var serviceA = Sys.ActorOf(Props.Create<Service>()' "serviceA");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceA);                  }' _first);                    RunOn(() =>                  {                      var serviceB = Sys.ActorOf(Props.Create<Service>()' "serviceB");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceB);                  }' _second' _third);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second' _third' _fourth);                    RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client");                      c.Tell(new Client.ClusterClient.Send("/user/serviceA"' "hello"' localAffinity: true));                      c.Tell(new Client.ClusterClient.SendToAll("/user/serviceB"' "hi"));                  }' _client);                    RunOn(() =>                  {                      // note that "hi" was sent to 2 "serviceB"                      var received = ReceiveN(3);                      Assert.True(received.Contains("hello"));                      Assert.True(received.Contains("hi"));                  }' _client);                    // strange' barriers fail without this sleep                  Thread.Sleep(1000);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_demonstrate_usage,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var serviceA = Sys.ActorOf(Props.Create<Service>()' "serviceA");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceA);                  }' _first);                    RunOn(() =>                  {                      var serviceB = Sys.ActorOf(Props.Create<Service>()' "serviceB");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceB);                  }' _second' _third);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second' _third' _fourth);                    RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client");                      c.Tell(new Client.ClusterClient.Send("/user/serviceA"' "hello"' localAffinity: true));                      c.Tell(new Client.ClusterClient.SendToAll("/user/serviceB"' "hi"));                  }' _client);                    RunOn(() =>                  {                      // note that "hi" was sent to 2 "serviceB"                      var received = ReceiveN(3);                      Assert.True(received.Contains("hello"));                      Assert.True(received.Contains("hi"));                  }' _client);                    // strange' barriers fail without this sleep                  Thread.Sleep(1000);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_demonstrate_usage,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var serviceA = Sys.ActorOf(Props.Create<Service>()' "serviceA");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceA);                  }' _first);                    RunOn(() =>                  {                      var serviceB = Sys.ActorOf(Props.Create<Service>()' "serviceB");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceB);                  }' _second' _third);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second' _third' _fourth);                    RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client");                      c.Tell(new Client.ClusterClient.Send("/user/serviceA"' "hello"' localAffinity: true));                      c.Tell(new Client.ClusterClient.SendToAll("/user/serviceB"' "hi"));                  }' _client);                    RunOn(() =>                  {                      // note that "hi" was sent to 2 "serviceB"                      var received = ReceiveN(3);                      Assert.True(received.Contains("hello"));                      Assert.True(received.Contains("hi"));                  }' _client);                    // strange' barriers fail without this sleep                  Thread.Sleep(1000);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var service2 = Sys.ActorOf(Props.Create(() => new TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(Sys).RegisterService(service2);                      AwaitCount(8);                  }' _first' _second' _third' _fourth);                  EnterBarrier("service2-replicated");                    RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2");                      c.Tell(new Client.ClusterClient.Send("/user/service2"' "bonjour"' localAffinity: true));                      ExpectMsg("bonjour-ack");                      var lastSenderAddress = LastSender.Path.Address;                        var receptionistRoleName = RoleName(lastSenderAddress);                      if (receptionistRoleName == null) throw new Exception("Unexpected missing role name: " + lastSenderAddress);                        TestConductor.Exit(receptionistRoleName' 0).Wait();                      _remainingServerRoleNames.Remove(receptionistRoleName);                        Within(Remaining - TimeSpan.FromSeconds(3)' () =>                      {                          AwaitAssert(() =>                          {                              c.Tell(new Client.ClusterClient.Send("/user/service2"' "hi again"' localAffinity: true));                              ExpectMsg("hi again-ack"' TimeSpan.FromSeconds(1));                          });                      });                      Sys.Stop(c);                  }' _client);                  EnterBarrier("verified-3");                    ReceiveWhile(TimeSpan.FromSeconds(2)' msg =>                  {                      if (msg.Equals("hi again")) return msg;                      else throw new Exception("unexpected message: " + msg);                  });                  EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var service2 = Sys.ActorOf(Props.Create(() => new TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(Sys).RegisterService(service2);                      AwaitCount(8);                  }' _first' _second' _third' _fourth);                  EnterBarrier("service2-replicated");                    RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2");                      c.Tell(new Client.ClusterClient.Send("/user/service2"' "bonjour"' localAffinity: true));                      ExpectMsg("bonjour-ack");                      var lastSenderAddress = LastSender.Path.Address;                        var receptionistRoleName = RoleName(lastSenderAddress);                      if (receptionistRoleName == null) throw new Exception("Unexpected missing role name: " + lastSenderAddress);                        TestConductor.Exit(receptionistRoleName' 0).Wait();                      _remainingServerRoleNames.Remove(receptionistRoleName);                        Within(Remaining - TimeSpan.FromSeconds(3)' () =>                      {                          AwaitAssert(() =>                          {                              c.Tell(new Client.ClusterClient.Send("/user/service2"' "hi again"' localAffinity: true));                              ExpectMsg("hi again-ack"' TimeSpan.FromSeconds(1));                          });                      });                      Sys.Stop(c);                  }' _client);                  EnterBarrier("verified-3");                    ReceiveWhile(TimeSpan.FromSeconds(2)' msg =>                  {                      if (msg.Equals("hi again")) return msg;                      else throw new Exception("unexpected message: " + msg);                  });                  EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var service2 = Sys.ActorOf(Props.Create(() => new TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(Sys).RegisterService(service2);                      AwaitCount(8);                  }' _first' _second' _third' _fourth);                  EnterBarrier("service2-replicated");                    RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2");                      c.Tell(new Client.ClusterClient.Send("/user/service2"' "bonjour"' localAffinity: true));                      ExpectMsg("bonjour-ack");                      var lastSenderAddress = LastSender.Path.Address;                        var receptionistRoleName = RoleName(lastSenderAddress);                      if (receptionistRoleName == null) throw new Exception("Unexpected missing role name: " + lastSenderAddress);                        TestConductor.Exit(receptionistRoleName' 0).Wait();                      _remainingServerRoleNames.Remove(receptionistRoleName);                        Within(Remaining - TimeSpan.FromSeconds(3)' () =>                      {                          AwaitAssert(() =>                          {                              c.Tell(new Client.ClusterClient.Send("/user/service2"' "hi again"' localAffinity: true));                              ExpectMsg("hi again-ack"' TimeSpan.FromSeconds(1));                          });                      });                      Sys.Stop(c);                  }' _client);                  EnterBarrier("verified-3");                    ReceiveWhile(TimeSpan.FromSeconds(2)' msg =>                  {                      if (msg.Equals("hi again")) return msg;                      else throw new Exception("unexpected message: " + msg);                  });                  EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var service2 = Sys.ActorOf(Props.Create(() => new TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(Sys).RegisterService(service2);                      AwaitCount(8);                  }' _first' _second' _third' _fourth);                  EnterBarrier("service2-replicated");                    RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2");                      c.Tell(new Client.ClusterClient.Send("/user/service2"' "bonjour"' localAffinity: true));                      ExpectMsg("bonjour-ack");                      var lastSenderAddress = LastSender.Path.Address;                        var receptionistRoleName = RoleName(lastSenderAddress);                      if (receptionistRoleName == null) throw new Exception("Unexpected missing role name: " + lastSenderAddress);                        TestConductor.Exit(receptionistRoleName' 0).Wait();                      _remainingServerRoleNames.Remove(receptionistRoleName);                        Within(Remaining - TimeSpan.FromSeconds(3)' () =>                      {                          AwaitAssert(() =>                          {                              c.Tell(new Client.ClusterClient.Send("/user/service2"' "hi again"' localAffinity: true));                              ExpectMsg("hi again-ack"' TimeSpan.FromSeconds(1));                          });                      });                      Sys.Stop(c);                  }' _client);                  EnterBarrier("verified-3");                    ReceiveWhile(TimeSpan.FromSeconds(2)' msg =>                  {                      if (msg.Equals("hi again")) return msg;                      else throw new Exception("unexpected message: " + msg);                  });                  EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_reestablish_connection_to_receptionist_after_partition,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client3");                      c.Tell(new Client.ClusterClient.Send("/user/service2"' "bonjour2"' localAffinity: true));                      ExpectMsg("bonjour2-ack");                      var lastSenderAddress = LastSender.Path.Address;                        var receptionistRoleName = RoleName(lastSenderAddress);                      if (receptionistRoleName == null) throw new Exception("Unexpected missing role name: " + lastSenderAddress);                        // shutdown all but the one that the client is connected to                      foreach (var roleName in _remainingServerRoleNames.ToArray())                          if (!roleName.Equals(receptionistRoleName)) TestConductor.Exit(roleName' 0).Wait();                      _remainingServerRoleNames = new HashSet<RoleName>(new[] { receptionistRoleName });                        // network partition between client and server                      TestConductor.Blackhole(_client' receptionistRoleName' ThrottleTransportAdapter.Direction.Both).Wait();                      c.Tell(new Client.ClusterClient.Send("/user/service2"' "ping"' localAffinity: true));                      // if we would use remote watch the failure detector would trigger and                      // connection quarantined                      ExpectNoMsg(TimeSpan.FromSeconds(5));                        TestConductor.PassThrough(_client' receptionistRoleName' ThrottleTransportAdapter.Direction.Both).Wait();                        var expectedAddress = Node(receptionistRoleName).Address;                      AwaitAssert(() =>                      {                          c.Tell(new Client.ClusterClient.Send("/user/service2"' "bonjour3"' localAffinity: true));                          ExpectMsg("bonjour3-ack"' TimeSpan.FromSeconds(1));                          var lastSenderAddress2 = LastSender.Path.Address;                          Assert.Equal(expectedAddress' lastSenderAddress2);                      });                      Sys.Stop(c);                    }' _client);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.ClusterClient,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_should_reestablish_connection_to_receptionist_after_partition,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(Client.ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client3");                      c.Tell(new Client.ClusterClient.Send("/user/service2"' "bonjour2"' localAffinity: true));                      ExpectMsg("bonjour2-ack");                      var lastSenderAddress = LastSender.Path.Address;                        var receptionistRoleName = RoleName(lastSenderAddress);                      if (receptionistRoleName == null) throw new Exception("Unexpected missing role name: " + lastSenderAddress);                        // shutdown all but the one that the client is connected to                      foreach (var roleName in _remainingServerRoleNames.ToArray())                          if (!roleName.Equals(receptionistRoleName)) TestConductor.Exit(roleName' 0).Wait();                      _remainingServerRoleNames = new HashSet<RoleName>(new[] { receptionistRoleName });                        // network partition between client and server                      TestConductor.Blackhole(_client' receptionistRoleName' ThrottleTransportAdapter.Direction.Both).Wait();                      c.Tell(new Client.ClusterClient.Send("/user/service2"' "ping"' localAffinity: true));                      // if we would use remote watch the failure detector would trigger and                      // connection quarantined                      ExpectNoMsg(TimeSpan.FromSeconds(5));                        TestConductor.PassThrough(_client' receptionistRoleName' ThrottleTransportAdapter.Direction.Both).Wait();                        var expectedAddress = Node(receptionistRoleName).Address;                      AwaitAssert(() =>                      {                          c.Tell(new Client.ClusterClient.Send("/user/service2"' "bonjour3"' localAffinity: true));                          ExpectMsg("bonjour3-ack"' TimeSpan.FromSeconds(1));                          var lastSenderAddress2 = LastSender.Path.Address;                          Assert.Equal(expectedAddress' lastSenderAddress2);                      });                      Sys.Stop(c);                    }' _client);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_startup_2_nodes_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_first' _first);                  Join(_second' _first);                  EnterBarrier("after-1");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_keep_track_of_added_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u1 = CreateChatUser("u1");                      Mediator.Tell(new Put(u1));                      var u2 = CreateChatUser("u2");                      Mediator.Tell(new Put(u2));                        AwaitCount(2);                        // send to actor at the same node                      u1.Tell(new Whisper("/user/u2"' "hello"));                      ExpectMsg("hello");                      Assert.Equal(u2' LastSender);                  }' _first);                    RunOn(() =>                  {                      var u3 = CreateChatUser("u3");                      Mediator.Tell(new Put(u3));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(3);                  }' _first' _second);                  EnterBarrier("3-registered");                    RunOn(() =>                  {                      var u4 = CreateChatUser("u4");                      Mediator.Tell(new Put(u4));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second);                  EnterBarrier("4-registered");                    RunOn(() =>                  {                      // send to an actor on another node                      ChatUser("u1").Tell(new Whisper("/user/u4"' "hi there"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi there");                      Assert.Equal("u4"' LastSender.Path.Name);                  }' _second);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_keep_track_of_added_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u1 = CreateChatUser("u1");                      Mediator.Tell(new Put(u1));                      var u2 = CreateChatUser("u2");                      Mediator.Tell(new Put(u2));                        AwaitCount(2);                        // send to actor at the same node                      u1.Tell(new Whisper("/user/u2"' "hello"));                      ExpectMsg("hello");                      Assert.Equal(u2' LastSender);                  }' _first);                    RunOn(() =>                  {                      var u3 = CreateChatUser("u3");                      Mediator.Tell(new Put(u3));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(3);                  }' _first' _second);                  EnterBarrier("3-registered");                    RunOn(() =>                  {                      var u4 = CreateChatUser("u4");                      Mediator.Tell(new Put(u4));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second);                  EnterBarrier("4-registered");                    RunOn(() =>                  {                      // send to an actor on another node                      ChatUser("u1").Tell(new Whisper("/user/u4"' "hi there"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi there");                      Assert.Equal("u4"' LastSender.Path.Name);                  }' _second);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_keep_track_of_added_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u1 = CreateChatUser("u1");                      Mediator.Tell(new Put(u1));                      var u2 = CreateChatUser("u2");                      Mediator.Tell(new Put(u2));                        AwaitCount(2);                        // send to actor at the same node                      u1.Tell(new Whisper("/user/u2"' "hello"));                      ExpectMsg("hello");                      Assert.Equal(u2' LastSender);                  }' _first);                    RunOn(() =>                  {                      var u3 = CreateChatUser("u3");                      Mediator.Tell(new Put(u3));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(3);                  }' _first' _second);                  EnterBarrier("3-registered");                    RunOn(() =>                  {                      var u4 = CreateChatUser("u4");                      Mediator.Tell(new Put(u4));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second);                  EnterBarrier("4-registered");                    RunOn(() =>                  {                      // send to an actor on another node                      ChatUser("u1").Tell(new Whisper("/user/u4"' "hi there"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi there");                      Assert.Equal("u4"' LastSender.Path.Name);                  }' _second);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_keep_track_of_added_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u1 = CreateChatUser("u1");                      Mediator.Tell(new Put(u1));                      var u2 = CreateChatUser("u2");                      Mediator.Tell(new Put(u2));                        AwaitCount(2);                        // send to actor at the same node                      u1.Tell(new Whisper("/user/u2"' "hello"));                      ExpectMsg("hello");                      Assert.Equal(u2' LastSender);                  }' _first);                    RunOn(() =>                  {                      var u3 = CreateChatUser("u3");                      Mediator.Tell(new Put(u3));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(3);                  }' _first' _second);                  EnterBarrier("3-registered");                    RunOn(() =>                  {                      var u4 = CreateChatUser("u4");                      Mediator.Tell(new Put(u4));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second);                  EnterBarrier("4-registered");                    RunOn(() =>                  {                      // send to an actor on another node                      ChatUser("u1").Tell(new Whisper("/user/u4"' "hi there"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi there");                      Assert.Equal("u4"' LastSender.Path.Name);                  }' _second);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_replicate_users_to_new_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_third' _first);                  RunOn(() =>                  {                      var u5 = CreateChatUser("u5");                      Mediator.Tell(new Put(u5));                  }' _third);                    AwaitCount(5);                  EnterBarrier("5-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Whisper("/user/u4"' "go"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("go");                      Assert.Equal("u4"' LastSender.Path.Name);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_replicate_users_to_new_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_third' _first);                  RunOn(() =>                  {                      var u5 = CreateChatUser("u5");                      Mediator.Tell(new Put(u5));                  }' _third);                    AwaitCount(5);                  EnterBarrier("5-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Whisper("/user/u4"' "go"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("go");                      Assert.Equal("u4"' LastSender.Path.Name);                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_keep_track_of_removed_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  var u6 = CreateChatUser("u6");                  Mediator.Tell(new Put(u6));              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_keep_track_of_removed_users,The following statement contains a magic number: AwaitCount(6);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_keep_track_of_removed_users,The following statement contains a magic number: AwaitCount(5);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_remove_terminated_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () =>              {                  RunOn(() =>                  {                      ChatUser("u3").Tell(PoisonPill.Instance);                  }' _second);                    AwaitCount(4);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_remove_terminated_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () =>              {                  RunOn(() =>                  {                      ChatUser("u3").Tell(PoisonPill.Instance);                  }' _second);                    AwaitCount(4);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_publish,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u7 = CreateChatUser("u7");                      Mediator.Tell(new Put(u7));                  }' _first' _second);                  AwaitCount(6);                  EnterBarrier("7-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Talk("/user/u7"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      Assert.Equal("u7"' LastSender.Path.Name);                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(3));                  }' _third);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_publish,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u7 = CreateChatUser("u7");                      Mediator.Tell(new Put(u7));                  }' _first' _second);                  AwaitCount(6);                  EnterBarrier("7-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Talk("/user/u7"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      Assert.Equal("u7"' LastSender.Path.Name);                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(3));                  }' _third);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_publish,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u7 = CreateChatUser("u7");                      Mediator.Tell(new Put(u7));                  }' _first' _second);                  AwaitCount(6);                  EnterBarrier("7-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Talk("/user/u7"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      Assert.Equal("u7"' LastSender.Path.Name);                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(3));                  }' _third);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_publish_to_topic,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s8 = new Subscribe("topic1"' CreateChatUser("u8"));                      Mediator.Tell(s8);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s8));                      var s9 = new Subscribe("topic1"' CreateChatUser("u9"));                      Mediator.Tell(s9);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s9));                  }' _first);                    RunOn(() =>                  {                      var s10 = new Subscribe("topic1"' CreateChatUser("u10"));                      Mediator.Tell(s10);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s10));                  }' _second);                    // one topic on two nodes                  AwaitCount(8);                  EnterBarrier("topic1-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Shout("topic1"' "hello all"));                  }' _third);                    RunOn(() =>                  {                      var names = ReceiveWhile(x => "hello all".Equals(x) ? LastSender.Path.Name : null' msgs: 2);                      Assert.True(names.All(x => x == "u8" || x == "u9"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hello all");                      Assert.Equal("u10"' LastSender.Path.Name);                  }' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_publish_to_topic,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s8 = new Subscribe("topic1"' CreateChatUser("u8"));                      Mediator.Tell(s8);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s8));                      var s9 = new Subscribe("topic1"' CreateChatUser("u9"));                      Mediator.Tell(s9);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s9));                  }' _first);                    RunOn(() =>                  {                      var s10 = new Subscribe("topic1"' CreateChatUser("u10"));                      Mediator.Tell(s10);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s10));                  }' _second);                    // one topic on two nodes                  AwaitCount(8);                  EnterBarrier("topic1-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Shout("topic1"' "hello all"));                  }' _third);                    RunOn(() =>                  {                      var names = ReceiveWhile(x => "hello all".Equals(x) ? LastSender.Path.Name : null' msgs: 2);                      Assert.True(names.All(x => x == "u8" || x == "u9"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hello all");                      Assert.Equal("u10"' LastSender.Path.Name);                  }' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_publish_to_topic,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s8 = new Subscribe("topic1"' CreateChatUser("u8"));                      Mediator.Tell(s8);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s8));                      var s9 = new Subscribe("topic1"' CreateChatUser("u9"));                      Mediator.Tell(s9);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s9));                  }' _first);                    RunOn(() =>                  {                      var s10 = new Subscribe("topic1"' CreateChatUser("u10"));                      Mediator.Tell(s10);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s10));                  }' _second);                    // one topic on two nodes                  AwaitCount(8);                  EnterBarrier("topic1-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Shout("topic1"' "hello all"));                  }' _third);                    RunOn(() =>                  {                      var names = ReceiveWhile(x => "hello all".Equals(x) ? LastSender.Path.Name : null' msgs: 2);                      Assert.True(names.All(x => x == "u8" || x == "u9"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hello all");                      Assert.Equal("u10"' LastSender.Path.Name);                  }' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_publish_to_topic,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s8 = new Subscribe("topic1"' CreateChatUser("u8"));                      Mediator.Tell(s8);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s8));                      var s9 = new Subscribe("topic1"' CreateChatUser("u9"));                      Mediator.Tell(s9);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s9));                  }' _first);                    RunOn(() =>                  {                      var s10 = new Subscribe("topic1"' CreateChatUser("u10"));                      Mediator.Tell(s10);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s10));                  }' _second);                    // one topic on two nodes                  AwaitCount(8);                  EnterBarrier("topic1-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Shout("topic1"' "hello all"));                  }' _third);                    RunOn(() =>                  {                      var names = ReceiveWhile(x => "hello all".Equals(x) ? LastSender.Path.Name : null' msgs: 2);                      Assert.True(names.All(x => x == "u8" || x == "u9"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hello all");                      Assert.Equal("u10"' LastSender.Path.Name);                  }' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_demonstrate_usage,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber1");                  }' _first);                    RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber2");                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber3");                  }' _second);                    RunOn(() =>                  {                      var publisher = Sys.ActorOf(Props.Create<Publisher>()' "publisher");                      AwaitCount(10);                      // after a while the subscriptions are replicated                      publisher.Tell("hello");                  }' _third);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_demonstrate_usage,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber1");                  }' _first);                    RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber2");                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber3");                  }' _second);                    RunOn(() =>                  {                      var publisher = Sys.ActorOf(Props.Create<Publisher>()' "publisher");                      AwaitCount(10);                      // after a while the subscriptions are replicated                      publisher.Tell("hello");                  }' _third);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_SendAll_to_all_other_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u11 = CreateChatUser("u11");                      Mediator.Tell(new Put(u11));                  }' _first' _second' _third);                  AwaitCount(13);                  EnterBarrier("11-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new TalkToOthers("/user/u11"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      Assert.Equal("u1"' LastSender.Path.Name);                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-11");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_SendAll_to_all_other_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u11 = CreateChatUser("u11");                      Mediator.Tell(new Put(u11));                  }' _first' _second' _third);                  AwaitCount(13);                  EnterBarrier("11-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new TalkToOthers("/user/u11"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      Assert.Equal("u1"' LastSender.Path.Name);                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-11");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_SendAll_to_all_other_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u11 = CreateChatUser("u11");                      Mediator.Tell(new Put(u11));                  }' _first' _second' _third);                  AwaitCount(13);                  EnterBarrier("11-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new TalkToOthers("/user/u11"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      Assert.Equal("u1"' LastSender.Path.Name);                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-11");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_send_one_message_to_each_group,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group1"));                      ExpectMsg<SubscribeAck>(s => s.Subscribe.Topic == "topic2"                                                                             && s.Subscribe.Group == "group1"                                                                             && s.Subscribe.Ref.Equals(u12));                  }' _first);                    RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group2"));                      ExpectMsg<SubscribeAck>(s => s.Subscribe.Topic == "topic2"                                                                             && s.Subscribe.Group == "group2"                                                                             && s.Subscribe.Ref.Equals(u12));                        var u13 = CreateChatUser("u13");                      u12.Tell(new JoinGroup("topic2"' "group2"));                      ExpectMsg<SubscribeAck>(s => s.Subscribe.Topic == "topic2"                                                                             && s.Subscribe.Group == "group2"                                                                             && s.Subscribe.Ref.Equals(u13));                  }' _second);                    AwaitCount(17);                  EnterBarrier("12-registered");                    RunOn(() =>                  {                      ChatUser("u12").Tell(new ShoutToGroup("topic12"' "hi"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi");                      ExpectNoMsg(TimeSpan.FromSeconds(2));   // each group receive only one message                  }' _first' _second);                  EnterBarrier("12-published");                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group1"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group1"                                                                             && s.Unsubscribe.Ref.Equals(u12));                  }' _first);                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group2"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group2"                                                                             && s.Unsubscribe.Ref.Equals(u12));                      var u13 = ChatUser("u13");                      u12.Tell(new ExitGroup("topic2"' "group2"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group2"                                                                             && s.Unsubscribe.Ref.Equals(u13));                  }' _second);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_send_one_message_to_each_group,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group1"));                      ExpectMsg<SubscribeAck>(s => s.Subscribe.Topic == "topic2"                                                                             && s.Subscribe.Group == "group1"                                                                             && s.Subscribe.Ref.Equals(u12));                  }' _first);                    RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group2"));                      ExpectMsg<SubscribeAck>(s => s.Subscribe.Topic == "topic2"                                                                             && s.Subscribe.Group == "group2"                                                                             && s.Subscribe.Ref.Equals(u12));                        var u13 = CreateChatUser("u13");                      u12.Tell(new JoinGroup("topic2"' "group2"));                      ExpectMsg<SubscribeAck>(s => s.Subscribe.Topic == "topic2"                                                                             && s.Subscribe.Group == "group2"                                                                             && s.Subscribe.Ref.Equals(u13));                  }' _second);                    AwaitCount(17);                  EnterBarrier("12-registered");                    RunOn(() =>                  {                      ChatUser("u12").Tell(new ShoutToGroup("topic12"' "hi"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi");                      ExpectNoMsg(TimeSpan.FromSeconds(2));   // each group receive only one message                  }' _first' _second);                  EnterBarrier("12-published");                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group1"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group1"                                                                             && s.Unsubscribe.Ref.Equals(u12));                  }' _first);                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group2"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group2"                                                                             && s.Unsubscribe.Ref.Equals(u12));                      var u13 = ChatUser("u13");                      u12.Tell(new ExitGroup("topic2"' "group2"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group2"                                                                             && s.Unsubscribe.Ref.Equals(u13));                  }' _second);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_send_one_message_to_each_group,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group1"));                      ExpectMsg<SubscribeAck>(s => s.Subscribe.Topic == "topic2"                                                                             && s.Subscribe.Group == "group1"                                                                             && s.Subscribe.Ref.Equals(u12));                  }' _first);                    RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group2"));                      ExpectMsg<SubscribeAck>(s => s.Subscribe.Topic == "topic2"                                                                             && s.Subscribe.Group == "group2"                                                                             && s.Subscribe.Ref.Equals(u12));                        var u13 = CreateChatUser("u13");                      u12.Tell(new JoinGroup("topic2"' "group2"));                      ExpectMsg<SubscribeAck>(s => s.Subscribe.Topic == "topic2"                                                                             && s.Subscribe.Group == "group2"                                                                             && s.Subscribe.Ref.Equals(u13));                  }' _second);                    AwaitCount(17);                  EnterBarrier("12-registered");                    RunOn(() =>                  {                      ChatUser("u12").Tell(new ShoutToGroup("topic12"' "hi"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi");                      ExpectNoMsg(TimeSpan.FromSeconds(2));   // each group receive only one message                  }' _first' _second);                  EnterBarrier("12-published");                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group1"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group1"                                                                             && s.Unsubscribe.Ref.Equals(u12));                  }' _first);                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group2"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group2"                                                                             && s.Unsubscribe.Ref.Equals(u12));                      var u13 = ChatUser("u13");                      u12.Tell(new ExitGroup("topic2"' "group2"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group2"                                                                             && s.Unsubscribe.Ref.Equals(u13));                  }' _second);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets = ExpectMsg<Delta>().Buckets;                  Assert.Equal(3' deltaBuckets.Count());                  Assert.Equal(9' deltaBuckets.First(x => x.Owner == firstAddress).Content.Count);                  Assert.Equal(8' deltaBuckets.First(x => x.Owner == secondAddress).Content.Count);                  Assert.Equal(2' deltaBuckets.First(x => x.Owner == thirdAddress).Content.Count);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets = ExpectMsg<Delta>().Buckets;                  Assert.Equal(3' deltaBuckets.Count());                  Assert.Equal(9' deltaBuckets.First(x => x.Owner == firstAddress).Content.Count);                  Assert.Equal(8' deltaBuckets.First(x => x.Owner == secondAddress).Content.Count);                  Assert.Equal(2' deltaBuckets.First(x => x.Owner == thirdAddress).Content.Count);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets = ExpectMsg<Delta>().Buckets;                  Assert.Equal(3' deltaBuckets.Count());                  Assert.Equal(9' deltaBuckets.First(x => x.Owner == firstAddress).Content.Count);                  Assert.Equal(8' deltaBuckets.First(x => x.Owner == secondAddress).Content.Count);                  Assert.Equal(2' deltaBuckets.First(x => x.Owner == thirdAddress).Content.Count);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets = ExpectMsg<Delta>().Buckets;                  Assert.Equal(3' deltaBuckets.Count());                  Assert.Equal(9' deltaBuckets.First(x => x.Owner == firstAddress).Content.Count);                  Assert.Equal(8' deltaBuckets.First(x => x.Owner == secondAddress).Content.Count);                  Assert.Equal(2' deltaBuckets.First(x => x.Owner == thirdAddress).Content.Count);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: var many = 1010;
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (i + 1000))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets1.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets2.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(9 + 8 + 2 + many - 500 - 500' deltaBuckets3.Sum(x => x.Content.Count));                }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (i + 1000))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets1.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets2.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(9 + 8 + 2 + many - 500 - 500' deltaBuckets3.Sum(x => x.Content.Count));                }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (i + 1000))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets1.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets2.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(9 + 8 + 2 + many - 500 - 500' deltaBuckets3.Sum(x => x.Content.Count));                }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (i + 1000))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets1.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets2.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(9 + 8 + 2 + many - 500 - 500' deltaBuckets3.Sum(x => x.Content.Count));                }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (i + 1000))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets1.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets2.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(9 + 8 + 2 + many - 500 - 500' deltaBuckets3.Sum(x => x.Content.Count));                }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (i + 1000))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets1.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets2.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(9 + 8 + 2 + many - 500 - 500' deltaBuckets3.Sum(x => x.Content.Count));                }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (i + 1000))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets1.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets2.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(9 + 8 + 2 + many - 500 - 500' deltaBuckets3.Sum(x => x.Content.Count));                }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (i + 1000))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets1.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(500' deltaBuckets2.Sum(x => x.Content.Count));                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  Assert.Equal(9 + 8 + 2 + many - 500 - 500' deltaBuckets3.Sum(x => x.Content.Count));                }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitCount(17 + many);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_transfer_delta_correctly,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitCount(17 + many);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_remove_entries_when_node_is_removed,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Mediator.Tell(Count.Instance);                  var countBefore = ExpectMsg<int>();                    RunOn(() =>                  {                      TestConductor.Exit(_third' 0).Wait();                  }' _first);                  EnterBarrier("third-shutdown");                    // third had 2 entries u5 and u11' and those should be removed everywhere                  RunOn(() =>                  {                      AwaitCount(countBefore - 2);                  }' _first' _second);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_remove_entries_when_node_is_removed,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Mediator.Tell(Count.Instance);                  var countBefore = ExpectMsg<int>();                    RunOn(() =>                  {                      TestConductor.Exit(_third' 0).Wait();                  }' _first);                  EnterBarrier("third-shutdown");                    // third had 2 entries u5 and u11' and those should be removed everywhere                  RunOn(() =>                  {                      AwaitCount(countBefore - 2);                  }' _first' _second);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_receive_proper_UnsubscribeAck_message,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var user = CreateChatUser("u111");                      var topic = "sample-topic-14";                      var s1 = new Subscribe(topic' user);                      Mediator.Tell(s1);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s1));                      var uns = new Unsubscribe(topic' user);                      Mediator.Tell(uns);                      ExpectMsg<UnsubscribeAck>(x => x.Unsubscribe.Equals(uns));                  }' _first);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_should_get_topics_after_simple_publish,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s1 = new Subscribe("topic_a1"' CreateChatUser("u14"));                      Mediator.Tell(s1);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s1));                        var s2 = new Subscribe("topic_a1"' CreateChatUser("u15"));                      Mediator.Tell(s2);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s2));                        var s3 = new Subscribe("topic_a2"' CreateChatUser("u16"));                      Mediator.Tell(s3);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s3));                    }' _first);                    RunOn(() =>                  {                      var s3 = new Subscribe("topic_a1"' CreateChatUser("u17"));                      Mediator.Tell(s3);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s3));                    }' _second);                  EnterBarrier("topics-registered");                    RunOn(() =>                  {                      Mediator.Tell(GetTopics.Instance);                      ExpectMsg<CurrentTopics>(                          x => x.Topics.Contains("topic_a1") && x.Topics.Contains("topic_a2"));                  }' _first);                    RunOn(() =>                  {                      // topics will eventually be replicated                      AwaitAssert(() =>                      {                          Mediator.Tell(GetTopics.Instance);                          var topics = ExpectMsg<CurrentTopics>().Topics;                            Assert.True(topics.Contains("topic_a1"));                          Assert.True(topics.Contains("topic_a2"));                      });                  }' _second);                  EnterBarrier("after-get-topics");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,ClusterSingletonManager_in_chaotic_cluster_should_startup_6_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  var memberProbe = CreateTestProbe();                  Cluster.Subscribe(memberProbe.Ref' new[] { typeof(ClusterEvent.MemberUp) });                  memberProbe.ExpectMsg<ClusterEvent.CurrentClusterState>();                    Join(_config.First' _config.First);                  AwaitMemberUp(memberProbe' _config.First);                  RunOn(() =>                  {                      ExpectMsg<EchoStarted>();                  }' _config.First);                  EnterBarrier("_config.First-started");                    Join(_config.Second' _config.First);                  AwaitMemberUp(memberProbe' _config.Second' _config.First);                    Join(_config.Third' _config.First);                  AwaitMemberUp(memberProbe' _config.Third' _config.Second' _config.First);                    Join(_config.Fourth' _config.First);                  AwaitMemberUp(memberProbe' _config.Fourth' _config.Third' _config.Second' _config.First);                    Join(_config.Fifth' _config.First);                  AwaitMemberUp(memberProbe' _config.Fifth' _config.Fourth' _config.Third' _config.Second' _config.First);                    Join(_config.Sixth' _config.First);                  AwaitMemberUp(memberProbe' _config.Sixth' _config.Fifth' _config.Fourth' _config.Third' _config.Second' _config.First);                    RunOn(() =>                  {                      Echo(_config.First).Tell("hello");                      ExpectMsg<IActorRef>(TimeSpan.FromSeconds(3)).Path.Address                          .Should()                          .Be(GetAddress(_config.First));                  }' _config.Controller);                    EnterBarrier("_config.First-verified");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,ClusterSingletonManager_in_chaotic_cluster_should_startup_6_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  var memberProbe = CreateTestProbe();                  Cluster.Subscribe(memberProbe.Ref' new[] { typeof(ClusterEvent.MemberUp) });                  memberProbe.ExpectMsg<ClusterEvent.CurrentClusterState>();                    Join(_config.First' _config.First);                  AwaitMemberUp(memberProbe' _config.First);                  RunOn(() =>                  {                      ExpectMsg<EchoStarted>();                  }' _config.First);                  EnterBarrier("_config.First-started");                    Join(_config.Second' _config.First);                  AwaitMemberUp(memberProbe' _config.Second' _config.First);                    Join(_config.Third' _config.First);                  AwaitMemberUp(memberProbe' _config.Third' _config.Second' _config.First);                    Join(_config.Fourth' _config.First);                  AwaitMemberUp(memberProbe' _config.Fourth' _config.Third' _config.Second' _config.First);                    Join(_config.Fifth' _config.First);                  AwaitMemberUp(memberProbe' _config.Fifth' _config.Fourth' _config.Third' _config.Second' _config.First);                    Join(_config.Sixth' _config.First);                  AwaitMemberUp(memberProbe' _config.Sixth' _config.Fifth' _config.Fourth' _config.Third' _config.Second' _config.First);                    RunOn(() =>                  {                      Echo(_config.First).Tell("hello");                      ExpectMsg<IActorRef>(TimeSpan.FromSeconds(3)).Path.Address                          .Should()                          .Be(GetAddress(_config.First));                  }' _config.Controller);                    EnterBarrier("_config.First-verified");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,Crash,The following statement contains a magic number: RunOn(() =>              {                  foreach (var roleName in roles)                  {                      Log.Info("Shutdown [{0}]"' GetAddress(roleName));                      TestConductor.Exit(roleName' 0).Wait(TimeSpan.FromSeconds(10));                  }              }' _config.Controller);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,AwaitMemberUp,The following statement contains a magic number: RunOn(() =>                  {                      memberProbe.ExpectMsg<ClusterEvent.MemberUp>(TimeSpan.FromSeconds(15)).Member.Address                          .Should()                          .Be(GetAddress(nodes.First()));                  }' nodes.Skip(1).ToArray());
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,AwaitMemberUp,The following statement contains a magic number: RunOn(() =>              {                  var roleNodes = nodes.Select(node => GetAddress(node));                    var addresses = memberProbe.ReceiveN(nodes.Length' TimeSpan.FromSeconds(15))                      .Where(x => x is ClusterEvent.MemberUp)                      .Select(x => (x as ClusterEvent.MemberUp).Member.Address);                    addresses.Except(roleNodes).Count().Should().Be(0);              }' nodes.First());
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerStartupSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerStartupSpec.cs,Startup_of_ClusterSingleton_should_be_quick,The following statement contains a magic number: Within(TimeSpan.FromSeconds(7)' () =>              {                  AwaitAssert(() =>                  {                      var members = Cluster.ReadView.State.Members;                      Assert.Equal(3' members.Count);                      members.All(c => c.Status == MemberStatus.Up).Should().BeTrue();                  });              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerStartupSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerStartupSpec.cs,Startup_of_ClusterSingleton_should_be_quick,The following statement contains a magic number: Within(TimeSpan.FromSeconds(7)' () =>              {                  AwaitAssert(() =>                  {                      var members = Cluster.ReadView.State.Members;                      Assert.Equal(3' members.Count);                      members.All(c => c.Status == MemberStatus.Up).Should().BeTrue();                  });              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerStartupSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerStartupSpec.cs,Startup_of_ClusterSingleton_should_be_quick,The following statement contains a magic number: ExpectMsg<IActorRef>(TimeSpan.FromSeconds(3));
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_should_handover_to_new_instance,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() => Assert.Equal(3' Cluster.ReadView.State.Members.Count(m => m.Status == MemberStatus.Up)));              });
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_should_handover_to_new_instance,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() => Assert.Equal(3' Cluster.ReadView.State.Members.Count(m => m.Status == MemberStatus.Up)));              });
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_should_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  ExpectMsg("stopped"' TimeSpan.FromSeconds(10));              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_should_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  var p = CreateTestProbe();                  var firstAddress = Node(_first).Address;                  p.Within(TimeSpan.FromSeconds(10)' () =>                  {                      p.AwaitAssert(() =>                      {                          _echoProxy.Value.Tell("hello2"' p.Ref);                          Assert.NotEqual(firstAddress' p.ExpectMsg<IActorRef>(TimeSpan.FromSeconds(1)).Path.Address);                      });                  });              }' _second' _third);
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,AwaitMemberUp,The following statement contains a magic number: RunOn(() =>              {                  Assert.Equal(Node(nodes[0]).Address' memberProbe.ExpectMsg<ClusterEvent.MemberUp>(TimeSpan.FromSeconds(15)).Member.Address);              }' nodes.Skip(1).ToArray());
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,AwaitMemberUp,The following statement contains a magic number: RunOn(() =>              {                  var membersUp = memberProbe.ReceiveN(nodes.Length' TimeSpan.FromSeconds(15))                      .Where(x => x is ClusterEvent.MemberUp)                      .Select(x => (x as ClusterEvent.MemberUp).Member.Address)                      .Distinct()                      .ToArray();                    Assert.True(nodes.Select(x => Node(x).Address).ToArray().All(x => membersUp.Contains(x)));              }' nodes[0]);
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,VerifyProxyMsg,The following statement contains a magic number: RunOn(() =>              {                  // make sure that the proxy has received membership changes                  // and points to the current singleton                  var p = CreateTestProbe();                  Within(TimeSpan.FromSeconds(5)' () =>                  {                      AwaitAssert(() =>                      {                          Sys.ActorSelection("/user/consumerProxy").Tell(Akka.Cluster.Tools.Tests.Singleton.Consumer.Ping.Instance' p.Ref);                          p.ExpectMsg<Consumer.Pong>(TimeSpan.FromSeconds(1));                      });                  });                    // send a real message                  Sys.ActorSelection("/user/consumerProxy").Tell(msg);              }' proxyNode);
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,VerifyProxyMsg,The following statement contains a magic number: RunOn(() =>              {                  ExpectMsg(msg' TimeSpan.FromSeconds(5));              }' oldest);
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_startup_6_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  var memberProbe = CreateTestProbe();                  Cluster.Subscribe(memberProbe.Ref' new[] { typeof(ClusterEvent.MemberUp) });                  memberProbe.ExpectMsg<ClusterEvent.CurrentClusterState>();                    RunOn(() =>                  {                      // watch that it is not terminated' which would indicate misbehaviour                      Watch(Sys.ActorOf(Props.Create<PointToPointChannel>()' "queue"));                  }' _controller);                  EnterBarrier("queue-started");                    Join(_first' _first);                  AwaitMemberUp(memberProbe' _first);                  VerifyRegistration(_first);                  VerifyMsg(_first' Msg);                    // join the observer node as well' which should not influence since it doesn't have the "worker" role                  Join(_observer' _first);                  AwaitMemberUp(memberProbe' _observer' _first);                  VerifyProxyMsg(_first' _first' Msg);                    Join(_second' _first);                  AwaitMemberUp(memberProbe' _second' _observer' _first);                  VerifyMsg(_first' Msg);                  VerifyProxyMsg(_first' _second' Msg);                    Join(_third' _first);                  AwaitMemberUp(memberProbe' _third' _second' _observer' _first);                  VerifyMsg(_first' Msg);                  VerifyProxyMsg(_first' _third' Msg);                    Join(_fourth' _first);                  AwaitMemberUp(memberProbe' _fourth' _third' _second' _observer' _first);                  VerifyMsg(_first' Msg);                  VerifyProxyMsg(_first' _fourth' Msg);                    Join(_fifth' _first);                  AwaitMemberUp(memberProbe' _fifth' _fourth' _third' _second' _observer' _first);                  VerifyMsg(_first' Msg);                  VerifyProxyMsg(_first' _fifth' Msg);                    Join(_sixth' _first);                  AwaitMemberUp(memberProbe' _sixth' _fifth' _fourth' _third' _second' _observer' _first);                  VerifyMsg(_first' Msg);                  VerifyProxyMsg(_first' _sixth' Msg);              });
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_let_the_proxy_messages_to_the_singleton_in_a_6_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  VerifyProxyMsg(_first' _first' Msg);                  VerifyProxyMsg(_first' _second' Msg);                  VerifyProxyMsg(_first' _third' Msg);                  VerifyProxyMsg(_first' _fourth' Msg);                  VerifyProxyMsg(_first' _fifth' Msg);                  VerifyProxyMsg(_first' _sixth' Msg);              });
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_handover_when_oldest_leaves_in_6_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  var leaveNode = _first;                  var newOldestNode = _second;                    RunOn(() =>                  {                      Cluster.Leave(Node(leaveNode).Address);                  }' leaveNode);                    VerifyRegistration(_second);                  VerifyMsg(_second' Msg);                  VerifyProxyMsg(_second' _second' Msg);                  VerifyProxyMsg(_second' _third' Msg);                  VerifyProxyMsg(_second' _fourth' Msg);                  VerifyProxyMsg(_second' _fifth' Msg);                  VerifyProxyMsg(_second' _sixth' Msg);                    RunOn(() =>                  {                      Sys.ActorSelection("/user/consumer").Tell(new Identify("singleton")' _identifyProbe.Ref);                      _identifyProbe.ExpectMsg<ActorIdentity>(i =>                      {                          if (i.MessageId.Equals("singleton") && i.Subject != null)                          {                              Watch(i.Subject);                              ExpectTerminated(i.Subject);                          }                      });                  }' leaveNode);                  EnterBarrier("after-leave");              });
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_takeover_when_oldest_crashes_in_5_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled)                      Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(s => true)' new PredicateMatcher(s => true))));                  EnterBarrier("logs-muted");                    Crash(_second);                  VerifyRegistration(_third);                  VerifyMsg(_third' Msg);                  VerifyProxyMsg(_third' _third' Msg);                  VerifyProxyMsg(_third' _fourth' Msg);                  VerifyProxyMsg(_third' _fifth' Msg);                  VerifyProxyMsg(_third' _sixth' Msg);              });
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_takeover_when_two_oldest_crash_in_3_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Crash(_third' _fourth);                  VerifyRegistration(_fifth);                  VerifyMsg(_fifth' Msg);                  VerifyProxyMsg(_fifth' _fifth' Msg);                  VerifyProxyMsg(_fifth' _fifth' Msg);              });
Magic Number,Akka.Cluster.Tools.Tests.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_takeover_when_oldest_crashes_in_2_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Crash(_fifth);                  VerifyRegistration(_sixth);                  VerifyMsg(_sixth' Msg);                  VerifyProxyMsg(_sixth' _sixth' Msg);              });
