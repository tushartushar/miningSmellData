Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.Remote.TestKit,BarrierCoordinator,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,InitFSM,The method has 122 lines of code.
Long Method,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The method has 123 lines of code.
Long Method,Akka.Remote.TestKit,ClientFSM,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Player.cs,InitFSM,The method has 203 lines of code.
Complex Method,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,Cyclomatic complexity of the method is 25
Complex Method,Akka.Remote.TestKit,MsgDecoder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\MsgDecoder.cs,Decode,Cyclomatic complexity of the method is 16
Complex Method,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,Cyclomatic complexity of the method is 19
Complex Method,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,Cyclomatic complexity of the method is 13
Complex Method,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,Cyclomatic complexity of the method is 16
Complex Method,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,Cyclomatic complexity of the method is 13
Complex Method,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,Cyclomatic complexity of the method is 14
Complex Method,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,Cyclomatic complexity of the method is 22
Long Parameter List,Akka.Remote.TestKit,PlayerHandler,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Player.cs,PlayerHandler,The method has 7 parameters. Parameters: server' reconnects' backoff' poolSize' fsm' log' scheduler
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_Wrapper__Descriptor is 36.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_Wrapper__FieldAccessorTable is 44.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_Hello__Descriptor is 34.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_Hello__FieldAccessorTable is 42.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_EnterBarrier__Descriptor is 41.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_EnterBarrier__FieldAccessorTable is 49.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_AddressRequest__Descriptor is 43.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_AddressRequest__FieldAccessorTable is 51.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_Address__Descriptor is 36.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_Address__FieldAccessorTable is 44.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_InjectFailure__Descriptor is 42.
Long Identifier,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,,The length of the parameter internal__static_InjectFailure__FieldAccessorTable is 50.
Long Statement,Akka.Remote.TestKit,BarrierCoordinator,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,InitFSM,The length of the statement  "            StartWith(State.Idle' new Data(ImmutableHashSet.Create<Controller.NodeInfo>()' ""' ImmutableHashSet.Create<IActorRef>()' null)); " is 128.
Long Statement,Akka.Remote.TestKit,BarrierCoordinator,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,InitFSM,The length of the statement  "                                throw new ClientLostException(@event.StateData.Copy(clients.Remove(client)' arrived:arrived.Where(x => x != client.FSM).ToImmutableHashSet())' disconnected.Name); " is 162.
Long Statement,Akka.Remote.TestKit,BarrierCoordinator,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,InitFSM,The length of the statement  "                if (state == State.Idle && nextState == State.Waiting) SetTimer("Timeout"' new StateTimeout()' NextStateData.Deadline.TimeLeft' false); " is 135.
Long Statement,Akka.Remote.TestKit,TestConductor,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Conductor.cs,StartController,The length of the statement  "            var node = await _controller.Ask<IPEndPoint>(TestKit.Controller.GetSockAddr.Instance' Settings.QueryTimeout).ConfigureAwait(false); " is 131.
Long Statement,Akka.Remote.TestKit,ConductorHandler,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Conductor.cs,ExceptionCaught,The length of the statement  "            _log.Warning("handled network error from {0}: {1} {2}"' channel.RemoteAddress' exception.Message' exception.StackTrace); " is 120.
Long Statement,Akka.Remote.TestKit,ServerFSM,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Conductor.cs,InitFSM,The length of the statement  "                        @event.StateData.Tell(new Failure(new Controller.ClientDisconnectedException("client disconnected in state " + StateName + ": " + _channel)));                    " is 142.
Long Statement,Akka.Remote.TestKit,ServerFSM,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Conductor.cs,InitFSM,The length of the statement  "                    _log.Warning("client {0}' sent not Hello in first message (instead {1})' disconnecting"' _channel.RemoteAddress' @event.FsmEvent); " is 130.
Long Statement,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The length of the statement  "                        foreach(var a in _addrInterest[nodeInfo.Name]) a.Tell(new ToClient<AddressReply>(new AddressReply(nodeInfo.Name' nodeInfo.Addr))); " is 130.
Long Statement,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The length of the statement  "                   _nodes[throttle.Node].FSM.Forward(new ToClient<ThrottleMsg>(new ThrottleMsg(t.Addr' throttle.Direction' throttle.RateMBit))); " is 125.
Long Statement,Akka.Remote.TestKit,Throttle,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,Equals,The length of the statement  "            return Equals(_node' other._node) && Equals(_target' other._target) && Equals(_direction' other._direction) && _rateMBit.Equals(other._rateMBit); " is 145.
Long Statement,Akka.Remote.TestKit,Terminate,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The length of the statement  "                return ((_node != null ? _node.GetHashCode() : 0) * 397) ^ (_shutdownOrExit != null ? _shutdownOrExit.GetHashCode() : 0); " is 121.
Long Statement,Akka.Remote.TestKit,MsgEncoder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\MsgEncoder.cs,Address2Proto,The length of the statement  "                .SetPort(addr.Port.Value) //yep' it's FINE if this throws a null reference error - means that the test configuration is borked anyway " is 133.
Long Statement,Akka.Remote.TestKit,PlayerHandler,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Player.cs,FormatConnectionFailure,The length of the statement  "            sb.AppendLine($"Connection between [Local: {context.Channel.LocalAddress}] and [Remote: {context.Channel.RemoteAddress}] has failed."); " is 135.
Long Statement,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\RemoteConnection.cs,Shutdown,The length of the statement  "                LoggingFactory.GetLogger<RemoteConnection>().Warning("Failed to shutdown remote connection within {0}"' disconnectTimeout); " is 123.
Long Statement,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The length of the statement  "            int field_ordinal = global::System.Array.BinarySearch(_wrapperFieldNames' field_name' global::System.StringComparer.Ordinal); " is 125.
Long Statement,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The length of the statement  "            int field_ordinal = global::System.Array.BinarySearch(_helloFieldNames' field_name' global::System.StringComparer.Ordinal); " is 123.
Long Statement,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The length of the statement  "            int field_ordinal = global::System.Array.BinarySearch(_enterBarrierFieldNames' field_name' global::System.StringComparer.Ordinal); " is 130.
Long Statement,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The length of the statement  "            int field_ordinal = global::System.Array.BinarySearch(_addressRequestFieldNames' field_name' global::System.StringComparer.Ordinal); " is 132.
Long Statement,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The length of the statement  "            int field_ordinal = global::System.Array.BinarySearch(_addressFieldNames' field_name' global::System.StringComparer.Ordinal); " is 125.
Long Statement,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The length of the statement  "            int field_ordinal = global::System.Array.BinarySearch(_injectFailureFieldNames' field_name' global::System.StringComparer.Ordinal); " is 131.
Virtual Method Call from Constructor,Akka.Remote.TestKit,TestConductor,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Conductor.cs,TestConductor,The constructor "TestConductor" calls a virtual method "WithFallback".
Magic Number,Akka.Remote.TestKit,Data,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Barrier != null ? Barrier.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Data,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Arrived != null ? Arrived.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Data,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Deadline != null ? Deadline.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Data,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: return ((_channel != null ? _channel.GetHashCode() : 0) * 397)                           ^ (_runningOp != null ? _runningOp.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,DuplicateNodeException,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: return ((BarrierData != null ? BarrierData.GetHashCode() : 0)*397) ^ (Node != null ? Node.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,WrongBarrierException,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (Client != null ? Client.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,WrongBarrierException,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (BarrierData != null ? BarrierData.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,ClientLostException,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: return ((BarrierData != null ? BarrierData.GetHashCode() : 0) * 397)                           ^ (Client != null ? Client.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,ServerFSM,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Conductor.cs,InitFSM,The following statement contains a magic number: When(State.Initial' @event =>              {                  var hello = @event.FsmEvent as Hello;                  if (hello != null)                  {                      _roleName = new RoleName(hello.Name);                      _controller.Tell(new Controller.NodeInfo(_roleName' hello.Address' Self));                      return GoTo(State.Ready);                  }                  if (@event.FsmEvent is INetworkOp)                  {                      _log.Warning("client {0}' sent not Hello in first message (instead {1})' disconnecting"' _channel.RemoteAddress' @event.FsmEvent);                      _channel.CloseAsync();                      return Stop();                  }                  if (@event.FsmEvent is IToClient)                  {                      _log.Warning("cannot send {0} in state Initial"' @event.FsmEvent);                      return Stay();                  }                  if (@event.FsmEvent is StateTimeout)                  {                      _log.Info("closing channel to {0} because of Hello timeout"' _channel.RemoteAddress);                      _channel.CloseAsync();                      return Stop();                  }                  return null;              }' TimeSpan.FromSeconds(10));
Magic Number,Akka.Remote.TestKit,NodeInfo,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Controller.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (_addr != null ? _addr.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,NodeInfo,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Controller.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (_fsm != null ? _fsm.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Hello,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_name != null ? _name.GetHashCode() : 0) * 397) ^ (_address != null ? _address.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_name != null ? _name.GetHashCode() : 0) * 397) ^ _timeout.GetHashCode();
Magic Number,Akka.Remote.TestKit,BarrierResult,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_name != null ? _name.GetHashCode() : 0) * 397) ^ _success.GetHashCode();
Magic Number,Akka.Remote.TestKit,Throttle,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_target != null ? _target.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Throttle,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_direction != null ? _direction.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Throttle,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _rateMBit.GetHashCode();
Magic Number,Akka.Remote.TestKit,ThrottleMsg,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_direction != null ? _direction.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,ThrottleMsg,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _rateMBit.GetHashCode();
Magic Number,Akka.Remote.TestKit,Disconnect,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_target != null ? _target.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Disconnect,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _abort.GetHashCode();
Magic Number,Akka.Remote.TestKit,DisconnectMsg,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_target != null ? _target.GetHashCode() : 0) * 397) ^ _abort.GetHashCode();
Magic Number,Akka.Remote.TestKit,Terminate,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_node != null ? _node.GetHashCode() : 0) * 397) ^ (_shutdownOrExit != null ? _shutdownOrExit.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,AddressReply,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_node != null ? _node.GetHashCode() : 0) * 397) ^ (_addr != null ? _addr.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,ClientFSM,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Player.cs,InitFSM,The following statement contains a magic number: When(State.Connected' @event =>              {                  if (@event.FsmEvent is Disconnected)                  {                      _log.Info("disconnected from TestConductor");                      throw new ConnectionFailure("disconnect");                  }                  if(@event.FsmEvent is ToServer<Done> && @event.StateData.Channel != null)                  {                      @event.StateData.Channel.WriteAndFlushAsync(Done.Instance);                      return Stay();                  }                  var toServer = @event.FsmEvent as IToServer;                  if (toServer != null && @event.StateData.Channel != null &&                      @event.StateData.RunningOp == null)                  {                      @event.StateData.Channel.WriteAndFlushAsync(toServer.Msg);                      string token = null;                      var enterBarrier = @event.FsmEvent as ToServer<EnterBarrier>;                      if (enterBarrier != null) token = enterBarrier.Msg.Name;                      else                      {                          var getAddress = @event.FsmEvent as ToServer<GetAddress>;                          if (getAddress != null) token = getAddress.Msg.Node.Name;                      }                      return Stay().Using(@event.StateData.Copy(runningOp: Tuple.Create(token' Sender)));                  }                  if (toServer != null && @event.StateData.Channel != null &&                      @event.StateData.RunningOp != null)                  {                      _log.Error("cannot write {0} while waiting for {1}"' toServer.Msg' @event.StateData.RunningOp);                      return Stay();                  }                  if (@event.FsmEvent is IClientOp && @event.StateData.Channel != null)                  {                      var barrierResult = @event.FsmEvent as BarrierResult;                      if (barrierResult != null)                      {                          if (@event.StateData.RunningOp == null)                          {                              _log.Warning("did not expect {1}"' @event.FsmEvent);                          }                          else                          {                              object response;                              if (barrierResult.Name != @event.StateData.RunningOp.Item1)                              {                                  response =                                      new Failure(                                          new Exception("wrong barrier " + barrierResult + " received while waiting for " +                                                        @event.StateData.RunningOp.Item1));                              }                              else if (!barrierResult.Success)                              {                                  response =                                      new Failure(                                          new Exception("barrier failed:" + @event.StateData.RunningOp.Item1));                              }                              else                              {                                  response = barrierResult.Name;                              }                              @event.StateData.RunningOp.Item2.Tell(response);                          }                          return Stay().Using(@event.StateData.Copy(runningOp: null));                      }                      var addressReply = @event.FsmEvent as AddressReply;                      if (addressReply != null)                      {                          if (@event.StateData.RunningOp == null)                          {                              _log.Warning("did not expect {0}"' @event.FsmEvent);                          }                          else                          {                              @event.StateData.RunningOp.Item2.Tell(addressReply.Addr);                          }                          return Stay().Using(@event.StateData.Copy(runningOp: null));                      }                      var throttleMsg = @event.FsmEvent as ThrottleMsg;                      if (@event.FsmEvent is ThrottleMsg)                      {                          ThrottleMode mode;                          if (throttleMsg.RateMBit < 0.0f) mode = Unthrottled.Instance;                          else if (throttleMsg.RateMBit == 0.0f) mode = Blackhole.Instance;                          else mode = new TokenBucket(1000' throttleMsg.RateMBit*125000' 0' 0);                          var cmdTask =                              TestConductor.Get(Context.System)                                  .Transport.ManagementCommand(new SetThrottle(throttleMsg.Target' throttleMsg.Direction'                                      mode));                            var self = Self;                          cmdTask.ContinueWith(t =>                          {                              if (t.IsFaulted)                                  throw new ConfigurationException("Throttle was requested from the TestConductor' but no transport " +                                      "adapters available that support throttling. Specify 'testTransport(on=true)' in your MultiNodeConfig");                              self.Tell(new ToServer<Done>(Done.Instance));                          });                          return Stay();                      }                      if (@event.FsmEvent is DisconnectMsg)                          return Stay(); //FIXME is this the right EC for the future below?                      var terminateMsg = @event.FsmEvent as TerminateMsg;                      if (terminateMsg != null)                      {                          _log.Info("Received TerminateMsg - shutting down...");                          if (terminateMsg.ShutdownOrExit.IsLeft && terminateMsg.ShutdownOrExit.ToLeft().Value == false)                          {                              Context.System.Terminate();                              return Stay();                          }                          if (terminateMsg.ShutdownOrExit.IsLeft && terminateMsg.ShutdownOrExit.ToLeft().Value == true)                          {                              //TODO: terminate more aggressively with Abort                              //Context.System.AsInstanceOf<ActorSystemImpl>().Abort();                              Context.System.Terminate();                              return Stay();                          }                          if (terminateMsg.ShutdownOrExit.IsRight)                          {                              Environment.Exit(terminateMsg.ShutdownOrExit.ToRight().Value);                              return Stay();                          }                      }                      if (@event.FsmEvent is Done) return Stay(); //FIXME what should happen?                  }                  return null;              });
Magic Number,Akka.Remote.TestKit,ClientFSM,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Player.cs,InitFSM,The following statement contains a magic number: When(State.Connected' @event =>              {                  if (@event.FsmEvent is Disconnected)                  {                      _log.Info("disconnected from TestConductor");                      throw new ConnectionFailure("disconnect");                  }                  if(@event.FsmEvent is ToServer<Done> && @event.StateData.Channel != null)                  {                      @event.StateData.Channel.WriteAndFlushAsync(Done.Instance);                      return Stay();                  }                  var toServer = @event.FsmEvent as IToServer;                  if (toServer != null && @event.StateData.Channel != null &&                      @event.StateData.RunningOp == null)                  {                      @event.StateData.Channel.WriteAndFlushAsync(toServer.Msg);                      string token = null;                      var enterBarrier = @event.FsmEvent as ToServer<EnterBarrier>;                      if (enterBarrier != null) token = enterBarrier.Msg.Name;                      else                      {                          var getAddress = @event.FsmEvent as ToServer<GetAddress>;                          if (getAddress != null) token = getAddress.Msg.Node.Name;                      }                      return Stay().Using(@event.StateData.Copy(runningOp: Tuple.Create(token' Sender)));                  }                  if (toServer != null && @event.StateData.Channel != null &&                      @event.StateData.RunningOp != null)                  {                      _log.Error("cannot write {0} while waiting for {1}"' toServer.Msg' @event.StateData.RunningOp);                      return Stay();                  }                  if (@event.FsmEvent is IClientOp && @event.StateData.Channel != null)                  {                      var barrierResult = @event.FsmEvent as BarrierResult;                      if (barrierResult != null)                      {                          if (@event.StateData.RunningOp == null)                          {                              _log.Warning("did not expect {1}"' @event.FsmEvent);                          }                          else                          {                              object response;                              if (barrierResult.Name != @event.StateData.RunningOp.Item1)                              {                                  response =                                      new Failure(                                          new Exception("wrong barrier " + barrierResult + " received while waiting for " +                                                        @event.StateData.RunningOp.Item1));                              }                              else if (!barrierResult.Success)                              {                                  response =                                      new Failure(                                          new Exception("barrier failed:" + @event.StateData.RunningOp.Item1));                              }                              else                              {                                  response = barrierResult.Name;                              }                              @event.StateData.RunningOp.Item2.Tell(response);                          }                          return Stay().Using(@event.StateData.Copy(runningOp: null));                      }                      var addressReply = @event.FsmEvent as AddressReply;                      if (addressReply != null)                      {                          if (@event.StateData.RunningOp == null)                          {                              _log.Warning("did not expect {0}"' @event.FsmEvent);                          }                          else                          {                              @event.StateData.RunningOp.Item2.Tell(addressReply.Addr);                          }                          return Stay().Using(@event.StateData.Copy(runningOp: null));                      }                      var throttleMsg = @event.FsmEvent as ThrottleMsg;                      if (@event.FsmEvent is ThrottleMsg)                      {                          ThrottleMode mode;                          if (throttleMsg.RateMBit < 0.0f) mode = Unthrottled.Instance;                          else if (throttleMsg.RateMBit == 0.0f) mode = Blackhole.Instance;                          else mode = new TokenBucket(1000' throttleMsg.RateMBit*125000' 0' 0);                          var cmdTask =                              TestConductor.Get(Context.System)                                  .Transport.ManagementCommand(new SetThrottle(throttleMsg.Target' throttleMsg.Direction'                                      mode));                            var self = Self;                          cmdTask.ContinueWith(t =>                          {                              if (t.IsFaulted)                                  throw new ConfigurationException("Throttle was requested from the TestConductor' but no transport " +                                      "adapters available that support throttling. Specify 'testTransport(on=true)' in your MultiNodeConfig");                              self.Tell(new ToServer<Done>(Done.Instance));                          });                          return Stay();                      }                      if (@event.FsmEvent is DisconnectMsg)                          return Stay(); //FIXME is this the right EC for the future below?                      var terminateMsg = @event.FsmEvent as TerminateMsg;                      if (terminateMsg != null)                      {                          _log.Info("Received TerminateMsg - shutting down...");                          if (terminateMsg.ShutdownOrExit.IsLeft && terminateMsg.ShutdownOrExit.ToLeft().Value == false)                          {                              Context.System.Terminate();                              return Stay();                          }                          if (terminateMsg.ShutdownOrExit.IsLeft && terminateMsg.ShutdownOrExit.ToLeft().Value == true)                          {                              //TODO: terminate more aggressively with Abort                              //Context.System.AsInstanceOf<ActorSystemImpl>().Abort();                              Context.System.Terminate();                              return Stay();                          }                          if (terminateMsg.ShutdownOrExit.IsRight)                          {                              Environment.Exit(terminateMsg.ShutdownOrExit.ToRight().Value);                              return Stay();                          }                      }                      if (@event.FsmEvent is Done) return Stay(); //FIXME what should happen?                  }                  return null;              });
Magic Number,Akka.Remote.TestKit,ClientFSM,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Player.cs,InitFSM,The following statement contains a magic number: OnTermination(@event =>              {                  _log.Info("Terminating connection to multi-node test controller...");                  if (@event.StateData.Channel != null)                  {                      var disconnectTimeout = TimeSpan.FromSeconds(2); //todo: make into setting loaded from HOCON                      if (!@event.StateData.Channel.CloseAsync().Wait(disconnectTimeout))                      {                          _log.Warning("Failed to disconnect from conductor within {0}"' disconnectTimeout);                      }                  }              });
Magic Number,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\RemoteConnection.cs,ApplyChannelPipeline,The following statement contains a magic number: var encoders = new IChannelHandler[]              {new LengthFieldPrepender(4' false)' new LengthFieldBasedFrameDecoder(10000' 0' 4' 0' 4)};
Magic Number,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\RemoteConnection.cs,ApplyChannelPipeline,The following statement contains a magic number: var encoders = new IChannelHandler[]              {new LengthFieldPrepender(4' false)' new LengthFieldBasedFrameDecoder(10000' 0' 4' 0' 4)};
Magic Number,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\RemoteConnection.cs,ApplyChannelPipeline,The following statement contains a magic number: var encoders = new IChannelHandler[]              {new LengthFieldPrepender(4' false)' new LengthFieldBasedFrameDecoder(10000' 0' 4' 0' 4)};
Magic Number,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\RemoteConnection.cs,ApplyChannelPipeline,The following statement contains a magic number: var encoders = new IChannelHandler[]              {new LengthFieldPrepender(4' false)' new LengthFieldBasedFrameDecoder(10000' 0' 4' 0' 4)};
Magic Number,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\RemoteConnection.cs,Shutdown,The following statement contains a magic number: var disconnectTimeout = TimeSpan.FromSeconds(2);
Magic Number,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,TestConductorProtocol,The following statement contains a magic number: pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {          descriptor = root;          internal__static_Wrapper__Descriptor = Descriptor.MessageTypes[0];          internal__static_Wrapper__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Wrapper' global::TCP.Wrapper.Builder>(internal__static_Wrapper__Descriptor'                  new string[] { "Hello"' "Barrier"' "Failure"' "Done"' "Addr"' });          internal__static_Hello__Descriptor = Descriptor.MessageTypes[1];          internal__static_Hello__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Hello' global::TCP.Hello.Builder>(internal__static_Hello__Descriptor'                  new string[] { "Name"' "Address"' });          internal__static_EnterBarrier__Descriptor = Descriptor.MessageTypes[2];          internal__static_EnterBarrier__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.EnterBarrier' global::TCP.EnterBarrier.Builder>(internal__static_EnterBarrier__Descriptor'                  new string[] { "Name"' "Op"' "Timeout"' });          internal__static_AddressRequest__Descriptor = Descriptor.MessageTypes[3];          internal__static_AddressRequest__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.AddressRequest' global::TCP.AddressRequest.Builder>(internal__static_AddressRequest__Descriptor'                  new string[] { "Node"' "Addr"' });          internal__static_Address__Descriptor = Descriptor.MessageTypes[4];          internal__static_Address__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Address' global::TCP.Address.Builder>(internal__static_Address__Descriptor'                  new string[] { "Protocol"' "System"' "Host"' "Port"' });          internal__static_InjectFailure__Descriptor = Descriptor.MessageTypes[5];          internal__static_InjectFailure__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.InjectFailure' global::TCP.InjectFailure.Builder>(internal__static_InjectFailure__Descriptor'                  new string[] { "Failure"' "Direction"' "Address"' "RateMBit"' "ExitValue"' });          return null;        };
Magic Number,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,TestConductorProtocol,The following statement contains a magic number: pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {          descriptor = root;          internal__static_Wrapper__Descriptor = Descriptor.MessageTypes[0];          internal__static_Wrapper__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Wrapper' global::TCP.Wrapper.Builder>(internal__static_Wrapper__Descriptor'                  new string[] { "Hello"' "Barrier"' "Failure"' "Done"' "Addr"' });          internal__static_Hello__Descriptor = Descriptor.MessageTypes[1];          internal__static_Hello__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Hello' global::TCP.Hello.Builder>(internal__static_Hello__Descriptor'                  new string[] { "Name"' "Address"' });          internal__static_EnterBarrier__Descriptor = Descriptor.MessageTypes[2];          internal__static_EnterBarrier__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.EnterBarrier' global::TCP.EnterBarrier.Builder>(internal__static_EnterBarrier__Descriptor'                  new string[] { "Name"' "Op"' "Timeout"' });          internal__static_AddressRequest__Descriptor = Descriptor.MessageTypes[3];          internal__static_AddressRequest__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.AddressRequest' global::TCP.AddressRequest.Builder>(internal__static_AddressRequest__Descriptor'                  new string[] { "Node"' "Addr"' });          internal__static_Address__Descriptor = Descriptor.MessageTypes[4];          internal__static_Address__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Address' global::TCP.Address.Builder>(internal__static_Address__Descriptor'                  new string[] { "Protocol"' "System"' "Host"' "Port"' });          internal__static_InjectFailure__Descriptor = Descriptor.MessageTypes[5];          internal__static_InjectFailure__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.InjectFailure' global::TCP.InjectFailure.Builder>(internal__static_InjectFailure__Descriptor'                  new string[] { "Failure"' "Direction"' "Address"' "RateMBit"' "ExitValue"' });          return null;        };
Magic Number,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,TestConductorProtocol,The following statement contains a magic number: pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {          descriptor = root;          internal__static_Wrapper__Descriptor = Descriptor.MessageTypes[0];          internal__static_Wrapper__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Wrapper' global::TCP.Wrapper.Builder>(internal__static_Wrapper__Descriptor'                  new string[] { "Hello"' "Barrier"' "Failure"' "Done"' "Addr"' });          internal__static_Hello__Descriptor = Descriptor.MessageTypes[1];          internal__static_Hello__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Hello' global::TCP.Hello.Builder>(internal__static_Hello__Descriptor'                  new string[] { "Name"' "Address"' });          internal__static_EnterBarrier__Descriptor = Descriptor.MessageTypes[2];          internal__static_EnterBarrier__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.EnterBarrier' global::TCP.EnterBarrier.Builder>(internal__static_EnterBarrier__Descriptor'                  new string[] { "Name"' "Op"' "Timeout"' });          internal__static_AddressRequest__Descriptor = Descriptor.MessageTypes[3];          internal__static_AddressRequest__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.AddressRequest' global::TCP.AddressRequest.Builder>(internal__static_AddressRequest__Descriptor'                  new string[] { "Node"' "Addr"' });          internal__static_Address__Descriptor = Descriptor.MessageTypes[4];          internal__static_Address__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Address' global::TCP.Address.Builder>(internal__static_Address__Descriptor'                  new string[] { "Protocol"' "System"' "Host"' "Port"' });          internal__static_InjectFailure__Descriptor = Descriptor.MessageTypes[5];          internal__static_InjectFailure__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.InjectFailure' global::TCP.InjectFailure.Builder>(internal__static_InjectFailure__Descriptor'                  new string[] { "Failure"' "Direction"' "Address"' "RateMBit"' "ExitValue"' });          return null;        };
Magic Number,TCP,TestConductorProtocol,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,TestConductorProtocol,The following statement contains a magic number: pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {          descriptor = root;          internal__static_Wrapper__Descriptor = Descriptor.MessageTypes[0];          internal__static_Wrapper__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Wrapper' global::TCP.Wrapper.Builder>(internal__static_Wrapper__Descriptor'                  new string[] { "Hello"' "Barrier"' "Failure"' "Done"' "Addr"' });          internal__static_Hello__Descriptor = Descriptor.MessageTypes[1];          internal__static_Hello__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Hello' global::TCP.Hello.Builder>(internal__static_Hello__Descriptor'                  new string[] { "Name"' "Address"' });          internal__static_EnterBarrier__Descriptor = Descriptor.MessageTypes[2];          internal__static_EnterBarrier__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.EnterBarrier' global::TCP.EnterBarrier.Builder>(internal__static_EnterBarrier__Descriptor'                  new string[] { "Name"' "Op"' "Timeout"' });          internal__static_AddressRequest__Descriptor = Descriptor.MessageTypes[3];          internal__static_AddressRequest__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.AddressRequest' global::TCP.AddressRequest.Builder>(internal__static_AddressRequest__Descriptor'                  new string[] { "Node"' "Addr"' });          internal__static_Address__Descriptor = Descriptor.MessageTypes[4];          internal__static_Address__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.Address' global::TCP.Address.Builder>(internal__static_Address__Descriptor'                  new string[] { "Protocol"' "System"' "Host"' "Port"' });          internal__static_InjectFailure__Descriptor = Descriptor.MessageTypes[5];          internal__static_InjectFailure__FieldAccessorTable =               new pb::FieldAccess.FieldAccessorTable<global::TCP.InjectFailure' global::TCP.InjectFailure.Builder>(internal__static_InjectFailure__Descriptor'                  new string[] { "Failure"' "Direction"' "Address"' "RateMBit"' "ExitValue"' });          return null;        };
Magic Number,TCP,Wrapper,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(1' field_names[4]' Hello);
Magic Number,TCP,Wrapper,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(2' field_names[1]' Barrier);
Magic Number,TCP,Wrapper,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(3' field_names[3]' Failure);
Magic Number,TCP,Wrapper,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(3' field_names[3]' Failure);
Magic Number,TCP,Wrapper,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteString(4' field_names[2]' Done);
Magic Number,TCP,Wrapper,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteString(4' field_names[2]' Done);
Magic Number,TCP,Wrapper,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(5' field_names[0]' Addr);
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                global::TCP.Hello.Builder subBuilder = global::TCP.Hello.CreateBuilder();                if (result.hasHello) {                  subBuilder.MergeFrom(Hello);                }                input.ReadMessage(subBuilder' extensionRegistry);                Hello = subBuilder.BuildPartial();                break;              }              case 18: {                global::TCP.EnterBarrier.Builder subBuilder = global::TCP.EnterBarrier.CreateBuilder();                if (result.hasBarrier) {                  subBuilder.MergeFrom(Barrier);                }                input.ReadMessage(subBuilder' extensionRegistry);                Barrier = subBuilder.BuildPartial();                break;              }              case 26: {                global::TCP.InjectFailure.Builder subBuilder = global::TCP.InjectFailure.CreateBuilder();                if (result.hasFailure) {                  subBuilder.MergeFrom(Failure);                }                input.ReadMessage(subBuilder' extensionRegistry);                Failure = subBuilder.BuildPartial();                break;              }              case 34: {                result.hasDone = input.ReadString(ref result.done_);                break;              }              case 42: {                global::TCP.AddressRequest.Builder subBuilder = global::TCP.AddressRequest.CreateBuilder();                if (result.hasAddr) {                  subBuilder.MergeFrom(Addr);                }                input.ReadMessage(subBuilder' extensionRegistry);                Addr = subBuilder.BuildPartial();                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                global::TCP.Hello.Builder subBuilder = global::TCP.Hello.CreateBuilder();                if (result.hasHello) {                  subBuilder.MergeFrom(Hello);                }                input.ReadMessage(subBuilder' extensionRegistry);                Hello = subBuilder.BuildPartial();                break;              }              case 18: {                global::TCP.EnterBarrier.Builder subBuilder = global::TCP.EnterBarrier.CreateBuilder();                if (result.hasBarrier) {                  subBuilder.MergeFrom(Barrier);                }                input.ReadMessage(subBuilder' extensionRegistry);                Barrier = subBuilder.BuildPartial();                break;              }              case 26: {                global::TCP.InjectFailure.Builder subBuilder = global::TCP.InjectFailure.CreateBuilder();                if (result.hasFailure) {                  subBuilder.MergeFrom(Failure);                }                input.ReadMessage(subBuilder' extensionRegistry);                Failure = subBuilder.BuildPartial();                break;              }              case 34: {                result.hasDone = input.ReadString(ref result.done_);                break;              }              case 42: {                global::TCP.AddressRequest.Builder subBuilder = global::TCP.AddressRequest.CreateBuilder();                if (result.hasAddr) {                  subBuilder.MergeFrom(Addr);                }                input.ReadMessage(subBuilder' extensionRegistry);                Addr = subBuilder.BuildPartial();                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                global::TCP.Hello.Builder subBuilder = global::TCP.Hello.CreateBuilder();                if (result.hasHello) {                  subBuilder.MergeFrom(Hello);                }                input.ReadMessage(subBuilder' extensionRegistry);                Hello = subBuilder.BuildPartial();                break;              }              case 18: {                global::TCP.EnterBarrier.Builder subBuilder = global::TCP.EnterBarrier.CreateBuilder();                if (result.hasBarrier) {                  subBuilder.MergeFrom(Barrier);                }                input.ReadMessage(subBuilder' extensionRegistry);                Barrier = subBuilder.BuildPartial();                break;              }              case 26: {                global::TCP.InjectFailure.Builder subBuilder = global::TCP.InjectFailure.CreateBuilder();                if (result.hasFailure) {                  subBuilder.MergeFrom(Failure);                }                input.ReadMessage(subBuilder' extensionRegistry);                Failure = subBuilder.BuildPartial();                break;              }              case 34: {                result.hasDone = input.ReadString(ref result.done_);                break;              }              case 42: {                global::TCP.AddressRequest.Builder subBuilder = global::TCP.AddressRequest.CreateBuilder();                if (result.hasAddr) {                  subBuilder.MergeFrom(Addr);                }                input.ReadMessage(subBuilder' extensionRegistry);                Addr = subBuilder.BuildPartial();                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                global::TCP.Hello.Builder subBuilder = global::TCP.Hello.CreateBuilder();                if (result.hasHello) {                  subBuilder.MergeFrom(Hello);                }                input.ReadMessage(subBuilder' extensionRegistry);                Hello = subBuilder.BuildPartial();                break;              }              case 18: {                global::TCP.EnterBarrier.Builder subBuilder = global::TCP.EnterBarrier.CreateBuilder();                if (result.hasBarrier) {                  subBuilder.MergeFrom(Barrier);                }                input.ReadMessage(subBuilder' extensionRegistry);                Barrier = subBuilder.BuildPartial();                break;              }              case 26: {                global::TCP.InjectFailure.Builder subBuilder = global::TCP.InjectFailure.CreateBuilder();                if (result.hasFailure) {                  subBuilder.MergeFrom(Failure);                }                input.ReadMessage(subBuilder' extensionRegistry);                Failure = subBuilder.BuildPartial();                break;              }              case 34: {                result.hasDone = input.ReadString(ref result.done_);                break;              }              case 42: {                global::TCP.AddressRequest.Builder subBuilder = global::TCP.AddressRequest.CreateBuilder();                if (result.hasAddr) {                  subBuilder.MergeFrom(Addr);                }                input.ReadMessage(subBuilder' extensionRegistry);                Addr = subBuilder.BuildPartial();                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                global::TCP.Hello.Builder subBuilder = global::TCP.Hello.CreateBuilder();                if (result.hasHello) {                  subBuilder.MergeFrom(Hello);                }                input.ReadMessage(subBuilder' extensionRegistry);                Hello = subBuilder.BuildPartial();                break;              }              case 18: {                global::TCP.EnterBarrier.Builder subBuilder = global::TCP.EnterBarrier.CreateBuilder();                if (result.hasBarrier) {                  subBuilder.MergeFrom(Barrier);                }                input.ReadMessage(subBuilder' extensionRegistry);                Barrier = subBuilder.BuildPartial();                break;              }              case 26: {                global::TCP.InjectFailure.Builder subBuilder = global::TCP.InjectFailure.CreateBuilder();                if (result.hasFailure) {                  subBuilder.MergeFrom(Failure);                }                input.ReadMessage(subBuilder' extensionRegistry);                Failure = subBuilder.BuildPartial();                break;              }              case 34: {                result.hasDone = input.ReadString(ref result.done_);                break;              }              case 42: {                global::TCP.AddressRequest.Builder subBuilder = global::TCP.AddressRequest.CreateBuilder();                if (result.hasAddr) {                  subBuilder.MergeFrom(Addr);                }                input.ReadMessage(subBuilder' extensionRegistry);                Addr = subBuilder.BuildPartial();                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasName = input.ReadString(ref result.name_);                break;              }              case 18: {                global::TCP.Address.Builder subBuilder = global::TCP.Address.CreateBuilder();                if (result.hasAddress) {                  subBuilder.MergeFrom(Address);                }                input.ReadMessage(subBuilder' extensionRegistry);                Address = subBuilder.BuildPartial();                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasName = input.ReadString(ref result.name_);                break;              }              case 18: {                global::TCP.Address.Builder subBuilder = global::TCP.Address.CreateBuilder();                if (result.hasAddress) {                  subBuilder.MergeFrom(Address);                }                input.ReadMessage(subBuilder' extensionRegistry);                Address = subBuilder.BuildPartial();                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasName = input.ReadString(ref result.name_);                break;              }              case 16: {                object unknown;                if(input.ReadEnum(ref result.op_' out unknown)) {                  result.hasOp = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(2' (ulong)(int)unknown);                }                break;              }              case 24: {                result.hasTimeout = input.ReadInt64(ref result.timeout_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasName = input.ReadString(ref result.name_);                break;              }              case 16: {                object unknown;                if(input.ReadEnum(ref result.op_' out unknown)) {                  result.hasOp = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(2' (ulong)(int)unknown);                }                break;              }              case 24: {                result.hasTimeout = input.ReadInt64(ref result.timeout_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasName = input.ReadString(ref result.name_);                break;              }              case 16: {                object unknown;                if(input.ReadEnum(ref result.op_' out unknown)) {                  result.hasOp = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(2' (ulong)(int)unknown);                }                break;              }              case 24: {                result.hasTimeout = input.ReadInt64(ref result.timeout_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasName = input.ReadString(ref result.name_);                break;              }              case 16: {                object unknown;                if(input.ReadEnum(ref result.op_' out unknown)) {                  result.hasOp = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(2' (ulong)(int)unknown);                }                break;              }              case 24: {                result.hasTimeout = input.ReadInt64(ref result.timeout_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasNode = input.ReadString(ref result.node_);                break;              }              case 18: {                global::TCP.Address.Builder subBuilder = global::TCP.Address.CreateBuilder();                if (result.hasAddr) {                  subBuilder.MergeFrom(Addr);                }                input.ReadMessage(subBuilder' extensionRegistry);                Addr = subBuilder.BuildPartial();                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasNode = input.ReadString(ref result.node_);                break;              }              case 18: {                global::TCP.Address.Builder subBuilder = global::TCP.Address.CreateBuilder();                if (result.hasAddr) {                  subBuilder.MergeFrom(Addr);                }                input.ReadMessage(subBuilder' extensionRegistry);                Addr = subBuilder.BuildPartial();                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasProtocol = input.ReadString(ref result.protocol_);                break;              }              case 18: {                result.hasSystem = input.ReadString(ref result.system_);                break;              }              case 26: {                result.hasHost = input.ReadString(ref result.host_);                break;              }              case 32: {                result.hasPort = input.ReadInt32(ref result.port_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasProtocol = input.ReadString(ref result.protocol_);                break;              }              case 18: {                result.hasSystem = input.ReadString(ref result.system_);                break;              }              case 26: {                result.hasHost = input.ReadString(ref result.host_);                break;              }              case 32: {                result.hasPort = input.ReadInt32(ref result.port_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasProtocol = input.ReadString(ref result.protocol_);                break;              }              case 18: {                result.hasSystem = input.ReadString(ref result.system_);                break;              }              case 26: {                result.hasHost = input.ReadString(ref result.host_);                break;              }              case 32: {                result.hasPort = input.ReadInt32(ref result.port_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 10: {                result.hasProtocol = input.ReadString(ref result.protocol_);                break;              }              case 18: {                result.hasSystem = input.ReadString(ref result.system_);                break;              }              case 26: {                result.hasHost = input.ReadString(ref result.host_);                break;              }              case 32: {                result.hasPort = input.ReadInt32(ref result.port_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 8: {                object unknown;                if(input.ReadEnum(ref result.failure_' out unknown)) {                  result.hasFailure = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(1' (ulong)(int)unknown);                }                break;              }              case 16: {                object unknown;                if(input.ReadEnum(ref result.direction_' out unknown)) {                  result.hasDirection = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(2' (ulong)(int)unknown);                }                break;              }              case 26: {                global::TCP.Address.Builder subBuilder = global::TCP.Address.CreateBuilder();                if (result.hasAddress) {                  subBuilder.MergeFrom(Address);                }                input.ReadMessage(subBuilder' extensionRegistry);                Address = subBuilder.BuildPartial();                break;              }              case 53: {                result.hasRateMBit = input.ReadFloat(ref result.rateMBit_);                break;              }              case 56: {                result.hasExitValue = input.ReadInt32(ref result.exitValue_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 8: {                object unknown;                if(input.ReadEnum(ref result.failure_' out unknown)) {                  result.hasFailure = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(1' (ulong)(int)unknown);                }                break;              }              case 16: {                object unknown;                if(input.ReadEnum(ref result.direction_' out unknown)) {                  result.hasDirection = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(2' (ulong)(int)unknown);                }                break;              }              case 26: {                global::TCP.Address.Builder subBuilder = global::TCP.Address.CreateBuilder();                if (result.hasAddress) {                  subBuilder.MergeFrom(Address);                }                input.ReadMessage(subBuilder' extensionRegistry);                Address = subBuilder.BuildPartial();                break;              }              case 53: {                result.hasRateMBit = input.ReadFloat(ref result.rateMBit_);                break;              }              case 56: {                result.hasExitValue = input.ReadInt32(ref result.exitValue_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 8: {                object unknown;                if(input.ReadEnum(ref result.failure_' out unknown)) {                  result.hasFailure = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(1' (ulong)(int)unknown);                }                break;              }              case 16: {                object unknown;                if(input.ReadEnum(ref result.direction_' out unknown)) {                  result.hasDirection = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(2' (ulong)(int)unknown);                }                break;              }              case 26: {                global::TCP.Address.Builder subBuilder = global::TCP.Address.CreateBuilder();                if (result.hasAddress) {                  subBuilder.MergeFrom(Address);                }                input.ReadMessage(subBuilder' extensionRegistry);                Address = subBuilder.BuildPartial();                break;              }              case 53: {                result.hasRateMBit = input.ReadFloat(ref result.rateMBit_);                break;              }              case 56: {                result.hasExitValue = input.ReadInt32(ref result.exitValue_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 8: {                object unknown;                if(input.ReadEnum(ref result.failure_' out unknown)) {                  result.hasFailure = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(1' (ulong)(int)unknown);                }                break;              }              case 16: {                object unknown;                if(input.ReadEnum(ref result.direction_' out unknown)) {                  result.hasDirection = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(2' (ulong)(int)unknown);                }                break;              }              case 26: {                global::TCP.Address.Builder subBuilder = global::TCP.Address.CreateBuilder();                if (result.hasAddress) {                  subBuilder.MergeFrom(Address);                }                input.ReadMessage(subBuilder' extensionRegistry);                Address = subBuilder.BuildPartial();                break;              }              case 53: {                result.hasRateMBit = input.ReadFloat(ref result.rateMBit_);                break;              }              case 56: {                result.hasExitValue = input.ReadInt32(ref result.exitValue_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 8: {                object unknown;                if(input.ReadEnum(ref result.failure_' out unknown)) {                  result.hasFailure = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(1' (ulong)(int)unknown);                }                break;              }              case 16: {                object unknown;                if(input.ReadEnum(ref result.direction_' out unknown)) {                  result.hasDirection = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(2' (ulong)(int)unknown);                }                break;              }              case 26: {                global::TCP.Address.Builder subBuilder = global::TCP.Address.CreateBuilder();                if (result.hasAddress) {                  subBuilder.MergeFrom(Address);                }                input.ReadMessage(subBuilder' extensionRegistry);                Address = subBuilder.BuildPartial();                break;              }              case 53: {                result.hasRateMBit = input.ReadFloat(ref result.rateMBit_);                break;              }              case 56: {                result.hasExitValue = input.ReadInt32(ref result.exitValue_);                break;              }            }
Magic Number,TCP,Builder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,MergeFrom,The following statement contains a magic number: switch (tag) {              case 0: {                throw pb::InvalidProtocolBufferException.InvalidTag();              }              default: {                if (pb::WireFormat.IsEndGroupTag(tag)) {                  if (unknownFields != null) {                    this.UnknownFields = unknownFields.Build();                  }                  return this;                }                if (unknownFields == null) {                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                }                ParseUnknownField(input' unknownFields' extensionRegistry' tag' field_name);                break;              }              case 8: {                object unknown;                if(input.ReadEnum(ref result.failure_' out unknown)) {                  result.hasFailure = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(1' (ulong)(int)unknown);                }                break;              }              case 16: {                object unknown;                if(input.ReadEnum(ref result.direction_' out unknown)) {                  result.hasDirection = true;                } else if(unknown is int) {                  if (unknownFields == null) {                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);                  }                  unknownFields.MergeVarintField(2' (ulong)(int)unknown);                }                break;              }              case 26: {                global::TCP.Address.Builder subBuilder = global::TCP.Address.CreateBuilder();                if (result.hasAddress) {                  subBuilder.MergeFrom(Address);                }                input.ReadMessage(subBuilder' extensionRegistry);                Address = subBuilder.BuildPartial();                break;              }              case 53: {                result.hasRateMBit = input.ReadFloat(ref result.rateMBit_);                break;              }              case 56: {                result.hasExitValue = input.ReadInt32(ref result.exitValue_);                break;              }            }
Magic Number,TCP,Hello,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(2' field_names[0]' Address);
Magic Number,TCP,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteEnum(2' field_names[1]' (int) Op' Op);
Magic Number,TCP,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteInt64(3' field_names[2]' Timeout);
Magic Number,TCP,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteInt64(3' field_names[2]' Timeout);
Magic Number,TCP,AddressRequest,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(2' field_names[0]' Addr);
Magic Number,TCP,Address,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteString(1' field_names[2]' Protocol);
Magic Number,TCP,Address,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteString(2' field_names[3]' System);
Magic Number,TCP,Address,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteString(2' field_names[3]' System);
Magic Number,TCP,Address,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteString(3' field_names[0]' Host);
Magic Number,TCP,Address,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteInt32(4' field_names[1]' Port);
Magic Number,TCP,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteEnum(1' field_names[3]' (int) Failure' Failure);
Magic Number,TCP,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteEnum(2' field_names[1]' (int) Direction' Direction);
Magic Number,TCP,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteMessage(3' field_names[0]' Address);
Magic Number,TCP,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteFloat(6' field_names[4]' RateMBit);
Magic Number,TCP,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteFloat(6' field_names[4]' RateMBit);
Magic Number,TCP,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteInt32(7' field_names[2]' ExitValue);
Magic Number,TCP,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.cs,WriteTo,The following statement contains a magic number: output.WriteInt32(7' field_names[2]' ExitValue);
Missing Default,Akka.Remote.TestKit,MsgDecoder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\MsgDecoder.cs,Decode,The following switch statement is missing a default case: switch (barrier.Op)                      {                          case BarrierOp.Succeeded: return (new BarrierResult(barrier.Name' true));                          case BarrierOp.Failed: return (new BarrierResult(barrier.Name' false));                          case BarrierOp.Fail: return (new FailBarrier(barrier.Name));                          case BarrierOp.Enter:                              return (new EnterBarrier(barrier.Name' barrier.HasTimeout ? (TimeSpan?)TimeSpan.FromTicks(barrier.Timeout) : null));                      }
Missing Default,Akka.Remote.TestKit,MsgDecoder,C:\research\architectureSmells\repos\rogeralsing_akka.net\src\core\Akka.Remote.TestKit\MsgDecoder.cs,Decode,The following switch statement is missing a default case: switch (f.Failure)                      {                          case FailType.Throttle:                              return (new ThrottleMsg(Proto2Address(f.Address)' Proto2Direction(f.Direction)' f.RateMBit));                          case FailType.Abort:                              return (new DisconnectMsg(Proto2Address(f.Address)' true));                          case FailType.Disconnect:                              return (new DisconnectMsg(Proto2Address(f.Address)' false));                          case FailType.Exit:                              return (new TerminateMsg(new Right<bool' int>(f.ExitValue)));                          case FailType.Shutdown:                              return (new TerminateMsg(new Left<bool' int>(false)));                          case FailType.ShutdownAbrupt:                              return (new TerminateMsg(new Left<bool' int>(true)));                      }
