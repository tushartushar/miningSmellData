Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WavefrontObjectLoader.Details,FacesUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\FacesUi.cs,DataGridViewOnCellValueNeeded,Cyclomatic complexity of the method is 10
Complex Method,WavefrontObjectLoader.Details,UvsUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\UvsUi.cs,DataGridViewOnCellValueNeeded,Cyclomatic complexity of the method is 9
Complex Method,WavefrontObjectLoader.Details,VerticesUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\VerticesUi.cs,DataGridViewOnCellValueNeeded,Cyclomatic complexity of the method is 12
Long Identifier,WavefrontObjectLoader.Details,FacesUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\FacesUi.cs,DataGridViewOnCellValueNeeded,The length of the parameter dataGridViewCellValueEventArgs is 30.
Long Identifier,WavefrontObjectLoader.Details,UvsUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\UvsUi.cs,DataGridViewOnCellValueNeeded,The length of the parameter dataGridViewCellValueEventArgs is 30.
Long Identifier,WavefrontObjectLoader.Details,VerticesUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\VerticesUi.cs,DataGridViewOnCellValueNeeded,The length of the parameter dataGridViewCellValueEventArgs is 30.
Long Statement,WavefrontObjectLoader.Details,FacesUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\FacesUi.cs,DataGridViewOnCellValueNeeded,The length of the statement  "				builder.AppendFormat ("{0}/{1}/{2} "' index.vertex' index.uv.HasValue ? index.uv.ToString () : string.Empty' index.normal.HasValue ? index.normal.ToString () : string.Empty); " is 174.
Long Statement,WavefrontObjectLoader,FormModelLoader,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\FormModelLoader.cs,LoadFileAsync,The length of the statement  "	AddOutput (string.Format ("Loaded {0} in {1}' {2} warning(s)' {3} error(s)."' Path.GetFileName (path)' stopwatch.Elapsed' result.Messages.Count (m => m.MessageType == MessageType.Warning)' result.Messages.Count (m => m.MessageType == MessageType.Error))); " is 255.
Magic Number,WavefrontObjectLoader.Details,FacesUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\FacesUi.cs,DataGridViewOnCellValueNeeded,The following statement contains a magic number: switch (dataGridViewCellValueEventArgs.ColumnIndex) {  case 0:  	dataGridViewCellValueEventArgs.Value = dataGridViewCellValueEventArgs.RowIndex;  	break;  case 1:  	dataGridViewCellValueEventArgs.Value = faces [dataGridViewCellValueEventArgs.RowIndex].Indices.Count;  	break;  case 2:  	{  		var face = faces [dataGridViewCellValueEventArgs.RowIndex];  		var builder = new StringBuilder ();  		foreach (var index in face.Indices) {  			builder.AppendFormat ("{0}/{1}/{2} "' index.vertex' index.uv.HasValue ? index.uv.ToString () : string.Empty' index.normal.HasValue ? index.normal.ToString () : string.Empty);  		}  		dataGridViewCellValueEventArgs.Value = builder.ToString ();  	}  	break;  }  
Magic Number,WavefrontObjectLoader.Details,UvsUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\UvsUi.cs,DataGridViewOnCellValueNeeded,The following statement contains a magic number: switch (dataGridViewCellValueEventArgs.ColumnIndex) {  case 0:  	dataGridViewCellValueEventArgs.Value = dataGridViewCellValueEventArgs.RowIndex;  	break;  case 1:  	dataGridViewCellValueEventArgs.Value = uvs [dataGridViewCellValueEventArgs.RowIndex].u;  	break;  case 2:  	dataGridViewCellValueEventArgs.Value = uvs [dataGridViewCellValueEventArgs.RowIndex].v;  	break;  }  
Magic Number,WavefrontObjectLoader.Details,VerticesUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\VerticesUi.cs,DataGridViewOnCellValueNeeded,The following statement contains a magic number: switch (dataGridViewCellValueEventArgs.ColumnIndex) {  case 0:  	dataGridViewCellValueEventArgs.Value = dataGridViewCellValueEventArgs.RowIndex;  	break;  case 1:  	dataGridViewCellValueEventArgs.Value = vertices [dataGridViewCellValueEventArgs.RowIndex].x;  	break;  case 2:  	dataGridViewCellValueEventArgs.Value = vertices [dataGridViewCellValueEventArgs.RowIndex].y;  	break;  case 3:  	dataGridViewCellValueEventArgs.Value = vertices [dataGridViewCellValueEventArgs.RowIndex].z;  	break;  }  
Magic Number,WavefrontObjectLoader.Details,VerticesUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\VerticesUi.cs,DataGridViewOnCellValueNeeded,The following statement contains a magic number: switch (dataGridViewCellValueEventArgs.ColumnIndex) {  case 0:  	dataGridViewCellValueEventArgs.Value = dataGridViewCellValueEventArgs.RowIndex;  	break;  case 1:  	dataGridViewCellValueEventArgs.Value = vertices [dataGridViewCellValueEventArgs.RowIndex].x;  	break;  case 2:  	dataGridViewCellValueEventArgs.Value = vertices [dataGridViewCellValueEventArgs.RowIndex].y;  	break;  case 3:  	dataGridViewCellValueEventArgs.Value = vertices [dataGridViewCellValueEventArgs.RowIndex].z;  	break;  }  
Magic Number,WavefrontObjectLoader,FormModelLoader,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\FormModelLoader.cs,ShowResult,The following statement contains a magic number: foreach (var message in result.Messages) {  	var messageColour = message.MessageType == MessageType.Error ? Color.Red : Color.DarkOrange;  	AddOutput (string.Format ("{0}: {1}"' message.MessageType' message.Details)' messageColour);  	AddOutput (string.Format ("{0}: {1}"' message.FileName' message.LineNumber)' messageColour);  	count++;  	if (count == 1000) {  		AddOutput ("Message count exceeds 1000' no more messages will be displayed."' Color.Red);  		break;  	}  }  
Magic Number,WavefrontObjectLoader,FormModelLoader,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\FormModelLoader.cs,ShowResult,The following statement contains a magic number: if (count == 1000) {  	AddOutput ("Message count exceeds 1000' no more messages will be displayed."' Color.Red);  	break;  }  
Missing Default,WavefrontObjectLoader.Details,FacesUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\FacesUi.cs,DataGridViewOnCellValueNeeded,The following switch statement is missing a default case: switch (dataGridViewCellValueEventArgs.ColumnIndex) {  case 0:  	dataGridViewCellValueEventArgs.Value = dataGridViewCellValueEventArgs.RowIndex;  	break;  case 1:  	dataGridViewCellValueEventArgs.Value = faces [dataGridViewCellValueEventArgs.RowIndex].Indices.Count;  	break;  case 2:  	{  		var face = faces [dataGridViewCellValueEventArgs.RowIndex];  		var builder = new StringBuilder ();  		foreach (var index in face.Indices) {  			builder.AppendFormat ("{0}/{1}/{2} "' index.vertex' index.uv.HasValue ? index.uv.ToString () : string.Empty' index.normal.HasValue ? index.normal.ToString () : string.Empty);  		}  		dataGridViewCellValueEventArgs.Value = builder.ToString ();  	}  	break;  }  
Missing Default,WavefrontObjectLoader.Details,UvsUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\UvsUi.cs,DataGridViewOnCellValueNeeded,The following switch statement is missing a default case: switch (dataGridViewCellValueEventArgs.ColumnIndex) {  case 0:  	dataGridViewCellValueEventArgs.Value = dataGridViewCellValueEventArgs.RowIndex;  	break;  case 1:  	dataGridViewCellValueEventArgs.Value = uvs [dataGridViewCellValueEventArgs.RowIndex].u;  	break;  case 2:  	dataGridViewCellValueEventArgs.Value = uvs [dataGridViewCellValueEventArgs.RowIndex].v;  	break;  }  
Missing Default,WavefrontObjectLoader.Details,VerticesUi,C:\repos\dwmkerr_file-format-wavefront\source\WavefrontObjectLoader\Details\VerticesUi.cs,DataGridViewOnCellValueNeeded,The following switch statement is missing a default case: switch (dataGridViewCellValueEventArgs.ColumnIndex) {  case 0:  	dataGridViewCellValueEventArgs.Value = dataGridViewCellValueEventArgs.RowIndex;  	break;  case 1:  	dataGridViewCellValueEventArgs.Value = vertices [dataGridViewCellValueEventArgs.RowIndex].x;  	break;  case 2:  	dataGridViewCellValueEventArgs.Value = vertices [dataGridViewCellValueEventArgs.RowIndex].y;  	break;  case 3:  	dataGridViewCellValueEventArgs.Value = vertices [dataGridViewCellValueEventArgs.RowIndex].z;  	break;  }  
