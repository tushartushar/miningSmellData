Implementation smell,Namespace,Class,File,Method,Description
Long Method,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The method has 167 lines of code.
Complex Method,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,Cyclomatic complexity of the method is 26
Complex Method,FileFormatWavefront,FileFormatMtl,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatMtl.cs,Read,Cyclomatic complexity of the method is 20
Long Parameter List,FileFormatWavefront,FileFormatMtl,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatMtl.cs,ReadTextureMap,The method has 5 parameters.
Long Parameter List,FileFormatWavefront,Message,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\Message.cs,Message,The method has 5 parameters.
Long Parameter List,FileFormatWavefront.Model,Scene,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\Model\Scene.cs,Scene,The method has 7 parameters.
Long Statement,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The length of the statement  "				messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception)); " is 142.
Long Statement,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The length of the statement  "				messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception)); " is 130.
Long Statement,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The length of the statement  "				messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception)); " is 130.
Long Statement,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The length of the statement  "				messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception)); " is 129.
Long Statement,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The length of the statement  "				messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception)); " is 152.
Long Statement,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The length of the statement  "				messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData))); " is 173.
Long Statement,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The length of the statement  "				messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName))); " is 211.
Long Statement,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The length of the statement  "			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType))); " is 136.
Long Statement,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The length of the statement  "			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Material '{0}' is referenced for a face' but not included in any material files."' interimFace.materialName))); " is 200.
Long Statement,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The length of the statement  "	return new FileLoadResult<Scene> (new Scene (vertices' uvs' normals' ungroupedFaces' groups' materials' objectName)' messages); " is 127.
Long Statement,FileFormatWavefront,FileFormatMtl,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatMtl.cs,Read,The length of the statement  "				currentMaterial.TextureMapSpecularHighlight = ReadTextureMap (path' lineNumberCounter' messages' lineData' loadTextureImages); " is 126.
Long Statement,FileFormatWavefront,FileFormatMtl,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatMtl.cs,Read,The length of the statement  "				messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType))); " is 136.
Long Statement,FileFormatWavefront,FileFormatMtl,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatMtl.cs,Read,The length of the statement  "			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown or out of context line type '{0}'."' lineType))); " is 154.
Long Statement,FileFormatWavefront,FileFormatMtl,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatMtl.cs,ReadTextureMap,The length of the statement  "		messages.Add (new Message (MessageType.Error' fileName' lineNumber' string.Format ("Failed to load the texture map image file '{0}'"' lineData)' exception)); " is 157.
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	++lineNumberCounter;  	//  Strip any comments from the line and skip empty lines.  	line = LineData.StripComments (line);  	if (string.IsNullOrWhiteSpace (line))  		continue;  	//  Try and read the line type and data.  	string lineType' lineData;  	if (LineData.TryReadLineType (line' out lineType' out lineData) == false)  		continue;  	//  Read texture coordinates.  	if (lineType.IsLineType (LineTypeTextureCoordinate)) {  		try {  			//  Split the line data into texture coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			//  Add the UV.  			uvs.Add (new UV {  				u = float.Parse (dataStrings [0])'  				v = float.Parse (dataStrings [1])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeNormalCoordinate)) {  		try {  			//  Split the line data into normal coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			normals.Add (new Vertex {  				x = float.Parse (dataStrings [0])'  				y = float.Parse (dataStrings [1])'  				z = float.Parse (dataStrings [2])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeVertex)) {  		try {  			//  Split the line data into vertex coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			vertices.Add (new Vertex {  				x = float.Parse (dataStrings [0])'  				y = float.Parse (dataStrings [1])'  				z = float.Parse (dataStrings [2])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeFace)) {  		try {  			var indices = new List<Index> ();  			//  Split the line data into index strings.  			var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			foreach (var indexString in indexStrings) {  				//  Split the parts.  				var parts = indexString.Split (new[] {  					'/'  				}' StringSplitOptions.None);  				var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  				var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  				var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  				indices.Add (new Index {  					vertex = vertex'  					uv = uv'  					normal = normal  				});  			}  			interimFaces.Add (new InterimFace {  				materialName = currentMaterialName'  				indices = indices'  				group = currentGroup  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  		//  The material file path is the line data.  		var materialPath = lineData;  		//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  		if (Path.IsPathRooted (lineData) == false && path != null)  			materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  		//  Read the material file.  		try {  			var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  			materials.AddRange (fileLoadResult.Model);  			messages.AddRange (fileLoadResult.Messages);  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeUseMaterial)) {  		//  The material name is simply the line data.  		currentMaterialName = lineData;  	}  	else if (lineType.IsLineType (LineTypeGroup)) {  		//  Create a new group.  		var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		currentGroup = new Group (groupNames);  		groups.Add (currentGroup);  	}  	else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  		//  If we have no current group' we cannot set a smoothing group.  		if (currentGroup == null) {  			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  		}  		else {  			//  The smoothing group is an int' if we can get it.  			int smoothingGroup;  			if (int.TryParse (lineData' out smoothingGroup))  				currentGroup.SetSmoothingGroup (smoothingGroup);  			currentGroup.SetSmoothingGroup (null);  		}  	}  	else if (lineType.IsLineType (LineTypeObjectName)) {  		//  Set the object name' warning if it's already set.  		if (objectName != null) {  			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  		}  		objectName = lineData;  	}  	else {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  	}  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	++lineNumberCounter;  	//  Strip any comments from the line and skip empty lines.  	line = LineData.StripComments (line);  	if (string.IsNullOrWhiteSpace (line))  		continue;  	//  Try and read the line type and data.  	string lineType' lineData;  	if (LineData.TryReadLineType (line' out lineType' out lineData) == false)  		continue;  	//  Read texture coordinates.  	if (lineType.IsLineType (LineTypeTextureCoordinate)) {  		try {  			//  Split the line data into texture coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			//  Add the UV.  			uvs.Add (new UV {  				u = float.Parse (dataStrings [0])'  				v = float.Parse (dataStrings [1])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeNormalCoordinate)) {  		try {  			//  Split the line data into normal coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			normals.Add (new Vertex {  				x = float.Parse (dataStrings [0])'  				y = float.Parse (dataStrings [1])'  				z = float.Parse (dataStrings [2])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeVertex)) {  		try {  			//  Split the line data into vertex coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			vertices.Add (new Vertex {  				x = float.Parse (dataStrings [0])'  				y = float.Parse (dataStrings [1])'  				z = float.Parse (dataStrings [2])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeFace)) {  		try {  			var indices = new List<Index> ();  			//  Split the line data into index strings.  			var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			foreach (var indexString in indexStrings) {  				//  Split the parts.  				var parts = indexString.Split (new[] {  					'/'  				}' StringSplitOptions.None);  				var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  				var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  				var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  				indices.Add (new Index {  					vertex = vertex'  					uv = uv'  					normal = normal  				});  			}  			interimFaces.Add (new InterimFace {  				materialName = currentMaterialName'  				indices = indices'  				group = currentGroup  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  		//  The material file path is the line data.  		var materialPath = lineData;  		//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  		if (Path.IsPathRooted (lineData) == false && path != null)  			materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  		//  Read the material file.  		try {  			var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  			materials.AddRange (fileLoadResult.Model);  			messages.AddRange (fileLoadResult.Messages);  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeUseMaterial)) {  		//  The material name is simply the line data.  		currentMaterialName = lineData;  	}  	else if (lineType.IsLineType (LineTypeGroup)) {  		//  Create a new group.  		var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		currentGroup = new Group (groupNames);  		groups.Add (currentGroup);  	}  	else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  		//  If we have no current group' we cannot set a smoothing group.  		if (currentGroup == null) {  			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  		}  		else {  			//  The smoothing group is an int' if we can get it.  			int smoothingGroup;  			if (int.TryParse (lineData' out smoothingGroup))  				currentGroup.SetSmoothingGroup (smoothingGroup);  			currentGroup.SetSmoothingGroup (null);  		}  	}  	else if (lineType.IsLineType (LineTypeObjectName)) {  		//  Set the object name' warning if it's already set.  		if (objectName != null) {  			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  		}  		objectName = lineData;  	}  	else {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  	}  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	++lineNumberCounter;  	//  Strip any comments from the line and skip empty lines.  	line = LineData.StripComments (line);  	if (string.IsNullOrWhiteSpace (line))  		continue;  	//  Try and read the line type and data.  	string lineType' lineData;  	if (LineData.TryReadLineType (line' out lineType' out lineData) == false)  		continue;  	//  Read texture coordinates.  	if (lineType.IsLineType (LineTypeTextureCoordinate)) {  		try {  			//  Split the line data into texture coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			//  Add the UV.  			uvs.Add (new UV {  				u = float.Parse (dataStrings [0])'  				v = float.Parse (dataStrings [1])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeNormalCoordinate)) {  		try {  			//  Split the line data into normal coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			normals.Add (new Vertex {  				x = float.Parse (dataStrings [0])'  				y = float.Parse (dataStrings [1])'  				z = float.Parse (dataStrings [2])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeVertex)) {  		try {  			//  Split the line data into vertex coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			vertices.Add (new Vertex {  				x = float.Parse (dataStrings [0])'  				y = float.Parse (dataStrings [1])'  				z = float.Parse (dataStrings [2])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeFace)) {  		try {  			var indices = new List<Index> ();  			//  Split the line data into index strings.  			var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			foreach (var indexString in indexStrings) {  				//  Split the parts.  				var parts = indexString.Split (new[] {  					'/'  				}' StringSplitOptions.None);  				var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  				var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  				var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  				indices.Add (new Index {  					vertex = vertex'  					uv = uv'  					normal = normal  				});  			}  			interimFaces.Add (new InterimFace {  				materialName = currentMaterialName'  				indices = indices'  				group = currentGroup  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  		//  The material file path is the line data.  		var materialPath = lineData;  		//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  		if (Path.IsPathRooted (lineData) == false && path != null)  			materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  		//  Read the material file.  		try {  			var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  			materials.AddRange (fileLoadResult.Model);  			messages.AddRange (fileLoadResult.Messages);  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeUseMaterial)) {  		//  The material name is simply the line data.  		currentMaterialName = lineData;  	}  	else if (lineType.IsLineType (LineTypeGroup)) {  		//  Create a new group.  		var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		currentGroup = new Group (groupNames);  		groups.Add (currentGroup);  	}  	else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  		//  If we have no current group' we cannot set a smoothing group.  		if (currentGroup == null) {  			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  		}  		else {  			//  The smoothing group is an int' if we can get it.  			int smoothingGroup;  			if (int.TryParse (lineData' out smoothingGroup))  				currentGroup.SetSmoothingGroup (smoothingGroup);  			currentGroup.SetSmoothingGroup (null);  		}  	}  	else if (lineType.IsLineType (LineTypeObjectName)) {  		//  Set the object name' warning if it's already set.  		if (objectName != null) {  			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  		}  		objectName = lineData;  	}  	else {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  	}  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	++lineNumberCounter;  	//  Strip any comments from the line and skip empty lines.  	line = LineData.StripComments (line);  	if (string.IsNullOrWhiteSpace (line))  		continue;  	//  Try and read the line type and data.  	string lineType' lineData;  	if (LineData.TryReadLineType (line' out lineType' out lineData) == false)  		continue;  	//  Read texture coordinates.  	if (lineType.IsLineType (LineTypeTextureCoordinate)) {  		try {  			//  Split the line data into texture coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			//  Add the UV.  			uvs.Add (new UV {  				u = float.Parse (dataStrings [0])'  				v = float.Parse (dataStrings [1])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeNormalCoordinate)) {  		try {  			//  Split the line data into normal coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			normals.Add (new Vertex {  				x = float.Parse (dataStrings [0])'  				y = float.Parse (dataStrings [1])'  				z = float.Parse (dataStrings [2])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeVertex)) {  		try {  			//  Split the line data into vertex coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			vertices.Add (new Vertex {  				x = float.Parse (dataStrings [0])'  				y = float.Parse (dataStrings [1])'  				z = float.Parse (dataStrings [2])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeFace)) {  		try {  			var indices = new List<Index> ();  			//  Split the line data into index strings.  			var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			foreach (var indexString in indexStrings) {  				//  Split the parts.  				var parts = indexString.Split (new[] {  					'/'  				}' StringSplitOptions.None);  				var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  				var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  				var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  				indices.Add (new Index {  					vertex = vertex'  					uv = uv'  					normal = normal  				});  			}  			interimFaces.Add (new InterimFace {  				materialName = currentMaterialName'  				indices = indices'  				group = currentGroup  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  		//  The material file path is the line data.  		var materialPath = lineData;  		//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  		if (Path.IsPathRooted (lineData) == false && path != null)  			materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  		//  Read the material file.  		try {  			var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  			materials.AddRange (fileLoadResult.Model);  			messages.AddRange (fileLoadResult.Messages);  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeUseMaterial)) {  		//  The material name is simply the line data.  		currentMaterialName = lineData;  	}  	else if (lineType.IsLineType (LineTypeGroup)) {  		//  Create a new group.  		var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		currentGroup = new Group (groupNames);  		groups.Add (currentGroup);  	}  	else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  		//  If we have no current group' we cannot set a smoothing group.  		if (currentGroup == null) {  			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  		}  		else {  			//  The smoothing group is an int' if we can get it.  			int smoothingGroup;  			if (int.TryParse (lineData' out smoothingGroup))  				currentGroup.SetSmoothingGroup (smoothingGroup);  			currentGroup.SetSmoothingGroup (null);  		}  	}  	else if (lineType.IsLineType (LineTypeObjectName)) {  		//  Set the object name' warning if it's already set.  		if (objectName != null) {  			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  		}  		objectName = lineData;  	}  	else {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  	}  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	++lineNumberCounter;  	//  Strip any comments from the line and skip empty lines.  	line = LineData.StripComments (line);  	if (string.IsNullOrWhiteSpace (line))  		continue;  	//  Try and read the line type and data.  	string lineType' lineData;  	if (LineData.TryReadLineType (line' out lineType' out lineData) == false)  		continue;  	//  Read texture coordinates.  	if (lineType.IsLineType (LineTypeTextureCoordinate)) {  		try {  			//  Split the line data into texture coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			//  Add the UV.  			uvs.Add (new UV {  				u = float.Parse (dataStrings [0])'  				v = float.Parse (dataStrings [1])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeNormalCoordinate)) {  		try {  			//  Split the line data into normal coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			normals.Add (new Vertex {  				x = float.Parse (dataStrings [0])'  				y = float.Parse (dataStrings [1])'  				z = float.Parse (dataStrings [2])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeVertex)) {  		try {  			//  Split the line data into vertex coordinates.  			var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			vertices.Add (new Vertex {  				x = float.Parse (dataStrings [0])'  				y = float.Parse (dataStrings [1])'  				z = float.Parse (dataStrings [2])  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeFace)) {  		try {  			var indices = new List<Index> ();  			//  Split the line data into index strings.  			var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  			foreach (var indexString in indexStrings) {  				//  Split the parts.  				var parts = indexString.Split (new[] {  					'/'  				}' StringSplitOptions.None);  				var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  				var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  				var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  				indices.Add (new Index {  					vertex = vertex'  					uv = uv'  					normal = normal  				});  			}  			interimFaces.Add (new InterimFace {  				materialName = currentMaterialName'  				indices = indices'  				group = currentGroup  			});  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  		//  The material file path is the line data.  		var materialPath = lineData;  		//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  		if (Path.IsPathRooted (lineData) == false && path != null)  			materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  		//  Read the material file.  		try {  			var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  			materials.AddRange (fileLoadResult.Model);  			messages.AddRange (fileLoadResult.Messages);  		}  		catch (Exception exception) {  			messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  		}  	}  	else if (lineType.IsLineType (LineTypeUseMaterial)) {  		//  The material name is simply the line data.  		currentMaterialName = lineData;  	}  	else if (lineType.IsLineType (LineTypeGroup)) {  		//  Create a new group.  		var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		currentGroup = new Group (groupNames);  		groups.Add (currentGroup);  	}  	else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  		//  If we have no current group' we cannot set a smoothing group.  		if (currentGroup == null) {  			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  		}  		else {  			//  The smoothing group is an int' if we can get it.  			int smoothingGroup;  			if (int.TryParse (lineData' out smoothingGroup))  				currentGroup.SetSmoothingGroup (smoothingGroup);  			currentGroup.SetSmoothingGroup (null);  		}  	}  	else if (lineType.IsLineType (LineTypeObjectName)) {  		//  Set the object name' warning if it's already set.  		if (objectName != null) {  			messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  		}  		objectName = lineData;  	}  	else {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  	}  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeTextureCoordinate)) {  	try {  		//  Split the line data into texture coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		//  Add the UV.  		uvs.Add (new UV {  			u = float.Parse (dataStrings [0])'  			v = float.Parse (dataStrings [1])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeNormalCoordinate)) {  	try {  		//  Split the line data into normal coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		normals.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeTextureCoordinate)) {  	try {  		//  Split the line data into texture coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		//  Add the UV.  		uvs.Add (new UV {  			u = float.Parse (dataStrings [0])'  			v = float.Parse (dataStrings [1])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeNormalCoordinate)) {  	try {  		//  Split the line data into normal coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		normals.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeTextureCoordinate)) {  	try {  		//  Split the line data into texture coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		//  Add the UV.  		uvs.Add (new UV {  			u = float.Parse (dataStrings [0])'  			v = float.Parse (dataStrings [1])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeNormalCoordinate)) {  	try {  		//  Split the line data into normal coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		normals.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeTextureCoordinate)) {  	try {  		//  Split the line data into texture coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		//  Add the UV.  		uvs.Add (new UV {  			u = float.Parse (dataStrings [0])'  			v = float.Parse (dataStrings [1])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeNormalCoordinate)) {  	try {  		//  Split the line data into normal coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		normals.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeTextureCoordinate)) {  	try {  		//  Split the line data into texture coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		//  Add the UV.  		uvs.Add (new UV {  			u = float.Parse (dataStrings [0])'  			v = float.Parse (dataStrings [1])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the texture coordinate data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeNormalCoordinate)) {  	try {  		//  Split the line data into normal coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		normals.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeNormalCoordinate)) {  	try {  		//  Split the line data into normal coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		normals.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeNormalCoordinate)) {  	try {  		//  Split the line data into normal coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		normals.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeNormalCoordinate)) {  	try {  		//  Split the line data into normal coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		normals.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeNormalCoordinate)) {  	try {  		//  Split the line data into normal coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		normals.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeNormalCoordinate)) {  	try {  		//  Split the line data into normal coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		normals.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: try {  	//  Split the line data into normal coordinates.  	var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	normals.Add (new Vertex {  		x = float.Parse (dataStrings [0])'  		y = float.Parse (dataStrings [1])'  		z = float.Parse (dataStrings [2])  	});  }  catch (Exception exception) {  	messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the normal data."' exception));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: normals.Add (new Vertex {  	x = float.Parse (dataStrings [0])'  	y = float.Parse (dataStrings [1])'  	z = float.Parse (dataStrings [2])  });  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeVertex)) {  	try {  		//  Split the line data into vertex coordinates.  		var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		vertices.Add (new Vertex {  			x = float.Parse (dataStrings [0])'  			y = float.Parse (dataStrings [1])'  			z = float.Parse (dataStrings [2])  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: try {  	//  Split the line data into vertex coordinates.  	var dataStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	vertices.Add (new Vertex {  		x = float.Parse (dataStrings [0])'  		y = float.Parse (dataStrings [1])'  		z = float.Parse (dataStrings [2])  	});  }  catch (Exception exception) {  	messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the vertex data."' exception));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: vertices.Add (new Vertex {  	x = float.Parse (dataStrings [0])'  	y = float.Parse (dataStrings [1])'  	z = float.Parse (dataStrings [2])  });  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: if (lineType.IsLineType (LineTypeFace)) {  	try {  		var indices = new List<Index> ();  		//  Split the line data into index strings.  		var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  		foreach (var indexString in indexStrings) {  			//  Split the parts.  			var parts = indexString.Split (new[] {  				'/'  			}' StringSplitOptions.None);  			var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  			var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  			var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  			indices.Add (new Index {  				vertex = vertex'  				uv = uv'  				normal = normal  			});  		}  		interimFaces.Add (new InterimFace {  			materialName = currentMaterialName'  			indices = indices'  			group = currentGroup  		});  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  	}  }  else if (lineType.IsLineType (LineTypeMaterialLibrary)) {  	//  The material file path is the line data.  	var materialPath = lineData;  	//  If the path is relative' make it absolute based on the current directory (if we've been passed a path).  	if (Path.IsPathRooted (lineData) == false && path != null)  		materialPath = Path.Combine (Path.GetDirectoryName (path)' materialPath);  	//  Read the material file.  	try {  		var fileLoadResult = FileFormatMtl.Load (materialPath' loadTextureImages);  		materials.AddRange (fileLoadResult.Model);  		messages.AddRange (fileLoadResult.Messages);  	}  	catch (Exception exception) {  		messages.Add (new Message (MessageType.Error' path' lineNumberCounter' string.Format ("Failed to load material file '{0}'."' materialPath)' exception));  	}  }  else if (lineType.IsLineType (LineTypeUseMaterial)) {  	//  The material name is simply the line data.  	currentMaterialName = lineData;  }  else if (lineType.IsLineType (LineTypeGroup)) {  	//  Create a new group.  	var groupNames = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	currentGroup = new Group (groupNames);  	groups.Add (currentGroup);  }  else if (lineType.IsLineType (LineTypeSmoothingGroup)) {  	//  If we have no current group' we cannot set a smoothing group.  	if (currentGroup == null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Cannot set smoothing group '{0}' as the current context has no group."' lineData)));  	}  	else {  		//  The smoothing group is an int' if we can get it.  		int smoothingGroup;  		if (int.TryParse (lineData' out smoothingGroup))  			currentGroup.SetSmoothingGroup (smoothingGroup);  		currentGroup.SetSmoothingGroup (null);  	}  }  else if (lineType.IsLineType (LineTypeObjectName)) {  	//  Set the object name' warning if it's already set.  	if (objectName != null) {  		messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("An object name statement to set the name to '{0}' will overwrite the current object name '{1}'."' lineData' objectName)));  	}  	objectName = lineData;  }  else {  	messages.Add (new Message (MessageType.Warning' path' lineNumberCounter' string.Format ("Skipped unknown line type '{0}'."' lineType)));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: try {  	var indices = new List<Index> ();  	//  Split the line data into index strings.  	var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	foreach (var indexString in indexStrings) {  		//  Split the parts.  		var parts = indexString.Split (new[] {  			'/'  		}' StringSplitOptions.None);  		var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  		var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  		var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  		indices.Add (new Index {  			vertex = vertex'  			uv = uv'  			normal = normal  		});  	}  	interimFaces.Add (new InterimFace {  		materialName = currentMaterialName'  		indices = indices'  		group = currentGroup  	});  }  catch (Exception exception) {  	messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: try {  	var indices = new List<Index> ();  	//  Split the line data into index strings.  	var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	foreach (var indexString in indexStrings) {  		//  Split the parts.  		var parts = indexString.Split (new[] {  			'/'  		}' StringSplitOptions.None);  		var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  		var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  		var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  		indices.Add (new Index {  			vertex = vertex'  			uv = uv'  			normal = normal  		});  	}  	interimFaces.Add (new InterimFace {  		materialName = currentMaterialName'  		indices = indices'  		group = currentGroup  	});  }  catch (Exception exception) {  	messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: try {  	var indices = new List<Index> ();  	//  Split the line data into index strings.  	var indexStrings = lineData.Split (dataSeparators' StringSplitOptions.RemoveEmptyEntries);  	foreach (var indexString in indexStrings) {  		//  Split the parts.  		var parts = indexString.Split (new[] {  			'/'  		}' StringSplitOptions.None);  		var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  		var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  		var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  		indices.Add (new Index {  			vertex = vertex'  			uv = uv'  			normal = normal  		});  	}  	interimFaces.Add (new InterimFace {  		materialName = currentMaterialName'  		indices = indices'  		group = currentGroup  	});  }  catch (Exception exception) {  	messages.Add (new Message (MessageType.Error' path' lineNumberCounter' "There was an error reading the index data."' exception));  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: foreach (var indexString in indexStrings) {  	//  Split the parts.  	var parts = indexString.Split (new[] {  		'/'  	}' StringSplitOptions.None);  	var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  	var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  	var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  	indices.Add (new Index {  		vertex = vertex'  		uv = uv'  		normal = normal  	});  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: foreach (var indexString in indexStrings) {  	//  Split the parts.  	var parts = indexString.Split (new[] {  		'/'  	}' StringSplitOptions.None);  	var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  	var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  	var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  	indices.Add (new Index {  		vertex = vertex'  		uv = uv'  		normal = normal  	});  }  
Magic Number,FileFormatWavefront,FileFormatObj,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatObj.cs,ReadScene,The following statement contains a magic number: foreach (var indexString in indexStrings) {  	//  Split the parts.  	var parts = indexString.Split (new[] {  		'/'  	}' StringSplitOptions.None);  	var vertex = MapIndex (vertices.Count' int.Parse (parts [0]));  	var uv = (parts.Length > 1 && parts [1].Length > 0) ? (int?)MapIndex (uvs.Count' int.Parse (parts [1])) : null;  	var normal = (parts.Length > 2 && parts [2].Length > 0) ? (int?)MapIndex (normals.Count' int.Parse (parts [2])) : null;  	indices.Add (new Index {  		vertex = vertex'  		uv = uv'  		normal = normal  	});  }  
Magic Number,FileFormatWavefront,FileFormatMtl,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatMtl.cs,ReadColour,The following statement contains a magic number: return new Colour {  	r = float.Parse (colourParts [0])'  	g = float.Parse (colourParts [1])'  	b = float.Parse (colourParts [2])'  	a = colourParts.Length == 4 ? float.Parse (colourParts [3]) : 1.0f'  };  
Magic Number,FileFormatWavefront,FileFormatMtl,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatMtl.cs,ReadColour,The following statement contains a magic number: return new Colour {  	r = float.Parse (colourParts [0])'  	g = float.Parse (colourParts [1])'  	b = float.Parse (colourParts [2])'  	a = colourParts.Length == 4 ? float.Parse (colourParts [3]) : 1.0f'  };  
Magic Number,FileFormatWavefront,FileFormatMtl,C:\repos\dwmkerr_file-format-wavefront\source\FileFormatWavefront\FileFormatMtl.cs,ReadColour,The following statement contains a magic number: return new Colour {  	r = float.Parse (colourParts [0])'  	g = float.Parse (colourParts [1])'  	b = float.Parse (colourParts [2])'  	a = colourParts.Length == 4 ? float.Parse (colourParts [3]) : 1.0f'  };  
