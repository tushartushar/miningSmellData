Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,GrimmLib,Tokenizer,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\Tokenizer.cs,readNextToken,Cyclomatic complexity of the method is 26
Complex Method,GrimmLib,Tokenizer,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\Tokenizer.cs,NAME,Cyclomatic complexity of the method is 22
Complex Method,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Languages,Cyclomatic complexity of the method is 10
Complex Method,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,Cyclomatic complexity of the method is 24
Complex Method,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitWaitDialogueNode,Cyclomatic complexity of the method is 9
Complex Method,GrimmLib,DialogueScriptPrinter,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueScriptPrinter.cs,SwitchOnNode,Cyclomatic complexity of the method is 26
Long Identifier,GrimmLib,DialogueScriptPrinter,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueScriptPrinter.cs,PrintConversationStartDialogueNode,The length of the parameter pConversationStartDialogueNode is 30.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,GetDialogueNode,The length of the statement  "		//					throw new GrimmException("Can't find DialogueNode with name '" + pName + "' in conversation '" + pConversation + "'" + " when using language " + _language); " is 163.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,GetActiveBranchingDialogueNode,The length of the statement  "	BranchingDialogueNode n = nodesInConvo.Find (o => (o.isOn) && (o.language == _language) && (o is BranchingDialogueNode)) as BranchingDialogueNode; " is 146.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,GetActiveTimedDialogueNode,The length of the statement  "	TimedDialogueNode n = nodesInConvo.Find (o => (o.isOn) && (o.language == _language) && (o is TimedDialogueNode)) as TimedDialogueNode; " is 134.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,CheckThatThereIsOnlyOneActiveNodeInTheConversation,The length of the statement  "		throw new GrimmException ("There are " + nodes.Length + " active nodes in the conversation " + pConversation + ": " + sb.ToString ()); " is 134.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,StartConversation,The length of the statement  "	DialogueNode conversationStartNode = nodesInConvo.Find (o => (o.language == _language && o is ConversationStartDialogueNode)); " is 126.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,StartAllConversationsContaining,The length of the statement  "	return DoSomethingToAllConversationsContaining (pPartialName' o => !ConversationIsRunning (o.conversation)' convStartNode => convStartNode.Start ()' "Started"); " is 160.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,StopAllConversationsContaining,The length of the statement  "	return DoSomethingToAllConversationsContaining (pPartialName' o => ConversationIsRunning (o.conversation)' convStartNode => StopConversation (convStartNode.conversation)' "Stopped"); " is 182.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,DoSomethingToAllConversationsContaining,The length of the statement  "		logger.Log (pDescription + " " + conversations.Count + " conversations with partial name " + pPartialName + ": " + string.Join ("' "' names)); " is 142.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,GetNamesOfAllStoppedConversationsWithNameContaining,The length of the statement  "	return GetAllConversationsWithNameContaining (pPartialName' o => !ConversationIsRunning (o.conversation)).ConvertAll (o => o.conversation).ToArray (); " is 150.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,FocusConversation,The length of the statement  "		throw new GrimmException ("Trying to focus conversation " + pConversation + " but there is no onFocusConversation listener."); " is 126.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,DefocusConversation,The length of the statement  "		//throw new GrimmException("Trying to defocus conversation " + pConversation + " but there is no onDefocusConversation listener."); " is 131.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,RegisteredNodesAsString,The length of the statement  "		registeredNodeNames.Add ("[" + node.name + " in '" + node.conversation + "' " + (node.isListening ? "LISTENING" : "NOT listening") + "]"); " is 138.
Long Statement,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,ToString,The length of the statement  "	return string.Format ("DialogueRunner ({0} dialogue nodes' {1} registered dialogue nodes)"' _dialogueNodes.Count' _registeredDialogueNodes.Count); " is 146.
Long Statement,GrimmLib,Speech,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Speech.cs,ToString,The length of the statement  "	return string.Format ("TalkEventInfo conversation = '{0}'' dialogueNodeName = '{1}'' talker = '{2}'' line = '{3}'"' conversation' dialogueNodeName' speaker' line); " is 163.
Long Statement,GrimmLib,Tokenizer,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\Tokenizer.cs,readNextToken,The length of the statement  "				throw new Exception ("Unrecognized character found: \'" + _currentChar + " on line " + _currentLine + " and position" + _currentPosition); " is 138.
Long Statement,GrimmLib,DialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\DialogueNode.cs,StartNextNode,The length of the statement  "	//_dialogueRunner.logger.Log("DialogueNode '" + name + "' is starting '" + n.name + "'" + " of type " + n.GetType().ToString() + " in conversation " + n.conversation); " is 167.
Long Statement,GrimmLib,DialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\DialogueNode.cs,ToString,The length of the statement  "	return string.Format ("[DialogueNode: name={0}' isOn={1}' nextNode={2}' conversation={3}' scopeNode={4}]"' name' isOn' nextNode' conversation' scopeNode); " is 154.
Long Statement,GrimmLib,TimedDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\TimedDialogueNode.cs,ToString,The length of the statement  "	return string.Format ("[TimedDialogueNode: timer={0}' timerStartValue={1}' speaker={2}' line={3}' conversionat = {4}]"' timer' timerStartValue' speaker' line' conversation); " is 173.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,CreateTreeOfDialogueNodes,The length of the statement  "	ConversationStartDialogueNode startNode = _dialogueRunner.Create<ConversationStartDialogueNode> (_conversationName' _language' NAME_OF_START_NODE); " is 147.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,CreateTreeOfDialogueNodes,The length of the statement  "	ConversationEndDialogueNode endNode = _dialogueRunner.Create<ConversationEndDialogueNode> (_conversationName' _language' NAME_OF_END_NODE); " is 139.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Nodes,The length of the statement  "	while (lookAheadType (1) != Token.TokenType.EOF && lookAheadType (1) != Token.TokenType.BLOCK_END && lookAheadType (1) != Token.TokenType.QUOTED_STRING && lookAheadType (1) != Token.TokenType.LANGUAGE) { " is 203.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The length of the statement  "		throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName); " is 269.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitTimedDialogueNode,The length of the statement  "	TimedDialogueNode n = _dialogueRunner.Create<TimedDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + "_line_" + lineToken.LineNr); " is 155.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitCancelDialogueNode,The length of the statement  "	CancelDialogueNode n = _dialogueRunner.Create<CancelDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + "(cancel)"); " is 140.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitBroadcastDialogueNode,The length of the statement  "	BroadcastDialogueNode n = _dialogueRunner.Create<BroadcastDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + "(broadcaster)"); " is 151.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitListeningDialogueNode,The length of the statement  "	} else if ((lookAheadType (1) != Token.TokenType.EOF) && (lookAheadType (1) != Token.TokenType.NEW_LINE) && (lookAheadType (1) != Token.TokenType.BLOCK_BEGIN)) { " is 161.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitListeningDialogueNode,The length of the statement  "		throw new GrimmException ("Can't follow LISTEN statement with token of type " + lookAheadType (1) + " at line " + lookAhead (1).LineNr + " and position " + lookAhead (1).LinePosition + " in " + _conversationName); " is 213.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitListeningDialogueNode,The length of the statement  "	ListeningDialogueNode n = _dialogueRunner.Create<ListeningDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + "(event listener)"); " is 154.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitListeningDialogueNode,The length of the statement  "		// Add this listening dialogue node to the scope of the loop so that it is automatically removed as a listener when the loop ends " is 129.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitListeningDialogueNode,The length of the statement  "	SilentDialogueNode silentNode = _dialogueRunner.Create<SilentDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + "(silent stop node)"); " is 159.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitListeningDialogueNode,The length of the statement  "		ImmediateNode eventBranchStartNode = _dialogueRunner.Create<ImmediateNode> (_conversationName' _language' (_nodeCounter++).ToString () + "(eventBranchStartNode)"); " is 163.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitFunctionDialogueNode,The length of the statement  "	CallFunctionDialogueNode n = _dialogueRunner.Create<CallFunctionDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + "_" + functionName); " is 160.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitGotoDialogueNode,The length of the statement  "	GotoDialogueNode n = _dialogueRunner.Create<GotoDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (goto)"); " is 123.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitStartCommandoDialogueNode,The length of the statement  "	StartCommandoDialogueNode n = _dialogueRunner.Create<StartCommandoDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (start commando)"); " is 151.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitInterruptDialogueNode,The length of the statement  "	InterruptDialogueNode n = _dialogueRunner.Create<InterruptDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (interrupt commando)"); " is 147.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitTimedWaitDialogueNode,The length of the statement  "	TimedWaitDialogueNode node = _dialogueRunner.Create<TimedWaitDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (timed wait node)"); " is 147.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitWaitDialogueNode,The length of the statement  "	WaitDialogueNode n = _dialogueRunner.Create<WaitDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (start commando)"); " is 133.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitWaitDialogueNode,The length of the statement  "			ExpressionDialogueNode expressionNode = _dialogueRunner.Create<ExpressionDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (expression)"); " is 154.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitWaitDialogueNode,The length of the statement  "				throw new GrimmException (_conversationName + " already has a event listener attached to the wait statement on line " + lookAhead (1).LineNr); " is 142.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitWaitDialogueNode,The length of the statement  "	SilentDialogueNode silentEndNode = _dialogueRunner.Create<SilentDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + "(silent stop node)"); " is 162.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitWaitDialogueNode,The length of the statement  "		ImmediateNode eventBranchStartNode = _dialogueRunner.Create<ImmediateNode> (_conversationName' _language' (_nodeCounter++).ToString () + "(waitBranchStartNode)"); " is 162.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitFocusDialogueNode,The length of the statement  "	FocusDialogueNode n = _dialogueRunner.Create<FocusDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (focus)"); " is 126.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitDefocusDialogueNode,The length of the statement  "	DefocusDialogueNode n = _dialogueRunner.Create<DefocusDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (defocus)"); " is 132.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitLoopDialogueNode,The length of the statement  "	LoopDialogueNode n = _dialogueRunner.Create<LoopDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + " (loop)"); " is 135.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitLoopDialogueNode,The length of the statement  "	//ImmediateNode finalNode = _dialogueRunner.Create<ImmediateNode>(_conversationName' _language' (_nodeCounter++).ToString() + "(final node)"); " is 142.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitLoopDialogueNode,The length of the statement  "	ImmediateNode branchStartNode = _dialogueRunner.Create<ImmediateNode> (_conversationName' _language' (_nodeCounter++).ToString () + " (loop branch node)"); " is 155.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitLoopDialogueNode,The length of the statement  "	SilentDialogueNode unifiedEndNode = _dialogueRunner.Create<SilentDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + " (unified end node for loop)"); " is 173.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitBreakDialogueNode,The length of the statement  "	BreakDialogueNode n = _dialogueRunner.Create<BreakDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + "(break)"); " is 137.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitBreakDialogueNode,The length of the statement  "		throw new GrimmException ("Trying to break at weird position? Line: " + breakToken.LineNr + " in conversation '" + _conversationName + "'"); " is 140.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitAssertDialogueNode,The length of the statement  "	AssertDialogueNode n = _dialogueRunner.Create<AssertDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (assert)"); " is 129.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitIfDialogueNode,The length of the statement  "	UnifiedEndNodeForScope unifiedEndNode = _dialogueRunner.Create<UnifiedEndNodeForScope> (_conversationName' _language' (_nodeCounter++) + " (unified end of if)"); " is 161.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitIfDialogueNode,The length of the statement  "	ExpressionDialogueNode ifTrue = _dialogueRunner.Create<ExpressionDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (if true)"); " is 143.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitIfDialogueNode,The length of the statement  "		ExpressionDialogueNode elifNode = _dialogueRunner.Create<ExpressionDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (elif)"); " is 142.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitIfDialogueNode,The length of the statement  "	IfDialogueNode ifNode = _dialogueRunner.Create<IfDialogueNode> (_conversationName' _language' (_nodeCounter++) + " (if)"); " is 122.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitBranchingDialogueNode,The length of the statement  "	BranchingDialogueNode bn = _dialogueRunner.Create<BranchingDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString () + " (branching node)"); " is 156.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitBranchingDialogueNode,The length of the statement  "	UnifiedEndNodeForScope unifiedEndNodeForScope = _dialogueRunner.Create<UnifiedEndNodeForScope> (_conversationName' _language' (_nodeCounter++) + " (unified end of options)"); " is 174.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitBranchingDialogueNode,The length of the statement  "		Console.WriteLine ("\nWarning! Branching node " + bn.name + " with only " + bn.nextNodes.Length + " nodes in " + _conversationName); " is 132.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,FigureOutOptionStatement,The length of the statement  "		throw new GrimmException ("Can't figure out player option statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName); " is 283.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitOption,The length of the statement  "	TimedDialogueNode optionNode = _dialogueRunner.Create<TimedDialogueNode> (_conversationName' _language' (_nodeCounter++).ToString ()); " is 134.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitOption,The length of the statement  "				Console.WriteLine("Created an option node with the name '" + optionNode.name + "'" + " and line " + "'" + optionNode.line + "'");" is 129.
Long Statement,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,match,The length of the statement  "		throw new GrimmException ("The code word \"" + lookAhead (1).getTokenString () + "\"" + " doesn't match the expected (" + expectedTokenType + ")." + " at line " + lookAhead (1).LineNr + " and position " + lookAhead (1).LinePosition + " in conversation '" + _conversationName + "'"); " is 282.
Long Statement,GrimmLib,GotoDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\GotoDialogueNode.cs,Update,The length of the statement  "	//_dialogueRunner.logger.Log("GOTO node '" + name + "' in conversation '" + conversation + "' was triggered and is jumping to '" + nextNode + "'"); " is 147.
Long Statement,GrimmLib,DialogueScriptPrinter,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueScriptPrinter.cs,PrintListeningDialogueNode,The length of the statement  "	_output.Append ("LISTEN_FOR " + pListeningNode.eventName + " (scope: " + pListeningNode.scopeNode + ")" + pListeningNode.handle + " {\n"); " is 138.
Long Statement,GrimmLib,DialogueScriptPrinter,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueScriptPrinter.cs,PrintBranchingDialogueNode,The length of the statement  "	UnifiedEndNodeForScope unifiedEndNodeForScope = _dialogueRunner.GetDialogueNode (_conversation' pBranchingDialogueNode.unifiedEndNodeForScope) as UnifiedEndNodeForScope; " is 169.
Long Statement,GrimmLib,DialogueScriptPrinter,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueScriptPrinter.cs,PrintBranchingDialogueNode,The length of the statement  "	//Console.WriteLine("Unified end node " + unifiedEndNodeForScope.name + " has next node " + unifiedEndNodeForScope.nextNode); " is 125.
Long Statement,GrimmLib,WaitDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\WaitDialogueNode.cs,ToString,The length of the statement  "	return string.Format ("[WaitDialogueNode: hasBranch={0}' branchNode={1}' handle={2}' isListening={3}' eventName={4}' conversation={5}]"' hasBranch' branchNode' handle' isListening' eventName' conversation); " is 206.
Long Statement,GrimmLib,WaitDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\WaitDialogueNode.cs,EventHappened,The length of the statement  "	//_dialogueRunner.logger.Log("The event of WaitDialogueNode '" + name + "' in conversation '" + conversation + "' happened"); " is 125.
Long Statement,GrimmLib,CallFunctionDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\CallFunctionDialogueNode.cs,OnEnter,The length of the statement  "		string msg = "Error when calling function from node " + this.name + " in conversation '" + this.conversation + "': " + e.Message + " \nStack trace: " + e.StackTrace; " is 165.
Long Statement,GrimmLib,CallFunctionDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\CallFunctionDialogueNode.cs,ToString,The length of the statement  "	return string.Format ("[CallFunctionDialogueNode: function={0}' args={1}' conversation={2}]"' function' args' conversation); " is 124.
Long Statement,GrimmLib,AssertDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\AssertDialogueNode.cs,Update,The length of the statement  "		throw new GrimmAssertException ("Assertion " + expression + "(" + argsConcatenated + ") failed in conversation '" + conversation + "'"); " is 136.
Long Statement,GrimmLib,ExpressionDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\ExpressionNode.cs,Evaluate,The length of the statement  "		var msg = "Error when evaluating expression " + expression + " in " + conversation + " with args: " + string.Join ("' "' args) + " e: " + e.Message + " stack: " + e.StackTrace; " is 176.
Long Statement,GrimmLib,ListeningDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\ListeningDialogueNode.cs,EventHappened,The length of the statement  "	//_dialogueRunner.logger.Log("The event of ListeningDialogueNode '" + name + "' in conversation '" + conversation + "' happened"); " is 130.
Long Statement,GrimmLib,ListeningDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\ListeningDialogueNode.cs,ToString,The length of the statement  "	return string.Format ("[ListeningDialogueNode: eventName={0}' hasBranch={1}' branchNode={2}' isListening={3}' handle={4}]"' eventName' hasBranch' branchNode' isListening' handle); " is 179.
Long Statement,GrimmLib,BreakDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\BreakDialogueNode.cs,Update,The length of the statement  "	LoopDialogueNode targetLoopDialogueNode = _dialogueRunner.GetDialogueNode (conversation' breakTargetLoop) as LoopDialogueNode; " is 126.
Long Statement,GrimmLib,InterruptDialogueNode,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\Nodes\InterruptDialogueNode.cs,Update,The length of the statement  "		D.Log ("Detected that interrupting conversation " + interruptingConversation + " has stopped' will continue in " + base.conversation); " is 134.
Magic Number,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,GetAllDialogueAsString,The following statement contains a magic number: foreach (var node in _dialogueNodes) {  	if (node is TimedDialogueNode) {  		sb.Append ((node as TimedDialogueNode).line + " ");  		if (Randomizer.OneIn (10)) {  			sb.AppendLine ("");  		}  	}  }  
Magic Number,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,GetAllDialogueAsString,The following statement contains a magic number: if (node is TimedDialogueNode) {  	sb.Append ((node as TimedDialogueNode).line + " ");  	if (Randomizer.OneIn (10)) {  		sb.AppendLine ("");  	}  }  
Magic Number,GrimmLib,DialogueRunner,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\DialogueRunner.cs,GetAllDialogueAsString,The following statement contains a magic number: if (Randomizer.OneIn (10)) {  	sb.AppendLine ("");  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NEW_LINE) {  	match (Token.TokenType.NEW_LINE);  } else if (lookAheadType (1) == Token.TokenType.EOF) {  	match (Token.TokenType.EOF);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NEW_LINE) {  	match (Token.TokenType.NEW_LINE);  } else if (lookAheadType (1) == Token.TokenType.EOF) {  	match (Token.TokenType.EOF);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NEW_LINE) {  	match (Token.TokenType.NEW_LINE);  } else if (lookAheadType (1) == Token.TokenType.EOF) {  	match (Token.TokenType.EOF);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NEW_LINE) {  	match (Token.TokenType.NEW_LINE);  } else if (lookAheadType (1) == Token.TokenType.EOF) {  	match (Token.TokenType.EOF);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.EOF) {  	match (Token.TokenType.EOF);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.EOF) {  	match (Token.TokenType.EOF);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.EOF) {  	match (Token.TokenType.EOF);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.EOF) {  	match (Token.TokenType.EOF);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.QUOTED_STRING) {  	return VisitTimedDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.PARANTHESIS_LEFT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NAME && lookAheadType (2) == Token.TokenType.DOT) {  	return VisitFunctionDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.GOTO) {  	return VisitGotoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.START) {  	return VisitStartCommandoDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.INTERRUPT) {  	return VisitInterruptDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.IF) {  	return VisitIfDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.ASSERT) {  	return VisitAssertDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.STOP) {  	return VisitStopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.BROADCAST) {  	return VisitBroadcastDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.LISTEN) {  	return VisitListeningDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.CANCEL) {  	return VisitCancelDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.WAIT) {  	if (lookAheadType (2) == Token.TokenType.NUMBER) {  		return VisitTimedWaitDialogueNode (pPrevious);  	} else {  		return VisitWaitDialogueNode (pPrevious);  	}  } else if (lookAheadType (1) == Token.TokenType.FOCUS) {  	return VisitFocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.DEFOCUS) {  	return VisitDefocusDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.LOOP) {  	return VisitLoopDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BREAK) {  	return VisitBreakDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BLOCK_BEGIN) {  	return VisitBranchingDialogueNode (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.BRACKET_LEFT) {  	return VisitEmptyNodeWithName (pPrevious);  } else if (lookAheadType (1) == Token.TokenType.CHOICE) {  	return VisitBranchingDialogueNode (pPrevious);  } else {  	throw new GrimmException ("Can't figure out statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,Statement,The following statement contains a magic number: if (lookAheadType (2) == Token.TokenType.NUMBER) {  	return VisitTimedWaitDialogueNode (pPrevious);  } else {  	return VisitWaitDialogueNode (pPrevious);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitFunctionCall,The following statement contains a magic number: if (lookAheadType (2) == Token.TokenType.DOT) {  	// Function looks like this: cat.foo("dog")  	Token tokenBeforeDot = match (Token.TokenType.NAME);  	string arg0 = tokenBeforeDot.getTokenString ();  	arguments.Add (arg0);  	#if DEBUG_WRITE  					Console.WriteLine("Added argument 0 based on token before dot: " + arg0); 				#endif  	match (Token.TokenType.DOT);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,CalculateTimeout,The following statement contains a magic number: return (int)(30 + nrOfCharacters * 1.0f);  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,VisitBranchingDialogueNode,The following statement contains a magic number: if (bn.nextNodes.Length < 2) {  	Console.WriteLine ("\nWarning! Branching node " + bn.name + " with only " + bn.nextNodes.Length + " nodes in " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,FigureOutOptionStatement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.NEW_LINE) {  	match (Token.TokenType.NEW_LINE);  	#if DEBUG_WRITE  					Console.Write(" (newline)"); 				#endif  } else if (lookAheadType (1) == Token.TokenType.EOF) {  	match (Token.TokenType.EOF);  } else if (lookAheadType (1) == Token.TokenType.QUOTED_STRING && lookAheadType (2) == Token.TokenType.COLON) {  	return VisitOption (pScopeEndNode);  } else {  	throw new GrimmException ("Can't figure out player option statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,FigureOutOptionStatement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.EOF) {  	match (Token.TokenType.EOF);  } else if (lookAheadType (1) == Token.TokenType.QUOTED_STRING && lookAheadType (2) == Token.TokenType.COLON) {  	return VisitOption (pScopeEndNode);  } else {  	throw new GrimmException ("Can't figure out player option statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
Magic Number,GrimmLib,DialogueScriptLoader,F:\newReposMay17\eriksvedang_Grimm\Grimm\src\Dialogue\ScriptLoader\DialogueScriptLoader.cs,FigureOutOptionStatement,The following statement contains a magic number: if (lookAheadType (1) == Token.TokenType.QUOTED_STRING && lookAheadType (2) == Token.TokenType.COLON) {  	return VisitOption (pScopeEndNode);  } else {  	throw new GrimmException ("Can't figure out player option statement type of token " + lookAheadType (1) + " with string " + lookAhead (1).getTokenString () + " on line " + lookAhead (1).LineNr + " and position" + lookAhead (1).LinePosition + " in conversation " + _conversationName);  }  
