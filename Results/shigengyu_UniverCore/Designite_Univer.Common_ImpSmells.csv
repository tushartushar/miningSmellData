Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Univer.Common,Arguments,C:\repos\shigengyu_UniverCore\src\Univer.Common\Arguments.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Univer.Common,MemberInfoExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\MemberInfoExtensions.cs,SetPropertyValue,Cyclomatic complexity of the method is 8
Complex Method,Univer.Common,MethodInfoExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\MethodInfoExtensions.cs,GetMethodSignature,Cyclomatic complexity of the method is 10
Complex Method,Univer.Common,TypeExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\TypeExtensions.cs,GetDisplayName,Cyclomatic complexity of the method is 15
Complex Method,Univer.Common.IO,FileContentReplacer,C:\repos\shigengyu_UniverCore\src\Univer.Common\IO\FileContentReplacer.cs,Flush,Cyclomatic complexity of the method is 8
Complex Method,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,Cyclomatic complexity of the method is 9
Long Parameter List,Univer.Common,MemberInfoExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\MemberInfoExtensions.cs,SetPropertyValue,The method has 5 parameters.
Long Parameter List,Univer.Common,ComparableExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\ComparableExtensions.cs,Between,The method has 5 parameters.
Long Parameter List,Univer.Common.VisualStudio,VisualStudioProject,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioProject.cs,ParsePropertyGroups,The method has 5 parameters.
Long Statement,Univer.Common,AttributeExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\AttributeExtensions.cs,GetDisplayName,The length of the statement  "	sb.Append (string.Join ("' "' properties.Select (item => item.Name + " = " + GetValueString (item.GetValue (attribute' null)' withNamespace)).ToArray ())); " is 155.
Long Statement,Univer.Common,CompositeConcurrentDictionary,C:\repos\shigengyu_UniverCore\src\Univer.Common\CompositeConcurrentDictionary.cs,TryAddItem,The length of the statement  "	return !ContainsKey (key) && TryAdd (key' new ConcurrentDictionary<TSubKey' TValue> ()) && this [key].TryAdd (subKey' value); " is 125.
Long Statement,Univer.Common,MemberInfoExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\MemberInfoExtensions.cs,GetCustomAttribute,The length of the statement  "		throw new InvalidOperationException ("Cardinality mismatch for [{0}]. Expected count = [{1}]. Actual count = [{2}]".FormatWith (typeof(TAttribute).FullName' 1' attributes.Count ())); " is 182.
Long Statement,Univer.Common,MemberInfoExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\MemberInfoExtensions.cs,SetPropertyValue,The length of the statement  "		throw new InvalidOperationException ("Cannot assign value of type [{0}] to [{1}.{2}] of type [{3}]".FormatWith (value.GetType ().FullName' property.DeclaringType.FullName' property.Name' propertyType.FullName)); " is 211.
Long Statement,Univer.Common,ObjectCopier,C:\repos\shigengyu_UniverCore\src\Univer.Common\ObjectCopier.cs,MergePropertyValuesWith,The length of the statement  "	var properties = source.GetType ().GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance); " is 120.
Long Statement,Univer.Common,ObjectCopier,C:\repos\shigengyu_UniverCore\src\Univer.Common\ObjectCopier.cs,MergePropertyValuesWith,The length of the statement  "		if (property.CanRead && property.CanWrite && !property.GetIndexParameters ().Any () && property.GetValue (target' null) == null && !excludedPropertyNames.Contains (property.Name)) { " is 181.
Long Statement,Univer.Common,ParameterInfoExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\ParameterInfoExtensions.cs,GetCustomAttribute,The length of the statement  "		throw new InvalidOperationException ("Cardinality mismatch for [{0}]. Expected count = [{1}]. Actual count = [{2}]".FormatWith (typeof(TAttribute).FullName' 1' attributes.Count ())); " is 182.
Long Statement,Univer.Common,TypeExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\TypeExtensions.cs,GetDisplayName,The length of the statement  "		var genericParameters = string.Join ("' "' type.GetGenericArguments ().Select (item => item.GetDisplayName (withNamespace))); " is 125.
Long Statement,Univer.Common,TypeExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\TypeExtensions.cs,CanAssignToWithConversion,The length of the statement  "	return underlyingTargetType.IsAssignableFrom (underlyingSourceType) || underlyingSourceType.ImplicitlyConvertsTo (underlyingTargetType) || underlyingSourceType.ExplicitlyConvertsTo (underlyingTargetType) || new[] { " is 214.
Long Statement,Univer.Common,TypeExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\TypeExtensions.cs,ImplicitlyConvertsTo,The length of the statement  "	where method.Name == "op_Implicit" && method.GetParameters () [0].ParameterType == type && method.ReturnType == targetType " is 122.
Long Statement,Univer.Common,TypeExtensions,C:\repos\shigengyu_UniverCore\src\Univer.Common\TypeExtensions.cs,ExplicitlyConvertsTo,The length of the statement  "	where method.Name == "op_Explicit" && method.GetParameters () [0].ParameterType == type && method.ReturnType == targetType " is 122.
Long Statement,Univer.Common,Types,C:\repos\shigengyu_UniverCore\src\Univer.Common\Types.cs,ChangeType,The length of the statement  "		throw new InvalidOperationException ("Source type [{0}] does not implement IConvertible.".FormatWith (sourceType.Name)); " is 120.
Long Statement,Univer.Common,Types,C:\repos\shigengyu_UniverCore\src\Univer.Common\Types.cs,ChangeType,The length of the statement  "		throw new InvalidOperationException ("Target type [{0}] does not implement IConvertible.".FormatWith (sourceType.Name)); " is 120.
Long Statement,Univer.Common.VisualStudio,VisualStudioProject,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioProject.cs,ParsePropertyGroups,The length of the statement  "	var groups = propertyGroups.Select (VisualStudioProjectPropertyGroup.Parse).Where (item => item.IsConfigurationGroup).ToList (); " is 128.
Complex Conditional,Univer.Common,ObjectCopier,C:\repos\shigengyu_UniverCore\src\Univer.Common\ObjectCopier.cs,MergePropertyValuesWith,The conditional expression  "property.CanRead && property.CanWrite && !property.GetIndexParameters ().Any () && property.GetValue (target' null) == null && !excludedPropertyNames.Contains (property.Name)"  is complex.
Magic Number,Univer.Common,Arguments,C:\repos\shigengyu_UniverCore\src\Univer.Common\Arguments.cs,Parse,The following statement contains a magic number: if (args.Length % 2 == 0) {  	for (var i = 0; i < args.Length; i += 2) {  		var nameIndex = i;  		var valueIndex = i + 1;  		if (args [nameIndex].StartsWith ("-")) {  			var name = args [i].Substring (1);  			if (string.IsNullOrWhiteSpace (name)) {  				throw new ArgumentException ("Argument name cannot be empty");  			}  			var value = args [valueIndex];  			if (nameValueDictionary.ContainsKey (name)) {  				throw new ArgumentException ("Duplicated argument [{0}]".FormatWith (name));  			}  			nameValueDictionary.Add (name.ToLower ()' value);  		}  		else {  			throw new ArgumentException ("Argument name must start with [-]");  		}  	}  }  else {  	throw new ArgumentException ("Argument list must be even number");  }  
Magic Number,Univer.Common,Arguments,C:\repos\shigengyu_UniverCore\src\Univer.Common\Arguments.cs,Parse,The following statement contains a magic number: if (args.Length % 2 == 0) {  	for (var i = 0; i < args.Length; i += 2) {  		var nameIndex = i;  		var valueIndex = i + 1;  		if (args [nameIndex].StartsWith ("-")) {  			var name = args [i].Substring (1);  			if (string.IsNullOrWhiteSpace (name)) {  				throw new ArgumentException ("Argument name cannot be empty");  			}  			var value = args [valueIndex];  			if (nameValueDictionary.ContainsKey (name)) {  				throw new ArgumentException ("Duplicated argument [{0}]".FormatWith (name));  			}  			nameValueDictionary.Add (name.ToLower ()' value);  		}  		else {  			throw new ArgumentException ("Argument name must start with [-]");  		}  	}  }  else {  	throw new ArgumentException ("Argument list must be even number");  }  
Magic Number,Univer.Common,Arguments,C:\repos\shigengyu_UniverCore\src\Univer.Common\Arguments.cs,Parse,The following statement contains a magic number: for (var i = 0; i < args.Length; i += 2) {  	var nameIndex = i;  	var valueIndex = i + 1;  	if (args [nameIndex].StartsWith ("-")) {  		var name = args [i].Substring (1);  		if (string.IsNullOrWhiteSpace (name)) {  			throw new ArgumentException ("Argument name cannot be empty");  		}  		var value = args [valueIndex];  		if (nameValueDictionary.ContainsKey (name)) {  			throw new ArgumentException ("Duplicated argument [{0}]".FormatWith (name));  		}  		nameValueDictionary.Add (name.ToLower ()' value);  	}  	else {  		throw new ArgumentException ("Argument name must start with [-]");  	}  }  
Magic Number,Univer.Common,Arguments,C:\repos\shigengyu_UniverCore\src\Univer.Common\Arguments.cs,Parse,The following statement contains a magic number: i += 2
Magic Number,Univer.Common,BinaryTreeTests,C:\repos\shigengyu_UniverCore\src\Univer.Common\BinaryTreeNode.cs,TestCreateTree,The following statement contains a magic number: Assert.AreEqual (2' root.Left);  
Magic Number,Univer.Common,BinaryTreeTests,C:\repos\shigengyu_UniverCore\src\Univer.Common\BinaryTreeNode.cs,TestCreateTree,The following statement contains a magic number: Assert.AreEqual (3' root.Left.Left);  
Magic Number,Univer.Common,BinaryTreeTests,C:\repos\shigengyu_UniverCore\src\Univer.Common\BinaryTreeNode.cs,TestCreateTree,The following statement contains a magic number: Assert.AreEqual (4' root.Left.Right);  
Magic Number,Univer.Common,BinaryTreeTests,C:\repos\shigengyu_UniverCore\src\Univer.Common\BinaryTreeNode.cs,TestCreateTree,The following statement contains a magic number: Assert.AreEqual (5' root.Right);  
Magic Number,Univer.Common,BinaryTreeTests,C:\repos\shigengyu_UniverCore\src\Univer.Common\BinaryTreeNode.cs,TestCreateTree,The following statement contains a magic number: Assert.AreEqual (6' root.Right.Right);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (idDimension [2] [0]' bob);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (idDimension [3] [0]' david);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (idDimension [4] [0]' frank);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (idDimension [5] [0]' george);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (ageDimension [24] [0]' bob);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (ageDimension [26] [0]' frank);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (ageDimension [32] [0]' alex);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (ageDimension [32] [1]' david);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (ageDimension [67] [0]' george);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (ageDimension [32] [0]' alex);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (ageDimension [32] [1]' david);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (ageDimension [32] [2]' newBob);  
Magic Number,Univer.Common,MultiDimensionDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\MultiDimensionDictionary.cs,Test,The following statement contains a magic number: Assert.AreEqual (ageDimension [32] [2]' newBob);  
Magic Number,Univer.Common,XmlSerializableDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\XmlSerializableDictionary.cs,XmlDeserializationTest,The following statement contains a magic number: using (var stream = new MemoryStream ()) {  	using (var writer = new StreamWriter (stream)) {  		writer.Write (Expected.ToCharArray ()' 0' Expected.Length);  		writer.Flush ();  		stream.Seek (0' SeekOrigin.Begin);  		var obj = serializer.Deserialize (stream) as MyClass;  		Assert.NotNull (obj);  		Assert.AreEqual ("A"' obj.Items [1]);  		Assert.AreEqual ("B"' obj.Items [2]);  	}  }  
Magic Number,Univer.Common,XmlSerializableDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\XmlSerializableDictionary.cs,XmlDeserializationTest,The following statement contains a magic number: using (var writer = new StreamWriter (stream)) {  	writer.Write (Expected.ToCharArray ()' 0' Expected.Length);  	writer.Flush ();  	stream.Seek (0' SeekOrigin.Begin);  	var obj = serializer.Deserialize (stream) as MyClass;  	Assert.NotNull (obj);  	Assert.AreEqual ("A"' obj.Items [1]);  	Assert.AreEqual ("B"' obj.Items [2]);  }  
Magic Number,Univer.Common,XmlSerializableDictionaryTest,C:\repos\shigengyu_UniverCore\src\Univer.Common\XmlSerializableDictionary.cs,XmlDeserializationTest,The following statement contains a magic number: Assert.AreEqual ("B"' obj.Items [2]);  
Magic Number,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,The following statement contains a magic number: using (var reader = new StreamReader (FileName)) {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		if (string.IsNullOrWhiteSpace (line))  			continue;  		if (line.StartsWith (SolutionVersionPrefix)) {  			FormatVersion = line.Substring (SolutionVersionPrefix.Length).Trim ();  		}  		else if (ProjectRegex.IsMatch (line)) {  			var groups = ProjectRegex.Match (line).Groups;  			if (groups.Count == 3) {  				var projectName = groups [1].Value;  				var projectFullFileName = Path.Combine (Directory' groups [2].Value);  				if (!File.Exists (projectFullFileName))  					continue;  				var projectDirectory = new FileInfo (Path.Combine (Directory' projectFullFileName)).DirectoryName;  				Projects.Add (new VisualStudioProject (projectName' projectDirectory' projectFullFileName).Parse ());  			}  		}  	}  }  
Magic Number,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,The following statement contains a magic number: using (var reader = new StreamReader (FileName)) {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		if (string.IsNullOrWhiteSpace (line))  			continue;  		if (line.StartsWith (SolutionVersionPrefix)) {  			FormatVersion = line.Substring (SolutionVersionPrefix.Length).Trim ();  		}  		else if (ProjectRegex.IsMatch (line)) {  			var groups = ProjectRegex.Match (line).Groups;  			if (groups.Count == 3) {  				var projectName = groups [1].Value;  				var projectFullFileName = Path.Combine (Directory' groups [2].Value);  				if (!File.Exists (projectFullFileName))  					continue;  				var projectDirectory = new FileInfo (Path.Combine (Directory' projectFullFileName)).DirectoryName;  				Projects.Add (new VisualStudioProject (projectName' projectDirectory' projectFullFileName).Parse ());  			}  		}  	}  }  
Magic Number,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	if (string.IsNullOrWhiteSpace (line))  		continue;  	if (line.StartsWith (SolutionVersionPrefix)) {  		FormatVersion = line.Substring (SolutionVersionPrefix.Length).Trim ();  	}  	else if (ProjectRegex.IsMatch (line)) {  		var groups = ProjectRegex.Match (line).Groups;  		if (groups.Count == 3) {  			var projectName = groups [1].Value;  			var projectFullFileName = Path.Combine (Directory' groups [2].Value);  			if (!File.Exists (projectFullFileName))  				continue;  			var projectDirectory = new FileInfo (Path.Combine (Directory' projectFullFileName)).DirectoryName;  			Projects.Add (new VisualStudioProject (projectName' projectDirectory' projectFullFileName).Parse ());  		}  	}  }  
Magic Number,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	if (string.IsNullOrWhiteSpace (line))  		continue;  	if (line.StartsWith (SolutionVersionPrefix)) {  		FormatVersion = line.Substring (SolutionVersionPrefix.Length).Trim ();  	}  	else if (ProjectRegex.IsMatch (line)) {  		var groups = ProjectRegex.Match (line).Groups;  		if (groups.Count == 3) {  			var projectName = groups [1].Value;  			var projectFullFileName = Path.Combine (Directory' groups [2].Value);  			if (!File.Exists (projectFullFileName))  				continue;  			var projectDirectory = new FileInfo (Path.Combine (Directory' projectFullFileName)).DirectoryName;  			Projects.Add (new VisualStudioProject (projectName' projectDirectory' projectFullFileName).Parse ());  		}  	}  }  
Magic Number,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,The following statement contains a magic number: if (line.StartsWith (SolutionVersionPrefix)) {  	FormatVersion = line.Substring (SolutionVersionPrefix.Length).Trim ();  }  else if (ProjectRegex.IsMatch (line)) {  	var groups = ProjectRegex.Match (line).Groups;  	if (groups.Count == 3) {  		var projectName = groups [1].Value;  		var projectFullFileName = Path.Combine (Directory' groups [2].Value);  		if (!File.Exists (projectFullFileName))  			continue;  		var projectDirectory = new FileInfo (Path.Combine (Directory' projectFullFileName)).DirectoryName;  		Projects.Add (new VisualStudioProject (projectName' projectDirectory' projectFullFileName).Parse ());  	}  }  
Magic Number,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,The following statement contains a magic number: if (line.StartsWith (SolutionVersionPrefix)) {  	FormatVersion = line.Substring (SolutionVersionPrefix.Length).Trim ();  }  else if (ProjectRegex.IsMatch (line)) {  	var groups = ProjectRegex.Match (line).Groups;  	if (groups.Count == 3) {  		var projectName = groups [1].Value;  		var projectFullFileName = Path.Combine (Directory' groups [2].Value);  		if (!File.Exists (projectFullFileName))  			continue;  		var projectDirectory = new FileInfo (Path.Combine (Directory' projectFullFileName)).DirectoryName;  		Projects.Add (new VisualStudioProject (projectName' projectDirectory' projectFullFileName).Parse ());  	}  }  
Magic Number,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,The following statement contains a magic number: if (ProjectRegex.IsMatch (line)) {  	var groups = ProjectRegex.Match (line).Groups;  	if (groups.Count == 3) {  		var projectName = groups [1].Value;  		var projectFullFileName = Path.Combine (Directory' groups [2].Value);  		if (!File.Exists (projectFullFileName))  			continue;  		var projectDirectory = new FileInfo (Path.Combine (Directory' projectFullFileName)).DirectoryName;  		Projects.Add (new VisualStudioProject (projectName' projectDirectory' projectFullFileName).Parse ());  	}  }  
Magic Number,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,The following statement contains a magic number: if (ProjectRegex.IsMatch (line)) {  	var groups = ProjectRegex.Match (line).Groups;  	if (groups.Count == 3) {  		var projectName = groups [1].Value;  		var projectFullFileName = Path.Combine (Directory' groups [2].Value);  		if (!File.Exists (projectFullFileName))  			continue;  		var projectDirectory = new FileInfo (Path.Combine (Directory' projectFullFileName)).DirectoryName;  		Projects.Add (new VisualStudioProject (projectName' projectDirectory' projectFullFileName).Parse ());  	}  }  
Magic Number,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,The following statement contains a magic number: if (groups.Count == 3) {  	var projectName = groups [1].Value;  	var projectFullFileName = Path.Combine (Directory' groups [2].Value);  	if (!File.Exists (projectFullFileName))  		continue;  	var projectDirectory = new FileInfo (Path.Combine (Directory' projectFullFileName)).DirectoryName;  	Projects.Add (new VisualStudioProject (projectName' projectDirectory' projectFullFileName).Parse ());  }  
Magic Number,Univer.Common.VisualStudio,VisualStudioSolution,C:\repos\shigengyu_UniverCore\src\Univer.Common\VisualStudio\VisualStudioSolution.cs,Parse,The following statement contains a magic number: if (groups.Count == 3) {  	var projectName = groups [1].Value;  	var projectFullFileName = Path.Combine (Directory' groups [2].Value);  	if (!File.Exists (projectFullFileName))  		continue;  	var projectDirectory = new FileInfo (Path.Combine (Directory' projectFullFileName)).DirectoryName;  	Projects.Add (new VisualStudioProject (projectName' projectDirectory' projectFullFileName).Parse ());  }  
Magic Number,Univer.Common.Controls,LabelledControlBase,C:\repos\shigengyu_UniverCore\src\Univer.Common\Controls\LabelledControlBase.cs,LabelledControlBase,The following statement contains a magic number: TitleWidth = 100;  
Magic Number,Univer.Common.Controls,LabelledControlBase,C:\repos\shigengyu_UniverCore\src\Univer.Common\Controls\LabelledControlBase.cs,InitializeComponent,The following statement contains a magic number: _labelTitle.Size = new Size (35' 50);  
Magic Number,Univer.Common.Controls,LabelledControlBase,C:\repos\shigengyu_UniverCore\src\Univer.Common\Controls\LabelledControlBase.cs,InitializeComponent,The following statement contains a magic number: _labelTitle.Size = new Size (35' 50);  
Magic Number,Univer.Common.Controls,LabelledControlBase,C:\repos\shigengyu_UniverCore\src\Univer.Common\Controls\LabelledControlBase.cs,InitializeComponent,The following statement contains a magic number: _panel.Location = new Point (35' 0);  
Magic Number,Univer.Common.Controls,LabelledControlBase,C:\repos\shigengyu_UniverCore\src\Univer.Common\Controls\LabelledControlBase.cs,InitializeComponent,The following statement contains a magic number: _panel.Size = new Size (165' 50);  
Magic Number,Univer.Common.Controls,LabelledControlBase,C:\repos\shigengyu_UniverCore\src\Univer.Common\Controls\LabelledControlBase.cs,InitializeComponent,The following statement contains a magic number: _panel.Size = new Size (165' 50);  
Magic Number,Univer.Common.Controls,LabelledControlBase,C:\repos\shigengyu_UniverCore\src\Univer.Common\Controls\LabelledControlBase.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (200' 50);  
Magic Number,Univer.Common.Controls,LabelledControlBase,C:\repos\shigengyu_UniverCore\src\Univer.Common\Controls\LabelledControlBase.cs,InitializeComponent,The following statement contains a magic number: Size = new Size (200' 50);  
