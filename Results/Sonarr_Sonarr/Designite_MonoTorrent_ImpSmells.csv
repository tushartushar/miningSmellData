Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoTorrent,Torrent,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Torrent.cs,LoadInternal,The method has 130 lines of code.
Complex Method,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlDecode,Cyclomatic complexity of the method is 8
Long Parameter List,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,Write,The method has 5 parameters. Parameters: dest' destOffset' src' srcOffset' count
Long Parameter List,MonoTorrent,Toolbox,C:\repos\Sonarr_Sonarr\src\MonoTorrent\ToolBox.cs,ByteMatch,The method has 5 parameters. Parameters: array1' offset1' array2' offset2' count
Long Parameter List,MonoTorrent,TorrentFile,C:\repos\Sonarr_Sonarr\src\MonoTorrent\TorrentFile.cs,TorrentFile,The method has 5 parameters. Parameters: path' length' fullPath' startIndex' endIndex
Long Parameter List,MonoTorrent,TorrentFile,C:\repos\Sonarr_Sonarr\src\MonoTorrent\TorrentFile.cs,TorrentFile,The method has 8 parameters. Parameters: path' length' fullPath' startIndex' endIndex' md5' ed2k' sha1
Complex Conditional,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlEncodeChar,The conditional expression  "(c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z')"  is complex.
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (long i = number; i != 0; i /= 10)                  reversed = reversed * 10 + i % 10;
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (long i = number; i != 0; i /= 10)                  reversed = reversed * 10 + i % 10;
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (long i = number; i != 0; i /= 10)                  reversed = reversed * 10 + i % 10;
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (long i = reversed; i != 0; i /= 10)                  buffer[written++] = (byte)(i % 10 + '0');
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (long i = reversed; i != 0; i /= 10)                  buffer[written++] = (byte)(i % 10 + '0');
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (long i = number; i % 10 == 0 && number != 0; i /= 10)                  buffer[written++] = (byte)'0';
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedNumber.cs,Encode,The following statement contains a magic number: for (long i = number; i % 10 == 0 && number != 0; i /= 10)                  buffer[written++] = (byte)'0';
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedNumber.cs,DecodeInternal,The following statement contains a magic number: while (((letter = reader.PeekByte()) != -1) && letter != 'e')              {                  if(letter < '0' || letter > '9')                      throw new BEncodingException("Invalid number found.");                  number = number * 10 + (letter - '0');                  reader.ReadByte ();              }
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedNumber.cs,LengthInBytes,The following statement contains a magic number: int count = 2;
Magic Number,MonoTorrent.BEncoding,BEncodedNumber,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedNumber.cs,LengthInBytes,The following statement contains a magic number: for (long i = number; i != 0; i /= 10)                  count++;
Magic Number,MonoTorrent.BEncoding,BEncodedString,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BEncoding\BEncodedString.cs,LengthInBytes,The following statement contains a magic number: for (int i = textBytes.Length; i != 0; i = i/10)                  prefix += 1;
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,ReadShort,The following statement contains a magic number: offset += 2;
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,ReadInt,The following statement contains a magic number: offset += 4;
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,ReadLong,The following statement contains a magic number: offset += 8;
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 8));
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,Write,The following statement contains a magic number: return 2;
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 24));
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 16));
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (byte)(value >> 8));
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,Write,The following statement contains a magic number: return 4;
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,Write,The following statement contains a magic number: offset += Write(buffer' offset' (int)(value >> 32));
Magic Number,MonoTorrent.Messages,Message,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Messages\Message.cs,Write,The following statement contains a magic number: return 8;
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,BitField,The following statement contains a magic number: this.array = new int[(length + 31) / 32];
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,BitField,The following statement contains a magic number: this.array = new int[(length + 31) / 32];
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,BitField,The following statement contains a magic number: this.array = new int[(array.Length + 31) / 32];
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,BitField,The following statement contains a magic number: this.array = new int[(array.Length + 31) / 32];
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Clone,The following statement contains a magic number: Buffer.BlockCopy(this.array' 0' b.array' 0' this.array.Length * 4);
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,From,The following statement contains a magic number: Buffer.BlockCopy(value.array' 0' this.array' 0' this.array.Length * 4);
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FirstTrue,The following statement contains a magic number: int loopEnd = Math.Min((endIndex / 32)' this.array.Length - 1);
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FirstTrue,The following statement contains a magic number: for (int i = (startIndex / 32); i <= loopEnd; i++)              {                  if (this.array[i] == 0)        // This one has no true values                      continue;                    start = i * 32;                  end = start + 32;                  start = (start < startIndex) ? startIndex : start;                  end = (end > this.length) ? this.length : end;                  end = (end > endIndex) ? endIndex : end;                  if (end == this.Length && end > 0)                      end--;                    for (int j = start; j <= end; j++)                      if (this.Get(j))     // This piece is true                          return j;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FirstTrue,The following statement contains a magic number: for (int i = (startIndex / 32); i <= loopEnd; i++)              {                  if (this.array[i] == 0)        // This one has no true values                      continue;                    start = i * 32;                  end = start + 32;                  start = (start < startIndex) ? startIndex : start;                  end = (end > this.length) ? this.length : end;                  end = (end > endIndex) ? endIndex : end;                  if (end == this.Length && end > 0)                      end--;                    for (int j = start; j <= end; j++)                      if (this.Get(j))     // This piece is true                          return j;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FirstTrue,The following statement contains a magic number: for (int i = (startIndex / 32); i <= loopEnd; i++)              {                  if (this.array[i] == 0)        // This one has no true values                      continue;                    start = i * 32;                  end = start + 32;                  start = (start < startIndex) ? startIndex : start;                  end = (end > this.length) ? this.length : end;                  end = (end > endIndex) ? endIndex : end;                  if (end == this.Length && end > 0)                      end--;                    for (int j = start; j <= end; j++)                      if (this.Get(j))     // This piece is true                          return j;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FirstFalse,The following statement contains a magic number: int loopEnd = Math.Min((endIndex / 32)' this.array.Length - 1);
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FirstFalse,The following statement contains a magic number: for (int i = (startIndex / 32); i <= loopEnd; i++)              {                  if (this.array[i] == ~0)        // This one has no false values                      continue;                    start = i * 32;                  end = start + 32;                  start = (start < startIndex) ? startIndex : start;                  end = (end > this.length) ? this.length : end;                  end = (end > endIndex) ? endIndex : end;                  if (end == this.Length && end > 0)                      end--;                    for (int j = start; j <= end; j++)                      if (!this.Get(j))     // This piece is true                          return j;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FirstFalse,The following statement contains a magic number: for (int i = (startIndex / 32); i <= loopEnd; i++)              {                  if (this.array[i] == ~0)        // This one has no false values                      continue;                    start = i * 32;                  end = start + 32;                  start = (start < startIndex) ? startIndex : start;                  end = (end > this.length) ? this.length : end;                  end = (end > endIndex) ? endIndex : end;                  if (end == this.Length && end > 0)                      end--;                    for (int j = start; j <= end; j++)                      if (!this.Get(j))     // This piece is true                          return j;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FirstFalse,The following statement contains a magic number: for (int i = (startIndex / 32); i <= loopEnd; i++)              {                  if (this.array[i] == ~0)        // This one has no false values                      continue;                    start = i * 32;                  end = start + 32;                  start = (start < startIndex) ? startIndex : start;                  end = (end > this.length) ? this.length : end;                  end = (end > endIndex) ? endIndex : end;                  if (end == this.Length && end > 0)                      end--;                    for (int j = start; j <= end; j++)                      if (!this.Get(j))     // This piece is true                          return j;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FromArray,The following statement contains a magic number: int end = this.Length / 32;
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FromArray,The following statement contains a magic number: for (int i = 0; i < end; i++)                  this.array[i] = (buffer[offset++] << 24) |                             (buffer[offset++] << 16) |                             (buffer[offset++] << 8) |                             (buffer[offset++] << 0);
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FromArray,The following statement contains a magic number: for (int i = 0; i < end; i++)                  this.array[i] = (buffer[offset++] << 24) |                             (buffer[offset++] << 16) |                             (buffer[offset++] << 8) |                             (buffer[offset++] << 0);
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FromArray,The following statement contains a magic number: for (int i = 0; i < end; i++)                  this.array[i] = (buffer[offset++] << 24) |                             (buffer[offset++] << 16) |                             (buffer[offset++] << 8) |                             (buffer[offset++] << 0);
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FromArray,The following statement contains a magic number: int shift = 24;
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FromArray,The following statement contains a magic number: for (int i = end * 32; i < this.Length; i += 8)              {                  this.array[this.array.Length - 1] |= buffer[offset++] << shift;                  shift -= 8;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FromArray,The following statement contains a magic number: for (int i = end * 32; i < this.Length; i += 8)              {                  this.array[this.array.Length - 1] |= buffer[offset++] << shift;                  shift -= 8;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,FromArray,The following statement contains a magic number: for (int i = end * 32; i < this.Length; i += 8)              {                  this.array[this.array.Length - 1] |= buffer[offset++] << shift;                  shift -= 8;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Get,The following statement contains a magic number: return (this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0;
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Get,The following statement contains a magic number: return (this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0;
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Get,The following statement contains a magic number: return (this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0;
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Set,The following statement contains a magic number: if (value)              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) == 0)// If it's not already true                      this.trueCount++;                                        // Increase true count                  this.array[index >> 5] |= (1 << (31 - index & 31));              }              else              {                  if ((this.array[index >> 5] & (1 << (31 - (index & 31)))) != 0)// If it's not already false                      this.trueCount--;                                        // Decrease true count                  this.array[index >> 5] &= ~(1 << (31 - (index & 31)));              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ToByteArray,The following statement contains a magic number: int end = this.Length / 32;
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < end; i++)              {                  buffer[offset++] = (byte)(this.array[i] >> 24);                  buffer[offset++] = (byte)(this.array[i] >> 16);                  buffer[offset++] = (byte)(this.array[i] >> 8);                  buffer[offset++] = (byte)(this.array[i] >> 0);              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < end; i++)              {                  buffer[offset++] = (byte)(this.array[i] >> 24);                  buffer[offset++] = (byte)(this.array[i] >> 16);                  buffer[offset++] = (byte)(this.array[i] >> 8);                  buffer[offset++] = (byte)(this.array[i] >> 0);              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ToByteArray,The following statement contains a magic number: for (int i = 0; i < end; i++)              {                  buffer[offset++] = (byte)(this.array[i] >> 24);                  buffer[offset++] = (byte)(this.array[i] >> 16);                  buffer[offset++] = (byte)(this.array[i] >> 8);                  buffer[offset++] = (byte)(this.array[i] >> 0);              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ToByteArray,The following statement contains a magic number: int shift = 24;
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ToByteArray,The following statement contains a magic number: for (int i = end * 32; i < this.Length; i += 8)              {                  buffer[offset++] = (byte)(this.array[this.array.Length - 1] >> shift);                  shift -= 8;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ToByteArray,The following statement contains a magic number: for (int i = end * 32; i < this.Length; i += 8)              {                  buffer[offset++] = (byte)(this.array[this.array.Length - 1] >> shift);                  shift -= 8;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ToByteArray,The following statement contains a magic number: for (int i = end * 32; i < this.Length; i += 8)              {                  buffer[offset++] = (byte)(this.array[this.array.Length - 1] >> shift);                  shift -= 8;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ToString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(this.array.Length * 16);
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Validate,The following statement contains a magic number: for (int i = 0; i < this.array.Length; i++)              {                  uint v = (uint)this.array[i];                  v = v - ((v >> 1) & 0x55555555);                  v = (v & 0x33333333) + ((v >> 2) & 0x33333333);                  count += (((v + (v >> 4) & 0xF0F0F0F) * 0x1010101)) >> 24;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Validate,The following statement contains a magic number: for (int i = 0; i < this.array.Length; i++)              {                  uint v = (uint)this.array[i];                  v = v - ((v >> 1) & 0x55555555);                  v = (v & 0x33333333) + ((v >> 2) & 0x33333333);                  count += (((v + (v >> 4) & 0xF0F0F0F) * 0x1010101)) >> 24;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,Validate,The following statement contains a magic number: for (int i = 0; i < this.array.Length; i++)              {                  uint v = (uint)this.array[i];                  v = v - ((v >> 1) & 0x55555555);                  v = (v & 0x33333333) + ((v >> 2) & 0x33333333);                  count += (((v + (v >> 4) & 0xF0F0F0F) * 0x1010101)) >> 24;              }
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ZeroUnusedBits,The following statement contains a magic number: int shift = 32 - this.length % 32;
Magic Number,MonoTorrent,BitField,C:\repos\Sonarr_Sonarr\src\MonoTorrent\BitField.cs,ZeroUnusedBits,The following statement contains a magic number: int shift = 32 - this.length % 32;
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,InfoHash,The following statement contains a magic number: if (infoHash.Length != 20)                  throw new ArgumentException("Infohash must be exactly 20 bytes long");
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,Equals,The following statement contains a magic number: return other == null || other.Length != 20 ? false : Toolbox.ByteMatch(Hash' other);
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,GetHashCode,The following statement contains a magic number: return Hash[0] | (Hash[1] << 8) | (Hash[2] << 16) | (Hash[3] << 24);
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,GetHashCode,The following statement contains a magic number: return Hash[0] | (Hash[1] << 8) | (Hash[2] << 16) | (Hash[3] << 24);
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,GetHashCode,The following statement contains a magic number: return Hash[0] | (Hash[1] << 8) | (Hash[2] << 16) | (Hash[3] << 24);
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,GetHashCode,The following statement contains a magic number: return Hash[0] | (Hash[1] << 8) | (Hash[2] << 16) | (Hash[3] << 24);
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,GetHashCode,The following statement contains a magic number: return Hash[0] | (Hash[1] << 8) | (Hash[2] << 16) | (Hash[3] << 24);
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,ToHex,The following statement contains a magic number: StringBuilder sb = new StringBuilder(40);
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,ToHex,The following statement contains a magic number: for (int i = 0; i < hash.Length; i++)              {                  string hex = hash[i].ToString("X");                  if (hex.Length != 2)                      sb.Append("0");                  sb.Append(hex);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: if (infoHash.Length != 32)                  throw new ArgumentException("Infohash must be a base32 encoded 32 character string");
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: byte[] hash = new byte[20];
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: var temp = new byte[8];
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromBase32,The following statement contains a magic number: for (int i = 0; i < hash.Length; ) {                  for (int j=0; j < 8; j++)                      if (!base32DecodeTable.TryGetValue(infoHash[infohashOffset++]' out temp[j]))                          throw new ArgumentException ("infoHash"' "Value is not a valid base32 encoded string");                    //8 * 5bits = 40 bits = 5 bytes                  hash[i++] = (byte)((temp[0] << 3) | (temp [1]>> 2));                  hash[i++] = (byte)((temp[1] << 6) | (temp[2] << 1) | (temp[3] >> 4));                  hash[i++] = (byte)((temp[3] << 4) | (temp [4]>> 1));                  hash[i++] = (byte)((temp[4] << 7) | (temp[5] << 2) | (temp [6]>> 3));                  hash[i++] = (byte)((temp[6] << 5) | temp[7]);              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromHex,The following statement contains a magic number: if (infoHash.Length != 40)                  throw new ArgumentException("Infohash must be 40 characters long");
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromHex,The following statement contains a magic number: byte[] hash = new byte[20];
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromHex,The following statement contains a magic number: for (int i = 0; i < hash.Length; i++)                  hash[i] = byte.Parse(infoHash.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromHex,The following statement contains a magic number: for (int i = 0; i < hash.Length; i++)                  hash[i] = byte.Parse(infoHash.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromMagnetLink,The following statement contains a magic number: switch (hashEnd - hashStart)              {                  case 32:                      return FromBase32(magnetLink.Substring(hashStart' 32));                  case 40:                      return FromHex(magnetLink.Substring(hashStart' 40));                  default:                      throw new ArgumentException("Infohash must be base32 or hex encoded.");              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromMagnetLink,The following statement contains a magic number: switch (hashEnd - hashStart)              {                  case 32:                      return FromBase32(magnetLink.Substring(hashStart' 32));                  case 40:                      return FromHex(magnetLink.Substring(hashStart' 40));                  default:                      throw new ArgumentException("Infohash must be base32 or hex encoded.");              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromMagnetLink,The following statement contains a magic number: switch (hashEnd - hashStart)              {                  case 32:                      return FromBase32(magnetLink.Substring(hashStart' 32));                  case 40:                      return FromHex(magnetLink.Substring(hashStart' 40));                  default:                      throw new ArgumentException("Infohash must be base32 or hex encoded.");              }
Magic Number,MonoTorrent,InfoHash,C:\repos\Sonarr_Sonarr\src\MonoTorrent\InfoHash.cs,FromMagnetLink,The following statement contains a magic number: switch (hashEnd - hashStart)              {                  case 32:                      return FromBase32(magnetLink.Substring(hashStart' 32));                  case 40:                      return FromHex(magnetLink.Substring(hashStart' 40));                  default:                      throw new ArgumentException("Infohash must be base32 or hex encoded.");              }
Magic Number,MonoTorrent,Torrent,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Torrent.cs,Torrent,The following statement contains a magic number: this.creationDate = new DateTime(1970' 1' 1' 0' 0' 0);
Magic Number,MonoTorrent,Torrent,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Torrent.cs,LoadHashPieces,The following statement contains a magic number: if (data.Length % 20 != 0)                  throw new TorrentException("Invalid infohash detected");
Magic Number,MonoTorrent,Torrent,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Torrent.cs,LoadHashPieces,The following statement contains a magic number: this.pieces = new Hashes(data' data.Length / 20);
Magic Number,MonoTorrent,Torrent,C:\repos\Sonarr_Sonarr\src\MonoTorrent\Torrent.cs,LoadTorrentFiles,The following statement contains a magic number: StringBuilder sb = new StringBuilder(32);
Magic Number,MonoTorrent,TorrentFile,C:\repos\Sonarr_Sonarr\src\MonoTorrent\TorrentFile.cs,ToString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(32);
Magic Number,MonoTorrent,MagnetLink,C:\repos\Sonarr_Sonarr\src\MonoTorrent\MagnetLink.cs,ParseMagnetLink,The following statement contains a magic number: for (int i = 0; i < parameters.Length ; i++)              {                  string[] keyval = parameters[i].Split ('=');                  if (keyval.Length != 2)                      throw new FormatException ("A field-value pair of the magnet link contain more than one equal'.");                  switch (keyval[0].Substring(0' 2))                  {                      case "xt"://exact topic                          if (InfoHash != null)                              throw new FormatException ("More than one infohash in magnet link is not allowed.");                            string val = keyval[1].Substring(9);                          switch (keyval[1].Substring(0' 9))                          {                              case "urn:sha1:"://base32 hash                              case "urn:btih:":                              if (val.Length == 32)                                  InfoHash = InfoHash.FromBase32 (val);                              else if (val.Length == 40)                                  InfoHash = InfoHash.FromHex (val);                              else                                  throw new FormatException("Infohash must be base32 or hex encoded.");                              break;                          }                      break;                      case "tr" ://address tracker                          var bytes = UriHelper.UrlDecode(keyval[1]);                          AnnounceUrls.Add(Encoding.UTF8.GetString(bytes));                      break;                      case "as"://Acceptable Source                          Webseeds.Add (keyval[1]);                      break;                      case "dn"://display name                          var name = UriHelper.UrlDecode(keyval[1]);                          Name = Encoding.UTF8.GetString(name);                      break;                      case "xl"://exact length                      case "xs":// eXact Source - P2P link.                      case "kt"://keyword topic                      case "mt"://manifest topic                          //not supported for moment                      break;                      default:                          //not supported                      break;                  }              }
Magic Number,MonoTorrent,MagnetLink,C:\repos\Sonarr_Sonarr\src\MonoTorrent\MagnetLink.cs,ParseMagnetLink,The following statement contains a magic number: for (int i = 0; i < parameters.Length ; i++)              {                  string[] keyval = parameters[i].Split ('=');                  if (keyval.Length != 2)                      throw new FormatException ("A field-value pair of the magnet link contain more than one equal'.");                  switch (keyval[0].Substring(0' 2))                  {                      case "xt"://exact topic                          if (InfoHash != null)                              throw new FormatException ("More than one infohash in magnet link is not allowed.");                            string val = keyval[1].Substring(9);                          switch (keyval[1].Substring(0' 9))                          {                              case "urn:sha1:"://base32 hash                              case "urn:btih:":                              if (val.Length == 32)                                  InfoHash = InfoHash.FromBase32 (val);                              else if (val.Length == 40)                                  InfoHash = InfoHash.FromHex (val);                              else                                  throw new FormatException("Infohash must be base32 or hex encoded.");                              break;                          }                      break;                      case "tr" ://address tracker                          var bytes = UriHelper.UrlDecode(keyval[1]);                          AnnounceUrls.Add(Encoding.UTF8.GetString(bytes));                      break;                      case "as"://Acceptable Source                          Webseeds.Add (keyval[1]);                      break;                      case "dn"://display name                          var name = UriHelper.UrlDecode(keyval[1]);                          Name = Encoding.UTF8.GetString(name);                      break;                      case "xl"://exact length                      case "xs":// eXact Source - P2P link.                      case "kt"://keyword topic                      case "mt"://manifest topic                          //not supported for moment                      break;                      default:                          //not supported                      break;                  }              }
Magic Number,MonoTorrent,MagnetLink,C:\repos\Sonarr_Sonarr\src\MonoTorrent\MagnetLink.cs,ParseMagnetLink,The following statement contains a magic number: for (int i = 0; i < parameters.Length ; i++)              {                  string[] keyval = parameters[i].Split ('=');                  if (keyval.Length != 2)                      throw new FormatException ("A field-value pair of the magnet link contain more than one equal'.");                  switch (keyval[0].Substring(0' 2))                  {                      case "xt"://exact topic                          if (InfoHash != null)                              throw new FormatException ("More than one infohash in magnet link is not allowed.");                            string val = keyval[1].Substring(9);                          switch (keyval[1].Substring(0' 9))                          {                              case "urn:sha1:"://base32 hash                              case "urn:btih:":                              if (val.Length == 32)                                  InfoHash = InfoHash.FromBase32 (val);                              else if (val.Length == 40)                                  InfoHash = InfoHash.FromHex (val);                              else                                  throw new FormatException("Infohash must be base32 or hex encoded.");                              break;                          }                      break;                      case "tr" ://address tracker                          var bytes = UriHelper.UrlDecode(keyval[1]);                          AnnounceUrls.Add(Encoding.UTF8.GetString(bytes));                      break;                      case "as"://Acceptable Source                          Webseeds.Add (keyval[1]);                      break;                      case "dn"://display name                          var name = UriHelper.UrlDecode(keyval[1]);                          Name = Encoding.UTF8.GetString(name);                      break;                      case "xl"://exact length                      case "xs":// eXact Source - P2P link.                      case "kt"://keyword topic                      case "mt"://manifest topic                          //not supported for moment                      break;                      default:                          //not supported                      break;                  }              }
Magic Number,MonoTorrent,MagnetLink,C:\repos\Sonarr_Sonarr\src\MonoTorrent\MagnetLink.cs,ParseMagnetLink,The following statement contains a magic number: for (int i = 0; i < parameters.Length ; i++)              {                  string[] keyval = parameters[i].Split ('=');                  if (keyval.Length != 2)                      throw new FormatException ("A field-value pair of the magnet link contain more than one equal'.");                  switch (keyval[0].Substring(0' 2))                  {                      case "xt"://exact topic                          if (InfoHash != null)                              throw new FormatException ("More than one infohash in magnet link is not allowed.");                            string val = keyval[1].Substring(9);                          switch (keyval[1].Substring(0' 9))                          {                              case "urn:sha1:"://base32 hash                              case "urn:btih:":                              if (val.Length == 32)                                  InfoHash = InfoHash.FromBase32 (val);                              else if (val.Length == 40)                                  InfoHash = InfoHash.FromHex (val);                              else                                  throw new FormatException("Infohash must be base32 or hex encoded.");                              break;                          }                      break;                      case "tr" ://address tracker                          var bytes = UriHelper.UrlDecode(keyval[1]);                          AnnounceUrls.Add(Encoding.UTF8.GetString(bytes));                      break;                      case "as"://Acceptable Source                          Webseeds.Add (keyval[1]);                      break;                      case "dn"://display name                          var name = UriHelper.UrlDecode(keyval[1]);                          Name = Encoding.UTF8.GetString(name);                      break;                      case "xl"://exact length                      case "xs":// eXact Source - P2P link.                      case "kt"://keyword topic                      case "mt"://manifest topic                          //not supported for moment                      break;                      default:                          //not supported                      break;                  }              }
Magic Number,MonoTorrent,MagnetLink,C:\repos\Sonarr_Sonarr\src\MonoTorrent\MagnetLink.cs,ParseMagnetLink,The following statement contains a magic number: for (int i = 0; i < parameters.Length ; i++)              {                  string[] keyval = parameters[i].Split ('=');                  if (keyval.Length != 2)                      throw new FormatException ("A field-value pair of the magnet link contain more than one equal'.");                  switch (keyval[0].Substring(0' 2))                  {                      case "xt"://exact topic                          if (InfoHash != null)                              throw new FormatException ("More than one infohash in magnet link is not allowed.");                            string val = keyval[1].Substring(9);                          switch (keyval[1].Substring(0' 9))                          {                              case "urn:sha1:"://base32 hash                              case "urn:btih:":                              if (val.Length == 32)                                  InfoHash = InfoHash.FromBase32 (val);                              else if (val.Length == 40)                                  InfoHash = InfoHash.FromHex (val);                              else                                  throw new FormatException("Infohash must be base32 or hex encoded.");                              break;                          }                      break;                      case "tr" ://address tracker                          var bytes = UriHelper.UrlDecode(keyval[1]);                          AnnounceUrls.Add(Encoding.UTF8.GetString(bytes));                      break;                      case "as"://Acceptable Source                          Webseeds.Add (keyval[1]);                      break;                      case "dn"://display name                          var name = UriHelper.UrlDecode(keyval[1]);                          Name = Encoding.UTF8.GetString(name);                      break;                      case "xl"://exact length                      case "xs":// eXact Source - P2P link.                      case "kt"://keyword topic                      case "mt"://manifest topic                          //not supported for moment                      break;                      default:                          //not supported                      break;                  }              }
Magic Number,MonoTorrent,MagnetLink,C:\repos\Sonarr_Sonarr\src\MonoTorrent\MagnetLink.cs,ParseMagnetLink,The following statement contains a magic number: for (int i = 0; i < parameters.Length ; i++)              {                  string[] keyval = parameters[i].Split ('=');                  if (keyval.Length != 2)                      throw new FormatException ("A field-value pair of the magnet link contain more than one equal'.");                  switch (keyval[0].Substring(0' 2))                  {                      case "xt"://exact topic                          if (InfoHash != null)                              throw new FormatException ("More than one infohash in magnet link is not allowed.");                            string val = keyval[1].Substring(9);                          switch (keyval[1].Substring(0' 9))                          {                              case "urn:sha1:"://base32 hash                              case "urn:btih:":                              if (val.Length == 32)                                  InfoHash = InfoHash.FromBase32 (val);                              else if (val.Length == 40)                                  InfoHash = InfoHash.FromHex (val);                              else                                  throw new FormatException("Infohash must be base32 or hex encoded.");                              break;                          }                      break;                      case "tr" ://address tracker                          var bytes = UriHelper.UrlDecode(keyval[1]);                          AnnounceUrls.Add(Encoding.UTF8.GetString(bytes));                      break;                      case "as"://Acceptable Source                          Webseeds.Add (keyval[1]);                      break;                      case "dn"://display name                          var name = UriHelper.UrlDecode(keyval[1]);                          Name = Encoding.UTF8.GetString(name);                      break;                      case "xl"://exact length                      case "xs":// eXact Source - P2P link.                      case "kt"://keyword topic                      case "mt"://manifest topic                          //not supported for moment                      break;                      default:                          //not supported                      break;                  }              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {                  ch = s [i];                  if (ch == '%' && i + 2 < len && s [i + 1] != '%') {                      if (s [i + 1] == 'u' && i + 5 < len) {                          // unicode hex sequence                          xchar = GetChar (s' i + 2' 4);                          if (xchar != -1) {                              WriteCharBytes (bytes' (char)xchar' e);                              i += 5;                          } else                              WriteCharBytes (bytes' '%'' e);                      } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {                          WriteCharBytes (bytes' (char)xchar' e);                          i += 2;                      } else {                          WriteCharBytes (bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes (bytes' ' '' e);                  else                      WriteCharBytes (bytes' ch' e);              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {                  ch = s [i];                  if (ch == '%' && i + 2 < len && s [i + 1] != '%') {                      if (s [i + 1] == 'u' && i + 5 < len) {                          // unicode hex sequence                          xchar = GetChar (s' i + 2' 4);                          if (xchar != -1) {                              WriteCharBytes (bytes' (char)xchar' e);                              i += 5;                          } else                              WriteCharBytes (bytes' '%'' e);                      } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {                          WriteCharBytes (bytes' (char)xchar' e);                          i += 2;                      } else {                          WriteCharBytes (bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes (bytes' ' '' e);                  else                      WriteCharBytes (bytes' ch' e);              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {                  ch = s [i];                  if (ch == '%' && i + 2 < len && s [i + 1] != '%') {                      if (s [i + 1] == 'u' && i + 5 < len) {                          // unicode hex sequence                          xchar = GetChar (s' i + 2' 4);                          if (xchar != -1) {                              WriteCharBytes (bytes' (char)xchar' e);                              i += 5;                          } else                              WriteCharBytes (bytes' '%'' e);                      } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {                          WriteCharBytes (bytes' (char)xchar' e);                          i += 2;                      } else {                          WriteCharBytes (bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes (bytes' ' '' e);                  else                      WriteCharBytes (bytes' ch' e);              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {                  ch = s [i];                  if (ch == '%' && i + 2 < len && s [i + 1] != '%') {                      if (s [i + 1] == 'u' && i + 5 < len) {                          // unicode hex sequence                          xchar = GetChar (s' i + 2' 4);                          if (xchar != -1) {                              WriteCharBytes (bytes' (char)xchar' e);                              i += 5;                          } else                              WriteCharBytes (bytes' '%'' e);                      } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {                          WriteCharBytes (bytes' (char)xchar' e);                          i += 2;                      } else {                          WriteCharBytes (bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes (bytes' ' '' e);                  else                      WriteCharBytes (bytes' ch' e);              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {                  ch = s [i];                  if (ch == '%' && i + 2 < len && s [i + 1] != '%') {                      if (s [i + 1] == 'u' && i + 5 < len) {                          // unicode hex sequence                          xchar = GetChar (s' i + 2' 4);                          if (xchar != -1) {                              WriteCharBytes (bytes' (char)xchar' e);                              i += 5;                          } else                              WriteCharBytes (bytes' '%'' e);                      } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {                          WriteCharBytes (bytes' (char)xchar' e);                          i += 2;                      } else {                          WriteCharBytes (bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes (bytes' ' '' e);                  else                      WriteCharBytes (bytes' ch' e);              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {                  ch = s [i];                  if (ch == '%' && i + 2 < len && s [i + 1] != '%') {                      if (s [i + 1] == 'u' && i + 5 < len) {                          // unicode hex sequence                          xchar = GetChar (s' i + 2' 4);                          if (xchar != -1) {                              WriteCharBytes (bytes' (char)xchar' e);                              i += 5;                          } else                              WriteCharBytes (bytes' '%'' e);                      } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {                          WriteCharBytes (bytes' (char)xchar' e);                          i += 2;                      } else {                          WriteCharBytes (bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes (bytes' ' '' e);                  else                      WriteCharBytes (bytes' ch' e);              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {                  ch = s [i];                  if (ch == '%' && i + 2 < len && s [i + 1] != '%') {                      if (s [i + 1] == 'u' && i + 5 < len) {                          // unicode hex sequence                          xchar = GetChar (s' i + 2' 4);                          if (xchar != -1) {                              WriteCharBytes (bytes' (char)xchar' e);                              i += 5;                          } else                              WriteCharBytes (bytes' '%'' e);                      } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {                          WriteCharBytes (bytes' (char)xchar' e);                          i += 2;                      } else {                          WriteCharBytes (bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes (bytes' ' '' e);                  else                      WriteCharBytes (bytes' ch' e);              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlEncodeChar,The following statement contains a magic number: if (    (c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z')) {                  if (isUnicode && c > 127) {                      result.WriteByte ((byte)'%');                      result.WriteByte ((byte)'u');                      result.WriteByte ((byte)'0');                      result.WriteByte ((byte)'0');                  }                  else                      result.WriteByte ((byte)'%');                    int idx = ((int) c) >> 4;                  result.WriteByte ((byte)hexChars [idx]);                  idx = ((int) c) & 0x0F;                  result.WriteByte ((byte)hexChars [idx]);              }              else {                  result.WriteByte ((byte)c);              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,UrlEncodeChar,The following statement contains a magic number: if (    (c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z')) {                  if (isUnicode && c > 127) {                      result.WriteByte ((byte)'%');                      result.WriteByte ((byte)'u');                      result.WriteByte ((byte)'0');                      result.WriteByte ((byte)'0');                  }                  else                      result.WriteByte ((byte)'%');                    int idx = ((int) c) >> 4;                  result.WriteByte ((byte)hexChars [idx]);                  idx = ((int) c) & 0x0F;                  result.WriteByte ((byte)hexChars [idx]);              }              else {                  result.WriteByte ((byte)c);              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {                  char c = str [i];                  if (c > 127)                      return -1;                    int current = GetInt ((byte) c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {                  char c = str [i];                  if (c > 127)                      return -1;                    int current = GetInt ((byte) c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')                  return c - 'a' + 10;
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')                  return c - 'A' + 10;
Magic Number,MonoTorrent,UriHelper,C:\repos\Sonarr_Sonarr\src\MonoTorrent\UriHelper.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255) {                  foreach (byte b in e.GetBytes (new char[] { ch }))                      buf.Add (b);              } else                  buf.Add ((byte)ch);
Missing Default,MonoTorrent,MagnetLink,C:\repos\Sonarr_Sonarr\src\MonoTorrent\MagnetLink.cs,ParseMagnetLink,The following switch statement is missing a default case: switch (keyval[1].Substring(0' 9))                          {                              case "urn:sha1:"://base32 hash                              case "urn:btih:":                              if (val.Length == 32)                                  InfoHash = InfoHash.FromBase32 (val);                              else if (val.Length == 40)                                  InfoHash = InfoHash.FromHex (val);                              else                                  throw new FormatException("Infohash must be base32 or hex encoded.");                              break;                          }
