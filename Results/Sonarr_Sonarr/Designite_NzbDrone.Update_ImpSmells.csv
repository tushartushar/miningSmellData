Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NzbDrone.Update.UpdateEngine,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Update\UpdateEngine\InstallUpdateService.cs,InstallUpdateService,The method has 11 parameters. Parameters: diskProvider' diskTransferService' detectApplicationType' detectExistingVersion' terminateNzbDrone' appFolderInfo' backupAndRestore' backupAppData' startNzbDrone' processProvider' logger
Long Statement,NzbDrone.Update.UpdateEngine,BackupAppData,C:\repos\Sonarr_Sonarr\src\NzbDrone.Update\UpdateEngine\BackupAppData.cs,Backup,The length of the statement  "                _diskTransferService.TransferFile(_appFolderInfo.GetConfigPath()' _appFolderInfo.GetUpdateBackupConfigFile()' TransferMode.Copy); " is 129.
Long Statement,NzbDrone.Update.UpdateEngine,BackupAppData,C:\repos\Sonarr_Sonarr\src\NzbDrone.Update\UpdateEngine\BackupAppData.cs,Backup,The length of the statement  "                _diskTransferService.TransferFile(_appFolderInfo.GetNzbDroneDatabase()' _appFolderInfo.GetUpdateBackupDatabase()' TransferMode.Copy); " is 133.
Long Statement,NzbDrone.Update.UpdateEngine,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Update\UpdateEngine\InstallUpdateService.cs,Start,The length of the statement  "            _logger.Info("Updating Sonarr from version {0} to version {1}"' _detectExistingVersion.GetExistingVersion(installationFolder)' BuildInfo.Version); " is 146.
Long Statement,NzbDrone.Update.UpdateEngine,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Update\UpdateEngine\InstallUpdateService.cs,Start,The length of the statement  "                    if (_processProvider.Exists(ProcessProvider.NZB_DRONE_CONSOLE_PROCESS_NAME) || _processProvider.Exists(ProcessProvider.NZB_DRONE_PROCESS_NAME)) " is 143.
Magic Number,NzbDrone.Update,UpdateApp,C:\repos\Sonarr_Sonarr\src\NzbDrone.Update\UpdateApp.cs,ParseArgs,The following statement contains a magic number: if (OsInfo.IsNotWindows)              {                  switch (args.Count())                  {                      case 1:                          return startupContext;                      default:                          {                              Logger.Debug("Arguments:");                                foreach (var arg in args)                              {                                  Logger.Debug("  {0}"' arg);                              }                                startupContext.UpdateLocation = args[1];                              startupContext.ExecutingApplication = args[2];                                break;                          }                  }              }
Magic Number,NzbDrone.Update.UpdateEngine,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Update\UpdateEngine\InstallUpdateService.cs,Start,The following statement contains a magic number: try              {                  _backupAndRestore.Backup(installationFolder);                  _backupAppData.Backup();                    if (OsInfo.IsWindows)                  {                      if (_processProvider.Exists(ProcessProvider.NZB_DRONE_CONSOLE_PROCESS_NAME) || _processProvider.Exists(ProcessProvider.NZB_DRONE_PROCESS_NAME))                      {                          _logger.Error("Sonarr was restarted prematurely by external process.");                          return;                      }                  }                    try                  {                      _logger.Info("Copying new files to target folder");                      _diskTransferService.MirrorFolder(_appFolderInfo.GetUpdatePackageFolder()' installationFolder);                        // Set executable flag on Sonarr app                      if (OsInfo.IsOsx)                      {                          _diskProvider.SetPermissions(Path.Combine(installationFolder' "Sonarr")' "0755"' null' null);                      }                  }                  catch (Exception e)                  {                      _logger.Error(e' "Failed to copy upgrade package to target folder.");                      _backupAndRestore.Restore(installationFolder);                      throw;                  }              }              finally              {                  if (OsInfo.IsWindows)                  {                      _startNzbDrone.Start(appType' installationFolder);                  }                  else                  {                      _terminateNzbDrone.Terminate(processId);                        _logger.Info("Waiting for external auto-restart.");                      for (int i = 0; i < 5; i++)                      {                          System.Threading.Thread.Sleep(1000);                            if (_processProvider.Exists(ProcessProvider.NZB_DRONE_PROCESS_NAME))                          {                              _logger.Info("Sonarr was restarted by external process.");                              break;                          }                      }                        if (!_processProvider.Exists(ProcessProvider.NZB_DRONE_PROCESS_NAME))                      {                          _startNzbDrone.Start(appType' installationFolder);                      }                  }              }
Magic Number,NzbDrone.Update.UpdateEngine,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Update\UpdateEngine\InstallUpdateService.cs,Start,The following statement contains a magic number: try              {                  _backupAndRestore.Backup(installationFolder);                  _backupAppData.Backup();                    if (OsInfo.IsWindows)                  {                      if (_processProvider.Exists(ProcessProvider.NZB_DRONE_CONSOLE_PROCESS_NAME) || _processProvider.Exists(ProcessProvider.NZB_DRONE_PROCESS_NAME))                      {                          _logger.Error("Sonarr was restarted prematurely by external process.");                          return;                      }                  }                    try                  {                      _logger.Info("Copying new files to target folder");                      _diskTransferService.MirrorFolder(_appFolderInfo.GetUpdatePackageFolder()' installationFolder);                        // Set executable flag on Sonarr app                      if (OsInfo.IsOsx)                      {                          _diskProvider.SetPermissions(Path.Combine(installationFolder' "Sonarr")' "0755"' null' null);                      }                  }                  catch (Exception e)                  {                      _logger.Error(e' "Failed to copy upgrade package to target folder.");                      _backupAndRestore.Restore(installationFolder);                      throw;                  }              }              finally              {                  if (OsInfo.IsWindows)                  {                      _startNzbDrone.Start(appType' installationFolder);                  }                  else                  {                      _terminateNzbDrone.Terminate(processId);                        _logger.Info("Waiting for external auto-restart.");                      for (int i = 0; i < 5; i++)                      {                          System.Threading.Thread.Sleep(1000);                            if (_processProvider.Exists(ProcessProvider.NZB_DRONE_PROCESS_NAME))                          {                              _logger.Info("Sonarr was restarted by external process.");                              break;                          }                      }                        if (!_processProvider.Exists(ProcessProvider.NZB_DRONE_PROCESS_NAME))                      {                          _startNzbDrone.Start(appType' installationFolder);                      }                  }              }
