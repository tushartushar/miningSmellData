Implementation smell,Namespace,Class,File,Method,Description
Long Method,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The method has 113 lines of code.
Complex Method,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,MirrorFolder,Cyclomatic complexity of the method is 11
Complex Method,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,Cyclomatic complexity of the method is 19
Complex Method,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TryMoveFileTransactional,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Common.EnvironmentInfo,RuntimeInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnvironmentInfo\RuntimeInfo.cs,InternalIsProduction,Cyclomatic complexity of the method is 11
Complex Method,NzbDrone.Common.Expansive,Expansive,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Expansive\Expansive.cs,Expand,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Common.Http,HttpUri,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpUri.cs,HttpUri,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Common.Instrumentation.Sentry,SentryTarget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\Sentry\SentryTarget.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,TinyIoC,GenericMethodCacheKey,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanResolveInternal,Cyclomatic complexity of the method is 13
Complex Method,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 12
Complex Method,System.Reflection,GenericMethodCacheKey,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanResolveInternal,Cyclomatic complexity of the method is 13
Complex Method,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 12
Long Parameter List,NzbDrone.Common.Disk,IDiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The method has 5 parameters. Parameters: sourcePath' targetPath' mode' overwrite' verified
Long Parameter List,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The method has 5 parameters. Parameters: sourcePath' targetPath' mode' overwrite' verified
Long Parameter List,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The method has 5 parameters. Parameters: sourcePath' targetPath' mode' overwrite' verificationMode
Long Parameter List,NzbDrone.Common.Extensions,EnumerableExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\IEnumerableExtensions.cs,IntersectBy,The method has 5 parameters. Parameters: first' firstKeySelector' second' secondKeySelector' keyComparer
Long Parameter List,NzbDrone.Common.Extensions,EnumerableExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\IEnumerableExtensions.cs,ExceptBy,The method has 5 parameters. Parameters: first' firstKeySelector' second' secondKeySelector' keyComparer
Long Parameter List,NzbDrone.Common.Extensions,LevenstheinExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\LevenstheinExtensions.cs,LevenshteinDistance,The method has 5 parameters. Parameters: text' other' costInsert' costDelete' costSubstitute
Long Parameter List,NzbDrone.Common.Expansive,Expansive,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Expansive\Expansive.cs,Explode,The method has 5 parameters. Parameters: source' pattern' patternStyle' expansionFactory' parent
Long Parameter List,NzbDrone.Common.Http.Dispatchers,FallbackHttpDispatcher,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Dispatchers\FallbackHttpDispatcher.cs,FallbackHttpDispatcher,The method has 5 parameters. Parameters: managedDispatcher' curlDispatcher' cacheManager' platformInfo' logger
Long Parameter List,NzbDrone.Common.Http.Proxy,HttpProxySettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Proxy\HttpProxySettings.cs,HttpProxySettings,The method has 7 parameters. Parameters: type' host' port' bypassFilter' bypassLocalAddress' username' password
Long Parameter List,NzbDrone.Common.Http,HttpClient,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpClient.cs,HttpClient,The method has 6 parameters. Parameters: requestInterceptors' cacheManager' rateLimitService' httpDispatcher' userAgentBuilder' logger
Long Parameter List,NzbDrone.Common.Http,HttpUri,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpUri.cs,HttpUri,The method has 6 parameters. Parameters: scheme' host' port' path' query' fragment
Long Parameter List,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterAppFile,The method has 5 parameters. Parameters: appFolderInfo' name' fileName' maxArchiveFiles' minLogLevel
Long Parameter List,NzbDrone.Common.Instrumentation.Sentry,SonarrJsonPacketFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\Sentry\SonarrJsonPacketFactory.cs,Create,The method has 6 parameters. Parameters: project' message' level' tags' fingerprint' extra
Long Parameter List,NzbDrone.Common.Instrumentation.Sentry,SonarrJsonPacketFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\Sentry\SonarrJsonPacketFactory.cs,Create,The method has 7 parameters. Parameters: project' exception' message' level' tags' fingerprint' extra
Long Parameter List,NzbDrone.Common.Processes,IProcessProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Processes\ProcessProvider.cs,Start,The method has 5 parameters. Parameters: path' args' environmentVariables' onOutputDataReceived' onErrorDataReceived
Long Parameter List,NzbDrone.Common.Processes,ProcessProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Processes\ProcessProvider.cs,Start,The method has 5 parameters. Parameters: path' args' environmentVariables' onOutputDataReceived' onErrorDataReceived
Long Parameter List,TinyIoC,TypeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetGenericMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,TinyIoC,TypeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,TryResolve,The method has 5 parameters. Parameters: resolveType' name' parameters' options' resolvedType
Long Parameter List,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ConstructType,The method has 5 parameters. Parameters: requestedType' implementationType' constructor' parameters' options
Long Parameter List,System.Reflection,TypeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetGenericMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,System.Reflection,TypeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetMethod,The method has 5 parameters. Parameters: sourceType' bindingFlags' methodName' genericTypes' parameterTypes
Long Parameter List,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,TryResolve,The method has 5 parameters. Parameters: resolveType' name' parameters' options' resolvedType
Long Parameter List,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ConstructType,The method has 5 parameters. Parameters: requestedType' implementationType' constructor' parameters' options
Long Identifier,NzbDrone.Common.Extensions,PathExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\PathExtensions.cs,,The length of the parameter UPDATE_BACKUP_APPDATA_FOLDER_NAME is 33.
Long Identifier,NzbDrone.Common.Processes,ProcessProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Processes\ProcessProvider.cs,,The length of the parameter NZB_DRONE_CONSOLE_PROCESS_NAME is 30.
Long Identifier,TinyIoC,ResolveOptions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,,The length of the parameter _FailUnregisteredAndNameNotFound is 32.
Long Identifier,System.Reflection,ResolveOptions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,,The length of the parameter _FailUnregisteredAndNameNotFound is 32.
Long Identifier,NzbDrone.Common.TPL,LimitedConcurrencyLevelTaskScheduler,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TPL\LimitedConcurrencyLevelTaskScheduler.cs,,The length of the parameter _currentThreadIsProcessingItems is 31.
Long Statement,NzbDrone.Common,ConsoleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ConsoleService.cs,PrintHelp,The length of the statement  "            Console.WriteLine("                 /{0} Install the application as a Windows Service ({1})."' StartupContext.INSTALL_SERVICE' ServiceProvider.NZBDRONE_SERVICE_NAME); " is 166.
Long Statement,NzbDrone.Common,ConsoleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ConsoleService.cs,PrintHelp,The length of the statement  "            Console.WriteLine("                 /{0} Uninstall already installed Windows Service ({1})."' StartupContext.UNINSTALL_SERVICE' ServiceProvider.NZBDRONE_SERVICE_NAME); " is 167.
Long Statement,NzbDrone.Common,ConsoleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ConsoleService.cs,PrintHelp,The length of the statement  "            Console.WriteLine("                 /{0}=path Path to use as the AppData location (stores database' config' logs' etc)"' StartupContext.APPDATA); " is 145.
Long Statement,NzbDrone.Common,ConsoleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ConsoleService.cs,PrintServiceAlreadyExist,The length of the statement  "            Console.WriteLine("A service with the same name ({0}) already exists. Aborting installation"' ServiceProvider.NZBDRONE_SERVICE_NAME); " is 133.
Long Statement,NzbDrone.Common,HashUtil,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\HashUtil.cs,AnonymousToken,The length of the statement  "            var seed = $"{Environment.ProcessorCount}_{Environment.OSVersion.Platform}_{Environment.MachineName}_{Environment.UserName}"; " is 125.
Long Statement,NzbDrone.Common,ServiceProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ServiceProvider.cs,GetService,The length of the statement  "            return ServiceController.GetServices().FirstOrDefault(c => string.Equals(c.ServiceName' serviceName' StringComparison.InvariantCultureIgnoreCase)); " is 147.
Long Statement,NzbDrone.Common.Cache,CacheManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Cache\CacheManager.cs,GetCacheDictionary,The length of the statement  "            return (ICachedDictionary<T>)_cache.Get("dict_" + host.FullName + "_" + name' () => new CachedDictionary<T>(fetchFunc' lifeTime)); " is 130.
Long Statement,NzbDrone.Common.Composition,ContainerBuilderBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Composition\ContainerBuilderBase.cs,AutoRegisterInterfaces,The length of the statement  "            var contracts = loadedInterfaces.Union(implementedInterfaces).Where(c => !c.IsGenericTypeDefinition && !string.IsNullOrWhiteSpace(c.FullName)) " is 142.
Long Statement,NzbDrone.Common.Disk,OsPath,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\OsPath.cs,Contains,The length of the statement  "            var stringComparison = (Kind == OsPathKind.Windows || other.Kind == OsPathKind.Windows) ? StringComparison.InvariantCultureIgnoreCase : StringComparison.InvariantCulture; " is 170.
Long Statement,NzbDrone.Common.Disk,DiskProviderBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskProviderBase.cs,FolderWritable,The length of the statement  "                var testContent = $"This file was created to verify if '{path}' is writable. It should've been automatically deleted. Feel free to delete it."; " is 143.
Long Statement,NzbDrone.Common.Disk,DiskProviderBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskProviderBase.cs,SetPermissions,The length of the statement  "                if (rules.OfType<FileSystemAccessRule>().Any(acl => acl.AccessControlType == controlType && (acl.FileSystemRights & rights) == rights && acl.IdentityReference.Equals(sid))) " is 172.
Long Statement,NzbDrone.Common.Disk,DiskProviderBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskProviderBase.cs,SetPermissions,The length of the statement  "                Logger.Warn(e' "Couldn't set permission for {0}. account:{1} rights:{2} accessControlType:{3}"' filename' accountSid' rights' controlType); " is 139.
Long Statement,NzbDrone.Common.Disk,DiskProviderBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskProviderBase.cs,GetMounts,The length of the statement  "            return GetDriveInfoMounts().Where(d => d.DriveType == DriveType.Fixed || d.DriveType == DriveType.Network || d.DriveType == DriveType.Removable) " is 144.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The length of the statement  "                throw new IOException(string.Format("Destination cannot be a child of the source [{0}] => [{1}]"' sourcePath' targetPath)); " is 123.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The length of the statement  "            // We force a transactional transfer if the transfer occurs between mounts and one of the mounts is cifs' it would be a copy anyway. " is 132.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The length of the statement  "                if (verificationMode == DiskTransferVerificationMode.Transactional || verificationMode == DiskTransferVerificationMode.TryTransactional) " is 136.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The length of the statement  "                    throw new IOException(string.Format("Failed to completely transfer [{0}] to [{1}]' aborting."' sourcePath' targetPath)); " is 120.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The length of the statement  "                if (verificationMode == DiskTransferVerificationMode.Transactional || verificationMode == DiskTransferVerificationMode.TryTransactional) " is 136.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The length of the statement  "                    throw new IOException(string.Format("Failed to completely transfer [{0}] to [{1}]' aborting."' sourcePath' targetPath)); " is 120.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,RollbackPartialMove,The length of the statement  "                    _logger.Error("Failed to properly rollback the file move [{0}] to [{1}]' incomplete file may be left in target path."' sourcePath' targetPath); " is 143.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,RollbackPartialMove,The length of the statement  "                _logger.Error(ex' "Failed to properly rollback the file move [{0}] to [{1}]' incomplete file may be left in target path."' sourcePath' targetPath); " is 147.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,RollbackMove,The length of the statement  "                _logger.Error(ex' "Failed to properly rollback the file move [{0}] to [{1}]' file may be left in target path."' sourcePath' targetPath); " is 136.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,RollbackCopy,The length of the statement  "                _logger.Error(ex' "Failed to properly rollback the file copy [{0}] to [{1}]' file may be left in target path."' sourcePath' targetPath); " is 136.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,WaitForIO,The length of the statement  "            // This delay is intended to give the IO stack a bit of time to recover' this is especially required if remote NAS devices are involved. " is 136.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TryCopyFileTransactional,The length of the statement  "                        _logger.Warn("Failed to completely transfer [{0}] to [{1}]' retrying [{2}/{3}]."' sourcePath' targetPath' i + 1' RetryCount); " is 125.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TryCopyFileVerified,The length of the statement  "                    throw new IOException(string.Format("File copy incomplete. [{0}] was {1} bytes long instead of {2} bytes."' targetPath' targetSize' originalSize)); " is 147.
Long Statement,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TryMoveFileVerified,The length of the statement  "                    throw new IOException(string.Format("File move incomplete' data loss may have occurred. [{0}] was {1} bytes long instead of the expected {2}."' targetPath' targetSize' originalSize)); " is 183.
Long Statement,NzbDrone.Common.EnvironmentInfo,AppFolderFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnvironmentInfo\AppFolderFactory.cs,SetPermissions,The length of the statement  "                _diskProvider.SetPermissions(_appFolderInfo.AppDataFolder' WellKnownSidType.WorldSid' FileSystemRights.Modify' AccessControlType.Allow); " is 136.
Long Statement,NzbDrone.Common.Extensions,XmlExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\XmlExtensions.cs,FindDecendants,The length of the statement  "            return container.Descendants().Where(c => c.Name.LocalName.Equals(localName' StringComparison.InvariantCultureIgnoreCase)); " is 123.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDateTimeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDateTimeExtensions.cs,IsLt,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDateTimeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDateTimeExtensions.cs,IsLte,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDateTimeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDateTimeExtensions.cs,IsGt,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDateTimeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDateTimeExtensions.cs,IsGte,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDateTimeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDateTimeExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToLow.Inject(param.Value' min)); " is 140.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDateTimeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDateTimeExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToHigh.Inject(param.Value' max)); " is 141.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDateTimeExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDateTimeExtensions.cs,IsUtc,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' "Excepted time to be in UTC but was [{0}]".Inject(param.Value.Kind)); " is 129.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDecimalExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDecimalExtensions.cs,IsLt,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDecimalExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDecimalExtensions.cs,IsLte,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDecimalExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDecimalExtensions.cs,IsGt,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDecimalExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDecimalExtensions.cs,IsGte,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDecimalExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDecimalExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToLow.Inject(param.Value' min)); " is 140.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDecimalExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDecimalExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToHigh.Inject(param.Value' max)); " is 141.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDoubleExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDoubleExtensions.cs,IsLt,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDoubleExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDoubleExtensions.cs,IsLte,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDoubleExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDoubleExtensions.cs,IsGt,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDoubleExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDoubleExtensions.cs,IsGte,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDoubleExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDoubleExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToLow.Inject(param.Value' min)); " is 140.
Long Statement,NzbDrone.Common.EnsureThat,EnsureDoubleExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureDoubleExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToHigh.Inject(param.Value' max)); " is 141.
Long Statement,NzbDrone.Common.EnsureThat,EnsureIntExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureIntExtensions.cs,IsLessThan,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureIntExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureIntExtensions.cs,IsLessThanOrEqualTo,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureIntExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureIntExtensions.cs,IsGreaterThan,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureIntExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureIntExtensions.cs,IsGreaterThanZero,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGt.Inject(param.Value' 0)); " is 127.
Long Statement,NzbDrone.Common.EnsureThat,EnsureIntExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureIntExtensions.cs,IsGreaterOrEqualTo,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureIntExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureIntExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToLow.Inject(param.Value' min)); " is 140.
Long Statement,NzbDrone.Common.EnsureThat,EnsureIntExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureIntExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToHigh.Inject(param.Value' max)); " is 141.
Long Statement,NzbDrone.Common.EnsureThat,EnsureLongExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureLongExtensions.cs,IsLt,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureLongExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureLongExtensions.cs,IsLte,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureLongExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureLongExtensions.cs,IsGt,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureLongExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureLongExtensions.cs,IsGte,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureLongExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureLongExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToLow.Inject(param.Value' min)); " is 140.
Long Statement,NzbDrone.Common.EnsureThat,EnsureLongExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureLongExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToHigh.Inject(param.Value' max)); " is 141.
Long Statement,NzbDrone.Common.EnsureThat,EnsureShortExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureShortExtensions.cs,IsLt,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureShortExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureShortExtensions.cs,IsLte,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotLte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureShortExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureShortExtensions.cs,IsGt,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGt.Inject(param.Value' limit)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureShortExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureShortExtensions.cs,IsGte,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotGte.Inject(param.Value' limit)); " is 132.
Long Statement,NzbDrone.Common.EnsureThat,EnsureShortExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureShortExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToLow.Inject(param.Value' min)); " is 140.
Long Statement,NzbDrone.Common.EnsureThat,EnsureShortExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureShortExtensions.cs,IsInRange,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToHigh.Inject(param.Value' max)); " is 141.
Long Statement,NzbDrone.Common.EnsureThat,EnsureStringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureStringExtensions.cs,HasLengthBetween,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToShort.Inject(minLength' maxLength' length)); " is 154.
Long Statement,NzbDrone.Common.EnsureThat,EnsureStringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureStringExtensions.cs,HasLengthBetween,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_IsNotInRange_ToLong.Inject(minLength' maxLength' length)); " is 153.
Long Statement,NzbDrone.Common.EnsureThat,EnsureStringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureStringExtensions.cs,IsLongerThan,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' "The string is not long enough. Must be at least '{0}' but was '{1}' characters long.".Inject(minLength' length)); " is 174.
Long Statement,NzbDrone.Common.EnsureThat,EnsureStringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureStringExtensions.cs,Matches,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' ExceptionMessages.EnsureExtensions_NoMatch.Inject(param.Value' match)); " is 131.
Long Statement,NzbDrone.Common.EnsureThat,EnsureStringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureStringExtensions.cs,IsRelativePath,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' string.Format("value [{0}]  is not a valid relative path. relative paths must end with \\"' param.Value)); " is 166.
Long Statement,NzbDrone.Common.EnsureThat,EnsureStringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureStringExtensions.cs,IsRelativePath,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' string.Format("value [{0}]  is not a valid relative path. relative paths can not start with \\"' param.Value)); " is 171.
Long Statement,NzbDrone.Common.EnsureThat,EnsureStringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureStringExtensions.cs,IsValidPath,The length of the statement  "                throw ExceptionFactory.CreateForParamValidation(param.Name' string.Format("value [{0}]  is not a valid Windows path. paths must be a full path eg. C:\\Windows"' param.Value)); " is 175.
Long Statement,NzbDrone.Common.EnsureThat,EnsureStringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnsureThat\EnsureStringExtensions.cs,IsValidPath,The length of the statement  "            throw ExceptionFactory.CreateForParamValidation(param.Name' string.Format("value [{0}]  is not a valid *nix path. paths must start with /"' param.Value)); " is 154.
Long Statement,NzbDrone.Common.Expansive,Expansive,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Expansive\Expansive.cs,Expand,The length of the statement  "                        if (calls.Contains(string.Format("{0}:{1}"' callingToken' token))) throw new CircularReferenceException(string.Format("Circular Reference Detected for token '{0}'."' callingToken)); " is 181.
Long Statement,NzbDrone.Common.Expansive,Expansive,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Expansive\Expansive.cs,ExpandInternal,The length of the statement  "            if (expansionFactory == null) throw new ApplicationException("ExpansionFactory not defined.\nDefine a DefaultExpansionFactory or call Expand(source' Func<string' string> expansionFactory))"); " is 191.
Long Statement,NzbDrone.Common.Http.Dispatchers,CurlHttpDispatcher,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Dispatchers\CurlHttpDispatcher.cs,GetResponse,The length of the statement  "                                    throw new WebException(string.Format("Curl Error {0} for Url {1}' issues with your operating system SSL Root Certificate Bundle (ca-bundle)."' result' curlEasy.Url)); " is 166.
Long Statement,NzbDrone.Common.Http.Dispatchers,CurlHttpDispatcher,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Dispatchers\CurlHttpDispatcher.cs,FixSetCookieHeader,The length of the statement  "                if (DateTime.TryParseExact(match.Groups[2].Value' longFormat' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt) || " is 136.
Long Statement,NzbDrone.Common.Http.Dispatchers,CurlHttpDispatcher,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Dispatchers\CurlHttpDispatcher.cs,FixSetCookieHeader,The length of the statement  "                    DateTime.TryParseExact(match.Groups[2].Value' shortFormat' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt) || " is 133.
Long Statement,NzbDrone.Common.Http.Dispatchers,ManagedHttpDispatcher,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Dispatchers\ManagedHttpDispatcher.cs,GetResponse,The length of the statement  "                        throw new WebException("Failed to read complete http response"' ex' WebExceptionStatus.ReceiveFailure' httpWebResponse); " is 120.
Long Statement,NzbDrone.Common.Http.Proxy,ManagedWebProxyFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Proxy\ManagedWebProxyFactory.cs,CreateWebProxy,The length of the statement  "                        return new WebProxy(proxySettings.Host + ":" + proxySettings.Port' proxySettings.BypassLocalAddress' proxySettings.BypassListAsArray' new NetworkCredential(proxySettings.Username' proxySettings.Password)); " is 205.
Long Statement,NzbDrone.Common.Http.Proxy,ManagedWebProxyFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Proxy\ManagedWebProxyFactory.cs,CreateWebProxy,The length of the statement  "                        return new WebProxy(proxySettings.Host + ":" + proxySettings.Port' proxySettings.BypassLocalAddress' proxySettings.BypassListAsArray); " is 134.
Long Statement,NzbDrone.Common.Http.Proxy,ManagedWebProxyFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Proxy\ManagedWebProxyFactory.cs,CreateWebProxy,The length of the statement  "                    return new SocksWebProxy(new ProxyConfig(IPAddress.Loopback' GetNextFreePort()' GetProxyIpAddress(proxySettings.Host)' proxySettings.Port' ProxyConfig.SocksVersion.Four' proxySettings.Username' proxySettings.Password)' false); " is 226.
Long Statement,NzbDrone.Common.Http.Proxy,ManagedWebProxyFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Proxy\ManagedWebProxyFactory.cs,CreateWebProxy,The length of the statement  "                    return new SocksWebProxy(new ProxyConfig(IPAddress.Loopback' GetNextFreePort()' GetProxyIpAddress(proxySettings.Host)' proxySettings.Port' ProxyConfig.SocksVersion.Five' proxySettings.Username' proxySettings.Password)' false); " is 226.
Long Statement,NzbDrone.Common.Http.Proxy,ManagedWebProxyFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Proxy\ManagedWebProxyFactory.cs,GetProxyIpAddress,The length of the statement  "                    ipAddress = Dns.GetHostEntry(host).AddressList.OrderByDescending(a => a.AddressFamily == AddressFamily.InterNetwork).First(); " is 125.
Long Statement,NzbDrone.Common.Http.Proxy,ManagedWebProxyFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Proxy\ManagedWebProxyFactory.cs,GetProxyIpAddress,The length of the statement  "                    throw new InvalidOperationException(string.Format("Unable to resolve proxy hostname '{0}' to a valid IP address."' host)' e); " is 125.
Long Statement,NzbDrone.Common.Http,HttpClient,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpClient.cs,Execute,The length of the statement  "                        throw new WebException($"Too many automatic redirections were attempted for {autoRedirectChain.Join(" -> ")}"' WebExceptionStatus.ProtocolError); " is 145.
Long Statement,NzbDrone.Common.Http,HttpClient,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpClient.cs,Execute,The length of the statement  "                _logger.Error("Server requested a redirect to [{0}] while in developer mode. Update the request URL to avoid this redirect."' response.Headers["Location"]); " is 156.
Long Statement,NzbDrone.Common.Http,HttpResponse,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpResponse.cs,ToString,The length of the statement  "            if (HasHttpError && Headers.ContentType.IsNotNullOrWhiteSpace() && !Headers.ContentType.Equals("text/html"' StringComparison.InvariantCultureIgnoreCase)) " is 153.
Long Statement,NzbDrone.Common.Http,HttpRequestBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpRequestBuilder.cs,ApplyFormData,The length of the statement  "            var shouldSendAsMultipart = FormData.Any(v => v.ContentType != null || v.FileName != null || v.ContentData.Length > 1024); " is 122.
Long Statement,NzbDrone.Common.Http,HttpRequestBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpRequestBuilder.cs,ApplyFormData,The length of the statement  "                var parameters = FormData.Select(v => string.Format("{0}={1}"' v.Name' Uri.EscapeDataString(Encoding.UTF8.GetString(v.ContentData)))); " is 134.
Long Statement,NzbDrone.Common.Instrumentation,LogEventExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\LogEventExtensions.cs,GetHash,The length of the statement  "            var hashSeed = string.Concat(logEvent.LoggerName' logEvent.Exception.GetType().ToString()' stackString' logEvent.Level); " is 120.
Long Statement,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterDebugger,The length of the statement  "            target.Layout = "[${level}] [${threadid}] ${logger}: ${message} ${onexception:inner=${newline}${newline}[v${assembly-version}] ${exception:format=ToString}${newline}}"; " is 168.
Long Statement,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterConsole,The length of the statement  "            coloredConsoleTarget.Layout = "[${level}] ${logger}: ${message} ${onexception:inner=${newline}${newline}[v${assembly-version}] ${exception:format=ToString}${newline}}"; " is 168.
Long Statement,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterUpdateFile,The length of the statement  "            fileTarget.FileName = Path.Combine(appFolderInfo.GetUpdateLogFolder()' DateTime.Now.ToString("yyyy.MM.dd-HH.mm") + ".txt"); " is 123.
Long Statement,NzbDrone.Common.Processes,ProcessProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Processes\ProcessProvider.cs,StartAndCapture,The length of the statement  "            var process = Start(path' args' environmentVariables' s => output.Lines.Add(new ProcessOutputLine(ProcessOutputLevel.Standard' s))' " is 131.
Long Statement,NzbDrone.Common.Processes,ProcessProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Processes\ProcessProvider.cs,GetExeFileName,The length of the statement  "            return process.Modules.Cast<ProcessModule>().FirstOrDefault(module => module.ModuleName.ToLower().EndsWith(".exe")).FileName; " is 125.
Long Statement,NzbDrone.Common.Reflection,ReflectionExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Reflection\ReflectionExtensions.cs,GetAttribute,The length of the statement  "                throw new ArgumentException(string.Format("The {0} attribute must be defined on member {1}"' typeof(T).Name' member.Name)); " is 123.
Long Statement,NzbDrone.Common.Security,SecurityProtocolPolicy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Security\SecurityProtocolPolicy.cs,Register,The length of the statement  "                // TODO: In v3 we should drop support for SSL3 because its very insecure. Only leaving it enabled because some people might rely on it. " is 135.
Long Statement,NzbDrone.Common.Security,X509CertificateValidationPolicy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Security\X509CertificateValidationPolicy.cs,ShouldByPassValidationError,The length of the statement  "                Logger.Error("https://{0} uses the obsolete md5 hash in it's https certificate' if that is your certificate' please (re)create certificate with better algorithm as soon as possible."' req.RequestUri.Authority); " is 210.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' null); " is 149.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' registrationPredicate); " is 166.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' duplicateAction' registrationPredicate); " is 136.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(new Assembly[] { this.GetType().Assembly() }' ignoreDuplicateImplementations' registrationPredicate); " is 122.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,Register,The length of the statement  "            return this.RegisterInternal(registerType' string.Empty' GetDefaultObjectFactory(registerType' registerImplementation)); " is 120.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(registerType' string.Empty' new InstanceFactory(registerType' registerImplementation' instance)); " is 121.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,RegisterMultiple,The length of the statement  "                    throw new ArgumentException(string.Format("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 135.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,RegisterMultiple,The length of the statement  "                var multipleRegMessage = string.Format("types: The same implementation type cannot be specified multiple times for {0}\n\n{1}"' registrationType.FullName' fullNamesOfDuplicatedTypes); " is 183.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,Resolve,The length of the statement  "            return ResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 121.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanResolve,The length of the statement  "            return CanResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 124.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                    where type.IsClass() && (type.IsAbstract() == false) && (type != this.GetType() && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 159.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                             where ((type.IsInterface() || type.IsAbstract()) && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 128.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,IsIgnoredType,The length of the statement  "                t => (t.GetConstructors(BindingFlags.Instance | BindingFlags.Public).Length == 0) && !(t.IsInterface() || t.IsAbstract())' " is 122.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if (!string.IsNullOrEmpty(name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 130.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 208.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanResolveInternal,The length of the statement  "                return (GetBestConstructor(checkType' parameters' options) != null) ? true : (_Parent != null) ? _Parent.CanResolveInternal(registration' parameters' options) : false; " is 167.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            //			if ((genericType == typeof(Func<''>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string) && type.GetTypeInfo().GenericTypeArguments[1] == typeof(IDictionary<String' object>))) " is 192.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>))) " is 161.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!string.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 123.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!string.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 143.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 216.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => !mi.GetParameters().Any()); " is 141.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 1 && mi.GetParameters()[0].GetType() == typeof(String)); " is 199.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            //			if ((genericType == typeof(Func<''>) && type.GenericTypeArguments[0] == typeof(string) && type.GenericTypeArguments[1] == typeof(IDictionary<string' object>))) " is 164.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>))) " is 161.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads)); " is 269.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(string)' typeof(NamedParameterOverloads) }); " is 137.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 169.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "            //			var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll"' type.GenericTypeArguments' new[] { typeof(bool) }); " is 132.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "            var genericResolveAllMethod = this.GetType().GetGenericMethod(BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments()' new[] { typeof(bool) }); " is 173.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanConstruct,The length of the statement  "                if (!isParameterOverload && !CanResolveInternal(new TypeRegistration(parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 137.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ConstructType,The length of the statement  "                constructor = GetBestConstructor(typeToConstruct' parameters' options) ?? GetTypeConstructors(typeToConstruct).LastOrDefault(); " is 127.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,BuildUpInternal,The length of the statement  "            //							 where (property.GetMethod != null) && (property.SetMethod != null) && !property.PropertyType.GetTypeInfo().IsValueType " is 128.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,BuildUpInternal,The length of the statement  "                        property.SetValue(input' ResolveInternal(new TypeRegistration(property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 142.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveAllInternal,The length of the statement  "            var registrations = _RegisteredTypes.Keys.Where(tr => tr.Type == resolveType).Concat(GetParentRegistrationsForType(resolveType)); " is 129.
Long Statement,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveAllInternal,The length of the statement  "            return registrations.Select(registration => this.ResolveInternal(registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 137.
Long Statement,TinyIoC,RegisterOptions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "                return instance._Container.AddUpdateRegistration(instance._Registration' currentFactory.GetCustomObjectLifetimeVariant(lifetimeProvider' errorString)); " is 151.
Long Statement,TinyIoC,DelegateFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,TinyIoC,WeakDelegateFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,TinyIoC,InstanceFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,TinyIoC,WeakInstanceFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' null); " is 149.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' DuplicateImplementationActions.RegisterSingle' registrationPredicate); " is 166.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(AppDomain.CurrentDomain.GetAssemblies().Where(a => !IsIgnoredAssembly(a))' duplicateAction' registrationPredicate); " is 136.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegister,The length of the statement  "            AutoRegisterInternal(new Assembly[] { this.GetType().Assembly() }' ignoreDuplicateImplementations' registrationPredicate); " is 122.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,Register,The length of the statement  "            return this.RegisterInternal(registerType' string.Empty' GetDefaultObjectFactory(registerType' registerImplementation)); " is 120.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,Register,The length of the statement  "            return RegisterInternal(registerType' string.Empty' new InstanceFactory(registerType' registerImplementation' instance)); " is 121.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,RegisterMultiple,The length of the statement  "                    throw new ArgumentException(string.Format("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 135.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,RegisterMultiple,The length of the statement  "                var multipleRegMessage = string.Format("types: The same implementation type cannot be specified multiple times for {0}\n\n{1}"' registrationType.FullName' fullNamesOfDuplicatedTypes); " is 183.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,Resolve,The length of the statement  "            return ResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 121.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanResolve,The length of the statement  "            return CanResolveInternal(new TypeRegistration(resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 124.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                    where type.IsClass() && (type.IsAbstract() == false) && (type != this.GetType() && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 159.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "                                             where ((type.IsInterface() || type.IsAbstract()) && (type.DeclaringType != this.GetType()) && (!type.IsGenericTypeDefinition())) " is 128.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,IsIgnoredType,The length of the statement  "                t => (t.GetConstructors(BindingFlags.Instance | BindingFlags.Public).Length == 0) && !(t.IsInterface() || t.IsAbstract())' " is 122.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if (!string.IsNullOrEmpty(name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 130.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 208.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanResolveInternal,The length of the statement  "                return (GetBestConstructor(checkType' parameters' options) != null) ? true : (_Parent != null) ? _Parent.CanResolveInternal(registration' parameters' options) : false; " is 167.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            //			if ((genericType == typeof(Func<''>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string) && type.GetTypeInfo().GenericTypeArguments[1] == typeof(IDictionary<String' object>))) " is 192.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>))) " is 161.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!string.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 123.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveInternal,The length of the statement  "            if (!string.IsNullOrEmpty(registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) " is 143.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveInternal,The length of the statement  "            if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType() && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 216.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => !mi.GetParameters().Any()); " is 141.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 1 && mi.GetParameters()[0].GetType() == typeof(String)); " is 199.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            //			if ((genericType == typeof(Func<''>) && type.GenericTypeArguments[0] == typeof(string) && type.GenericTypeArguments[1] == typeof(IDictionary<string' object>))) " is 164.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "            if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>))) " is 161.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads)); " is 269.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(string)' typeof(NamedParameterOverloads) }); " is 137.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "                var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 169.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "            //			var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll"' type.GenericTypeArguments' new[] { typeof(bool) }); " is 132.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "            var genericResolveAllMethod = this.GetType().GetGenericMethod(BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments()' new[] { typeof(bool) }); " is 173.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,CanConstruct,The length of the statement  "                if (!isParameterOverload && !CanResolveInternal(new TypeRegistration(parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 137.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ConstructType,The length of the statement  "                constructor = GetBestConstructor(typeToConstruct' parameters' options) ?? GetTypeConstructors(typeToConstruct).LastOrDefault(); " is 127.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,BuildUpInternal,The length of the statement  "            //							 where (property.GetMethod != null) && (property.SetMethod != null) && !property.PropertyType.GetTypeInfo().IsValueType " is 128.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,BuildUpInternal,The length of the statement  "                        property.SetValue(input' ResolveInternal(new TypeRegistration(property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 142.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveAllInternal,The length of the statement  "            var registrations = _RegisteredTypes.Keys.Where(tr => tr.Type == resolveType).Concat(GetParentRegistrationsForType(resolveType)); " is 129.
Long Statement,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ResolveAllInternal,The length of the statement  "            return registrations.Select(registration => this.ResolveInternal(registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 137.
Long Statement,System.Reflection,RegisterOptions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,ToCustomLifetimeManager,The length of the statement  "                return instance._Container.AddUpdateRegistration(instance._Registration' currentFactory.GetCustomObjectLifetimeVariant(lifetimeProvider' errorString)); " is 151.
Long Statement,System.Reflection,DelegateFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,System.Reflection,WeakDelegateFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for delegate factory registrations"); " is 124.
Long Statement,System.Reflection,InstanceFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Long Statement,System.Reflection,WeakInstanceFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,SetConstructor,The length of the statement  "                throw new TinyIoCConstructorResolutionException("Constructor selection is not possible for instance factory registrations"); " is 124.
Complex Conditional,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TransferFile,The conditional expression  "sourceMount != null && targetMount != null && sourceMount.RootDirectory != targetMount.RootDirectory &&                      (sourceMount.DriveFormat == "cifs" || targetMount.DriveFormat == "cifs")"  is complex.
Complex Conditional,NzbDrone.Common.Http,HttpUri,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpUri.cs,Parse,The conditional expression  "!match.Success || scheme.Success && !host.Success && path.Success"  is complex.
Complex Conditional,NzbDrone.Common.Reflection,ReflectionExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Reflection\ReflectionExtensions.cs,IsSimpleType,The conditional expression  "type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(Nullable<>) ||                                         type.GetGenericTypeDefinition() == typeof(List<>) ||                                         type.GetGenericTypeDefinition() == typeof(IEnumerable<>))"  is complex.
Virtual Method Call from Constructor,NzbDrone.Common.Cloud,SonarrCloudRequestBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Cloud\SonarrCloudRequestBuilder.cs,SonarrCloudRequestBuilder,The constructor "SonarrCloudRequestBuilder" calls a virtual method "SetSegment".
Empty Catch Block,NzbDrone.Common.EnvironmentInfo,RuntimeInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnvironmentInfo\RuntimeInfo.cs,InternalIsProduction,The method has an empty catch block.
Empty Catch Block,NzbDrone.Common.EnvironmentInfo,RuntimeInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnvironmentInfo\RuntimeInfo.cs,InternalIsProduction,The method has an empty catch block.
Empty Catch Block,NzbDrone.Common.Instrumentation.Sentry,SonarrJsonPacketFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\Sentry\SonarrJsonPacketFactory.cs,Create,The method has an empty catch block.
Empty Catch Block,NzbDrone.Common.Processes,ProcessProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Processes\ProcessProvider.cs,GetProcessesByName,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Empty Catch Block,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Magic Number,NzbDrone.Common,ArchiveService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ArchiveService.cs,ExtractZip,The following statement contains a magic number: using (var fileStream = File.OpenRead(compressedFile))              {                  var zipFile = new ZipFile(fileStream);                    _logger.Debug("Validating Archive {0}"' compressedFile);                    if (!zipFile.TestArchive(true' TestStrategy.FindFirstError' OnZipError))                  {                      throw new IOException(string.Format("File {0} failed archive validation."' compressedFile));                  }                    foreach (ZipEntry zipEntry in zipFile)                  {                      if (!zipEntry.IsFile)                      {                          continue; // Ignore directories                      }                      string entryFileName = zipEntry.Name;                      // to remove the folder from the entry:- entryFileName = Path.GetFileName(entryFileName);                      // Optionally match entrynames against a selection list here to skip as desired.                      // The unpacked length is available in the zipEntry.Size property.                        byte[] buffer = new byte[4096]; // 4K is optimum                      Stream zipStream = zipFile.GetInputStream(zipEntry);                        // Manipulate the output filename here as desired.                      string fullZipToPath = Path.Combine(destination' entryFileName);                      string directoryName = Path.GetDirectoryName(fullZipToPath);                      if (directoryName.Length > 0)                          Directory.CreateDirectory(directoryName);                        // Unzip file in buffered chunks. This is just as fast as unpacking to a buffer the full size                      // of the file' but does not waste memory.                      // The "using" will close the stream even if an exception occurs.                      using (FileStream streamWriter = File.Create(fullZipToPath))                      {                          StreamUtils.Copy(zipStream' streamWriter' buffer);                      }                  }              }
Magic Number,NzbDrone.Common,ConvertBase32,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ConvertBase32.cs,FromBase32String,The following statement contains a magic number: int numBytes = str.Length * 5 / 8;
Magic Number,NzbDrone.Common,ConvertBase32,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ConvertBase32.cs,FromBase32String,The following statement contains a magic number: int numBytes = str.Length * 5 / 8;
Magic Number,NzbDrone.Common,ConvertBase32,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ConvertBase32.cs,FromBase32String,The following statement contains a magic number: for (int i = 0; i < str.Length;i++ )              {                  bitBuffer = (bitBuffer << 5) | ValidChars.IndexOf(str[i]);                  bitBufferCount += 5;                    if (bitBufferCount >= 8)                  {                      bitBufferCount -= 8;                      bytes[index++] = (byte)(bitBuffer >> bitBufferCount);                  }              }
Magic Number,NzbDrone.Common,ConvertBase32,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ConvertBase32.cs,FromBase32String,The following statement contains a magic number: for (int i = 0; i < str.Length;i++ )              {                  bitBuffer = (bitBuffer << 5) | ValidChars.IndexOf(str[i]);                  bitBufferCount += 5;                    if (bitBufferCount >= 8)                  {                      bitBufferCount -= 8;                      bytes[index++] = (byte)(bitBuffer >> bitBufferCount);                  }              }
Magic Number,NzbDrone.Common,ConvertBase32,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ConvertBase32.cs,FromBase32String,The following statement contains a magic number: for (int i = 0; i < str.Length;i++ )              {                  bitBuffer = (bitBuffer << 5) | ValidChars.IndexOf(str[i]);                  bitBufferCount += 5;                    if (bitBufferCount >= 8)                  {                      bitBufferCount -= 8;                      bytes[index++] = (byte)(bitBuffer >> bitBufferCount);                  }              }
Magic Number,NzbDrone.Common,ConvertBase32,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ConvertBase32.cs,FromBase32String,The following statement contains a magic number: for (int i = 0; i < str.Length;i++ )              {                  bitBuffer = (bitBuffer << 5) | ValidChars.IndexOf(str[i]);                  bitBufferCount += 5;                    if (bitBufferCount >= 8)                  {                      bitBufferCount -= 8;                      bytes[index++] = (byte)(bitBuffer >> bitBufferCount);                  }              }
Magic Number,NzbDrone.Common,HashUtil,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\HashUtil.cs,CalculateCrc,The following statement contains a magic number: foreach (byte myByte in bytes)              {                  mCrc ^= ((uint)(myByte) << 24);                  for (var i = 0; i < 8; i++)                  {                      if ((Convert.ToUInt32(mCrc) & 0x80000000) == 0x80000000)                      {                          mCrc = (mCrc << 1) ^ 0x04C11DB7;                      }                      else                      {                          mCrc <<= 1;                      }                  }              }
Magic Number,NzbDrone.Common,HashUtil,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\HashUtil.cs,CalculateCrc,The following statement contains a magic number: foreach (byte myByte in bytes)              {                  mCrc ^= ((uint)(myByte) << 24);                  for (var i = 0; i < 8; i++)                  {                      if ((Convert.ToUInt32(mCrc) & 0x80000000) == 0x80000000)                      {                          mCrc = (mCrc << 1) ^ 0x04C11DB7;                      }                      else                      {                          mCrc <<= 1;                      }                  }              }
Magic Number,NzbDrone.Common,ServiceProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ServiceProvider.cs,Stop,The following statement contains a magic number: if (service.Status != ServiceControllerStatus.Stopped)              {                  service.Stop();                  service.WaitForStatus(ServiceControllerStatus.Stopped' TimeSpan.FromSeconds(60));                    service.Refresh();                  if (service.Status == ServiceControllerStatus.Stopped)                  {                      _logger.Info("{0} has stopped successfully."' serviceName);                  }                  else                  {                      _logger.Error("Service stop request has timed out. {0}"' service.Status);                  }              }              else              {                  _logger.Warn("Service {0} is already in stopped state."' service.ServiceName);              }
Magic Number,NzbDrone.Common,ServiceProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\ServiceProvider.cs,Start,The following statement contains a magic number: service.WaitForStatus(ServiceControllerStatus.Running' TimeSpan.FromSeconds(60));
Magic Number,NzbDrone.Common.Disk,OsPath,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\OsPath.cs,HasWindowsDriveLetter,The following statement contains a magic number: if (path.Length < 2)    return false;
Magic Number,NzbDrone.Common.Disk,OsPath,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\OsPath.cs,HasWindowsDriveLetter,The following statement contains a magic number: if (path.Length > 2 && path[2] != '\\' && path[2] != '/') return false;
Magic Number,NzbDrone.Common.Disk,OsPath,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\OsPath.cs,HasWindowsDriveLetter,The following statement contains a magic number: if (path.Length > 2 && path[2] != '\\' && path[2] != '/') return false;
Magic Number,NzbDrone.Common.Disk,OsPath,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\OsPath.cs,HasWindowsDriveLetter,The following statement contains a magic number: if (path.Length > 2 && path[2] != '\\' && path[2] != '/') return false;
Magic Number,NzbDrone.Common.Disk,OsPath,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\OsPath.cs,GetFileNameIndex,The following statement contains a magic number: if (_path.Length < 2)              {                  return -1;              }
Magic Number,NzbDrone.Common.Disk,OsPath,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\OsPath.cs,GetFileNameIndex,The following statement contains a magic number: var index = _path.LastIndexOfAny(new[] { '/'' '\\' }' _path.Length - 2);
Magic Number,NzbDrone.Common.Disk,OsPath,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\OsPath.cs,GetFileNameIndex,The following statement contains a magic number: if (_path.StartsWith(@"\\") && index < 2)              {                  return -1;              }
Magic Number,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,CompareFiles,The following statement contains a magic number: var sourceBuffer = new byte[64 * 1024];
Magic Number,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,CompareFiles,The following statement contains a magic number: var sourceBuffer = new byte[64 * 1024];
Magic Number,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,CompareFiles,The following statement contains a magic number: var targetBuffer = new byte[64 * 1024];
Magic Number,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,CompareFiles,The following statement contains a magic number: var targetBuffer = new byte[64 * 1024];
Magic Number,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,WaitForIO,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,NzbDrone.Common.Disk,DiskTransferService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\DiskTransferService.cs,TryMoveFileTransactional,The following statement contains a magic number: try              {                  _logger.Trace("Attempting to move hardlinked backup.");                  if (_diskProvider.TryCreateHardLink(sourcePath' backupPath))                  {                      _diskProvider.MoveFile(backupPath' tempTargetPath);                        if (_diskProvider.FileExists(tempTargetPath))                      {                          var targetSize = _diskProvider.GetFileSize(tempTargetPath);                            if (targetSize == originalSize)                          {                              _diskProvider.MoveFile(tempTargetPath' targetPath);                              if (_diskProvider.FileExists(tempTargetPath))                              {                                  throw new IOException(string.Format("Temporary file '{0}' still exists' aborting."' tempTargetPath));                              }                              _logger.Trace("Hardlink move succeeded' deleting source.");                              _diskProvider.DeleteFile(sourcePath);                              return true;                          }                      }                        Thread.Sleep(5000);                        _diskProvider.DeleteFile(tempTargetPath);                  }              }              finally              {                  if (_diskProvider.FileExists(backupPath))                  {                      _diskProvider.DeleteFile(backupPath);                  }              }
Magic Number,NzbDrone.Common.EnvironmentInfo,RuntimeInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnvironmentInfo\RuntimeInfo.cs,InternalIsProduction,The following statement contains a magic number: if (BuildInfo.Version.Revision > 10000) return false;
Magic Number,NzbDrone.Common.EnvironmentInfo,StartupContext,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnvironmentInfo\StartupContext.cs,StartupContext,The following statement contains a magic number: foreach (var s in args)              {                  var flag = s.Trim(' '' '/'' '-');                    var argParts = flag.Split('=');                    if (argParts.Length == 2)                  {                      Args.Add(argParts[0].Trim().ToLower()' argParts[1].Trim(' '' '"'));                  }                  else                  {                      Flags.Add(flag.ToLower());                  }              }
Magic Number,NzbDrone.Common.Extensions,ExceptionExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\ExceptionExtensions.cs,WithData,The following statement contains a magic number: var contentSample = response.Content.Substring(0' Math.Min(response.Content.Length' 512));
Magic Number,NzbDrone.Common.Extensions,Int64Extensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\Int64Extensions.cs,SizeSuffix,The following statement contains a magic number: const int bytesInKb = 1024;
Magic Number,NzbDrone.Common.Extensions,StreamExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\StreamExtensions.cs,ToBytes,The following statement contains a magic number: var buffer = new byte[16 * 1024];
Magic Number,NzbDrone.Common.Extensions,StreamExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\StreamExtensions.cs,ToBytes,The following statement contains a magic number: var buffer = new byte[16 * 1024];
Magic Number,NzbDrone.Common.Extensions,LevenstheinExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\LevenstheinExtensions.cs,LevenshteinDistanceClean,The following statement contains a magic number: return expected.LevenshteinDistance(other' 1' 3' 3);
Magic Number,NzbDrone.Common.Extensions,LevenstheinExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\LevenstheinExtensions.cs,LevenshteinDistanceClean,The following statement contains a magic number: return expected.LevenshteinDistance(other' 1' 3' 3);
Magic Number,NzbDrone.Common.Extensions,StringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\StringExtensions.cs,HexToByteArray,The following statement contains a magic number: return Enumerable.Range(0' input.Length)                               .Where(x => x%2 == 0)                               .Select(x => Convert.ToByte(input.Substring(x' 2)' 16))                               .ToArray();
Magic Number,NzbDrone.Common.Extensions,StringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\StringExtensions.cs,HexToByteArray,The following statement contains a magic number: return Enumerable.Range(0' input.Length)                               .Where(x => x%2 == 0)                               .Select(x => Convert.ToByte(input.Substring(x' 2)' 16))                               .ToArray();
Magic Number,NzbDrone.Common.Extensions,StringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\StringExtensions.cs,HexToByteArray,The following statement contains a magic number: return Enumerable.Range(0' input.Length)                               .Where(x => x%2 == 0)                               .Select(x => Convert.ToByte(input.Substring(x' 2)' 16))                               .ToArray();
Magic Number,NzbDrone.Common.Extensions,StringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\StringExtensions.cs,FromOctalString,The following statement contains a magic number: var third = int.Parse(octalValue.Substring(2' 1));
Magic Number,NzbDrone.Common.Extensions,StringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\StringExtensions.cs,FromOctalString,The following statement contains a magic number: var byteResult = (byte)((first << 6) | (second << 3) | (third));
Magic Number,NzbDrone.Common.Extensions,StringExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Extensions\StringExtensions.cs,FromOctalString,The following statement contains a magic number: var byteResult = (byte)((first << 6) | (second << 3) | (third));
Magic Number,NzbDrone.Common.Http.Dispatchers,CurlHttpDispatcher,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Dispatchers\CurlHttpDispatcher.cs,GetResponse,The following statement contains a magic number: lock (CurlGlobalHandle.Instance)              {                  Stream responseStream = new MemoryStream();                  Stream headerStream = new MemoryStream();                    using (var curlEasy = new CurlEasy())                  {                      curlEasy.AutoReferer = false;                      curlEasy.WriteFunction = (b' s' n' o) =>                      {                          responseStream.Write(b' 0' s * n);                          return s * n;                      };                      curlEasy.HeaderFunction = (b' s' n' o) =>                      {                          headerStream.Write(b' 0' s * n);                          return s * n;                      };                        AddProxy(curlEasy' request);                        curlEasy.Url = request.Url.FullUri;                        switch (request.Method)                      {                          case HttpMethod.GET:                              curlEasy.HttpGet = true;                              break;                            case HttpMethod.POST:                              curlEasy.Post = true;                              break;                            case HttpMethod.PUT:                              curlEasy.Put = true;                              break;                            default:                              throw new NotSupportedException($"HttpCurl method {request.Method} not supported");                      }                      curlEasy.UserAgent = _userAgentBuilder.GetUserAgent(request.UseSimplifiedUserAgent);                      curlEasy.FollowLocation = false;                        if (request.RequestTimeout != TimeSpan.Zero)                      {                          curlEasy.Timeout = (int)Math.Ceiling(request.RequestTimeout.TotalSeconds);                      }                        if (OsInfo.IsWindows)                      {                          curlEasy.CaInfo = _caBundleFilePath;                      }                        if (cookies != null)                      {                          curlEasy.Cookie = cookies.GetCookieHeader((Uri)request.Url);                      }                        if (request.ContentData != null)                      {                          curlEasy.PostFieldSize = request.ContentData.Length;                          curlEasy.SetOpt(CurlOption.CopyPostFields' new string(Array.ConvertAll(request.ContentData' v => (char)v)));                      }                        // Yes' we have to keep a ref to the object to prevent corrupting the unmanaged state                      using (var httpRequestHeaders = SerializeHeaders(request))                      {                          curlEasy.HttpHeader = httpRequestHeaders;                            var result = curlEasy.Perform();                            if (result != CurlCode.Ok)                          {                              switch (result)                              {                                  case CurlCode.SslCaCert:                                  case (CurlCode)77:                                      throw new WebException(string.Format("Curl Error {0} for Url {1}' issues with your operating system SSL Root Certificate Bundle (ca-bundle)."' result' curlEasy.Url));                                  default:                                      throw new WebException(string.Format("Curl Error {0} for Url {1}"' result' curlEasy.Url));                                }                          }                      }                        var webHeaderCollection = ProcessHeaderStream(request' cookies' headerStream);                      var responseData = ProcessResponseStream(request' responseStream' webHeaderCollection);                        var httpHeader = new HttpHeader(webHeaderCollection);                        return new HttpResponse(request' httpHeader' responseData' (HttpStatusCode)curlEasy.ResponseCode);                  }              }
Magic Number,NzbDrone.Common.Http.Dispatchers,CurlHttpDispatcher,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Dispatchers\CurlHttpDispatcher.cs,FixSetCookieHeader,The following statement contains a magic number: var setCookieClean = ExpiryDate.Replace(setCookie' delegate(Match match)              {                  string shortFormat = "ddd' dd-MMM-yy HH:mm:ss";                  string longFormat = "ddd' dd-MMM-yyyy HH:mm:ss";                  DateTime dt;                  if (DateTime.TryParseExact(match.Groups[2].Value' longFormat' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt) ||                      DateTime.TryParseExact(match.Groups[2].Value' shortFormat' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt) ||                      DateTime.TryParse(match.Groups[2].Value' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt))                      return match.Groups[1].Value + dt.ToUniversalTime().ToString(longFormat' CultureInfo.InvariantCulture) + " GMT";                  else                      return match.Value;              });
Magic Number,NzbDrone.Common.Http.Dispatchers,CurlHttpDispatcher,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Dispatchers\CurlHttpDispatcher.cs,FixSetCookieHeader,The following statement contains a magic number: var setCookieClean = ExpiryDate.Replace(setCookie' delegate(Match match)              {                  string shortFormat = "ddd' dd-MMM-yy HH:mm:ss";                  string longFormat = "ddd' dd-MMM-yyyy HH:mm:ss";                  DateTime dt;                  if (DateTime.TryParseExact(match.Groups[2].Value' longFormat' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt) ||                      DateTime.TryParseExact(match.Groups[2].Value' shortFormat' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt) ||                      DateTime.TryParse(match.Groups[2].Value' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt))                      return match.Groups[1].Value + dt.ToUniversalTime().ToString(longFormat' CultureInfo.InvariantCulture) + " GMT";                  else                      return match.Value;              });
Magic Number,NzbDrone.Common.Http.Dispatchers,CurlHttpDispatcher,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Dispatchers\CurlHttpDispatcher.cs,FixSetCookieHeader,The following statement contains a magic number: var setCookieClean = ExpiryDate.Replace(setCookie' delegate(Match match)              {                  string shortFormat = "ddd' dd-MMM-yy HH:mm:ss";                  string longFormat = "ddd' dd-MMM-yyyy HH:mm:ss";                  DateTime dt;                  if (DateTime.TryParseExact(match.Groups[2].Value' longFormat' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt) ||                      DateTime.TryParseExact(match.Groups[2].Value' shortFormat' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt) ||                      DateTime.TryParse(match.Groups[2].Value' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal' out dt))                      return match.Groups[1].Value + dt.ToUniversalTime().ToString(longFormat' CultureInfo.InvariantCulture) + " GMT";                  else                      return match.Value;              });
Magic Number,NzbDrone.Common.Http.Proxy,ManagedWebProxyFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Proxy\ManagedWebProxyFactory.cs,GetWebProxy,The following statement contains a magic number: var proxy = _webProxyCache.Get(proxySettings.Key' () => CreateWebProxy(proxySettings)' TimeSpan.FromMinutes(5));
Magic Number,NzbDrone.Common.Http,HttpClient,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpClient.cs,HttpClient,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 12;
Magic Number,NzbDrone.Common.Http,HttpClient,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpClient.cs,Execute,The following statement contains a magic number: if (request.AllowAutoRedirect && response.HasHttpRedirect)              {                  var autoRedirectChain = new List<string>();                  autoRedirectChain.Add(request.Url.ToString());                    do                  {                      request.Url += new HttpUri(response.Headers.GetSingleValue("Location"));                      autoRedirectChain.Add(request.Url.ToString());                        _logger.Trace("Redirected to {0}"' request.Url);                        if (autoRedirectChain.Count > 3)                      {                          throw new WebException($"Too many automatic redirections were attempted for {autoRedirectChain.Join(" -> ")}"' WebExceptionStatus.ProtocolError);                      }                        response = ExecuteRequest(request);                  }                  while (response.HasHttpRedirect);              }
Magic Number,NzbDrone.Common.Http,HttpClient,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpClient.cs,Execute,The following statement contains a magic number: if (!request.SuppressHttpError && response.HasHttpError)              {                  _logger.Warn("HTTP Error - {0}"' response);                    if ((int)response.StatusCode == 429)                  {                      throw new TooManyRequestsException(request' response);                  }                  else                  {                      throw new HttpException(request' response);                  }              }
Magic Number,NzbDrone.Common.Http,HttpResponse,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpResponse.cs,GetCookies,The following statement contains a magic number: if (setCookieHeaders != null)              {                  foreach (var cookie in setCookieHeaders)                  {                      var match = RegexSetCookie.Match(cookie);                      if (match.Success)                      {                          result[match.Groups[1].Value] = match.Groups[2].Value;                      }                  }              }
Magic Number,NzbDrone.Common.Http,JsonRpcRequestBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\JsonRpcRequestBuilder.cs,CreateNextId,The following statement contains a magic number: return Guid.NewGuid().ToString().Substring(0' 8);
Magic Number,NzbDrone.Common.Http,HttpRequestBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\HttpRequestBuilder.cs,ApplyFormData,The following statement contains a magic number: var shouldSendAsMultipart = FormData.Any(v => v.ContentType != null || v.FileName != null || v.ContentData.Length > 1024);
Magic Number,NzbDrone.Common.Http,UserAgentBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\UserAgentBuilder.cs,UserAgentBuilder,The following statement contains a magic number: _userAgentSimplified = $"Sonarr/{BuildInfo.Version.ToString(2)}";
Magic Number,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterAppFile,The following statement contains a magic number: RegisterAppFile(appFolderInfo' "appFileInfo"' "sonarr.txt"' 5' LogLevel.Info);
Magic Number,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterAppFile,The following statement contains a magic number: RegisterAppFile(appFolderInfo' "appFileDebug"' "sonarr.debug.txt"' 50' LogLevel.Off);
Magic Number,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterAppFile,The following statement contains a magic number: RegisterAppFile(appFolderInfo' "appFileTrace"' "sonarr.trace.txt"' 50' LogLevel.Off);
Magic Number,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterAppFile,The following statement contains a magic number: fileTarget.ConcurrentWriteAttemptDelay = 50;
Magic Number,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterAppFile,The following statement contains a magic number: fileTarget.ConcurrentWriteAttempts = 10;
Magic Number,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterAppFile,The following statement contains a magic number: fileTarget.ArchiveAboveSize = 1024000;
Magic Number,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterUpdateFile,The following statement contains a magic number: fileTarget.ConcurrentWriteAttemptDelay = 50;
Magic Number,NzbDrone.Common.Instrumentation,NzbDroneLogger,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\NzbDroneLogger.cs,RegisterUpdateFile,The following statement contains a magic number: fileTarget.ConcurrentWriteAttempts = 100;
Magic Number,NzbDrone.Common.Instrumentation.Sentry,SentryDebounce,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Instrumentation\Sentry\SentryDebounce.cs,SentryDebounce,The following statement contains a magic number: _ttl = RuntimeInfo.IsProduction ? TimeSpan.FromHours(1) : TimeSpan.FromSeconds(10);
Magic Number,TinyIoC,GenericMethodCacheKey,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,TinyIoC,GenericMethodCacheKey,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,TinyIoC,GenericMethodCacheKey,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,TinyIoC,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>)))              //#endif              {                  Type returnType = genericArguments[2];                    var name = Expression.Parameter(typeof(string)' "name");                  var parameters = Expression.Parameter(typeof(IDictionary<string' object>)' "parameters");                    //#if NETFX_CORE                  //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads));                  //#else                  MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(string)' typeof(NamedParameterOverloads) });                  //#endif                  resolveMethod = resolveMethod.MakeGenericMethod(returnType);                    var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));                    var resolveLambda = Expression.Lambda(resolveCall' name' parameters).Compile();                    return resolveLambda;              }
Magic Number,System.Reflection,GenericMethodCacheKey,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,System.Reflection,GenericMethodCacheKey,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,System.Reflection,GenericMethodCacheKey,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GenerateHashCode,The following statement contains a magic number: unchecked                  {                      var result = _sourceType.GetHashCode();                        result = (result * 397) ^ _methodName.GetHashCode();                        for (int i = 0; i < _genericTypes.Length; ++i)                      {                          result = (result * 397) ^ _genericTypes[i].GetHashCode();                      }                        for (int i = 0; i < _parameterTypes.Length; ++i)                      {                          result = (result * 397) ^ _parameterTypes[i].GetHashCode();                      }                        return result;                  }
Magic Number,System.Reflection,TinyIoCContainer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<''>) && type.GetGenericArguments()[0] == typeof(string) && type.GetGenericArguments()[1] == typeof(IDictionary<string' object>)))              //#endif              {                  Type returnType = genericArguments[2];                    var name = Expression.Parameter(typeof(string)' "name");                  var parameters = Expression.Parameter(typeof(IDictionary<string' object>)' "parameters");                    //#if NETFX_CORE                  //				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads));                  //#else                  MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod("Resolve"' new Type[] { typeof(string)' typeof(NamedParameterOverloads) });                  //#endif                  resolveMethod = resolveMethod.MakeGenericMethod(returnType);                    var resolveCall = Expression.Call(Expression.Constant(this)' resolveMethod' name' Expression.Call(typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));                    var resolveLambda = Expression.Lambda(resolveCall' name' parameters).Compile();                    return resolveLambda;              }
Missing Default,NzbDrone.Common.Disk,OsPath,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\OsPath.cs,FixSlashes,The following switch statement is missing a default case: switch (kind)              {                  case OsPathKind.Windows:                      return path.Replace('/'' '\\');                  case OsPathKind.Unix:                      return path.Replace('\\'' '/');              }
Missing Default,NzbDrone.Common.Disk,OsPath,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Disk\OsPath.cs,AsDirectory,The following switch statement is missing a default case: switch (Kind)              {                  case OsPathKind.Windows:                      return new OsPath(_path.TrimEnd('\\') + "\\"' _kind);                  case OsPathKind.Unix:                      return new OsPath(_path.TrimEnd('/') + "/"' _kind);              }
Missing Default,NzbDrone.Common.EnvironmentInfo,OsInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\EnvironmentInfo\OsInfo.cs,OsInfo,The following switch statement is missing a default case: switch (platform)              {                  case PlatformID.Win32NT:                      {                          Os = Os.Windows;                          break;                      }                  case PlatformID.MacOSX:                  case PlatformID.Unix:                      {                          // Sometimes Mac OS reports itself as Unix                          if (Directory.Exists("/System/Library/CoreServices/") &&                              (File.Exists("/System/Library/CoreServices/SystemVersion.plist") ||                              File.Exists("/System/Library/CoreServices/ServerVersion.plist"))                              )                          {                              Os = Os.Osx;                          }                          else                          {                              Os = Os.Linux;                          }                          break;                      }              }
Missing Default,NzbDrone.Common.Http.Dispatchers,CurlHttpDispatcher,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Dispatchers\CurlHttpDispatcher.cs,AddProxy,The following switch statement is missing a default case: switch (proxySettings.Type)                  {                      case ProxyType.Http:                          curlEasy.SetOpt(CurlOption.ProxyType' CurlProxyType.Http);                          curlEasy.SetOpt(CurlOption.ProxyAuth' CurlHttpAuth.Basic);                          curlEasy.SetOpt(CurlOption.ProxyUserPwd' proxySettings.Username + ":" + proxySettings.Password.ToString());                          break;                      case ProxyType.Socks4:                          curlEasy.SetOpt(CurlOption.ProxyType' CurlProxyType.Socks4);                          curlEasy.SetOpt(CurlOption.ProxyUsername' proxySettings.Username);                          curlEasy.SetOpt(CurlOption.ProxyPassword' proxySettings.Password);                          break;                      case ProxyType.Socks5:                          curlEasy.SetOpt(CurlOption.ProxyType' CurlProxyType.Socks5);                          curlEasy.SetOpt(CurlOption.ProxyUsername' proxySettings.Username);                          curlEasy.SetOpt(CurlOption.ProxyPassword' proxySettings.Password);                          break;                  }
Missing Default,NzbDrone.Common.Http.Proxy,ManagedWebProxyFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Common\Http\Proxy\ManagedWebProxyFactory.cs,CreateWebProxy,The following switch statement is missing a default case: switch (proxySettings.Type)              {                  case ProxyType.Http:                      if (proxySettings.Username.IsNotNullOrWhiteSpace() && proxySettings.Password.IsNotNullOrWhiteSpace())                      {                          return new WebProxy(proxySettings.Host + ":" + proxySettings.Port' proxySettings.BypassLocalAddress' proxySettings.BypassListAsArray' new NetworkCredential(proxySettings.Username' proxySettings.Password));                      }                      else                      {                          return new WebProxy(proxySettings.Host + ":" + proxySettings.Port' proxySettings.BypassLocalAddress' proxySettings.BypassListAsArray);                      }                  case ProxyType.Socks4:                      return new SocksWebProxy(new ProxyConfig(IPAddress.Loopback' GetNextFreePort()' GetProxyIpAddress(proxySettings.Host)' proxySettings.Port' ProxyConfig.SocksVersion.Four' proxySettings.Username' proxySettings.Password)' false);                  case ProxyType.Socks5:                      return new SocksWebProxy(new ProxyConfig(IPAddress.Loopback' GetNextFreePort()' GetProxyIpAddress(proxySettings.Host)' proxySettings.Port' ProxyConfig.SocksVersion.Five' proxySettings.Username' proxySettings.Password)' false);              }
