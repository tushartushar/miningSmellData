Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NzbDrone.Mono.EnvironmentInfo.VersionAdapters,SynologyVersionAdapter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\EnvironmentInfo\VersionAdapters\SynologyVersionAdapter.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Mono.EnvironmentInfo.VersionAdapters,ReleaseFileVersionAdapter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\EnvironmentInfo\VersionAdapters\ReleaseFileVersionAdapter.cs,Read,Cyclomatic complexity of the method is 8
Long Parameter List,NzbDrone.Mono.Disk,ProcMount,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\Disk\ProcMount.cs,ProcMount,The method has 5 parameters. Parameters: driveType' name' mount' type' mountOptions
Long Statement,NzbDrone.Mono.EnvironmentInfo.VersionAdapters,IssueFileVersionAdapter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\EnvironmentInfo\VersionAdapters\IssueFileVersionAdapter.cs,Read,The length of the statement  "            var issueFile = _diskProvider.GetFiles("/etc/"' SearchOption.TopDirectoryOnly).SingleOrDefault(c => c.EndsWith("/issue")); " is 122.
Long Statement,NzbDrone.Mono.EnvironmentInfo.VersionAdapters,SynologyVersionAdapter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\EnvironmentInfo\VersionAdapters\SynologyVersionAdapter.cs,Read,The length of the statement  "            var versionFile = _diskProvider.GetFiles("/etc.defaults/"' SearchOption.TopDirectoryOnly).SingleOrDefault(c => c.EndsWith("VERSION")); " is 134.
Long Statement,NzbDrone.Mono.EnvironmentInfo.VersionAdapters,ReleaseFileVersionAdapter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\EnvironmentInfo\VersionAdapters\ReleaseFileVersionAdapter.cs,Read,The length of the statement  "            var releaseFiles = _diskProvider.GetFiles("/etc/"' SearchOption.TopDirectoryOnly).Where(c => c.EndsWith("release")).ToList(); " is 125.
Empty Catch Block,NzbDrone.Mono.Disk,DiskProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\Disk\DiskProvider.cs,InheritFolderPermissions,The method has an empty catch block.
Empty Catch Block,NzbDrone.Mono.Disk,DiskProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\Disk\DiskProvider.cs,InheritFolderPermissions,The method has an empty catch block.
Magic Number,NzbDrone.Mono.Disk,ProcMountProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\Disk\ProcMountProvider.cs,ParseLine,The following statement contains a magic number: if (split.Length != 6)              {                  _logger.Debug("Unable to parse {0} line: {1}"' PROC_MOUNTS_FILENAME' line);                  return null;              }
Magic Number,NzbDrone.Mono.Disk,ProcMountProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\Disk\ProcMountProvider.cs,ParseLine,The following statement contains a magic number: var type = split[2];
Magic Number,NzbDrone.Mono.Disk,ProcMountProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\Disk\ProcMountProvider.cs,ParseLine,The following statement contains a magic number: var options = ParseOptions(split[3]);
Magic Number,NzbDrone.Mono.Disk,ProcMountProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\Disk\ProcMountProvider.cs,ParseOptions,The following statement contains a magic number: foreach (var option in options.Split('''))              {                  var split = option.Split(new[] { '=' }' 2);                    result.Add(split[0]' split.Length == 2 ? split[1] : string.Empty);              }
Magic Number,NzbDrone.Mono.Disk,ProcMountProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\Disk\ProcMountProvider.cs,ParseOptions,The following statement contains a magic number: foreach (var option in options.Split('''))              {                  var split = option.Split(new[] { '=' }' 2);                    result.Add(split[0]' split.Length == 2 ? split[1] : string.Empty);              }
Magic Number,NzbDrone.Mono.EnvironmentInfo.VersionAdapters,SynologyVersionAdapter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\EnvironmentInfo\VersionAdapters\SynologyVersionAdapter.cs,Read,The following statement contains a magic number: foreach (var line in lines)              {                  var parts = line.Split('=');                  if (parts.Length >= 2)                  {                      var key = parts[0];                      var value = parts[1].Trim('"');                        if (!string.IsNullOrWhiteSpace(value))                      {                          switch (key)                          {                              case "productversion":                                  version = value;                                  break;                              case "majorversion":                                  major = value;                                  break;                              case "minorversion":                                  minor = value;                                  break;                          }                      }                  }              }
Magic Number,NzbDrone.Mono.EnvironmentInfo.VersionAdapters,ReleaseFileVersionAdapter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\EnvironmentInfo\VersionAdapters\ReleaseFileVersionAdapter.cs,Read,The following statement contains a magic number: foreach (var releaseFile in releaseFiles)              {                  var fileContent = _diskProvider.ReadAllText(releaseFile);                  var lines = Regex.Split(fileContent' "\r\n|\r|\n"); ;                    foreach (var line in lines)                  {                      var parts = line.Split('=');                      if (parts.Length >= 2)                      {                          var key = parts[0];                          var value = parts[1];                            if (!string.IsNullOrWhiteSpace(value))                          {                              switch (key)                              {                                  case "ID":                                      success = true;                                      name = value;                                      break;                                  case "PRETTY_NAME":                                      success = true;                                      fullName = value;                                      break;                                  case "VERSION_ID":                                      success = true;                                      version = value;                                      break;                              }                          }                      }                  }              }
Missing Default,NzbDrone.Mono.EnvironmentInfo.VersionAdapters,SynologyVersionAdapter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\EnvironmentInfo\VersionAdapters\SynologyVersionAdapter.cs,Read,The following switch statement is missing a default case: switch (key)                          {                              case "productversion":                                  version = value;                                  break;                              case "majorversion":                                  major = value;                                  break;                              case "minorversion":                                  minor = value;                                  break;                          }
Missing Default,NzbDrone.Mono.EnvironmentInfo.VersionAdapters,ReleaseFileVersionAdapter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Mono\EnvironmentInfo\VersionAdapters\ReleaseFileVersionAdapter.cs,Read,The following switch statement is missing a default case: switch (key)                              {                                  case "ID":                                      success = true;                                      name = value;                                      break;                                  case "PRETTY_NAME":                                      success = true;                                      fullName = value;                                      break;                                  case "VERSION_ID":                                      success = true;                                      version = value;                                      break;                              }
