Implementation smell,Namespace,Class,File,Method,Description
Long Method,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,ParseDictionary,The method has 116 lines of code.
Complex Method,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,ParseDictionary,Cyclomatic complexity of the method is 15
Complex Method,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,ReadDataTable,Cyclomatic complexity of the method is 10
Complex Method,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,ParseString,Cyclomatic complexity of the method is 10
Complex Method,LogentriesNLog.fastJSON,JSONSerializer,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonSerializer.cs,WriteObject,Cyclomatic complexity of the method is 9
Long Parameter List,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,ToJSON,The method has 5 parameters. Parameters: obj' enableSerializerExtensions' enableFastGuid' enableOptimizedDatasetSchema' serializeNullValues
Long Parameter List,LogentriesNLog.fastJSON,JSONSerializer,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonSerializer.cs,JSONSerializer,The method has 5 parameters. Parameters: UseMinimalDataSetSchema' UseFastGuid' UseExtensions' SerializeNulls' IndentOutput
Long Statement,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,ToJSON,The length of the statement  "            return new JSONSerializer(enableOptimizedDatasetSchema' enableFastGuid' enableSerializerExtensions' serializeNullValues' IndentOutput).ConvertToJSON(obj); " is 154.
Long Statement,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,ReadSchema,The length of the statement  "                DatasetSchema ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema)); " is 122.
Complex Conditional,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,ParseNumber,The conditional expression  "(c >= '0' && c <= '9') || c == '.' || c == '-' || c == '+' || c == 'e' || c == 'E'"  is complex.
Complex Conditional,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "c != ' ' && c != '\t' && c != '\n' && c != '\r'"  is complex.
Complex Conditional,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e'"  is complex.
Complex Conditional,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e'"  is complex.
Complex Conditional,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The conditional expression  "json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l'"  is complex.
Complex Conditional,LogentriesNLog.fastJSON,JSONSerializer,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonSerializer.cs,WriteValue,The conditional expression  "obj is int || obj is long || obj is double ||                  obj is decimal || obj is float ||                  obj is byte || obj is short ||                  obj is sbyte || obj is ushort ||                  obj is uint || obj is ulong"  is complex.
Complex Conditional,LogentriesNLog.fastJSON,JSONSerializer,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonSerializer.cs,WriteString,The conditional expression  "c >= ' ' && c < 128 && c != '\"' && c != '\\'"  is complex.
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateSetMethod,The following statement contains a magic number: var arguments = new Type[2];
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateLong,The following statement contains a magic number: foreach (var cc in s)              {                  if (cc == '-')                      neg = true;                  else if (cc == '+')                      neg = false;                  else                  {                      num *= 10;                      num += (cc - '0');                  }              }
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateGuid,The following statement contains a magic number: if (s.Length > 30)                  return new Guid(s);
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int year = (int)CreateLong(value.Substring(0' 4));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int month = (int)CreateLong(value.Substring(5' 2));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int month = (int)CreateLong(value.Substring(5' 2));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int day = (int)CreateLong(value.Substring(8' 2));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int day = (int)CreateLong(value.Substring(8' 2));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int hour = (int)CreateLong(value.Substring(11' 2));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int hour = (int)CreateLong(value.Substring(11' 2));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int min = (int)CreateLong(value.Substring(14' 2));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int min = (int)CreateLong(value.Substring(14' 2));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int sec = (int)CreateLong(value.Substring(17' 2));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDateTime,The following statement contains a magic number: int sec = (int)CreateLong(value.Substring(17' 2));
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,ReadSchema,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  ds.ReadXmlSchema(tr);              }              else              {                  DatasetSchema ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema));                  ds.DataSetName = ms.Name;                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      if (ds.Tables.Contains(ms.Info[i]) == false)                          ds.Tables.Add(ms.Info[i]);                      ds.Tables[ms.Info[i]].Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,ReadSchema,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  ds.ReadXmlSchema(tr);              }              else              {                  DatasetSchema ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema));                  ds.DataSetName = ms.Name;                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      if (ds.Tables.Contains(ms.Info[i]) == false)                          ds.Tables.Add(ms.Info[i]);                      ds.Tables[ms.Info[i]].Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,ReadDataTable,The following statement contains a magic number: foreach (ArrayList row in rows)              {                  var v = new object[row.Count];                  row.CopyTo(v' 0);                  foreach (var i in guidcols)                  {                      string s = (string)v[i];                      if (s != null && s.Length < 36)                          v[i] = new Guid(Convert.FromBase64String(s));                  }                  if (UseUTCDateTime)                  {                      foreach (var i in datecol)                      {                          string s = (string)v[i];                          if (s != null)                              v[i] = CreateDateTime(s);                      }                  }                  dt.Rows.Add(v);              }
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDataTable,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  dt.ReadXmlSchema(tr);              }              else              {                  var ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema));                  dt.TableName = ms.Info[0];                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      dt.Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,LogentriesNLog.fastJSON,JSON,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JSON.cs,CreateDataTable,The following statement contains a magic number: if (schema is string)              {                  TextReader tr = new StringReader((string)schema);                  dt.ReadXmlSchema(tr);              }              else              {                  var ms = (DatasetSchema)ParseDictionary((Dictionary<string' object>)schema' globalTypes' typeof(DatasetSchema));                  dt.TableName = ms.Info[0];                  for (int i = 0; i < ms.Info.Count; i += 3)                  {                      dt.Columns.Add(ms.Info[i + 1]' Type.GetType(ms.Info[i + 2]));                  }              }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: while (index < json.Length)              {                  var c = json[index++];                    if (c == '"')                  {                      if (runIndex != -1)                      {                          if (s.Length == 0)                              return new string(json' runIndex' index - runIndex - 1);                            s.Append(json' runIndex' index - runIndex - 1);                      }                      return s.ToString();                  }                    if (c != '\\')                  {                      if (runIndex == -1)                          runIndex = index - 1;                        continue;                  }                    if (index == json.Length) break;                    if (runIndex != -1)                  {                      s.Append(json' runIndex' index - runIndex - 1);                      runIndex = -1;                  }                    switch (json[index++])                  {                      case '"':                          s.Append('"');                          break;                        case '\\':                          s.Append('\\');                          break;                        case '/':                          s.Append('/');                          break;                        case 'b':                          s.Append('\b');                          break;                        case 'f':                          s.Append('\f');                          break;                        case 'n':                          s.Append('\n');                          break;                        case 'r':                          s.Append('\r');                          break;                        case 't':                          s.Append('\t');                          break;                        case 'u':                          {                              int remainingLength = json.Length - index;                              if (remainingLength < 4) break;                                // parse the 32 bit hex into an integer codepoint                              uint codePoint = ParseUnicode(json[index]' json[index + 1]' json[index + 2]' json[index + 3]);                              s.Append((char)codePoint);                                // skip 4 chars                              index += 4;                          }                          break;                  }              }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: while (index < json.Length)              {                  var c = json[index++];                    if (c == '"')                  {                      if (runIndex != -1)                      {                          if (s.Length == 0)                              return new string(json' runIndex' index - runIndex - 1);                            s.Append(json' runIndex' index - runIndex - 1);                      }                      return s.ToString();                  }                    if (c != '\\')                  {                      if (runIndex == -1)                          runIndex = index - 1;                        continue;                  }                    if (index == json.Length) break;                    if (runIndex != -1)                  {                      s.Append(json' runIndex' index - runIndex - 1);                      runIndex = -1;                  }                    switch (json[index++])                  {                      case '"':                          s.Append('"');                          break;                        case '\\':                          s.Append('\\');                          break;                        case '/':                          s.Append('/');                          break;                        case 'b':                          s.Append('\b');                          break;                        case 'f':                          s.Append('\f');                          break;                        case 'n':                          s.Append('\n');                          break;                        case 'r':                          s.Append('\r');                          break;                        case 't':                          s.Append('\t');                          break;                        case 'u':                          {                              int remainingLength = json.Length - index;                              if (remainingLength < 4) break;                                // parse the 32 bit hex into an integer codepoint                              uint codePoint = ParseUnicode(json[index]' json[index + 1]' json[index + 2]' json[index + 3]);                              s.Append((char)codePoint);                                // skip 4 chars                              index += 4;                          }                          break;                  }              }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: while (index < json.Length)              {                  var c = json[index++];                    if (c == '"')                  {                      if (runIndex != -1)                      {                          if (s.Length == 0)                              return new string(json' runIndex' index - runIndex - 1);                            s.Append(json' runIndex' index - runIndex - 1);                      }                      return s.ToString();                  }                    if (c != '\\')                  {                      if (runIndex == -1)                          runIndex = index - 1;                        continue;                  }                    if (index == json.Length) break;                    if (runIndex != -1)                  {                      s.Append(json' runIndex' index - runIndex - 1);                      runIndex = -1;                  }                    switch (json[index++])                  {                      case '"':                          s.Append('"');                          break;                        case '\\':                          s.Append('\\');                          break;                        case '/':                          s.Append('/');                          break;                        case 'b':                          s.Append('\b');                          break;                        case 'f':                          s.Append('\f');                          break;                        case 'n':                          s.Append('\n');                          break;                        case 'r':                          s.Append('\r');                          break;                        case 't':                          s.Append('\t');                          break;                        case 'u':                          {                              int remainingLength = json.Length - index;                              if (remainingLength < 4) break;                                // parse the 32 bit hex into an integer codepoint                              uint codePoint = ParseUnicode(json[index]' json[index + 1]' json[index + 2]' json[index + 3]);                              s.Append((char)codePoint);                                // skip 4 chars                              index += 4;                          }                          break;                  }              }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,ParseString,The following statement contains a magic number: while (index < json.Length)              {                  var c = json[index++];                    if (c == '"')                  {                      if (runIndex != -1)                      {                          if (s.Length == 0)                              return new string(json' runIndex' index - runIndex - 1);                            s.Append(json' runIndex' index - runIndex - 1);                      }                      return s.ToString();                  }                    if (c != '\\')                  {                      if (runIndex == -1)                          runIndex = index - 1;                        continue;                  }                    if (index == json.Length) break;                    if (runIndex != -1)                  {                      s.Append(json' runIndex' index - runIndex - 1);                      runIndex = -1;                  }                    switch (json[index++])                  {                      case '"':                          s.Append('"');                          break;                        case '\\':                          s.Append('\\');                          break;                        case '/':                          s.Append('/');                          break;                        case 'b':                          s.Append('\b');                          break;                        case 'f':                          s.Append('\f');                          break;                        case 'n':                          s.Append('\n');                          break;                        case 'r':                          s.Append('\r');                          break;                        case 't':                          s.Append('\t');                          break;                        case 'u':                          {                              int remainingLength = json.Length - index;                              if (remainingLength < 4) break;                                // parse the 32 bit hex into an integer codepoint                              uint codePoint = ParseUnicode(json[index]' json[index + 1]' json[index + 2]' json[index + 3]);                              s.Append((char)codePoint);                                // skip 4 chars                              index += 4;                          }                          break;                  }              }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= '0' && c1 <= '9')                  p1 = (uint)(c1 - '0') * multipliyer;              else if (c1 >= 'A' && c1 <= 'F')                  p1 = (uint)((c1 - 'A') + 10) * multipliyer;              else if (c1 >= 'a' && c1 <= 'f')                  p1 = (uint)((c1 - 'a') + 10) * multipliyer;
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,ParseSingleChar,The following statement contains a magic number: if (c1 >= '0' && c1 <= '9')                  p1 = (uint)(c1 - '0') * multipliyer;              else if (c1 >= 'A' && c1 <= 'F')                  p1 = (uint)((c1 - 'A') + 10) * multipliyer;              else if (c1 >= 'a' && c1 <= 'f')                  p1 = (uint)((c1 - 'a') + 10) * multipliyer;
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following statement contains a magic number: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
Magic Number,LogentriesNLog.fastJSON,JSONSerializer,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonSerializer.cs,WriteString,The following statement contains a magic number: for (var index = 0; index < s.Length; ++index)              {                  var c = s[index];                    if (c >= ' ' && c < 128 && c != '\"' && c != '\\')                  {                      if (runIndex == -1)                      {                          runIndex = index;                      }                        continue;                  }                    if (runIndex != -1)                  {                      _output.Append(s' runIndex' index - runIndex);                      runIndex = -1;                  }                    switch (c)                  {                      case '\t': _output.Append("\\t"); break;                      case '\r': _output.Append("\\r"); break;                      case '\n': _output.Append("\\n"); break;                      case '"':                      case '\\': _output.Append('\\'); _output.Append(c); break;                      default:                          _output.Append("\\u");                          _output.Append(((int)c).ToString("X4"' NumberFormatInfo.InvariantInfo));                          break;                  }              }
Missing Default,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead())              {                  case Token.Number:                      return ParseNumber();                    case Token.String:                      return ParseString();                    case Token.Curly_Open:                      return ParseObject();                    case Token.Squared_Open:                      return ParseArray();                    case Token.True:                      ConsumeToken();                      return true;                    case Token.False:                      ConsumeToken();                      return false;                    case Token.Null:                      ConsumeToken();                      return null;              }
Missing Default,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,ParseString,The following switch statement is missing a default case: switch (json[index++])                  {                      case '"':                          s.Append('"');                          break;                        case '\\':                          s.Append('\\');                          break;                        case '/':                          s.Append('/');                          break;                        case 'b':                          s.Append('\b');                          break;                        case 'f':                          s.Append('\f');                          break;                        case 'n':                          s.Append('\n');                          break;                        case 'r':                          s.Append('\r');                          break;                        case 't':                          s.Append('\t');                          break;                        case 'u':                          {                              int remainingLength = json.Length - index;                              if (remainingLength < 4) break;                                // parse the 32 bit hex into an integer codepoint                              uint codePoint = ParseUnicode(json[index]' json[index + 1]' json[index + 2]' json[index + 3]);                              s.Append((char)codePoint);                                // skip 4 chars                              index += 4;                          }                          break;                  }
Missing Default,LogentriesNLog.fastJSON,JsonParser,C:\repos\Sonarr_Sonarr\src\LogentriesNLog\fastJSON\JsonParser.cs,NextTokenCore,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return Token.Curly_Open;                    case '}':                      return Token.Curly_Close;                    case '[':                      return Token.Squared_Open;                    case ']':                      return Token.Squared_Close;                    case ''':                      return Token.Comma;                    case '"':                      return Token.String;    				case '0': case '1': case '2': case '3': case '4':  				case '5': case '6': case '7': case '8': case '9':                  case '-': case '+': case '.':                      return Token.Number;                    case ':':                      return Token.Colon;                    case 'f':                      if (json.Length - index >= 4 &&                          json[index + 0] == 'a' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 's' &&                          json[index + 3] == 'e')                      {                          index += 4;                          return Token.False;                      }                      break;                    case 't':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'r' &&                          json[index + 1] == 'u' &&                          json[index + 2] == 'e')                      {                          index += 3;                          return Token.True;                      }                      break;                    case 'n':                      if (json.Length - index >= 3 &&                          json[index + 0] == 'u' &&                          json[index + 1] == 'l' &&                          json[index + 2] == 'l')                      {                          index += 3;                          return Token.Null;                      }                      break;                }
