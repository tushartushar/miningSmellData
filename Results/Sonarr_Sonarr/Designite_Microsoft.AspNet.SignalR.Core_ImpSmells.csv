Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The method has 140 lines of code.
Long Method,Microsoft.AspNet.SignalR.Messaging,Cursor,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\Cursor.cs,GetCursors,The method has 104 lines of code.
Complex Method,Microsoft.AspNet.SignalR.Messaging,MessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBus.cs,GarbageCollectTopics,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.AspNet.SignalR,PersistentConnection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\PersistentConnection.cs,TryGetConnectionId,The method has 5 parameters. Parameters: context' connectionToken' connectionId' message' statusCode
Long Parameter List,Microsoft.AspNet.SignalR.Hubs,HubConnectionContext,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\HubConnectionContext.cs,HubConnectionContext,The method has 5 parameters. Parameters: pipelineInvoker' connection' hubName' connectionId' tracker
Long Parameter List,Microsoft.AspNet.SignalR.Hubs,StatefulSignalProxy,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\StatefulSignalProxy.cs,StatefulSignalProxy,The method has 5 parameters. Parameters: send' signal' hubName' prefix' tracker
Long Parameter List,Microsoft.AspNet.SignalR.Hubs,HubDispatcher,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\HubDispatcher.cs,InvokeHubPipeline,The method has 5 parameters. Parameters: hub' parameterValues' methodDescriptor' hubRequest' tracker
Long Parameter List,Microsoft.AspNet.SignalR.Hubs,HubDispatcher,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\HubDispatcher.cs,CreateHub,The method has 5 parameters. Parameters: request' descriptor' connectionId' tracker' throwIfFailedToCreate
Long Parameter List,Microsoft.AspNet.SignalR.Hubs,SignalProxy,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\SignalProxy.cs,SignalProxy,The method has 5 parameters. Parameters: send' signal' hubName' prefix' exclude
Long Parameter List,Microsoft.AspNet.SignalR.Infrastructure,ChunkedWriter,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\BufferTextWriter.cs,ChunkedWriter,The method has 5 parameters. Parameters: write' state' chunkSize' encoding' reuseBuffers
Long Parameter List,Microsoft.AspNet.SignalR.Infrastructure,Connection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\Connection.cs,Connection,The method has 10 parameters. Parameters: newMessageBus' jsonSerializer' baseSignal' connectionId' signals' groups' traceManager' ackHandler' performanceCounterManager' protectedData
Long Parameter List,Microsoft.AspNet.SignalR.Infrastructure,Connection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\Connection.cs,PopulateResponseState,The method has 5 parameters. Parameters: response' groupSet' serializer' protectedData' connectionId
Long Parameter List,Microsoft.AspNet.SignalR.Messaging,ScaleoutMessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutMessageBus.cs,CreateSubscription,The method has 5 parameters. Parameters: subscriber' cursor' callback' messageBufferSize' state
Long Parameter List,Microsoft.AspNet.SignalR.Messaging,IMessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\IMessageBus.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' cursor' callback' maxMessages' state
Long Parameter List,Microsoft.AspNet.SignalR.Messaging,MessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBus.cs,MessageBus,The method has 5 parameters. Parameters: stringMinifier' traceManager' performanceCounterManager' configurationManager' maxTopicsWithNoSubscriptions
Long Parameter List,Microsoft.AspNet.SignalR.Messaging,MessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBus.cs,Subscribe,The method has 5 parameters. Parameters: subscriber' cursor' callback' maxMessages' state
Long Parameter List,Microsoft.AspNet.SignalR.Messaging,MessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBus.cs,CreateSubscription,The method has 5 parameters. Parameters: subscriber' cursor' callback' messageBufferSize' state
Long Parameter List,Microsoft.AspNet.SignalR.Messaging,ScaleoutStreamManager,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutStreamManager.cs,ScaleoutStreamManager,The method has 6 parameters. Parameters: send' receive' streamCount' trace' performanceCounters' configuration
Long Parameter List,Microsoft.AspNet.SignalR.Messaging,ScaleoutSubscription,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutSubscription.cs,ScaleoutSubscription,The method has 8 parameters. Parameters: identity' eventKeys' cursor' streams' callback' maxMessages' counters' state
Long Parameter List,Microsoft.AspNet.SignalR.Messaging,DefaultSubscription,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\DefaultSubscription.cs,DefaultSubscription,The method has 9 parameters. Parameters: identity' eventKeys' topics' cursor' callback' maxMessages' stringMinifier' counters' state
Long Parameter List,Microsoft.AspNet.SignalR.Messaging,Subscription,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\Subscription.cs,Subscription,The method has 6 parameters. Parameters: identity' eventKeys' callback' maxMessages' counters' state
Long Parameter List,Microsoft.AspNet.SignalR.Transports,ForeverTransport,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Transports\ForeverTransport.cs,ForeverTransport,The method has 5 parameters. Parameters: context' jsonSerializer' heartbeat' performanceCounterWriter' traceManager
Long Parameter List,Microsoft.AspNet.SignalR.Transports,LongPollingTransport,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Transports\LongPollingTransport.cs,LongPollingTransport,The method has 5 parameters. Parameters: context' jsonSerializer' heartbeat' performanceCounterManager' traceManager
Long Parameter List,Microsoft.AspNet.SignalR.Transports,WebSocketTransport,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Transports\WebSocketTransport.cs,WebSocketTransport,The method has 5 parameters. Parameters: context' serializer' heartbeat' performanceCounterWriter' traceManager
Long Identifier,Microsoft.AspNet.SignalR.Configuration,ConfigurationExtensions,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Configuration\ConfigurationExtensions.cs,,The length of the parameter MissedTimeoutsBeforeClientReconnect is 35.
Long Identifier,Microsoft.AspNet.SignalR.Configuration,ConfigurationExtensions,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Configuration\ConfigurationExtensions.cs,,The length of the parameter HeartBeatsPerDisconnectTimeout is 30.
Long Identifier,Microsoft.AspNet.SignalR.Configuration,DefaultConfigurationManager,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Configuration\DefaultConfigurationManager.cs,,The length of the parameter _minimumKeepAlivesPerDisconnectTimeout is 38.
Long Identifier,Microsoft.AspNet.SignalR.Hubs,AuthorizeModule,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Pipeline\Auth\AuthorizeModule.cs,,The length of the parameter _classInvocationAuthorizersCache is 32.
Long Identifier,Microsoft.AspNet.SignalR.Hubs,AuthorizeModule,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Pipeline\Auth\AuthorizeModule.cs,,The length of the parameter _methodInvocationAuthorizersCache is 33.
Long Identifier,Microsoft.AspNet.SignalR.Hubs,ReflectedMethodDescriptorProvider,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Lookup\ReflectedMethodDescriptorProvider.cs,BuildHubExecutableMethodCacheKey,The length of the parameter normalizedParameterCountKeyPart is 31.
Long Identifier,Microsoft.AspNet.SignalR.Infrastructure,PrefixHelper,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\PrefixHelper.cs,,The length of the parameter PersistentConnectionGroupPrefix is 31.
Long Identifier,Microsoft.AspNet.SignalR.Infrastructure,PerformanceCounterManager,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\PerformanceCounterManager.cs,Initialize,The length of the parameter needToRegisterWithShutdownToken is 31.
Long Identifier,Microsoft.AspNet.SignalR.Messaging,MessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBus.cs,,The length of the parameter DefaultMaxTopicsWithNoSubscriptions is 35.
Long Identifier,Microsoft.AspNet.SignalR.Messaging,MessageStore<T>,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageStore.cs,GetMessagesImpl,The length of the parameter firstMessageIdRequestedByClient is 31.
Long Identifier,Microsoft.AspNet.SignalR.Messaging,ScaleoutStore,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutStore.cs,GetMessages,The length of the parameter firstMessageIdRequestedByClient is 31.
Long Identifier,Microsoft.AspNet.SignalR.Messaging,ScaleoutStore,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutStore.cs,GetMessagesByMappingId,The length of the parameter firstMessageIdRequestedByClient is 31.
Long Identifier,Microsoft.AspNet.SignalR.Transports,ForeverTransport,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Transports\ForeverTransport.cs,,The length of the parameter BeforeCancellationTokenCallbackRegistered is 41.
Long Statement,Microsoft.AspNet.SignalR,HubPipelineExtensions,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Pipeline\HubPipelineExtensions.cs,RequireAuthentication,The length of the statement  "            pipeline.AddModule(new AuthorizeModule(globalConnectionAuthorizer: authorizer' globalInvocationAuthorizer: authorizer)); " is 120.
Long Statement,Microsoft.AspNet.SignalR,DefaultDependencyResolver,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\DefaultDependencyResolver.cs,GetService,The length of the statement  "                    throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_MultipleActivatorsAreaRegisteredCallGetServices' serviceType.FullName)); " is 166.
Long Statement,Microsoft.AspNet.SignalR,PersistentConnection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\PersistentConnection.cs,ProcessRequest,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_ConnectionNotInitialized)); " is 121.
Long Statement,Microsoft.AspNet.SignalR,PersistentConnection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\PersistentConnection.cs,ProcessRequest,The length of the statement  "                return FailResponse(context.Response' String.Format(CultureInfo.CurrentCulture' Resources.Error_ProtocolErrorUnknownTransport)); " is 128.
Long Statement,Microsoft.AspNet.SignalR,PersistentConnection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\PersistentConnection.cs,ProcessRequest,The length of the statement  "                return FailResponse(context.Response' String.Format(CultureInfo.CurrentCulture' Resources.Error_ProtocolErrorMissingConnectionToken)); " is 134.
Long Statement,Microsoft.AspNet.SignalR.Hubs,HubMethodDispatcher,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Lookup\HubMethodDispatcher.cs,GetExecutor,The length of the statement  "            UnaryExpression instanceCast = (!methodInfo.IsStatic) ? Expression.Convert(hubParameter' methodInfo.ReflectedType) : null; " is 122.
Long Statement,Microsoft.AspNet.SignalR.Hubs,HubMethodDispatcher,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Lookup\HubMethodDispatcher.cs,GetExecutor,The length of the statement  "                Expression<VoidHubMethodExecutor> lambda = Expression.Lambda<VoidHubMethodExecutor>(methodCall' hubParameter' parametersParameter); " is 131.
Long Statement,Microsoft.AspNet.SignalR.Hubs,HubMethodDispatcher,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Lookup\HubMethodDispatcher.cs,GetExecutor,The length of the statement  "                Expression<HubMethodExecutor> lambda = Expression.Lambda<HubMethodExecutor>(castMethodCall' hubParameter' parametersParameter); " is 127.
Long Statement,Microsoft.AspNet.SignalR.Hubs,NullClientProxy,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\NullClientProxy.cs,TryGetMember,The length of the statement  "            throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_UsingHubInstanceNotCreatedUnsupported)); " is 134.
Long Statement,Microsoft.AspNet.SignalR.Hubs,NullClientProxy,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\NullClientProxy.cs,TryInvokeMember,The length of the statement  "            throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_UsingHubInstanceNotCreatedUnsupported)); " is 134.
Long Statement,Microsoft.AspNet.SignalR.Hubs,AuthorizeModule,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Pipeline\Auth\AuthorizeModule.cs,BuildAuthorizeConnect,The length of the statement  "                    hubType => hubType.GetCustomAttributes(typeof(IAuthorizeHubConnection)' inherit: true).Cast<IAuthorizeHubConnection>()); " is 120.
Long Statement,Microsoft.AspNet.SignalR.Hubs,AuthorizeModule,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Pipeline\Auth\AuthorizeModule.cs,BuildIncoming,The length of the statement  "                if (_globalInvocationAuthorizer == null || _globalInvocationAuthorizer.AuthorizeHubMethodInvocation(context' appliesToMethod: false)) " is 133.
Long Statement,Microsoft.AspNet.SignalR.Hubs,AuthorizeModule,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Pipeline\Auth\AuthorizeModule.cs,BuildIncoming,The length of the statement  "                        hubType => hubType.GetCustomAttributes(typeof(IAuthorizeHubMethodInvocation)' inherit: true).Cast<IAuthorizeHubMethodInvocation>()); " is 132.
Long Statement,Microsoft.AspNet.SignalR.Hubs,AuthorizeModule,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Pipeline\Auth\AuthorizeModule.cs,BuildIncoming,The length of the statement  "                    new NotAuthorizedException(String.Format(CultureInfo.CurrentCulture' Resources.Error_CallerNotAuthorizedToInvokeMethodOn' " is 121.
Long Statement,Microsoft.AspNet.SignalR.Hubs,HubRequestParser,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\HubRequestParser.cs,Parse,The length of the statement  "            request.ParameterValues = (deserializedData.Args != null) ? deserializedData.Args.Select(value => new JRawValue(value)).ToArray() : _emptyArgs; " is 143.
Long Statement,Microsoft.AspNet.SignalR.Hubs,HubPipeline,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Pipeline\HubPipeline.cs,AddModule,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_UnableToAddModulePiplineAlreadyInvoked)); " is 135.
Long Statement,Microsoft.AspNet.SignalR.Hubs,HubManagerExtensions,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Extensions\HubManagerExtensions.cs,EnsureHub,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_HubCouldNotBeResolved' hubName)); " is 127.
Long Statement,Microsoft.AspNet.SignalR.Hubs,ReflectedMethodDescriptorProvider,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Lookup\ReflectedMethodDescriptorProvider.cs,TryGetMethod,The length of the statement  "                    // If only one match is found' that is the "executable" version' otherwise none of the methods can be returned because we don't know which one was actually being targeted " is 170.
Long Statement,Microsoft.AspNet.SignalR.Hubs,ReflectedMethodDescriptorProvider,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Lookup\ReflectedMethodDescriptorProvider.cs,TryGetMethod,The length of the statement  "                // If an executable method was found' cache it for future lookups (NOTE: we don't cache null instances because it could be a surface area for DoS attack by supplying random method names to flood the cache) " is 205.
Long Statement,Microsoft.AspNet.SignalR.Hubs,ReflectedMethodDescriptorProvider,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\Lookup\ReflectedMethodDescriptorProvider.cs,BuildHubExecutableMethodCacheKey,The length of the statement  "            // NOTE: we always normalize to all uppercase since method names are case insensitive and could theoretically come in diff. variations per call " is 143.
Long Statement,Microsoft.AspNet.SignalR.Hubs,DefaultJavaScriptProxyGenerator,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\DefaultJavaScriptProxyGenerator.cs,GenerateMethod,The length of the statement  "                sb.AppendFormat(Resources.DynamicComment_CallsMethodOnServerSideDeferredPromise' method.Name' method.Hub.Name).AppendLine(); " is 124.
Long Statement,Microsoft.AspNet.SignalR.Hubs,DefaultJavaScriptProxyGenerator,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\DefaultJavaScriptProxyGenerator.cs,GenerateMethod,The length of the statement  "                var parameterDoc = method.Parameters.Select(p => String.Format(CultureInfo.CurrentCulture' Resources.DynamicComment_ServerSideTypeIs' p.Name' MapToJavaScriptType(p.ParameterType)' p.ParameterType)).ToList(); " is 207.
Long Statement,Microsoft.AspNet.SignalR.Hubs,DefaultJavaScriptProxyGenerator,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\DefaultJavaScriptProxyGenerator.cs,GenerateMethod,The length of the statement  "            sb.AppendFormat("                return proxies.{0}.invoke.apply(proxies.{0}' $.merge([\"{1}\"]' $.makeArray(arguments)));"' hubName' method.Name).AppendLine(); " is 160.
Long Statement,Microsoft.AspNet.SignalR.Hubs,DefaultJavaScriptProxyGenerator,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\DefaultJavaScriptProxyGenerator.cs,GetTemplateFromResource,The length of the statement  "            using (Stream resourceStream = typeof(DefaultJavaScriptProxyGenerator).Assembly.GetManifestResourceStream(ScriptResource)) " is 122.
Long Statement,Microsoft.AspNet.SignalR.Hubs,HubDispatcher,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\HubDispatcher.cs,GetSignals,The length of the statement  "            return _hubs.SelectMany(info => new[] { PrefixHelper.GetHubName(info.Name)' PrefixHelper.GetHubConnectionId(info.CreateQualifiedName(connectionId)) }) " is 150.
Long Statement,Microsoft.AspNet.SignalR.Hubs,HubDispatcher,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\HubDispatcher.cs,CreateHub,The length of the statement  "                Trace.TraceInformation(String.Format(CultureInfo.CurrentCulture' Resources.Error_ErrorCreatingHub + ex.Message' descriptor.Name)); " is 130.
Long Statement,Microsoft.AspNet.SignalR.Hubs,HubDispatcher,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\HubDispatcher.cs,ProcessResponse,The length of the statement  "                    hubResult.Error = String.Format(CultureInfo.CurrentCulture' Resources.Error_HubInvocationFailed' request.Hub' request.Method); " is 126.
Long Statement,Microsoft.AspNet.SignalR.Infrastructure,ConnectionManager,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\ConnectionManager.cs,GetConnection,The length of the statement  "            return new PersistentConnectionContext(connection' new GroupManager(connection' PrefixHelper.GetPersistentConnectionGroupName(rawConnectionName))); " is 147.
Long Statement,Microsoft.AspNet.SignalR.Infrastructure,ConnectionManager,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\ConnectionManager.cs,GetHubContext,The length of the statement  "            Func<string' ClientHubInvocation' IList<string>' Task> send = (signal' value' exclude) => pipelineInvoker.Send(new HubOutgoingInvokerContext(connection' signal' value' exclude)); " is 178.
Long Statement,Microsoft.AspNet.SignalR.Infrastructure,ServerCommandHandler,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\ServerCommandHandler.cs,ProcessMessages,The length of the statement  "            _subscription = _messageBus.Subscribe(this' cursor: null' callback: HandleServerCommands' maxMessages: MaxMessages' state: null); " is 129.
Long Statement,Microsoft.AspNet.SignalR.Hosting,PersistentConnectionFactory,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hosting\PersistentConnectionFactory.cs,CreateInstance,The length of the statement  "                throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.Error_IsNotA' connectionType.FullName' typeof(PersistentConnection).FullName)); " is 167.
Long Statement,Microsoft.AspNet.SignalR.Json,JsonUtility,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Json\JsonUtility.cs,CamelCase,The length of the statement  "            return String.Join("."' name.Split('.').Select(n => Char.ToLower(n[0]' CultureInfo.InvariantCulture) + n.Substring(1))); " is 120.
Long Statement,Microsoft.AspNet.SignalR.Messaging,MessageBroker,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBroker.cs,AddWorker,The length of the statement  "                    Trace.TraceEvent(TraceEventType.Verbose' 0' "Creating a worker' allocated={0}' busy={1}"' _allocatedWorkers' _busyWorkers); " is 123.
Long Statement,Microsoft.AspNet.SignalR.Messaging,MessageBroker,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBroker.cs,AddWorker,The length of the statement  "                    Trace.TraceEvent(TraceEventType.Verbose' 0' "No need to add a worker because all allocated workers are not busy' allocated={0}' busy={1}"' _allocatedWorkers' _busyWorkers); " is 172.
Long Statement,Microsoft.AspNet.SignalR.Messaging,MessageBroker,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBroker.cs,AddWorker,The length of the statement  "                Trace.TraceEvent(TraceEventType.Verbose' 0' "Already at max workers' allocated={0}' busy={1}"' _allocatedWorkers' _busyWorkers); " is 128.
Long Statement,Microsoft.AspNet.SignalR.Messaging,MessageBroker,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBroker.cs,PumpImplAsync,The length of the statement  "                    Trace.TraceEvent(TraceEventType.Error' 0' "Work failed for " + subscription.Identity + ": " + task.Exception.GetBaseException()); " is 129.
Long Statement,Microsoft.AspNet.SignalR.Messaging,ScaleoutMessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutMessageBus.cs,CreateSubscription,The length of the statement  "            return new ScaleoutSubscription(subscriber.Identity' subscriber.EventKeys' cursor' StreamManager.Streams' callback' messageBufferSize' Counters' state); " is 152.
Long Statement,Microsoft.AspNet.SignalR.Messaging,MessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBus.cs,CreateSubscription,The length of the statement  "            return new DefaultSubscription(subscriber.Identity' subscriber.EventKeys' Topics' cursor' callback' messageBufferSize' _stringMinifier' Counters' state); " is 153.
Long Statement,Microsoft.AspNet.SignalR.Messaging,MessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBus.cs,GarbageCollectTopics,The length of the statement  "                    if (InterlockedHelper.CompareExchangeOr(ref pair.Value.State' TopicState.Dead' TopicState.NoSubscriptions' TopicState.Dying)) " is 125.
Long Statement,Microsoft.AspNet.SignalR.Messaging,MessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBus.cs,SubscribeTopic,The length of the statement  "                InterlockedHelper.CompareExchangeOr(ref topic.State' TopicState.HasSubscriptions' TopicState.NoSubscriptions' TopicState.Dying); " is 128.
Long Statement,Microsoft.AspNet.SignalR.Messaging,MessageStore<T>,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageStore.cs,GetMessagesImpl,The length of the statement  "            if (firstMessageIdInThisFragment <= firstMessageIdRequestedByClient && firstMessageIdRequestedByClient < firstMessageIdInNextFragment) " is 134.
Long Statement,Microsoft.AspNet.SignalR.Messaging,MessageStore<T>,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageStore.cs,GetMessagesImpl,The length of the statement  "                return new MessageStoreResult<T>(firstMessageIdRequestedByClient' retMessages' hasMoreData: (nextFreeMessageId > firstMessageIdInNextFragment)); " is 144.
Long Statement,Microsoft.AspNet.SignalR.Messaging,MessageStore<T>,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageStore.cs,GetMessagesImpl,The length of the statement  "                    return new MessageStoreResult<T>(firstMessageIdInThisFragment' new ArraySegment<T>(tailFragment.Data' 0' count)' hasMoreData: true); " is 132.
Long Statement,Microsoft.AspNet.SignalR.Messaging,ScaleoutStore,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutStore.cs,GetMessages,The length of the statement  "                return new MessageStoreResult<ScaleoutMapping>(firstMessageIdRequestedByClient' _emptyArraySegment' hasMoreData: false); " is 120.
Long Statement,Microsoft.AspNet.SignalR.Messaging,ScaleoutStore,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutStore.cs,GetMessages,The length of the statement  "            if (firstMessageIdInThisFragment <= firstMessageIdRequestedByClient && firstMessageIdRequestedByClient < firstMessageIdInNextFragment) " is 134.
Long Statement,Microsoft.AspNet.SignalR.Messaging,ScaleoutStore,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutStore.cs,GetMessages,The length of the statement  "                return new MessageStoreResult<ScaleoutMapping>(firstMessageIdRequestedByClient' retMessages' hasMoreData: (nextFreeMessageId > firstMessageIdInNextFragment)); " is 158.
Long Statement,Microsoft.AspNet.SignalR.Messaging,ScaleoutStore,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutStore.cs,GetMessages,The length of the statement  "                    return new MessageStoreResult<ScaleoutMapping>(firstMessageIdInThisFragment' new ArraySegment<ScaleoutMapping>(tailFragment.Data' 0' tailFragment.Length)' hasMoreData: true); " is 174.
Long Statement,Microsoft.AspNet.SignalR.Transports,ForeverFrameTransport,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Transports\ForeverFrameTransport.cs,InitializeResponse,The length of the statement  "            if (String.IsNullOrWhiteSpace(rawFrameId) || !UInt32.TryParse(rawFrameId' NumberStyles.None' CultureInfo.InvariantCulture' out frameId)) " is 136.
Long Statement,Microsoft.AspNet.SignalR.Transports,TransportHeartbeat,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Transports\TransportHeartBeat.cs,AddConnection,The length of the statement  "                Trace.TraceEvent(TraceEventType.Verbose' 0' "Connection {0} exists. Closing previous connection."' old.Connection.ConnectionId); " is 128.
Long Statement,Microsoft.AspNet.SignalR.Transports,LongPollingTransport,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Transports\LongPollingTransport.cs,PerformSend,The length of the statement  "            context.Transport.Context.Response.ContentType = context.Transport.IsJsonp ? JsonUtility.JavaScriptMimeType : JsonUtility.JsonMimeType; " is 135.
Long Statement,Microsoft.AspNet.SignalR.Transports,HttpRequestLifeTime,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Transports\HttpRequestLifeTime.cs,Complete,The length of the statement  "                _trace.TraceEvent(TraceEventType.Error' 0' "CompleteRequest (" + _connectionId + ") failed: " + error.GetBaseException()); " is 122.
Empty Catch Block,Microsoft.AspNet.SignalR.Infrastructure,PerformanceCounterWrapper,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\PerformanceCounterWrapper.cs,RemoveInstance,The method has an empty catch block.
Empty Catch Block,Microsoft.AspNet.SignalR.Infrastructure,DiposeCancellationState,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\CancellationTokenExtensions.cs,TryDispose,The method has an empty catch block.
Empty Catch Block,Microsoft.AspNet.SignalR.Messaging,MessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBus.cs,DisposeSubscription,The method has an empty catch block.
Magic Number,Microsoft.AspNet.SignalR.Configuration,ConfigurationExtensions,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Configuration\ConfigurationExtensions.cs,TopicTtl,The following statement contains a magic number: return TimeSpan.FromTicks((config.DisconnectTimeout.Ticks + keepAliveTimeout.Ticks) * 2);
Magic Number,Microsoft.AspNet.SignalR.Configuration,DefaultConfigurationManager,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Configuration\DefaultConfigurationManager.cs,DefaultConfigurationManager,The following statement contains a magic number: ConnectionTimeout = TimeSpan.FromSeconds(110);
Magic Number,Microsoft.AspNet.SignalR.Configuration,DefaultConfigurationManager,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Configuration\DefaultConfigurationManager.cs,DefaultConfigurationManager,The following statement contains a magic number: DisconnectTimeout = TimeSpan.FromSeconds(30);
Magic Number,Microsoft.AspNet.SignalR.Configuration,DefaultConfigurationManager,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Configuration\DefaultConfigurationManager.cs,DefaultConfigurationManager,The following statement contains a magic number: DefaultMessageBufferSize = 1000;
Magic Number,Microsoft.AspNet.SignalR,PersistentConnection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\PersistentConnection.cs,TryGetConnectionId,The following statement contains a magic number: statusCode = 400;
Magic Number,Microsoft.AspNet.SignalR,PersistentConnection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\PersistentConnection.cs,TryGetConnectionId,The following statement contains a magic number: var tokens = unprotectedConnectionToken.Split(SplitChars' 2);
Magic Number,Microsoft.AspNet.SignalR,PersistentConnection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\PersistentConnection.cs,TryGetConnectionId,The following statement contains a magic number: if (!String.Equals(tokenUserName' userName' StringComparison.OrdinalIgnoreCase))              {                  message = String.Format(CultureInfo.CurrentCulture' Resources.Error_UnrecognizedUserIdentity);                  statusCode = 403;                  return false;              }
Magic Number,Microsoft.AspNet.SignalR,PersistentConnection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\PersistentConnection.cs,VerifyGroups,The following statement contains a magic number: var tokens = unprotectedGroupsToken.Split(SplitChars' 2);
Magic Number,Microsoft.AspNet.SignalR.Hubs,HubRequestParser,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\HubRequestParser.cs,GetState,The following statement contains a magic number: if (json.Length > 4096)              {                  throw new InvalidOperationException(Resources.Error_StateExceededMaximumLength);              }
Magic Number,Microsoft.AspNet.SignalR.Hubs,DefaultJavaScriptProxyGenerator,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Hubs\DefaultJavaScriptProxyGenerator.cs,JavaScriptEncode,The following statement contains a magic number: return value.Substring(1' value.Length - 2);
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: var b = ((ulong)inlen) << 56;
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: if (inlen > 0)              {                  var inb = finb;                  var left = inlen & 7;                  var end = inb + inlen - left;                  var linb = (ulong*)finb;                  var lend = (ulong*)end;                  for (; linb < lend; ++linb)                  {                      v3 ^= *linb;                        v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                      v0 += v1;                      v1 = (v1 << 13) | (v1 >> (64 - 13));                      v1 ^= v0;                      v0 = (v0 << 32) | (v0 >> (64 - 32));                        v2 += v3;                      v3 = (v3 << 16) | (v3 >> (64 - 16));                      v3 ^= v2;                        v0 += v3;                      v3 = (v3 << 21) | (v3 >> (64 - 21));                      v3 ^= v0;                        v2 += v1;                      v1 = (v1 << 17) | (v1 >> (64 - 17));                      v1 ^= v2;                      v2 = (v2 << 32) | (v2 >> (64 - 32));                        v0 ^= *linb;                  }                  for (var i = 0; i < left; ++i)                  {                      b |= ((ulong)end[i]) << (8 * i);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 13) | (v1 >> (64 - 13));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v0 = (v0 << 32) | (v0 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 16) | (v3 >> (64 - 16));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v3 = (v3 << 21) | (v3 >> (64 - 21));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v1 = (v1 << 17) | (v1 >> (64 - 17));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The following statement contains a magic number: v2 = (v2 << 32) | (v2 >> (64 - 32));
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,StringMinifier,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\StringMinifier.cs,GetCharFromSixBitInt,The following statement contains a magic number: if (num < 26)              {                  return (char)(num + 'A');              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,StringMinifier,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\StringMinifier.cs,GetCharFromSixBitInt,The following statement contains a magic number: if (num < 52)              {                  return (char)(num - 26 + 'a');              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,StringMinifier,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\StringMinifier.cs,GetCharFromSixBitInt,The following statement contains a magic number: if (num < 52)              {                  return (char)(num - 26 + 'a');              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,StringMinifier,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\StringMinifier.cs,GetCharFromSixBitInt,The following statement contains a magic number: if (num < 62)              {                  return (char)(num - 52 + '0');              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,StringMinifier,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\StringMinifier.cs,GetCharFromSixBitInt,The following statement contains a magic number: if (num < 62)              {                  return (char)(num - 52 + '0');              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,StringMinifier,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\StringMinifier.cs,GetCharFromSixBitInt,The following statement contains a magic number: if (num == 62)              {                  return '_';              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,StringMinifier,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\StringMinifier.cs,GetCharFromSixBitInt,The following statement contains a magic number: if (num == 63)              {                  return ':';              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,StringMinifier,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\StringMinifier.cs,GetStringFromInt,The following statement contains a magic number: const int maxSize = 6;
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,StringMinifier,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\StringMinifier.cs,GetStringFromInt,The following statement contains a magic number: do              {                  // Append next 6 bits of num                  buffer[--index] = GetCharFromSixBitInt(num & 0x3f);                  num >>= 6;                    // Don't pad output string' but ensure at least one character is written              } while (num != 0);
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,Connection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\Connection.cs,GetMessageBuffer,The following statement contains a magic number: using (var stream = new MemoryStream(128))              {                  var bufferWriter = new BinaryTextWriter((buffer' state) =>                  {                      ((MemoryStream)state).Write(buffer.Array' buffer.Offset' buffer.Count);                  }'                  stream'                  reuseBuffers: true'                  bufferSize: 1024);                    using (bufferWriter)                  {                      _serializer.Serialize(value' bufferWriter);                      bufferWriter.Flush();                        return new ArraySegment<byte>(stream.ToArray());                  }              }
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,Connection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\Connection.cs,GetMessageBuffer,The following statement contains a magic number: using (var stream = new MemoryStream(128))              {                  var bufferWriter = new BinaryTextWriter((buffer' state) =>                  {                      ((MemoryStream)state).Write(buffer.Array' buffer.Offset' buffer.Count);                  }'                  stream'                  reuseBuffers: true'                  bufferSize: 1024);                    using (bufferWriter)                  {                      _serializer.Serialize(value' bufferWriter);                      bufferWriter.Flush();                        return new ArraySegment<byte>(stream.ToArray());                  }              }
Magic Number,Microsoft.AspNet.SignalR.Json,JRawValue,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Json\JRawValue.cs,ConvertTo,The following statement contains a magic number: using (var jsonReader = new StringReader(_value))              {                  var settings = new JsonSerializerSettings                  {                      MaxDepth = 20                  };                  var serializer = JsonSerializer.Create(settings);                  return serializer.Deserialize(jsonReader' type);              }
Magic Number,Microsoft.AspNet.SignalR.Json,JsonNetSerializer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Json\JsonNetSerializer.cs,JsonNetSerializer,The following statement contains a magic number: settings.MaxDepth = 20;
Magic Number,Microsoft.AspNet.SignalR.Messaging,Cursor,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\Cursor.cs,WriteUlongAsHexToBuffer,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  // Convert the first 4 bits of the value to a valid hex character.                  char hexChar = Int32ToHex((int)(value >> 60));                  value <<= 4;                    // Don't increment length if it would just add zero padding                  if (length != 0 || hexChar != '0')                  {                      textWriter.Write(hexChar);                      length++;                  }              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,Cursor,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\Cursor.cs,WriteUlongAsHexToBuffer,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  // Convert the first 4 bits of the value to a valid hex character.                  char hexChar = Int32ToHex((int)(value >> 60));                  value <<= 4;                    // Don't increment length if it would just add zero padding                  if (length != 0 || hexChar != '0')                  {                      textWriter.Write(hexChar);                      length++;                  }              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,Cursor,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\Cursor.cs,WriteUlongAsHexToBuffer,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  // Convert the first 4 bits of the value to a valid hex character.                  char hexChar = Int32ToHex((int)(value >> 60));                  value <<= 4;                    // Don't increment length if it would just add zero padding                  if (length != 0 || hexChar != '0')                  {                      textWriter.Write(hexChar);                      length++;                  }              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,Cursor,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\Cursor.cs,Int32ToHex,The following statement contains a magic number: return (value < 10) ? (char)(value + '0') : (char)(value - 10 + 'A');
Magic Number,Microsoft.AspNet.SignalR.Messaging,Cursor,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\Cursor.cs,Int32ToHex,The following statement contains a magic number: return (value < 10) ? (char)(value + '0') : (char)(value - 10 + 'A');
Magic Number,Microsoft.AspNet.SignalR.Messaging,MessageBroker,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBroker.cs,WaitForDrain,The following statement contains a magic number: while (_allocatedWorkers > 0)              {                  lock (_queue)                  {                      // Tell all workers we're done                      Monitor.PulseAll(_queue);                  }                    Thread.Sleep(250);              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,MessageBus,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageBus.cs,Dispose,The following statement contains a magic number: if (disposing)              {                  // Stop the broker from doing any work                  _broker.Dispose();                    // Spin while we wait for the timer to finish if it's currently running                  while (Interlocked.Exchange(ref _gcRunning' 1) == 1)                  {                      Thread.Sleep(250);                  }                    // Remove all topics                  Topics.Clear();                    if (_gcTimer != null)                  {                      _gcTimer.Dispose();                  }              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,MessageStore<T>,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageStore.cs,MessageStore,The following statement contains a magic number: if (capacity < 32)              {                  capacity = 32;              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,MessageStore<T>,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageStore.cs,MessageStore,The following statement contains a magic number: if (capacity < 32)              {                  capacity = 32;              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,Fragment,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\MessageStore.cs,TrySearch,The following statement contains a magic number: while (low <= high)                  {                      int mid = (low + high) / 2;                        ScaleoutMapping mapping = Data[mid];                        lastSearchIndex = mid;                      lastSearchId = mapping.Id;                        if (id < mapping.Id)                      {                          high = mid - 1;                      }                      else if (id > mapping.Id)                      {                          low = mid + 1;                      }                      else if (id == mapping.Id)                      {                          index = mid;                          return true;                      }                  }
Magic Number,Microsoft.AspNet.SignalR.Messaging,ScaleoutStore,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutStore.cs,ScaleoutStore,The following statement contains a magic number: if (capacity < 32)              {                  capacity = 32;              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,ScaleoutStore,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutStore.cs,ScaleoutStore,The following statement contains a magic number: if (capacity < 32)              {                  capacity = 32;              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,ScaleoutStore,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\ScaleoutStore.cs,TryGetFragmentFromMappingId,The following statement contains a magic number: while (low <= high)              {                  var mid = (ulong)((low + high) / 2);                    int midOffset = GetFragmentOffset(mid);                    fragment = _fragments[midOffset];                    if (fragment == null)                  {                      return false;                  }                    if (mappingId < fragment.MinValue)                  {                      high = (long)(fragment.MinId - 1);                  }                  else if (mappingId > fragment.MaxValue)                  {                      low = (long)(fragment.MaxId + 1);                  }                  else if (fragment.HasValue(mappingId))                  {                      return true;                  }              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,DefaultSubscription,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\DefaultSubscription.cs,GetCursorPrefix,The following statement contains a magic number: using (var rng = new RNGCryptoServiceProvider())              {                  var data = new byte[4];                  rng.GetBytes(data);                    using (var writer = new StringWriter(CultureInfo.InvariantCulture))                  {                      var randomValue = (ulong)BitConverter.ToUInt32(data' 0);                      Cursor.WriteUlongAsHexToBuffer(randomValue' writer);                      return "d-" + writer.ToString() + "-";                  }              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,Subscription,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\Subscription.cs,Dispose,The following statement contains a magic number: if (disposing)              {                  // REIVIEW: Consider sleeping instead of using a tight loop' or maybe timing out after some interval                  // if the client is very slow then this invoke call might not end quickly and this will make the CPU                  // hot waiting for the task to return.                    int disposeRetryCount = 0;                    while (true)                  {                      // Wait until the subscription isn't working anymore                      var state = Interlocked.CompareExchange(ref _subscriptionState'                                                              SubscriptionState.Disposed'                                                              SubscriptionState.Idle);                        // If we're not working then stop                      if (state != SubscriptionState.InvokingCallback || disposeRetryCount ++ > 10)                      {                          if (state != SubscriptionState.Disposed)                          {                              // Only decrement if we're not disposed already                              _counters.MessageBusSubscribersCurrent.Decrement();                              _counters.MessageBusSubscribersPerSec.Decrement();                          }                            // Raise the disposed callback                          if (Disposable != null)                          {                              Disposable.Dispose();                          }                            break;                      }                        Thread.Sleep(500);                  }              }
Magic Number,Microsoft.AspNet.SignalR.Messaging,Subscription,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Messaging\Subscription.cs,Dispose,The following statement contains a magic number: if (disposing)              {                  // REIVIEW: Consider sleeping instead of using a tight loop' or maybe timing out after some interval                  // if the client is very slow then this invoke call might not end quickly and this will make the CPU                  // hot waiting for the task to return.                    int disposeRetryCount = 0;                    while (true)                  {                      // Wait until the subscription isn't working anymore                      var state = Interlocked.CompareExchange(ref _subscriptionState'                                                              SubscriptionState.Disposed'                                                              SubscriptionState.Idle);                        // If we're not working then stop                      if (state != SubscriptionState.InvokingCallback || disposeRetryCount ++ > 10)                      {                          if (state != SubscriptionState.Disposed)                          {                              // Only decrement if we're not disposed already                              _counters.MessageBusSubscribersCurrent.Decrement();                              _counters.MessageBusSubscribersPerSec.Decrement();                          }                            // Raise the disposed callback                          if (Disposable != null)                          {                              Disposable.Dispose();                          }                            break;                      }                        Thread.Sleep(500);                  }              }
Duplicate Code,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The method contains a code clone-set at the following line numbers (starting from the method definition): ((19' 54)' (100' 169))
Duplicate Code,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The method contains a code clone-set at the following line numbers (starting from the method definition): ((20' 53)' (64' 97))
Duplicate Code,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The method contains a code clone-set at the following line numbers (starting from the method definition): ((20' 39)' (64' 83)' (101' 120)' (118' 137)' (135' 154))
Duplicate Code,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The method contains a code clone-set at the following line numbers (starting from the method definition): ((64' 97)' (101' 168))
Duplicate Code,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The method contains a code clone-set at the following line numbers (starting from the method definition): ((64' 83)' (118' 137)' (135' 154)' (101' 120))
Duplicate Code,Microsoft.AspNet.SignalR.Infrastructure,SipHashBasedStringEqualityComparer,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\SipHashBasedStringEqualityComparer.cs,SipHash_2_4_UlongCast_ForcedInline,The method contains a code clone-set at the following line numbers (starting from the method definition): ((101' 136)' (118' 153))
Missing Default,Microsoft.AspNet.SignalR.Infrastructure,Connection,C:\repos\Sonarr_Sonarr\src\Microsoft.AspNet.SignalR.Core\Infrastructure\Connection.cs,ProcessCommand,The following switch statement is missing a default case: switch (command.CommandType)              {                  case CommandType.AddToGroup:                      {                          var name = command.Value;                            if (EventKeyAdded != null)                          {                              _groups.Add(name);                              EventKeyAdded(this' name);                          }                      }                      break;                  case CommandType.RemoveFromGroup:                      {                          var name = command.Value;                            if (EventKeyRemoved != null)                          {                              _groups.Remove(name);                              EventKeyRemoved(this' name);                          }                      }                      break;                  case CommandType.Disconnect:                      _disconnected = true;                      break;                  case CommandType.Abort:                      _aborted = true;                      break;              }
