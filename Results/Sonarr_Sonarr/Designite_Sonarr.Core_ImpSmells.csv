Implementation smell,Namespace,Class,File,Method,Description
Long Method,NzbDrone.Core.Datastore.Migration,InitialSetup,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\001_initial_setup.cs,MainDbUpgrade,The method has 108 lines of code.
Long Method,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,FetchReleases,The method has 149 lines of code.
Long Method,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioCodec,The method has 116 lines of code.
Long Method,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoCodec,The method has 126 lines of code.
Long Method,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The method has 135 lines of code.
Long Method,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The method has 122 lines of code.
Long Method,NzbDrone.Core.Parser,Parser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseMatchCollection,The method has 149 lines of code.
Long Method,NzbDrone.Core.Parser,QualityParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQualityName,The method has 257 lines of code.
Complex Method,NzbDrone.Core.DataAugmentation.Xem,XemService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,ExtrapolateMappings,Cyclomatic complexity of the method is 17
Complex Method,NzbDrone.Core.Datastore.Migration,add_formats_to_naming_config,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\029_add_formats_to_naming_config.cs,ConvertConfig,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,Cyclomatic complexity of the method is 14
Complex Method,NzbDrone.Core.Datastore.Migration.Framework,SqliteSyntaxReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSyntaxReader.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,NzbDrone.Core.DecisionEngine,DownloadDecisionMaker,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionMaker.cs,GetDecisions,Cyclomatic complexity of the method is 14
Complex Method,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,Cyclomatic complexity of the method is 11
Complex Method,NzbDrone.Core.DecisionEngine.Specifications,AlreadyImportedSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AlreadyImportedSpecification.cs,IsSatisfiedBy,Cyclomatic complexity of the method is 10
Complex Method,NzbDrone.Core.DecisionEngine.Specifications,AnimeVersionUpgradeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AnimeVersionUpgradeSpecification.cs,IsSatisfiedBy,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DelaySpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DelaySpecification.cs,IsSatisfiedBy,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,IsSatisfiedBy,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Download,CompletedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Download,TorrentClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,Download,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Download.Clients.Deluge,Deluge,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,GetItems,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,GetItems,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Download.Clients.Hadouken,Hadouken,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\Hadouken.cs,GetItems,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,GetHistory,Cyclomatic complexity of the method is 10
Complex Method,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,GetItems,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,GetItems,Cyclomatic complexity of the method is 10
Complex Method,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,HasReachedSeedingTimeLimit,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,GetItems,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetHistory,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,HasVersion,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,GetItems,Cyclomatic complexity of the method is 12
Complex Method,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,HasReachedSeedLimit,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,GetItems,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Download.Pending,PendingReleaseService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Pending\PendingReleaseService.cs,IncludeRemoteEpisodes,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Extras,ExtraService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ExtraService.cs,ImportExtraFiles,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,FindMetadataFile,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,FindMetadataFile,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,SeriesMetadata,Cyclomatic complexity of the method is 10
Complex Method,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,EpisodeMetadata,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Extras.Metadata,ExistingMetadataImporter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\ExistingMetadataImporter.cs,ProcessFiles,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SeasonSearch,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,Cyclomatic complexity of the method is 12
Complex Method,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,FetchReleases,Cyclomatic complexity of the method is 14
Complex Method,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ParseSize,Cyclomatic complexity of the method is 10
Complex Method,NzbDrone.Core.Indexers.Newznab,NewznabCapabilitiesProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabCapabilitiesProvider.cs,ParseCapabilities,Cyclomatic complexity of the method is 12
Complex Method,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,AddTvIdPageableRequests,Cyclomatic complexity of the method is 12
Complex Method,NzbDrone.Core.Indexers.Rarbg,RarbgParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgParser.cs,ParseResponse,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Indexers.TorrentRss,TorrentRssSettingsDetector,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssSettingsDetector.cs,GetGenericTorrentRssParserSettings,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.MediaFiles.EpisodeImport,ImportApprovedEpisodes,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportApprovedEpisodes.cs,Import,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ProcessFile,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,Execute,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,EpisodeTitleSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\EpisodeTitleSpecification.cs,IsSatisfiedBy,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,MatchesFolderSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\MatchesFolderSpecification.cs,IsSatisfiedBy,Cyclomatic complexity of the method is 11
Complex Method,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioCodec,Cyclomatic complexity of the method is 27
Complex Method,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioCodecLegacy,Cyclomatic complexity of the method is 11
Complex Method,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoCodec,Cyclomatic complexity of the method is 28
Complex Method,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoCodecLegacy,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Messaging.Commands,CommandEqualityComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Commands\CommandEqualityComparer.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,NzbDrone.Core.Notifications.Join,JoinProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Join\JoinProxy.cs,SendNotification,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Notifications.Plex.Server,PlexServer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServer.cs,RequestAction,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,BuildFileName,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddSeasonEpisodeNumberingTokens,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddAbsoluteNumberingTokens,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Parser,LanguageParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\LanguageParser.cs,ParseLanguage,Cyclomatic complexity of the method is 24
Complex Method,NzbDrone.Core.Parser,LanguageParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\LanguageParser.cs,RegexLanguage,Cyclomatic complexity of the method is 13
Complex Method,NzbDrone.Core.Parser,Parser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseTitle,Cyclomatic complexity of the method is 13
Complex Method,NzbDrone.Core.Parser,Parser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseMatchCollection,Cyclomatic complexity of the method is 21
Complex Method,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,ParseSpecialEpisodeTitle,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetSeries,Cyclomatic complexity of the method is 14
Complex Method,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetAnimeEpisodes,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetStandardEpisodes,Cyclomatic complexity of the method is 12
Complex Method,NzbDrone.Core.Parser,QualityParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQualityName,Cyclomatic complexity of the method is 51
Complex Method,NzbDrone.Core.Profiles.Delay,DelayProfileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Profiles\Delay\DelayProfileService.cs,Reorder,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.ThingiProvider.Status,ProviderStatusServiceBase<TProvider;TModel>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\ThingiProvider\Status\ProviderStatusServiceBase.cs,RecordFailure,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Tv,EpisodeMonitoredService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeMonitoredService.cs,SetEpisodeMonitoredStatus,Cyclomatic complexity of the method is 13
Complex Method,NzbDrone.Core.Update,InstallUpdateService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,InstallUpdate,Cyclomatic complexity of the method is 8
Long Parameter List,NzbDrone.Core.Backup,BackupService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Backup\BackupService.cs,BackupService,The method has 8 parameters. Parameters: maindDb' makeDatabaseBackup' diskTransferService' diskProvider' appFolderInfo' archiveService' configService' logger
Long Parameter List,NzbDrone.Core.DataAugmentation.Scene,SceneMappingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Scene\SceneMappingService.cs,SceneMappingService,The method has 5 parameters. Parameters: repository' cacheManager' sceneMappingProviders' eventAggregator' logger
Long Parameter List,NzbDrone.Core.DataAugmentation.Xem,XemService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,XemService,The method has 5 parameters. Parameters: episodeService' xemProxy' seriesService' cacheManager' logger
Long Parameter List,NzbDrone.Core.Datastore.Migration,convert_config_to_download_clients,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\043_convert_config_to_download_clients.cs,AddDownloadClient,The method has 7 parameters. Parameters: conn' tran' name' implementation' settings' configContract' protocol
Long Parameter List,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,NzbDroneSqliteProcessor,The method has 5 parameters. Parameters: connection' generator' announcer' options' factory
Long Parameter List,NzbDrone.Core.DecisionEngine,DownloadDecisionMaker,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionMaker.cs,DownloadDecisionMaker,The method has 5 parameters. Parameters: specifications' parsingService' aggregationService' sceneMappingService' logger
Long Parameter List,NzbDrone.Core.DecisionEngine.Specifications,IUpgradableSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradableSpecification.cs,IsUpgradable,The method has 8 parameters. Parameters: profile' languageProfile' currentQuality' currentLanguage' currentScore' newQuality' newLanguage' newScore
Long Parameter List,NzbDrone.Core.DecisionEngine.Specifications,IUpgradableSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradableSpecification.cs,CutoffNotMet,The method has 7 parameters. Parameters: profile' languageProfile' currentQuality' currentLanguage' currentScore' newQuality' newScore
Long Parameter List,NzbDrone.Core.DecisionEngine.Specifications,IUpgradableSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradableSpecification.cs,IsUpgradeAllowed,The method has 6 parameters. Parameters: qualityProfile' languageProfile' currentQuality' currentLanguage' newQuality' newLanguage
Long Parameter List,NzbDrone.Core.DecisionEngine.Specifications,UpgradableSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradableSpecification.cs,IsUpgradable,The method has 8 parameters. Parameters: qualityProfile' languageProfile' currentQuality' currentLanguage' currentScore' newQuality' newLanguage' newScore
Long Parameter List,NzbDrone.Core.DecisionEngine.Specifications,UpgradableSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradableSpecification.cs,CutoffNotMet,The method has 7 parameters. Parameters: profile' languageProfile' currentQuality' currentLanguage' currentScore' newQuality' newScore
Long Parameter List,NzbDrone.Core.DecisionEngine.Specifications,UpgradableSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradableSpecification.cs,IsUpgradeAllowed,The method has 6 parameters. Parameters: qualityProfile' languageProfile' currentQuality' currentLanguage' newQuality' newLanguage
Long Parameter List,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,HistorySpecification,The method has 5 parameters. Parameters: historyService' upgradableSpecification' configService' preferredWordServiceCalculator' logger
Long Parameter List,NzbDrone.Core.Download,CompletedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,CompletedDownloadService,The method has 7 parameters. Parameters: configService' eventAggregator' historyService' downloadedEpisodesImportService' parsingService' seriesService' logger
Long Parameter List,NzbDrone.Core.Download,DownloadClientFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientFactory.cs,DownloadClientFactory,The method has 6 parameters. Parameters: downloadClientStatusService' providerRepository' providers' container' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Download,DownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadService.cs,DownloadService,The method has 7 parameters. Parameters: downloadClientProvider' downloadClientStatusService' indexerStatusService' rateLimitService' eventAggregator' seedConfigProvider' logger
Long Parameter List,NzbDrone.Core.Download,ProcessDownloadDecisions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\ProcessDownloadDecisions.cs,PreparePending,The method has 5 parameters. Parameters: queue' grabbed' pending' report' reason
Long Parameter List,NzbDrone.Core.Download,TorrentClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,TorrentClientBase,The method has 6 parameters. Parameters: torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download,UsenetClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\UsenetClientBase.cs,UsenetClientBase,The method has 6 parameters. Parameters: httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Blackhole,TorrentBlackhole,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\TorrentBlackhole.cs,TorrentBlackhole,The method has 7 parameters. Parameters: scanWatchFolder' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Blackhole,UsenetBlackhole,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\UsenetBlackhole.cs,UsenetBlackhole,The method has 7 parameters. Parameters: scanWatchFolder' httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Deluge,Deluge,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,Deluge,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TorrentDownloadStation,The method has 11 parameters. Parameters: sharedFolderResolver' serialNumberProvider' fileStationProxy' dsInfoProxy' dsTaskProxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,UsenetDownloadStation,The method has 11 parameters. Parameters: sharedFolderResolver' serialNumberProvider' fileStationProxy' dsInfoProxy' dsTaskProxy' httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,DiskStationProxyBase,The method has 5 parameters. Parameters: apiType' apiName' httpClient' cacheManager' logger
Long Parameter List,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The method has 5 parameters. Parameters: settings' apiInfo' methodName' apiVersion' httpVerb
Long Parameter List,NzbDrone.Core.Download.Clients.Hadouken,Hadouken,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\Hadouken.cs,Hadouken,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,Nzbget,The method has 7 parameters. Parameters: proxy' httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,INzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzb,The method has 6 parameters. Parameters: nzbData' title' category' priority' addpaused' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzb,The method has 6 parameters. Parameters: nzbData' title' category' priority' addpaused' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzbLegacy13,The method has 5 parameters. Parameters: nzbData' title' category' priority' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzbLegacy12,The method has 5 parameters. Parameters: nzbData' title' category' priority' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,EditQueue,The method has 5 parameters. Parameters: command' offset' editText' id' settings
Long Parameter List,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,NzbVortex,The method has 7 parameters. Parameters: proxy' httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Pneumatic,Pneumatic,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Pneumatic\Pneumatic.cs,Pneumatic,The method has 5 parameters. Parameters: httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,QBittorrent,The method has 8 parameters. Parameters: proxySelector' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' cacheManager' logger
Long Parameter List,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxySelector,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxySelector.cs,QBittorrentProxySelector,The method has 5 parameters. Parameters: proxyV1' proxyV2' httpClient' cacheManager' logger
Long Parameter List,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,RTorrent,The method has 8 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' rTorrentDirectoryValidator' logger
Long Parameter List,NzbDrone.Core.Download.Clients.RTorrent,IRTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,AddTorrentFromUrl,The method has 5 parameters. Parameters: torrentUrl' label' priority' directory' settings
Long Parameter List,NzbDrone.Core.Download.Clients.RTorrent,IRTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,AddTorrentFromFile,The method has 6 parameters. Parameters: fileName' fileContent' label' priority' directory' settings
Long Parameter List,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,AddTorrentFromUrl,The method has 5 parameters. Parameters: torrentUrl' label' priority' directory' settings
Long Parameter List,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,AddTorrentFromFile,The method has 6 parameters. Parameters: fileName' fileContent' label' priority' directory' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,Sabnzbd,The method has 7 parameters. Parameters: proxy' httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Sabnzbd,ISabnzbdProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\SabnzbdProxy.cs,DownloadNzb,The method has 5 parameters. Parameters: nzbData' filename' category' priority' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Sabnzbd,SabnzbdProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\SabnzbdProxy.cs,DownloadNzb,The method has 5 parameters. Parameters: nzbData' filename' category' priority' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Transmission,Transmission,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\Transmission.cs,Transmission,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,TransmissionBase,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,UTorrent,The method has 8 parameters. Parameters: proxy' cacheManager' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Vuze,Vuze,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Vuze\Vuze.cs,Vuze,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Pending,PendingReleaseService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Pending\PendingReleaseService.cs,PendingReleaseService,The method has 9 parameters. Parameters: indexerStatusService' repository' seriesService' parsingService' delayProfileService' taskManager' configService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,DownloadMonitoringService,The method has 9 parameters. Parameters: downloadClientStatusService' downloadClientFactory' eventAggregator' manageCommandQueue' configService' failedDownloadService' completedDownloadService' trackedDownloadService' logger
Long Parameter List,NzbDrone.Core.Download.TrackedDownloads,TrackedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\TrackedDownloadService.cs,TrackedDownloadService,The method has 5 parameters. Parameters: parsingService' cacheManager' historyService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Extras,ExtraService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ExtraService.cs,ExtraService,The method has 6 parameters. Parameters: mediaFileService' episodeService' diskProvider' configService' extraFileManagers' logger
Long Parameter List,NzbDrone.Core.Extras.Files,IManageExtraFiles,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Files\ExtraFileManager.cs,Import,The method has 5 parameters. Parameters: series' episodeFile' path' extension' readOnly
Long Parameter List,NzbDrone.Core.Extras.Files,ExtraFileManager<TExtraFile>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Files\ExtraFileManager.cs,Import,The method has 5 parameters. Parameters: series' episodeFile' path' extension' readOnly
Long Parameter List,NzbDrone.Core.Extras.Files,ExtraFileManager<TExtraFile>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Files\ExtraFileManager.cs,ImportFile,The method has 6 parameters. Parameters: series' episodeFile' path' readOnly' extension' fileNameSuffix
Long Parameter List,NzbDrone.Core.Extras.Files,ExtraFileService<TExtraFile>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Files\ExtraFileService.cs,ExtraFileService,The method has 5 parameters. Parameters: repository' seriesService' diskProvider' recycleBinProvider' logger
Long Parameter List,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,XbmcMetadata,The method has 5 parameters. Parameters: detectNfo' diskProvider' mediaCoverService' tagService' logger
Long Parameter List,NzbDrone.Core.Extras.Metadata,MetadataFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\MetadataFactory.cs,MetadataFactory,The method has 5 parameters. Parameters: providerRepository' providers' container' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Extras.Metadata,MetadataService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\MetadataService.cs,MetadataService,The method has 11 parameters. Parameters: configService' diskProvider' diskTransferService' recycleBinProvider' otherExtraFileRenamer' metadataFactory' cleanMetadataService' httpClient' mediaFileAttributeService' metadataFileService' logger
Long Parameter List,NzbDrone.Core.Extras.Metadata,MetadataService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\MetadataService.cs,Import,The method has 5 parameters. Parameters: series' episodeFile' path' extension' readOnly
Long Parameter List,NzbDrone.Core.Extras.Metadata.Files,MetadataFileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Files\MetadataFileService.cs,MetadataFileService,The method has 5 parameters. Parameters: repository' seriesService' diskProvider' recycleBinProvider' logger
Long Parameter List,NzbDrone.Core.Extras.Others,OtherExtraFileRenamer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Others\OtherExtraFileRenamer.cs,OtherExtraFileRenamer,The method has 5 parameters. Parameters: otherExtraFileService' seriesService' recycleBinProvider' diskProvider' logger
Long Parameter List,NzbDrone.Core.Extras.Others,OtherExtraFileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Others\OtherExtraFileService.cs,OtherExtraFileService,The method has 5 parameters. Parameters: repository' seriesService' diskProvider' recycleBinProvider' logger
Long Parameter List,NzbDrone.Core.Extras.Others,OtherExtraService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Others\OtherExtraService.cs,OtherExtraService,The method has 6 parameters. Parameters: configService' diskProvider' diskTransferService' otherExtraFileService' mediaFileAttributeService' logger
Long Parameter List,NzbDrone.Core.Extras.Others,OtherExtraService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Others\OtherExtraService.cs,Import,The method has 5 parameters. Parameters: series' episodeFile' path' extension' readOnly
Long Parameter List,NzbDrone.Core.Extras.Subtitles,SubtitleFileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Subtitles\SubtitleFileService.cs,SubtitleFileService,The method has 5 parameters. Parameters: repository' seriesService' diskProvider' recycleBinProvider' logger
Long Parameter List,NzbDrone.Core.Extras.Subtitles,SubtitleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Subtitles\SubtitleService.cs,SubtitleService,The method has 6 parameters. Parameters: configService' diskProvider' diskTransferService' subtitleFileService' mediaFileAttributeService' logger
Long Parameter List,NzbDrone.Core.Extras.Subtitles,SubtitleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Subtitles\SubtitleService.cs,Import,The method has 5 parameters. Parameters: series' episodeFile' path' extension' readOnly
Long Parameter List,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,DeleteBadMediaCovers,The method has 5 parameters. Parameters: metaFileService' seriesService' diskProvider' configService' logger
Long Parameter List,NzbDrone.Core.IndexerSearch,EpisodeSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\EpisodeSearchService.cs,EpisodeSearchService,The method has 6 parameters. Parameters: nzbSearchService' processDownloadDecisions' episodeService' episodeCutoffService' queueService' logger
Long Parameter List,NzbDrone.Core.IndexerSearch,ISearchForNzb,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SeasonSearch,The method has 5 parameters. Parameters: seriesId' seasonNumber' missingOnly' userInvokedSearch' interactiveSearch
Long Parameter List,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,NzbSearchService,The method has 6 parameters. Parameters: indexerFactory' sceneMapping' seriesService' episodeService' makeDownloadDecision' logger
Long Parameter List,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SeasonSearch,The method has 5 parameters. Parameters: seriesId' seasonNumber' missingOnly' userInvokedSearch' interactiveSearch
Long Parameter List,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SearchAnime,The method has 5 parameters. Parameters: series' episode' userInvokedSearch' interactiveSearch' isSeasonSearch
Long Parameter List,NzbDrone.Core.Indexers.BitMeTv,BitMeTv,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BitMeTv\BitMeTv.cs,BitMeTv,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNet,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNet.cs,BroadcastheNet,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,HttpIndexerBase,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers,IndexerFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\IndexerFactory.cs,IndexerFactory,The method has 6 parameters. Parameters: indexerStatusService' providerRepository' providers' container' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Indexers,RssSyncService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssSyncService.cs,RssSyncService,The method has 8 parameters. Parameters: indexerStatusService' indexerFactory' rssFetcherAndParser' downloadDecisionMaker' processDownloadDecisions' pendingReleaseService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Indexers.Fanzub,Fanzub,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Fanzub\Fanzub.cs,Fanzub,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.HDBits,HDBits,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HDBits\HDBits.cs,HDBits,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.IPTorrents,IPTorrents,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\IPTorrents\IPTorrents.cs,IPTorrents,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Newznab,Newznab,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\Newznab.cs,Newznab,The method has 6 parameters. Parameters: capabilitiesProvider' httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,AddTvIdPageableRequests,The method has 5 parameters. Parameters: chain' maxPages' categories' searchCriteria' parameters
Long Parameter List,NzbDrone.Core.Indexers.Nyaa,Nyaa,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Nyaa\Nyaa.cs,Nyaa,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Omgwtfnzbs,Omgwtfnzbs,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Omgwtfnzbs\Omgwtfnzbs.cs,Omgwtfnzbs,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Rarbg,Rarbg,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\Rarbg.cs,Rarbg,The method has 6 parameters. Parameters: tokenProvider' httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Torrentleech,Torrentleech,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torrentleech\Torrentleech.cs,Torrentleech,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.TorrentRss,TorrentRssIndexer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssIndexer.cs,TorrentRssIndexer,The method has 6 parameters. Parameters: torrentRssParserFactory' httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Torznab,Torznab,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torznab\Torznab.cs,Torznab,The method has 6 parameters. Parameters: capabilitiesProvider' httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.MediaCover,MediaCoverService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,MediaCoverService,The method has 8 parameters. Parameters: resizer' httpClient' diskProvider' appFolderInfo' coverExistsSpecification' configFileProvider' eventAggregator' logger
Long Parameter List,NzbDrone.Core.MediaFiles,DiskScanService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DiskScanService.cs,DiskScanService,The method has 9 parameters. Parameters: diskProvider' importDecisionMaker' importApprovedEpisodes' configService' seriesService' mediaFileTableCleanupService' rootFolderService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,DownloadedEpisodesImportService,The method has 9 parameters. Parameters: diskProvider' diskScanService' seriesService' parsingService' importDecisionMaker' importApprovedEpisodes' detectSample' runtimeInfo' logger
Long Parameter List,NzbDrone.Core.MediaFiles,EpisodeFileMovingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeFileMovingService.cs,EpisodeFileMovingService,The method has 9 parameters. Parameters: episodeService' updateEpisodeFileService' buildFileNames' diskTransferService' diskProvider' mediaFileAttributeService' eventAggregator' configService' logger
Long Parameter List,NzbDrone.Core.MediaFiles,EpisodeFileMovingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeFileMovingService.cs,TransferFile,The method has 5 parameters. Parameters: episodeFile' series' episodes' destinationFilePath' mode
Long Parameter List,NzbDrone.Core.MediaFiles,MediaFileDeletionService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaFileDeletionService.cs,MediaFileDeletionService,The method has 6 parameters. Parameters: diskProvider' recycleBinProvider' mediaFileService' seriesService' configService' logger
Long Parameter List,NzbDrone.Core.MediaFiles,RenameEpisodeFileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\RenameEpisodeFileService.cs,RenameEpisodeFileService,The method has 8 parameters. Parameters: seriesService' mediaFileService' episodeFileMover' eventAggregator' episodeService' filenameBuilder' diskProvider' logger
Long Parameter List,NzbDrone.Core.MediaFiles,UpgradeMediaFileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\UpgradeMediaFileService.cs,UpgradeMediaFileService,The method has 5 parameters. Parameters: recycleBinProvider' mediaFileService' episodeFileMover' diskProvider' logger
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport.Aggregation,AggregationService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Aggregation\AggregationService.cs,AggregationService,The method has 5 parameters. Parameters: augmenters' diskProvider' videoFileInfoReader' configService' logger
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport.Aggregation.Aggregators.Augmenters.Quality,AugmentQualityResult,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Aggregation\Aggregators\Augmenters\Quality\AugmentQualityResult.cs,AugmentQualityResult,The method has 5 parameters. Parameters: source' sourceConfidence' resolution' resolutionConfidence' revision
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,ImportApprovedEpisodes,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportApprovedEpisodes.cs,ImportApprovedEpisodes,The method has 6 parameters. Parameters: episodeFileUpgrader' mediaFileService' extraService' diskProvider' eventAggregator' logger
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,IMakeImportDecision,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,GetImportDecisions,The method has 5 parameters. Parameters: videoFiles' series' downloadClientItem' folderInfo' sceneSource
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,IMakeImportDecision,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,GetImportDecisions,The method has 6 parameters. Parameters: videoFiles' series' downloadClientItem' folderInfo' sceneSource' filterExistingFiles
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,ImportDecisionMaker,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,ImportDecisionMaker,The method has 6 parameters. Parameters: specifications' mediaFileService' aggregationService' diskProvider' detectSample' logger
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,ImportDecisionMaker,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,GetImportDecisions,The method has 5 parameters. Parameters: videoFiles' series' downloadClientItem' folderInfo' sceneSource
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,ImportDecisionMaker,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,GetImportDecisions,The method has 6 parameters. Parameters: videoFiles' series' downloadClientItem' folderInfo' sceneSource' filterExistingFiles
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ManualImportService,The method has 12 parameters. Parameters: diskProvider' parsingService' diskScanService' importDecisionMaker' seriesService' episodeService' aggregationService' importApprovedEpisodes' trackedDownloadService' downloadedEpisodesImportService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ProcessFolder,The method has 5 parameters. Parameters: rootFolder' baseFolder' downloadId' seriesId' filterExistingFiles
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ProcessFile,The method has 5 parameters. Parameters: rootFolder' baseFolder' file' downloadId' series
Long Parameter List,NzbDrone.Core.MediaFiles.Events,EpisodeImportedEvent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\Events\EpisodeImportedEvent.cs,EpisodeImportedEvent,The method has 5 parameters. Parameters: episodeInfo' importedEpisode' oldFiles' newDownload' downloadClientItem
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Get,The method has 5 parameters. Parameters: streamKind' streamNumber' parameter' infoKind' searchKind
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MediaInfo_GetI,The method has 5 parameters. Parameters: handle' streamKind' streamNumber' parameter' infoKind
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MediaInfo_Get,The method has 6 parameters. Parameters: handle' streamKind' streamNumber' parameter' infoKind' searchKind
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MediaInfoA_GetI,The method has 5 parameters. Parameters: handle' streamKind' streamNumber' parameter' infoKind
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MediaInfoA_Get,The method has 6 parameters. Parameters: handle' streamKind' streamNumber' parameter' infoKind' searchKind
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,UpdateMediaInfoService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\UpdateMediaInfoService.cs,UpdateMediaInfoService,The method has 5 parameters. Parameters: diskProvider' mediaFileService' videoFileInfoReader' configService' logger
Long Parameter List,NzbDrone.Core.Notifications,NotificationFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\NotificationFactory.cs,NotificationFactory,The method has 5 parameters. Parameters: providerRepository' providers' container' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Notifications.Email,EmailService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Email\EmailService.cs,Send,The method has 5 parameters. Parameters: email' server' port' ssl' credentials
Long Parameter List,NzbDrone.Core.Notifications.Growl,IGrowlService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlService.cs,SendNotification,The method has 6 parameters. Parameters: title' message' notificationTypeName' hostname' port' password
Long Parameter List,NzbDrone.Core.Notifications.Growl,GrowlService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlService.cs,SendNotification,The method has 6 parameters. Parameters: title' message' notificationTypeName' hostname' port' password
Long Parameter List,NzbDrone.Core.Notifications.Plex.HomeTheater,PlexClientService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\HomeTheater\PlexClientService.cs,SendCommand,The method has 5 parameters. Parameters: host' port' command' username' password
Long Parameter List,NzbDrone.Core.Notifications.Prowl,IProwlService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Prowl\ProwlService.cs,SendNotification,The method has 5 parameters. Parameters: title' message' apiKey' priority' url
Long Parameter List,NzbDrone.Core.Notifications.Prowl,ProwlService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Prowl\ProwlService.cs,SendNotification,The method has 5 parameters. Parameters: title' message' apiKey' priority' url
Long Parameter List,NzbDrone.Core.Organizer,IBuildFileNames,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,BuildFileName,The method has 5 parameters. Parameters: episodes' series' episodeFile' namingConfig' preferredWords
Long Parameter List,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,FileNameBuilder,The method has 6 parameters. Parameters: namingConfigService' qualityDefinitionService' cacheManager' preferredWordService' mediaInfoUpdater' logger
Long Parameter List,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,BuildFileName,The method has 5 parameters. Parameters: episodes' series' episodeFile' namingConfig' preferredWords
Long Parameter List,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddAbsoluteNumberingTokens,The method has 5 parameters. Parameters: pattern' tokenHandlers' series' episodes' namingConfig
Long Parameter List,NzbDrone.Core.Parser,IParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,ParseSpecialEpisodeTitle,The method has 5 parameters. Parameters: parsedEpisodeInfo' releaseTitle' tvdbId' tvRageId' searchCriteria
Long Parameter List,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,ParseSpecialEpisodeTitle,The method has 5 parameters. Parameters: parsedEpisodeInfo' releaseTitle' tvdbId' tvRageId' searchCriteria
Long Parameter List,NzbDrone.Core.RemotePathMappings,RemotePathMappingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\RemotePathMappings\RemotePathMappingService.cs,RemotePathMappingService,The method has 5 parameters. Parameters: downloadClientRepository' remotePathMappingRepository' diskProvider' cacheManager' logger
Long Parameter List,NzbDrone.Core.Tags,TagService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tags\TagService.cs,TagService,The method has 6 parameters. Parameters: repo' eventAggregator' delayProfileService' notificationFactory' releaseProfileService' seriesService
Long Parameter List,NzbDrone.Core.ThingiProvider,ProviderFactory<TProvider;TProviderDefinition>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\ThingiProvider\ProviderFactory.cs,ProviderFactory,The method has 5 parameters. Parameters: providerRepository' providers' container' eventAggregator' logger
Long Parameter List,TinyTwitter,TinyTwitter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\TinyTwitter.cs,GetTimeline,The method has 5 parameters. Parameters: url' sinceId' maxId' count' screenName
Long Parameter List,NzbDrone.Core.Tv,AddSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\AddSeriesService.cs,AddSeriesService,The method has 5 parameters. Parameters: seriesService' seriesInfo' fileNameBuilder' addSeriesValidator' logger
Long Parameter List,NzbDrone.Core.Tv,MoveSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\MoveSeriesService.cs,MoveSeriesService,The method has 6 parameters. Parameters: seriesService' filenameBuilder' diskProvider' diskTransferService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Tv,MoveSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\MoveSeriesService.cs,MoveSingleSeries,The method has 5 parameters. Parameters: series' sourcePath' destinationPath' index' total
Long Parameter List,NzbDrone.Core.Tv,RefreshSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,RefreshSeriesService,The method has 9 parameters. Parameters: seriesInfo' seriesService' refreshEpisodeService' eventAggregator' dailySeriesService' diskScanService' checkIfSeriesShouldBeRefreshed' configService' logger
Long Parameter List,NzbDrone.Core.Tv,SeriesScannedHandler,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\SeriesScannedHandler.cs,SeriesScannedHandler,The method has 5 parameters. Parameters: episodeMonitoredService' seriesService' commandQueueManager' episodeAddedService' logger
Long Parameter List,NzbDrone.Core.Tv,SeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\SeriesService.cs,SeriesService,The method has 5 parameters. Parameters: seriesRepository' eventAggregator' episodeService' seriesPathBuilder' logger
Long Parameter List,NzbDrone.Core.Update,InstallUpdateService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,InstallUpdateService,The method has 14 parameters. Parameters: checkUpdateService' appFolderInfo' diskProvider' diskTransferService' httpClient' archiveService' processProvider' updateVerifier' startupContext' deploymentInfoProvider' configFileProvider' runtimeInfo' backupService' logger
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,CutoffSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\CutoffSpecification.cs,CutoffSpecification,The length of the parameter preferredWordServiceCalculator is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,CutoffSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\CutoffSpecification.cs,,The length of the parameter _preferredWordServiceCalculator is 31.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,QueueSpecification,The length of the parameter preferredWordServiceCalculator is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,,The length of the parameter _preferredWordServiceCalculator is 31.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,UpgradeDiskSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradeDiskSpecification.cs,UpgradeDiskSpecification,The length of the parameter preferredWordServiceCalculator is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,UpgradeDiskSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradeDiskSpecification.cs,,The length of the parameter _preferredWordServiceCalculator is 31.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,HistorySpecification,The length of the parameter preferredWordServiceCalculator is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,,The length of the parameter _preferredWordServiceCalculator is 31.
Long Identifier,NzbDrone.Core.Download.Aggregation.Aggregators,AggregatePreferredWordScore,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Aggregation\Aggregators\AggregatePreferredWordScore.cs,AggregatePreferredWordScore,The length of the parameter preferredWordServiceCalculator is 30.
Long Identifier,NzbDrone.Core.Download.Aggregation.Aggregators,AggregatePreferredWordScore,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Aggregation\Aggregators\AggregatePreferredWordScore.cs,,The length of the parameter _preferredWordServiceCalculator is 31.
Long Identifier,NzbDrone.Core.Download,CompletedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,CompletedDownloadService,The length of the parameter downloadedEpisodesImportService is 31.
Long Identifier,NzbDrone.Core.Download,CompletedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,,The length of the parameter _downloadedEpisodesImportService is 32.
Long Identifier,NzbDrone.Core.Download.Clients.Vuze,Vuze,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Vuze\Vuze.cs,,The length of the parameter MINIMUM_SUPPORTED_PROTOCOL_VERSION is 34.
Long Identifier,NzbDrone.Core.Extras.Subtitles,SubtitleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Subtitles\SubtitleService.cs,MoveFilesAfterRename,The length of the parameter groupedExtraFilesForEpisodeFile is 31.
Long Identifier,NzbDrone.Core.Housekeeping.Housekeepers,FixFutureDownloadClientStatusTimes,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\FixFutureDownloadClientStatusTimes.cs,FixFutureDownloadClientStatusTimes,The length of the parameter downloadClientStatusRepository is 30.
Long Identifier,NzbDrone.Core.MediaFiles,DownloadedEpisodesCommandService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesCommandService.cs,DownloadedEpisodesCommandService,The length of the parameter downloadedEpisodesImportService is 31.
Long Identifier,NzbDrone.Core.MediaFiles,DownloadedEpisodesCommandService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesCommandService.cs,,The length of the parameter _downloadedEpisodesImportService is 32.
Long Identifier,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ManualImportService,The length of the parameter downloadedEpisodesImportService is 31.
Long Identifier,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,,The length of the parameter _downloadedEpisodesImportService is 32.
Long Identifier,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,,The length of the parameter MINIMUM_MEDIA_INFO_SCHEMA_REVISION is 34.
Long Identifier,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,,The length of the parameter CURRENT_MEDIA_INFO_SCHEMA_REVISION is 34.
Long Identifier,NzbDrone.Core.Notifications,NotificationBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\NotificationBase.cs,,The length of the parameter EPISODE_DOWNLOADED_TITLE_BRANDED is 32.
Long Identifier,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,,The length of the parameter _requiresAbsoluteEpisodeNumberCache is 35.
Long Identifier,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,,The length of the parameter MediaInfoVideoDynamicRangeToken is 31.
Long Identifier,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,,The length of the parameter MinimumMediaInfoSchemaRevisions is 31.
Long Identifier,NzbDrone.Core.Tv,RefreshSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,RefreshSeriesService,The length of the parameter checkIfSeriesShouldBeRefreshed is 30.
Long Identifier,NzbDrone.Core.Tv,RefreshSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,,The length of the parameter _checkIfSeriesShouldBeRefreshed is 31.
Long Statement,NzbDrone.Core.Backup,MakeDatabaseBackup,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Backup\MakeDatabaseBackup.cs,BackupDatabase,The length of the statement  "            backupConnectionStringBuilder.DataSource = Path.Combine(targetDirectory' Path.GetFileName(backupConnectionStringBuilder.DataSource)); " is 133.
Long Statement,NzbDrone.Core.Backup,MakeDatabaseBackup,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Backup\MakeDatabaseBackup.cs,BackupDatabase,The length of the statement  "            // We MUST use journal mode instead of WAL coz WAL has issues when page sizes change. This should also automatically deal with the -journal and -wal files during restore. " is 170.
Long Statement,NzbDrone.Core.Configuration,ConfigFileProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Configuration\ConfigFileProvider.cs,SaveConfigDictionary,The length of the statement  "                if (configValue.Key.Equals("SslCertHash"' StringComparison.InvariantCultureIgnoreCase) && configValue.Value.ToString().IsNotNullOrWhiteSpace()) " is 143.
Long Statement,NzbDrone.Core.Configuration,ConfigFileProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Configuration\ConfigFileProvider.cs,LoadConfigFile,The length of the statement  "                            throw new InvalidConfigFileException($"{_configFile} is empty. Please delete the config file and Sonarr will recreate it."); " is 124.
Long Statement,NzbDrone.Core.Configuration,ConfigFileProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Configuration\ConfigFileProvider.cs,LoadConfigFile,The length of the statement  "                            throw new InvalidConfigFileException($"{_configFile} is corrupt. Please delete the config file and Sonarr will recreate it."); " is 126.
Long Statement,NzbDrone.Core.Configuration,ConfigFileProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Configuration\ConfigFileProvider.cs,LoadConfigFile,The length of the statement  "                throw new InvalidConfigFileException($"{_configFile} is corrupt is invalid. Please delete the config file and Sonarr will recreate it."' ex); " is 141.
Long Statement,NzbDrone.Core.DataAugmentation.Scene,InvalidSceneMappingException,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Scene\InvalidSceneMappingException.cs,FormatMessage,The length of the statement  "            return string.Format("Scene Mappings contains a conflict for tvdbids {0}. Please notify Sonarr developers. ({1})"' string.Join("'"' mappings.Select(v => v.TvdbId.ToString()))' releaseTitle); " is 190.
Long Statement,NzbDrone.Core.DataAugmentation.Xem,XemService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,PerformUpdate,The length of the statement  "                    _logger.Debug("Setting scene numbering mappings for {0} S{1:00}E{2:00}"' series' mapping.Tvdb.Season' mapping.Tvdb.Episode); " is 124.
Long Statement,NzbDrone.Core.DataAugmentation.Xem,XemService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,PerformUpdate,The length of the statement  "                    var episode = episodes.SingleOrDefault(e => e.SeasonNumber == mapping.Tvdb.Season && e.EpisodeNumber == mapping.Tvdb.Episode); " is 126.
Long Statement,NzbDrone.Core.DataAugmentation.Xem,XemService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,PerformUpdate,The length of the statement  "                        _logger.Debug("Mapping for {0} S{1:00}E{2:00} is invalid' skipping"' series' mapping.Tvdb.Season' mapping.Tvdb.Episode); " is 120.
Long Statement,NzbDrone.Core.DataAugmentation.Xem,XemService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,ExtrapolateMappings,The length of the statement  "                    var lastSceneSeasonMapping = mappings.Where(v => v.Scene.Season == lastEpisodeMapping.Scene.Season).OrderBy(v => v.Scene.Episode).Last(); " is 137.
Long Statement,NzbDrone.Core.Datastore,DbFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\DbFactory.cs,CreateMain,The length of the statement  "                    throw new CorruptDatabaseException("Database file: {0} is corrupt' restore from backup if available. See: https://github.com/Sonarr/Sonarr/wiki/FAQ#i-use-sonarr-on-a-mac-and-it-suddenly-stopped-working-what-happened"' e' fileName); " is 231.
Long Statement,NzbDrone.Core.Datastore,DbFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\DbFactory.cs,CreateMain,The length of the statement  "                throw new CorruptDatabaseException("Database file: {0} is corrupt' restore from backup if available. See: https://github.com/Sonarr/Sonarr/wiki/FAQ#i-am-getting-an-error-database-disk-image-is-malformed"' e' fileName); " is 218.
Long Statement,NzbDrone.Core.Datastore,TableMapping,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\TableMapping.cs,RegisterMappers,The length of the statement  "            MapRepository.Instance.RegisterTypeConverter(typeof(List<QualityProfileQualityItem>)' new EmbeddedDocumentConverter(new QualityIntConverter())); " is 144.
Long Statement,NzbDrone.Core.Datastore,TableMapping,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\TableMapping.cs,RegisterMappers,The length of the statement  "            MapRepository.Instance.RegisterTypeConverter(typeof(QualityModel)' new EmbeddedDocumentConverter(new QualityIntConverter())); " is 125.
Long Statement,NzbDrone.Core.Datastore,TableMapping,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\TableMapping.cs,RegisterMappers,The length of the statement  "            MapRepository.Instance.RegisterTypeConverter(typeof(List<LanguageProfileItem>)' new EmbeddedDocumentConverter(new LanguageIntConverter())); " is 139.
Long Statement,NzbDrone.Core.Datastore.Converters,BooleanIntConverter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Converters\BooleanIntConverter.cs,FromDB,The length of the statement  "                    throw new ConversionException(string.Format("The BooleanCharConverter could not convert the value '{0}' to a Boolean."' context.DbValue)); " is 138.
Long Statement,NzbDrone.Core.Datastore.Extensions,MappingExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Extensions\MappingExtensions.cs,IsMappableProperty,The length of the statement  "            if (propertyInfo.PropertyType.IsSimpleType() || MapRepository.Instance.TypeConverters.ContainsKey(propertyInfo.PropertyType)) " is 125.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_indexers,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\023_add_config_contract_to_indexers.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Indexers").Set(new { ConfigContract = "OmgwtfnzbsSettings" }).Where(new { Implementation = "Omgwtfnzbs" }); " is 121.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_notifications,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\026_add_config_contract_to_notifications.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Notifications").Set(new { ConfigContract = "NotifyMyAndroidSettings" }).Where(new { Implementation = "NotifyMyAndroid" }); " is 136.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_notifications,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\026_add_config_contract_to_notifications.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Notifications").Set(new { ConfigContract = "PlexClientSettings" }).Where(new { Implementation = "PlexClient" }); " is 126.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_notifications,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\026_add_config_contract_to_notifications.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Notifications").Set(new { ConfigContract = "PlexServerSettings" }).Where(new { Implementation = "PlexServer" }); " is 126.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_notifications,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\026_add_config_contract_to_notifications.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Notifications").Set(new { ConfigContract = "PushBulletSettings" }).Where(new { Implementation = "PushBullet" }); " is 126.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_notifications,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\026_add_config_contract_to_notifications.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Notifications").Set(new { ConfigContract = "PushoverSettings" }).Where(new { Implementation = "Pushover" }); " is 122.
Long Statement,NzbDrone.Core.Datastore.Migration,update_with_quality_converters,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\036_update_with_quality_converters.cs,ConvertQualityProfiles,The length of the statement  "                        var items = Quality.DefaultQualityDefinitions.OrderBy(v => v.Weight).Select(v => new QualityProfileQualityItem { Quality = v.Quality' Allowed = allowed.Contains(v.Quality) }).ToList(); " is 184.
Long Statement,NzbDrone.Core.Datastore.Migration,add_configurable_qualities,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\037_add_configurable_qualities.cs,ConvertQualities,The length of the statement  "                            updateCmd.CommandText = "INSERT INTO QualityDefinitions (Quality' Title' Weight' MinSize' MaxSize) VALUES (?' ?' ?' ?' ?)"; " is 123.
Long Statement,NzbDrone.Core.Datastore.Migration,convert_config_to_download_clients,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\043_convert_config_to_download_clients.cs,AddDownloadClient,The length of the statement  "                var text = string.Format("INSERT INTO DownloadClients (Enable' Name' Implementation' Settings' ConfigContract' Protocol) VALUES (1' ?' ?' ?' ?' ?)"); " is 149.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,ConvertFolderSettings,The length of the statement  "                downloadClientsCmd.CommandText = @"SELECT Id' Implementation' Settings' ConfigContract FROM DownloadClients WHERE ConfigContract = 'FolderSettings'"; " is 149.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "                historyCmd.CommandText = @"SELECT Id' EpisodeId' SeriesId' SourceTitle' Date' Data' EventType FROM History WHERE EventType NOT NULL"; " is 133.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "            var numHistoryItemsNotAssociated = historyItems.Count(v => v.EventType == MigrationHistoryEventType.DownloadFolderImported && " is 125.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "                    if (grabbedEvent.Data.GetValueOrDefault("downloadClient") == null || grabbedEvent.Data.GetValueOrDefault("downloadClientId") == null) continue; " is 143.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "                        if (list[j].Data.ContainsKey("downloadClient") && list[j].Data["downloadClient"] == grabbedEvent.Data["downloadClient"] && " is 122.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "                            list[j].Data.ContainsKey("downloadClientId") && list[j].Data["downloadClientId"] == grabbedEvent.Data["downloadClientId"]) " is 122.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "            _logger.Info("Updated old History items. {0}/{1} old ImportedEvents were associated with GrabbedEvents."' historyItemsToAssociate.Count' numHistoryItemsNotAssociated); " is 167.
Long Statement,NzbDrone.Core.Datastore.Migration,make_scene_numbering_nullable,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\065_make_scene_numbering_nullable.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Episodes SET SceneSeasonNumber = NULL' SceneEpisodeNumber = NULL WHERE SceneSeasonNumber = 0 AND SceneEpisodeNumber = 0"); " is 142.
Long Statement,NzbDrone.Core.Datastore.Migration,quality_proper,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\069_quality_proper.cs,ConvertQualityTitle,The length of the statement  "                namingConfigCmd.CommandText = @"SELECT StandardEpisodeFormat' DailyEpisodeFormat' AnimeEpisodeFormat FROM NamingConfig LIMIT 1"; " is 128.
Long Statement,NzbDrone.Core.Datastore.Migration,quality_proper,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\069_quality_proper.cs,ConvertQualityTitle,The length of the statement  "                            updateCmd.CommandText = "UPDATE NamingConfig SET StandardEpisodeFormat = ?' DailyEpisodeFormat = ?' AnimeEpisodeFormat = ?"; " is 124.
Long Statement,NzbDrone.Core.Datastore.Migration,delay_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\070_delay_profile.cs,ConvertProfile,The length of the statement  "                    insertDelayProfileCmd.CommandText = "INSERT INTO DelayProfiles (EnableUsenet' EnableTorrent' PreferredProtocol' TorrentDelay' UsenetDelay' [Order]' Tags) VALUES (1' 1' 1' 0' ?' ?' ?)"; " is 184.
Long Statement,NzbDrone.Core.Datastore.Migration,disable_eztv,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\074_disable_eztv.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET EnableRss = 0' EnableSearch = 0 WHERE Implementation = 'Eztv' AND Settings LIKE '%ezrss.it%'"); " is 128.
Long Statement,NzbDrone.Core.Datastore.Migration,add_fanzub_settings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\082_add_fanzub_settings.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET ConfigContract = 'FanzubSettings' WHERE Implementation = 'Fanzub' AND ConfigContract = 'NullConfig'"); " is 135.
Long Statement,NzbDrone.Core.Datastore.Migration,add_on_rename_to_notifcations,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\089_add_on_rename_to_notifcations.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Notifications SET OnRename = OnDownload WHERE Implementation IN ('PlexServer'' 'Xbmc'' 'MediaBrowser')"); " is 125.
Long Statement,NzbDrone.Core.Datastore.Migration,add_on_rename_to_notifcations,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\089_add_on_rename_to_notifcations.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Notifications SET OnRename = 0 WHERE Implementation NOT IN ('PlexServer'' 'Xbmc'' 'MediaBrowser')"); " is 120.
Long Statement,NzbDrone.Core.Datastore.Migration,disable_kickass,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\096_disable_kickass.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET EnableRss = 0' EnableSearch = 0' Settings = Replace(Settings' 'https://kat.cr'' '') WHERE Implementation = 'KickassTorrents' AND Settings LIKE '%kat.cr%';"); " is 190.
Long Statement,NzbDrone.Core.Datastore.Migration,rename_torrent_downloadstation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\105_rename_torrent_downloadstation.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE DownloadClients SET Implementation = 'TorrentDownloadStation' WHERE Implementation = 'DownloadStation';"); " is 126.
Long Statement,NzbDrone.Core.Datastore.Migration,update_btn_url,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\106_update_btn_url.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET Settings = Replace(Settings' 'api.btnapps.net'' 'api.broadcasthe.net') WHERE Implementation = 'BroadcastheNet';"); " is 147.
Long Statement,NzbDrone.Core.Datastore.Migration,create_language_profiles,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\111_create_language_profiles.cs,InsertDefaultLanguages,The length of the statement  "                    insertNewLanguageProfileCmd.CommandText = "INSERT INTO LanguageProfiles (Id' Name' Cutoff' Languages) VALUES (?' ?' ?' ?)"; " is 123.
Long Statement,NzbDrone.Core.Datastore.Migration,create_language_profiles,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\111_create_language_profiles.cs,GetDefaultLanguageProfiles,The length of the statement  "            var languages = GetOrderedLanguages().Select(v => new LanguageProfileItem111 { Language = v' Allowed = v == Language.English }) " is 127.
Long Statement,NzbDrone.Core.Datastore.Migration,consolidate_indexer_baseurl,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\113_consolidate_indexer_baseurl.cs,RenameUrlToBaseUrl,The length of the statement  "                cmd.CommandText = "SELECT Id' Settings FROM Indexers WHERE ConfigContract IN ('NewznabSettings'' 'TorznabSettings'' 'IPTorrentsSettings'' 'OmgwtfnzbsSettings')"; " is 161.
Long Statement,NzbDrone.Core.Datastore.Migration,disable_nyaa,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\116_disable_nyaa.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET EnableRss = 0' EnableSearch = 0' Settings = Replace(Settings' 'https://nyaa.se'' '') WHERE Implementation = 'Nyaa' AND Settings LIKE '%nyaa.se%';"); " is 181.
Long Statement,NzbDrone.Core.Datastore.Migration,update_animetosho_url,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\121_update_animetosho_url.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET Settings = Replace(Replace(Settings' '//animetosho.org'' '//feed.animetosho.org')' '/feed/nabapi'' '/nabapi') WHERE (Implementation = 'Newznab' OR Implementation = 'Torznab') AND Settings LIKE '%animetosho%';"); " is 244.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,Process,The length of the statement  "                throw new ApplicationException(string.Format("Column {0} does not exist on table {1}."' expression.Column.Name' expression.TableName)); " is 135.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,Process,The length of the statement  "                throw new ApplicationException(string.Format("Column {0} does not exist on table {1}."' columnsToRemove.First()' expression.TableName)); " is 136.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,Process,The length of the statement  "                throw new ApplicationException(string.Format("Column {0} does not exist on table {1}."' expression.OldName' expression.TableName)); " is 131.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,Process,The length of the statement  "                throw new ApplicationException(string.Format("Column {0} already exists on table {1}."' expression.NewName' expression.TableName)); " is 131.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,Process,The length of the statement  "                    index.Name = Regex.Replace(index.Name' "(?<=_)" + Regex.Escape(expression.OldName) + "(?=_|$)"' Regex.Escape(expression.NewName)); " is 130.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,ProcessAlterTable,The length of the statement  "            var columnsToFetch = string.Join("' "' (oldColumnDefinitions ?? tableDefinition.Columns).Select(c => quoter.QuoteColumnName(c.Name))); " is 134.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,ProcessAlterTable,The length of the statement  "            Process(string.Format("INSERT INTO {0} ({1}) SELECT {2} FROM {3}"' quoter.QuoteTableName(tempTableName)' columnsToInsert' columnsToFetch' quoter.QuoteTableName(tableName))); " is 173.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,SqliteSchemaDumper,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSchemaDumper.cs,ReadTables,The length of the statement  "            const string sqlCommand = @"SELECT name' sql FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%' ORDER BY name;"; " is 128.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,SqliteSchemaDumper,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSchemaDumper.cs,ReadIndexes,The length of the statement  "            var sqlCommand = string.Format(@"SELECT type' name' sql FROM sqlite_master WHERE tbl_name = '{0}' AND type = 'index' AND name NOT LIKE 'sqlite_auto%';"' tableName); " is 164.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,SqliteSyntaxReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSyntaxReader.cs,Read,The length of the statement  "                while (end < Buffer.Length && (char.IsLetter(Buffer[end]) || char.IsNumber(Buffer[end]) || Buffer[end] == '_' || Buffer[end] == '(')) end++; " is 140.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,SqliteSyntaxReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSyntaxReader.cs,CreateSyntaxException,The length of the statement  "            return new SyntaxErrorException(string.Format("{0}. Syntax Error near: {1}"' string.Format(message' args)' Buffer.Substring(_previousIndex))); " is 142.
Long Statement,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareQuality,The length of the statement  "                return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode => remoteEpisode.Series.QualityProfile.Value.GetIndex(remoteEpisode.ParsedEpisodeInfo.Quality.Quality)); " is 169.
Long Statement,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareQuality,The length of the statement  "                CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode => remoteEpisode.Series.QualityProfile.Value.GetIndex(remoteEpisode.ParsedEpisodeInfo.Quality.Quality))' " is 162.
Long Statement,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareLanguage,The length of the statement  "            return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode => remoteEpisode.Series.LanguageProfile.Value.Languages.FindIndex(l => l.Language == remoteEpisode.ParsedEpisodeInfo.Language)); " is 193.
Long Statement,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareEpisodeNumber,The length of the statement  "            return CompareByReverse(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode => remoteEpisode.Episodes.Select(e => e.EpisodeNumber).MinOrDefault()); " is 143.
Long Statement,NzbDrone.Core.DecisionEngine,DownloadDecisionMaker,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionMaker.cs,GetDecisions,The length of the statement  "                        var specialEpisodeInfo = _parsingService.ParseSpecialEpisodeTitle(parsedEpisodeInfo' report.Title' report.TvdbId' report.TvRageId' searchCriteria); " is 147.
Long Statement,NzbDrone.Core.DecisionEngine,DownloadDecisionPriorizationService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionPriorizationService.cs,PrioritizeDecisions,The length of the statement  "                                    return downloadDecisions.OrderByDescending(decision => decision' new DownloadDecisionComparer(_configService' _delayProfileService)); " is 133.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    var runtimeMessage = subject.Episodes.Count == 1 ? $"{subject.Series.Runtime}min" : $"{subject.Episodes.Count}x {subject.Series.Runtime}min"; " is 141.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    _logger.Debug("Item: {0}' Size: {1} is smaller than minimum allowed size ({2} bytes for {3})' rejecting."' subject' subject.Release.Size' minSize' runtimeMessage); " is 163.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("{0} is smaller than minimum allowed {1} (for {2})"' subject.Release.Size.SizeSuffix()' minSize.SizeSuffix()' runtimeMessage); " is 149.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    if (seasonSearchCriteria != null && !seasonSearchCriteria.Series.UseSceneNumbering && seasonSearchCriteria.Episodes.Any(v => v.Id == episode.Id)) " is 145.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    if (seasonEpisodes.First().Id == episode.Id || (seasonEpisodes.Count() >= 10 && seasonEpisodes.Last().Id == episode.Id)) " is 120.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    var runtimeMessage = subject.Episodes.Count == 1 ? $"{subject.Series.Runtime}min" : $"{subject.Episodes.Count}x {subject.Series.Runtime}min"; " is 141.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    _logger.Debug("Item: {0}' Size: {1} is greater than maximum allowed size ({2} for {3})' rejecting"' subject' subject.Release.Size' maxSize' runtimeMessage); " is 156.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("{0} is larger than maximum allowed {1} (for {2})"' subject.Release.Size.SizeSuffix()' maxSize.SizeSuffix()' runtimeMessage); " is 148.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,BlockedIndexerSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\BlockedIndexerSpecification.cs,IsSatisfiedBy,The length of the statement  "                return Decision.Reject($"Indexer {subject.Release.Indexer} is blocked till {status.DisabledTill} due to failures' cannot grab release."); " is 137.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,CutoffSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\CutoffSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Comparing file quality and language with report. Existing file is {0} - {1}"' file.Quality' file.Language); " is 122.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,LanguageSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\LanguageSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Report Language: {0} rejected because it is not wanted in profile {1}"' _language' subject.Series.LanguageProfile.Value.Name); " is 141.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Checking if existing release in queue meets cutoff. Queued: {0} - {1}"' remoteEpisode.ParsedEpisodeInfo.Quality' remoteEpisode.ParsedEpisodeInfo.Language); " is 170.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("Release in queue already meets cutoff: {0} - {1}"' remoteEpisode.ParsedEpisodeInfo.Quality' remoteEpisode.ParsedEpisodeInfo.Language); " is 158.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Checking if release is higher quality than queued release. Queued: {0} - {1}"' remoteEpisode.ParsedEpisodeInfo.Quality' remoteEpisode.ParsedEpisodeInfo.Language); " is 177.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("Release in queue is of equal or higher preference: {0} - {1}"' remoteEpisode.ParsedEpisodeInfo.Quality' remoteEpisode.ParsedEpisodeInfo.Language); " is 170.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Checking if profiles allow upgrading. Queued: {0} - {1}"' remoteEpisode.ParsedEpisodeInfo.Quality' remoteEpisode.ParsedEpisodeInfo.Language); " is 156.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,UpgradeAllowedSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradeAllowedSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Comparing file quality and language with report. Existing file is {0} - {1}"' file.Quality' file.Language); " is 122.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,UpgradeDiskSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradeDiskSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Comparing file quality and language with report. Existing file is {0} - {1}"' file.Quality' file.Language); " is 122.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,UpgradeDiskSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradeDiskSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("Existing file on disk is of equal or higher preference: {0} - {1}"' file.Quality' file.Language); " is 121.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DelaySpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DelaySpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("QualityProfile does not require a waiting period before download for {0}."' subject.Release.DownloadProtocol); " is 125.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DelaySpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DelaySpecification.cs,IsSatisfiedBy,The length of the statement  "            var isBestInProfileLanguage = languageComparer.Compare(subject.ParsedEpisodeInfo.Language' languageProfile.LastAllowedLanguage()) >= 0; " is 135.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DelaySpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DelaySpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Waiting for better quality release' There is a {0} minute delay on {1}"' delay' subject.Release.DownloadProtocol); " is 129.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DeletedEpisodeFileSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DeletedEpisodeFileSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Files for this episode exist in the database but not on disk' will be unmonitored on next diskscan. skipping."); " is 127.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,IsSatisfiedBy,The length of the statement  "                        return Decision.Reject("CDH is disabled and grab event in history is of equal or higher quality: {0}"' mostRecent.Quality); " is 123.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.Search,EpisodeRequestedSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\Search\EpisodeRequestedSpecification.cs,IsSatisfiedBy,The length of the statement  "                        return Decision.Reject($"Episode wasn't requested: {episodes.First().SeasonNumber}x{episodes.First().EpisodeNumber}-{episodes.Last().EpisodeNumber}"); " is 150.
Long Statement,NzbDrone.Core.Download.Aggregation.Aggregators,AggregatePreferredWordScore,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Aggregation\Aggregators\AggregatePreferredWordScore.cs,Aggregate,The length of the statement  "            remoteEpisode.PreferredWordScore = _preferredWordServiceCalculator.Calculate(remoteEpisode.Series' remoteEpisode.Release.Title); " is 128.
Long Statement,NzbDrone.Core.Download,CompletedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,Import,The length of the statement  "            var importResults = _downloadedEpisodesImportService.ProcessPath(outputPath' ImportMode.Auto' trackedDownload.RemoteEpisode.Series' trackedDownload.DownloadItem); " is 162.
Long Statement,NzbDrone.Core.Download,CompletedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,Import,The length of the statement  "            if (importResults.Count(c => c.Result == ImportResultType.Imported) >= Math.Max(1' trackedDownload.RemoteEpisode.Episodes.Count)) " is 129.
Long Statement,NzbDrone.Core.Download,DownloadClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientBase.cs,DeleteItemData,The length of the statement  "                _logger.Warn(ex' string.Format("[{0}] Error occurred while trying to delete data from '{1}'."' item.Title' item.OutputPath)); " is 125.
Long Statement,NzbDrone.Core.Download,DownloadClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientBase.cs,TestFolder,The length of the statement  "                    DetailedDescription = string.Format("The folder you specified does not exist or is inaccessible. Please verify the folder permissions for the user account '{0}'' which is used to execute Sonarr."' Environment.UserName) " is 218.
Long Statement,NzbDrone.Core.Download,DownloadClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientBase.cs,TestFolder,The length of the statement  "                    DetailedDescription = string.Format("The folder you specified is not writable. Please verify the folder permissions for the user account '{0}'' which is used to execute Sonarr."' Environment.UserName) " is 200.
Long Statement,NzbDrone.Core.Download,DownloadClientFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientFactory.cs,FilterBlockedClients,The length of the statement  "                    _logger.Debug("Temporarily ignoring download client {0} till {1} due to recent failures."' client.Definition.Name' downloadClientStatus.DisabledTill.Value.ToLocalTime()); " is 170.
Long Statement,NzbDrone.Core.Download,DownloadClientProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientProvider.cs,GetDownloadClient,The length of the statement  "            var availableProviders = _downloadClientFactory.GetAvailableProviders().Where(v => v.Protocol == downloadProtocol).ToList(); " is 124.
Long Statement,NzbDrone.Core.Download,DownloadEventHub,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadEventHub.cs,Handle,The length of the statement  "            if (trackedDownload == null || !trackedDownload.DownloadItem.CanBeRemoved || _configService.RemoveFailedDownloads == false) " is 123.
Long Statement,NzbDrone.Core.Download,DownloadEventHub,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadEventHub.cs,RemoveFromDownloadClient,The length of the statement  "                _logger.Debug("[{0}] Removing download from {1} history"' trackedDownload.DownloadItem.Title' trackedDownload.DownloadItem.DownloadClient); " is 139.
Long Statement,NzbDrone.Core.Download,DownloadEventHub,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadEventHub.cs,MarkItemAsImported,The length of the statement  "                _logger.Debug("[{0}] Marking download as imported from {1}"' trackedDownload.DownloadItem.Title' trackedDownload.DownloadItem.DownloadClient); " is 142.
Long Statement,NzbDrone.Core.Download,DownloadEventHub,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadEventHub.cs,MarkItemAsImported,The length of the statement  "                _logger.Error(e' "Couldn't mark item {0} as imported from client {1}"' trackedDownload.DownloadItem.Title' downloadClient.Name); " is 128.
Long Statement,NzbDrone.Core.Download,DownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadService.cs,DownloadReport,The length of the statement  "                throw new DownloadClientUnavailableException($"{remoteEpisode.Release.DownloadProtocol} Download client isn't configured yet"); " is 127.
Long Statement,NzbDrone.Core.Download,DownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadService.cs,DownloadReport,The length of the statement  "            if (remoteEpisode.Release.DownloadUrl.IsNotNullOrWhiteSpace() && !remoteEpisode.Release.DownloadUrl.StartsWith("magnet:")) " is 122.
Long Statement,NzbDrone.Core.Download,NzbValidationService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\NzbValidationService.cs,Validate,The length of the statement  "            using (var xmlTextReader = XmlReader.Create(reader' new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore' IgnoreComments = true })) " is 139.
Long Statement,NzbDrone.Core.Download,NzbValidationService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\NzbValidationService.cs,Validate,The length of the statement  "                    throw new InvalidNzbException("Invalid NZB: Unexpected root element. Expected 'nzb' found '{0}' [{1}]"' nzb.Name.LocalName' filename); " is 134.
Long Statement,NzbDrone.Core.Download,TorrentClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,Download,The length of the statement  "            if (remoteEpisode.Release.DownloadUrl.IsNotNullOrWhiteSpace() && remoteEpisode.Release.DownloadUrl.StartsWith("magnet:")) " is 121.
Long Statement,NzbDrone.Core.Download,TorrentClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,Download,The length of the statement  "                        throw new ReleaseDownloadException(remoteEpisode.Release' "Magnet not supported by download client. ({0})"' ex.Message); " is 120.
Long Statement,NzbDrone.Core.Download,TorrentClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,Download,The length of the statement  "                            throw new ReleaseDownloadException(remoteEpisode.Release' "Magnet not supported by download client. ({0})"' ex.Message); " is 120.
Long Statement,NzbDrone.Core.Download,TorrentClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,DownloadFromWebUrl,The length of the statement  "                _logger.Debug("Downloading torrent for episode '{0}' finished ({1} bytes from {2})"' remoteEpisode.Release.Title' torrentFile.Length' torrentUrl); " is 146.
Long Statement,NzbDrone.Core.Download,TorrentClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,DownloadFromWebUrl,The length of the statement  "                    _logger.Error(ex' "Downloading torrent file for episode '{0}' failed since it no longer exists ({1})"' remoteEpisode.Release.Title' torrentUrl); " is 144.
Long Statement,NzbDrone.Core.Download,UsenetClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\UsenetClientBase.cs,Download,The length of the statement  "                _logger.Debug("Downloaded nzb for episode '{0}' finished ({1} bytes from {2})"' remoteEpisode.Release.Title' nzbData.Length' url); " is 130.
Long Statement,NzbDrone.Core.Download,UsenetClientBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\UsenetClientBase.cs,Download,The length of the statement  "                    _logger.Error(ex' "Downloading nzb file for episode '{0}' failed since it no longer exists ({1})"' remoteEpisode.Release.Title' url); " is 133.
Long Statement,NzbDrone.Core.Download.Clients.Blackhole,ScanWatchFolder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\ScanWatchFolder.cs,GetDownloadItems,The length of the statement  "            foreach (var videoFile in _diskScanService.FilterFiles(watchFolder' _diskScanService.GetVideoFiles(watchFolder' false))) " is 120.
Long Statement,NzbDrone.Core.Download.Clients.Deluge,Deluge,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,TestConnection,The length of the statement  "                            DetailedDescription = "Drone is unable to connect to Deluge using SSL. This problem could be computer related. Please try to configure both drone and Deluge to not use SSL." " is 173.
Long Statement,NzbDrone.Core.Download.Clients.Deluge,DelugeProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeProxy.cs,GetTorrents,The length of the statement  "            // TODO: get_torrents_status returns the files as well' which starts to cause deluge timeouts when you get enough season packs. " is 127.
Long Statement,NzbDrone.Core.Download.Clients.Deluge,DelugeProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeProxy.cs,GetTorrents,The length of the statement  "            //var response = ProcessRequest<Dictionary<String' DelugeTorrent>>(settings' "core.get_torrents_status"' filter' new String[0]); " is 128.
Long Statement,NzbDrone.Core.Download.Clients.Deluge,DelugeProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeProxy.cs,GetTorrentsByLabel,The length of the statement  "            //var response = ProcessRequest<Dictionary<String' DelugeTorrent>>(settings' "core.get_torrents_status"' filter' new String[0]); " is 128.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,SharedFolderResolver,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\SharedFolderResolver.cs,GetPhysicalPath,The length of the statement  "                _logger.Warn(ex' "Failed to get shared folder {0} from Disk Station {1}:{2}"' sharedFolder' settings.Host' settings.Port); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,SharedFolderResolver,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\SharedFolderResolver.cs,RemapToFullPath,The length of the statement  "            var mapping = _cache.Get($"{serialNumber}:{sharedFolder}"' () => GetPhysicalPath(sharedFolder' settings)' TimeSpan.FromHours(1)); " is 129.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,IsCompleted,The length of the statement  "            return torrent.Status == DownloadStationTaskStatus.Seeding || IsFinished(torrent) ||  (torrent.Status == DownloadStationTaskStatus.Waiting && torrent.Size != 0 && GetRemainingSize(torrent) <= 0); " is 195.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TestOutputPath,The length of the statement  "                        DetailedDescription = $"You must login into your Diskstation as {Settings.Username} and manually set it up into DownloadStation settings under BT/HTTP/FTP/NZB -> Location." " is 172.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TestOutputPath,The length of the statement  "                    var fieldName = Settings.TvDirectory.IsNotNullOrWhiteSpace() ? nameof(Settings.TvDirectory) : nameof(Settings.TvCategory); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TestOutputPath,The length of the statement  "                            DetailedDescription = $"The Diskstation does not have a Shared Folder with the name '{sharedFolder}'' are you sure you specified it correctly?" " is 143.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TestOutputPath,The length of the statement  "                            DetailedDescription = $"The folder '{downloadDir}' does not exist' it must be created manually inside the Shared Folder '{sharedFolder}'." " is 138.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TestConnection,The length of the statement  "                    DetailedDescription = $"Please verify your username and password. Also verify if the host running Sonarr isn't blocked from accessing {Name} by WhiteList limitations in the {Name} configuration." " is 195.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,ValidateVersion,The length of the statement  "                return new ValidationFailure(string.Empty' $"Download Station API version not supported' should be at least 2. It supports from {info.MinVersion} to {info.MaxVersion}"); " is 169.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,GetTasks,The length of the statement  "            return _dsTaskProxy.GetTasks(Settings).Where(v => v.Type.ToLower() == DownloadStationTaskType.NZB.ToString().ToLower()); " is 120.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,TestOutputPath,The length of the statement  "                        DetailedDescription = $"You must login into your Diskstation as {Settings.Username} and manually set it up into DownloadStation settings under BT/HTTP/FTP/NZB -> Location." " is 172.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,TestOutputPath,The length of the statement  "                    var fieldName = Settings.TvDirectory.IsNotNullOrWhiteSpace() ? nameof(Settings.TvDirectory) : nameof(Settings.TvCategory); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,TestOutputPath,The length of the statement  "                            DetailedDescription = $"The Diskstation does not have a Shared Folder with the name '{sharedFolder}'' are you sure you specified it correctly?" " is 143.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,TestOutputPath,The length of the statement  "                            DetailedDescription = $"The folder '{downloadDir}' does not exist' it must be created manually inside the Shared Folder '{sharedFolder}'." " is 138.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,TestConnection,The length of the statement  "                    DetailedDescription = $"Please verify your username and password. Also verify if the host running Sonarr isn't blocked from accessing {Name} by WhiteList limitations in the {Name} configuration." " is 195.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,ValidateVersion,The length of the statement  "                return new ValidationFailure(string.Empty' $"Download Station API version not supported' should be at least 2. It supports from {info.MinVersion} to {info.MaxVersion}"); " is 169.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The length of the statement  "            var requestBuilder = new HttpRequestBuilder(settings.UseSsl' settings.Host' settings.Port).Resource($"webapi/{apiInfo.Path}"); " is 126.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The length of the statement  "                    requestBuilder.AddFormParameter("_sid"' _sessionCache.Get(GenerateSessionCacheKey(settings)' () => AuthenticateClient(settings)' TimeSpan.FromHours(6))); " is 153.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The length of the statement  "                    requestBuilder.AddQueryParam("_sid"' _sessionCache.Get(GenerateSessionCacheKey(settings)' () => AuthenticateClient(settings)' TimeSpan.FromHours(6))); " is 150.
Long Statement,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,AddTorrentFile,The length of the statement  "            return ProcessRequest<string>(settings' "webui.addTorrent"' "file"' Convert.ToBase64String(fileContent)' new { label = settings.Category }); " is 140.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,AddFromNzbFile,The length of the statement  "                throw new DownloadClientRejectedReleaseException(remoteEpisode.Release' "NZBGet rejected the NZB for an unknown reason"); " is 121.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,GetQueue,The length of the statement  "                        queueItem.RemainingTime = TimeSpan.FromSeconds((totalRemainingSize + queueItem.RemainingSize) / globalStatus.DownloadRate); " is 123.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,GetHistory,The length of the statement  "                historyItem.Message = $"PAR Status: {item.ParStatus} - Unpack Status: {item.UnpackStatus} - Move Status: {item.MoveStatus} - Script Status: {item.ScriptStatus} - Delete Status: {item.DeleteStatus} - Mark Status: {item.MarkStatus}"; " is 231.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,GetStatus,The length of the statement  "                status.OutputRootFolders = new List<OsPath> { _remotePathMappingService.RemapRemoteToLocal(Settings.Host' new OsPath(category.DestDir)) }; " is 138.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzb,The length of the statement  "                var response = ProcessRequest<int>(settings' "append"' title' nzbData' category' priority' false' addpaused' string.Empty' 0' "all"' new string[] { "drone"' droneId }); " is 168.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzbLegacy13,The length of the statement  "            var response = ProcessRequest<int>(settings' "append"' title' nzbData' category' priority' false' false' string.Empty' 0' "all"); " is 129.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,RetryDownload,The length of the statement  "            var item = history.SingleOrDefault(h => h.Parameters.SingleOrDefault(p => p.Name == "drone" && id == (p.Value as string)) != null); " is 131.
Long Statement,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,GetOutputPath,The length of the statement  "            var outputPath = _remotePathMappingService.RemapRemoteToLocal(Settings.Host' new OsPath(vortexQueueItem.DestinationPath)); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortexProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortexProxy.cs,Remove,The length of the statement  "            var requestBuilder = BuildRequest(settings).Resource(string.Format("nzb/{0}/{1}"' id' deleteData ? "cancelDelete" : "cancel")); " is 127.
Long Statement,NzbDrone.Core.Download.Clients.Pneumatic,Pneumatic,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Pneumatic\Pneumatic.cs,WriteStrmFile,The length of the statement  "            var contents = string.Format("plugin://plugin.program.pneumatic/?mode=strm&type=add_file&nzb={0}&nzbname={1}"' nzbFile' title); " is 127.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,AddFromMagnetLink,The length of the statement  "            if (remoteEpisode.SeedConfiguration != null && (remoteEpisode.SeedConfiguration.Ratio.HasValue || remoteEpisode.SeedConfiguration.SeedTime.HasValue)) " is 149.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,AddFromTorrentFile,The length of the statement  "            if (remoteEpisode.SeedConfiguration != null && (remoteEpisode.SeedConfiguration.Ratio.HasValue || remoteEpisode.SeedConfiguration.SeedTime.HasValue)) " is 149.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,GetItems,The length of the statement  "                // Removal also requires the torrent to be paused' in case a higher max ratio was set on the torrent itself (which is not exposed by the api). " is 142.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestConnection,The length of the statement  "                            DetailedDescription = "Labels are not supported until qBittorrent version 3.3.0. Please upgrade or try again with an empty Category." " is 133.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestConnection,The length of the statement  "                    return new NzbDroneValidationFailure(String.Empty' "qBittorrent is configured to remove torrents when they reach their Share Ratio Limit") " is 138.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestConnection,The length of the statement  "                        DetailedDescription = "Sonarr will be unable to perform Completed Download Handling as configured. You can fix this in qBittorrent ('Tools -> Options...' in the menu) by changing 'Options -> BitTorrent -> Share Ratio Limiting' from 'Remove them' to 'Pause them'." " is 263.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestPrioritySupport,The length of the statement  "                        return new NzbDroneValidationFailure(nameof(Settings.RecentTvPriority)' "Queueing not enabled") { DetailedDescription = "Torrent Queueing is not enabled in your qBittorrent settings. Enable it in qBittorrent or select 'Last' as priority." }; " is 241.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestPrioritySupport,The length of the statement  "                        return new NzbDroneValidationFailure(nameof(Settings.OlderTvPriority)' "Queueing not enabled") { DetailedDescription = "Torrent Queueing is not enabled in your qBittorrent settings. Enable it in qBittorrent or select 'Last' as priority." }; " is 240.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxyV1,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxyV1.cs,IsApiSupported,The length of the statement  "                    throw new DownloadClientException("Failed to connect to qBittorrent' check your settings."' new HttpException(response)); " is 121.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxyV1,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxyV1.cs,SetTorrentLabel,The length of the statement  "                if (ex.InnerException is HttpException && (ex.InnerException as HttpException).Response.StatusCode == HttpStatusCode.NotFound) " is 126.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxyV1,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxyV1.cs,MoveTorrentToTopInQueue,The length of the statement  "                // qBittorrent rejects all Prio commands with 403: Forbidden if Options -> BitTorrent -> Torrent Queueing is not enabled " is 120.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxyV1,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxyV1.cs,MoveTorrentToTopInQueue,The length of the statement  "                if (ex.InnerException is HttpException && (ex.InnerException as HttpException).Response.StatusCode == HttpStatusCode.Forbidden) " is 127.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxyV2,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxyV2.cs,IsApiSupported,The length of the statement  "                    throw new DownloadClientException("Failed to connect to qBittorrent' check your settings."' new HttpException(response)); " is 121.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxyV2,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxyV2.cs,SetTorrentSeedingConfiguration,The length of the statement  "                if (ex.InnerException is HttpException && (ex.InnerException as HttpException).Response.StatusCode == HttpStatusCode.NotFound) " is 126.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxyV2,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxyV2.cs,MoveTorrentToTopInQueue,The length of the statement  "                if (ex.InnerException is HttpException && (ex.InnerException as HttpException).Response.StatusCode == HttpStatusCode.Conflict) " is 126.
Long Statement,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromMagnetLink,The length of the statement  "            var priority = (RTorrentPriority)(remoteEpisode.IsRecentEpisode() ? Settings.RecentTvPriority : Settings.OlderTvPriority); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromMagnetLink,The length of the statement  "                _logger.Warn("rTorrent could not resolve magnet within {0} seconds' download may remain stuck: {1}."' tries * retryDelay / 1000' magnetLink); " is 141.
Long Statement,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromTorrentFile,The length of the statement  "            var priority = (RTorrentPriority)(remoteEpisode.IsRecentEpisode() ? Settings.RecentTvPriority : Settings.OlderTvPriority); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,GetItems,The length of the statement  "                    throw new DownloadClientException("Download paths must be absolute. Please specify variable \"directory\" in rTorrent."); " is 121.
Long Statement,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,TestConnection,The length of the statement  "                    return new ValidationFailure(string.Empty' "rTorrent version should be at least 0.9.0. Version reported is {0}"' version); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,AddFromNzbFile,The length of the statement  "                throw new DownloadClientRejectedReleaseException(remoteEpisode.Release' "SABnzbd rejected the NZB for an unknown reason"); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetHistory,The length of the statement  "                        sabHistoryItem.FailMessage.Equals("Unpacking failed' write error or disk is full?"' StringComparison.InvariantCultureIgnoreCase)) " is 129.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetItems,The length of the statement  "                if (downloadClientItem.Category == Settings.TvCategory || downloadClientItem.Category == "*" && Settings.TvCategory.IsNullOrWhiteSpace()) " is 137.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetStatus,The length of the statement  "                status.OutputRootFolders = new List<OsPath> { _remotePathMappingService.RemapRemoteToLocal(Settings.Host' category.FullPath) }; " is 127.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestGlobalConfig,The length of the statement  "                    DetailedDescription = "Using Check before download affects Sonarr ability to track new downloads. Also Sabnzbd recommends 'Abort jobs that cannot be completed' instead since it's more effective." " is 195.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestCategory,The length of the statement  "                        DetailedDescription = "Sonarr prefers each download to have a separate folder. With * appended to the Folder/Path Sabnzbd will not create these job folders. Go to Sabnzbd to fix it." " is 182.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestCategory,The length of the statement  "                    DetailedDescription = "You must disable Sabnzbd TV Sorting for the category Sonarr uses to prevent import issues. Go to Sabnzbd to fix it." " is 139.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestCategory,The length of the statement  "                    DetailedDescription = "You must disable Sabnzbd Movie Sorting for the category Sonarr uses to prevent import issues. Go to Sabnzbd to fix it." " is 142.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestCategory,The length of the statement  "                    DetailedDescription = "You must disable Sabnzbd Date Sorting for the category Sonarr uses to prevent import issues. Go to Sabnzbd to fix it." " is 141.
Long Statement,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,GetStatus,The length of the statement  "                OutputRootFolders = new List<OsPath> { _remotePathMappingService.RemapRemoteToLocal(Settings.Host' new OsPath(destDir)) } " is 121.
Long Statement,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,TestConnection,The length of the statement  "                    DetailedDescription = string.Format("Please verify your username and password. Also verify if the host running Sonarr isn't blocked from accessing {0} by WhiteList limitations in the {0} configuration."' Name) " is 209.
Long Statement,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,GetTorrents,The length of the statement  "                var removedAndUpdated = new HashSet<string>(response.TorrentsChanged.Select(v => v.Hash).Concat(response.TorrentsRemoved)); " is 123.
Long Statement,NzbDrone.Core.Download.Clients.Vuze,Vuze,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Vuze\Vuze.cs,ValidateVersion,The length of the statement  "                    return new ValidationFailure(string.Empty' "Protocol version not supported' use Vuze 5.0.0.0 or higher with Vuze Web Remote plugin."); " is 134.
Long Statement,NzbDrone.Core.Download.Pending,PendingReleaseService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Pending\PendingReleaseService.cs,AddMany,The length of the statement  "                alreadyPending = IncludeRemoteEpisodes(alreadyPending' seriesDecisions.ToDictionaryIgnoreDuplicates(v => v.Item1.RemoteEpisode.Release.Title' v => v.Item1.RemoteEpisode)); " is 171.
Long Statement,NzbDrone.Core.Download.Pending,PendingReleaseService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Pending\PendingReleaseService.cs,AddMany,The length of the statement  "                            _logger.Debug("The release {0} is already pending with reason {1}' changing to {2}"' decision.RemoteEpisode' matchingReport.Reason' reason); " is 140.
Long Statement,NzbDrone.Core.Download.Pending,PendingReleaseService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Pending\PendingReleaseService.cs,AddMany,The length of the statement  "                            _logger.Debug("The release {0} had {1} duplicate pending' removing duplicates."' decision.RemoteEpisode' matchingReports.Count() - 1); " is 134.
Long Statement,NzbDrone.Core.Download.Pending,PendingReleaseService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Pending\PendingReleaseService.cs,IncludeRemoteEpisodes,The length of the statement  "            foreach (var series in _seriesService.GetSeries(releases.Select(v => v.SeriesId).Distinct().Where(v => !seriesMap.ContainsKey(v)))) " is 131.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,RemoveCompletedDownloads,The length of the statement  "            foreach (var trackedDownload in trackedDownloads.Where(c => c.DownloadItem.CanBeRemoved && c.State == TrackedDownloadStage.Imported)) " is 133.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,ProcessClientItems,The length of the statement  "                var trackedDownload = _trackedDownloadService.TrackDownload((DownloadClientDefinition)downloadClient.Definition' downloadItem); " is 127.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,DownloadIsTrackable,The length of the statement  "            if (!_configService.EnableCompletedDownloadHandling && trackedDownload.DownloadItem.Status == DownloadItemStatus.Completed) " is 123.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,Handle,The length of the statement  "            var trackedDownloads = _trackedDownloadService.GetTrackedDownloads().Where(t => t.IsTrackable && DownloadIsTrackable(t)).ToList(); " is 130.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,TrackedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\TrackedDownloadService.cs,TrackDownload,The length of the statement  "                        parsedEpisodeInfo = Parser.Parser.ParseTitle(firstHistoryItem.SourceTitle) ?? _parsingService.ParseSpecialEpisodeTitle(parsedEpisodeInfo' firstHistoryItem.SourceTitle' 0' 0); " is 174.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,TrackedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\TrackedDownloadService.cs,TrackDownload,The length of the statement  "                            trackedDownload.RemoteEpisode = _parsingService.Map(parsedEpisodeInfo' firstHistoryItem.SeriesId' historyItems.Where(v => v.EventType == HistoryEventType.Grabbed).Select(h => h.EpisodeId).Distinct()); " is 200.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,TrackedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\TrackedDownloadService.cs,UpdateTrackable,The length of the statement  "            var untrackable = GetTrackedDownloads().ExceptBy(t => t.DownloadItem.DownloadId' trackedDownloads' t => t.DownloadItem.DownloadId' StringComparer.CurrentCulture).ToList(); " is 171.
Long Statement,NzbDrone.Core.Extras,ExtraService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ExtraService.cs,ImportExtraFiles,The length of the statement  "            var matchingFilenames = files.Where(f => Path.GetFileNameWithoutExtension(f).StartsWith(sourceFileName' StringComparison.InvariantCultureIgnoreCase)).ToList(); " is 159.
Long Statement,NzbDrone.Core.Extras,ImportExistingExtraFilesBase<TExtraFile>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ImportExistingExtraFilesBase.cs,Filter,The length of the statement  "            var previouslyImported = seriesFiles.IntersectBy(s => Path.Combine(series.Path' s.RelativePath)' filesOnDisk' f => f' PathEqualityComparer.Instance).ToList(); " is 158.
Long Statement,NzbDrone.Core.Extras,ImportExistingExtraFilesBase<TExtraFile>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ImportExistingExtraFilesBase.cs,Filter,The length of the statement  "            var filteredFiles = filesOnDisk.Except(previouslyImported.Select(f => Path.Combine(series.Path' f.RelativePath)).ToList()' PathEqualityComparer.Instance) " is 153.
Long Statement,NzbDrone.Core.Extras,ImportExistingExtraFilesBase<TExtraFile>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ImportExistingExtraFilesBase.cs,Clean,The length of the statement  "            var alreadyImportedFileIds = seriesFiles.IntersectBy(f => Path.Combine(series.Path' f.RelativePath)' importedFiles' i => i' PathEqualityComparer.Instance) " is 154.
Long Statement,NzbDrone.Core.Extras,ImportExistingExtraFilesBase<TExtraFile>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ImportExistingExtraFilesBase.cs,Clean,The length of the statement  "            var deletedFiles = seriesFiles.ExceptBy(f => Path.Combine(series.Path' f.RelativePath)' filesOnDisk' i => i' PathEqualityComparer.Instance) " is 139.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeMetadata,The length of the statement  "                    details.Add(new XElement("title"' string.Format("{0} - {1}x{2} - {3}"' series.Title' episode.SeasonNumber' episode.EpisodeNumber' episode.Title))); " is 147.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeMetadata,The length of the statement  "                    var actors = string.Join(" ' "' series.Actors.ConvertAll(c => c.Name + " - " + c.Character).GetRange(0' Math.Min(3' series.Actors.Count))); " is 139.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeMetadata,The length of the statement  "            return new MetadataFileResult(GetEpisodeMetadataFilename(episodeFile.RelativePath)' xmlResult.Trim(Environment.NewLine.ToCharArray())); " is 135.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,SeriesImages,The length of the statement  "            var image = series.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? series.Images.FirstOrDefault(); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,SeasonImages,The length of the statement  "            //Roksbox only supports one season image' so first of all try for poster otherwise just use whatever is first in the collection " is 127.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,SeasonImages,The length of the statement  "            var image = season.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? season.Images.FirstOrDefault(); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeImages,The length of the statement  "            var screenshot = episodeFile.Episodes.Value.First().Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot); " is 123.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeImages,The length of the statement  "            return new List<ImageFileResult> {new ImageFileResult(GetEpisodeImageFilename(episodeFile.RelativePath)' screenshot.Url)}; " is 122.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,EpisodeMetadata,The length of the statement  "                    details.Add(new XElement("title"' string.Format("{0} - {1}x{2:00} - {3}"' series.Title' episode.SeasonNumber' episode.EpisodeNumber' episode.Title))); " is 150.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,SeriesImages,The length of the statement  "            var image = series.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? series.Images.FirstOrDefault(); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,SeasonImages,The length of the statement  "            //WDTV only supports one season image' so first of all try for poster otherwise just use whatever is first in the collection " is 124.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,SeasonImages,The length of the statement  "            var image = season.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? season.Images.FirstOrDefault(); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,EpisodeImages,The length of the statement  "            var screenshot = episodeFile.Episodes.Value.First().Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot); " is 123.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,EpisodeImages,The length of the statement  "            return new List<ImageFileResult>{ new ImageFileResult(GetEpisodeImageFilename(episodeFile.RelativePath)' screenshot.Url) }; " is 123.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,SeriesMetadata,The length of the statement  "            var episodeGuideUrl = string.Format("http://www.thetvdb.com/api/1D62F2F90030C444/series/{0}/all/en.zip"' series.TvdbId); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,EpisodeMetadata,The length of the statement  "            return new MetadataFileResult(GetEpisodeMetadataFilename(episodeFile.RelativePath)' xmlResult.Trim(Environment.NewLine.ToCharArray())); " is 135.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,EpisodeImages,The length of the statement  "                var screenshot = episodeFile.Episodes.Value.First().Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot); " is 123.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,EpisodeImages,The length of the statement  "                _logger.Error(ex' "Unable to process episode image for file: {0}"' Path.Combine(series.Path' episodeFile.RelativePath)); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata,MetadataFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\MetadataFactory.cs,InitializeProviders,The length of the statement  "            var newProviders = definitions.Where(def => currentProviders.All(c => c.Implementation != def.Implementation)).ToList(); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata,MetadataService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\MetadataService.cs,MoveFilesAfterRename,The length of the statement  "                    var metadataFilesForConsumer = GetMetadataFilesForConsumer(consumer' metadataFiles).Where(m => m.EpisodeFileId == episodeFile.Id).ToList(); " is 139.
Long Statement,NzbDrone.Core.Extras.Subtitles,SubtitleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Subtitles\SubtitleService.cs,MoveFilesAfterRename,The length of the statement  "                        _logger.Warn("Multiple subtitle files found with the same language and extension for {0}"' Path.Combine(series.Path' episodeFile.RelativePath)); " is 144.
Long Statement,NzbDrone.Core.HealthCheck.Checks,AppDataLocationCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\AppDataLocationCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "Updating will not be possible to prevent deleting AppData on Update"); " is 132.
Long Statement,NzbDrone.Core.HealthCheck.Checks,DotnetVersionCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\DotnetVersionCheck.cs,Check,The length of the statement  "                    $"Currently installed .Net Framework {dotnetVersion} is supported but we recommend upgrading to at least {targetVersion}."' " is 123.
Long Statement,NzbDrone.Core.HealthCheck.Checks,DotnetVersionCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\DotnetVersionCheck.cs,Check,The length of the statement  "                $"Currently installed .Net Framework {dotnetVersion} is old and unsupported. Please upgrade the .Net Framework to at least {targetVersion}."' " is 141.
Long Statement,NzbDrone.Core.HealthCheck.Checks,DownloadClientCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\DownloadClientCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Error' $"{message} {ex.Message}"' "#unable-to-communicate-with-download-client"); " is 133.
Long Statement,NzbDrone.Core.HealthCheck.Checks,DownloadClientStatusCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\DownloadClientStatusCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' "All download clients are unavailable due to failures"' "#download-clients-are-unavailable-due-to-failures"); " is 168.
Long Statement,NzbDrone.Core.HealthCheck.Checks,DownloadClientStatusCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\DownloadClientStatusCheck.cs,Check,The length of the statement  "            return new HealthCheck(GetType()' HealthCheckResult.Warning' string.Format("Download clients unavailable due to failures: {0}"' string.Join("' "' backOffProviders.Select(v => v.Provider.Definition.Name)))' "#download-clients-are-unavailable-due-to-failures"); " is 259.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling if possible (Multi-Computer unsupported)"' "Migrating-to-Completed-Download-Handling#Unsupported-download-client-on-different-computer"); " is 234.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling if possible (Sabnzbd)"' "Migrating-to-Completed-Download-Handling#sabnzbd-enable-completed-download-handling"); " is 208.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling if possible (Nzbget)"' "Migrating-to-Completed-Download-Handling#nzbget-enable-completed-download-handling"); " is 206.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling if possible"' "Migrating-to-Completed-Download-Handling"); " is 155.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerRssCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerRssCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' "No indexers available with RSS sync enabled' Sonarr will not grab new releases automatically"); " is 155.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerRssCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerRssCheck.cs,Check,The length of the statement  "                 return new HealthCheck(GetType()' HealthCheckResult.Warning' "All rss-capable indexers are temporarily unavailable due to recent indexer errors"); " is 146.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerSearchCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerSearchCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "No indexers available with Automatic Search enabled' Sonarr will not provide any automatic search results"); " is 170.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerSearchCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerSearchCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "No indexers available with Interactive Search enabled' Sonarr will not provide any interactive search results"); " is 174.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerSearchCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerSearchCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "All search-capable indexers are temporarily unavailable due to recent indexer errors"); " is 149.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerStatusCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerStatusCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' "All indexers are unavailable due to failures"' "#indexers-are-unavailable-due-to-failures"); " is 152.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerStatusCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerStatusCheck.cs,Check,The length of the statement  "            return new HealthCheck(GetType()' HealthCheckResult.Warning' string.Format("Indexers unavailable due to failures: {0}"' string.Join("' "' backOffProviders.Select(v => v.Provider.Definition.Name)))' "#indexers-are-unavailable-due-to-failures"); " is 243.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MonoTlsCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MonoTlsCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "Sonarr Mono 4.x tls workaround still enabled' consider removing MONO_TLS_PROVIDER=legacy environment option"); " is 172.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MonoVersionCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MonoVersionCheck.cs,Check,The length of the statement  "                    $"Currently installed Mono version {monoVersion} has a bug that causes issues connecting to indexers/download clients. You should upgrade to a higher version"' " is 159.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MonoVersionCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MonoVersionCheck.cs,Check,The length of the statement  "                    $"Currently installed Mono version {monoVersion} is supported but has some known issues. Please upgrade Mono to version {bestVersion}."'  " is 136.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MonoVersionCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MonoVersionCheck.cs,Check,The length of the statement  "                $"Currently installed Mono version {monoVersion} is old and unsupported. Please upgrade Mono to version {bestVersion}."'  " is 120.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MountCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MountCheck.cs,Check,The length of the statement  "            // Not best for optimization but due to possible symlinks and junctions' we get mounts based on series path so internals can handle mount resolution. " is 149.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MountCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MountCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' "Mount containing a series path is mounted read-only: " + string.Join("'"' mounts.Select(m => m.Name))' "#series-mount-ro"); " is 183.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ProxyCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ProxyCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Error' string.Format("Failed to resolve the IP Address for the Configured Proxy Host {0}"' _configService.ProxyHostname)); " is 174.
Long Statement,NzbDrone.Core.HealthCheck.Checks,RootFolderCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\RootFolderCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Error' "Missing root folder: " + missingRootFolders.First()' "#missing-root-folder"); " is 137.
Long Statement,NzbDrone.Core.HealthCheck.Checks,SystemTimeCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\SystemTimeCheck.cs,Check,The length of the statement  "                _logger.Error("System time mismatch. SystemTime: {0} Expected Time: {1}. Update system time"' systemTime' result.DateTimeUtc); " is 126.
Long Statement,NzbDrone.Core.HealthCheck.Checks,SystemTimeCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\SystemTimeCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' $"System time is off by more than 1 day. Scheduled tasks may not run correctly until the time is corrected"); " is 168.
Long Statement,NzbDrone.Core.HealthCheck.Checks,UpdateCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\UpdateCheck.cs,Check,The length of the statement  "                        string.Format("Cannot install update because startup folder '{0}' is not writable by the user '{1}'."' startupFolder' Environment.UserName)' " is 140.
Long Statement,NzbDrone.Core.HealthCheck.Checks,UpdateCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\UpdateCheck.cs,Check,The length of the statement  "                        string.Format("Cannot install update because UI folder '{0}' is not writable by the user '{1}'."' uiFolder' Environment.UserName)' " is 130.
Long Statement,NzbDrone.Core.History,HistoryService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\History\HistoryService.cs,FindDownloadId,The length of the statement  "            var allHistory = _historyRepository.FindDownloadHistory(trackedDownload.EpisodeInfo.Series.Id' trackedDownload.ImportedEpisode.Quality); " is 136.
Long Statement,NzbDrone.Core.History,HistoryService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\History\HistoryService.cs,FindDownloadId,The length of the statement  "            var stillDownloading = episodesHistory.Where(c => c.EventType == HistoryEventType.Grabbed && !processedDownloadId.Contains(c.DownloadId)).ToList(); " is 147.
Long Statement,NzbDrone.Core.History,HistoryService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\History\HistoryService.cs,FindDownloadId,The length of the statement  "                foreach (var matchingHistory in trackedDownload.EpisodeInfo.Episodes.Select(e => stillDownloading.Where(c => c.EpisodeId == e.Id).ToList())) " is 140.
Long Statement,NzbDrone.Core.History,HistoryService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\History\HistoryService.cs,Handle,The length of the statement  "                _logger.Debug("Removing episode file from DB as part of manual override of existing file' not creating history event."); " is 120.
Long Statement,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,Clean,The length of the statement  "                    .Where(c => c.LastUpdated > new DateTime(2014' 12' 27) && c.RelativePath.EndsWith(".jpg"' StringComparison.InvariantCultureIgnoreCase)); " is 136.
Long Statement,NzbDrone.Core.Http,HttpProxySettingsProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Http\HttpProxySettingsProvider.cs,ShouldProxyBeBypassed,The length of the statement  "            //We are utilising the WebProxy implementation here to save us having to reimplement it. This way we use Microsofts implementation " is 130.
Long Statement,NzbDrone.Core.Http,HttpProxySettingsProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Http\HttpProxySettingsProvider.cs,ShouldProxyBeBypassed,The length of the statement  "            var proxy = new WebProxy(proxySettings.Host + ":" + proxySettings.Port' proxySettings.BypassLocalAddress' proxySettings.BypassListAsArray); " is 139.
Long Statement,NzbDrone.Core.IndexerSearch,EpisodeSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\EpisodeSearchService.cs,SearchForMissingEpisodes,The length of the statement  "            _logger.ProgressInfo("Completed missing search for {0} episodes. {1} reports downloaded."' episodes.Count' downloadedCount); " is 124.
Long Statement,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SeasonSearch,The length of the statement  "                        var searchSpec = Get<SingleEpisodeSearchCriteria>(series' sceneSeasonEpisodes.ToList()' userInvokedSearch' interactiveSearch); " is 126.
Long Statement,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SearchSingle,The length of the statement  "            var searchSpec = Get<SingleEpisodeSearchCriteria>(series' new List<Episode> { episode }' userInvokedSearch' interactiveSearch); " is 127.
Long Statement,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SearchDaily,The length of the statement  "            var searchSpec = Get<DailyEpisodeSearchCriteria>(series' new List<Episode> { episode }' userInvokedSearch' interactiveSearch); " is 126.
Long Statement,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SearchAnime,The length of the statement  "            var searchSpec = Get<AnimeEpisodeSearchCriteria>(series' new List<Episode> { episode }' userInvokedSearch' interactiveSearch); " is 126.
Long Statement,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SearchAnime,The length of the statement  "                _logger.Error($"Can not search for {series.Title} - S{episode.SeasonNumber:00}E{episode.EpisodeNumber:00} it does not have an absolute episode number"); " is 152.
Long Statement,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SearchAnimeSeason,The length of the statement  "            foreach (var episode in episodes.Where(e => e.Monitored && e.AirDateUtc.HasValue && e.AirDateUtc.Value.Before(DateTime.UtcNow))) " is 128.
Long Statement,NzbDrone.Core.IndexerSearch,NzbSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,Dispatch,The length of the statement  "            _logger.Debug("Total of {0} reports were found for {1} from {2} indexers"' reports.Count' criteriaBase' indexers.Count); " is 120.
Long Statement,NzbDrone.Core.IndexerSearch,SeasonSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\SeasonSearchService.cs,Execute,The length of the statement  "            var decisions = _nzbSearchService.SeasonSearch(message.SeriesId' message.SeasonNumber' false' message.Trigger == CommandTrigger.Manual' false); " is 143.
Long Statement,NzbDrone.Core.IndexerSearch,SeriesSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\SeriesSearchService.cs,Execute,The length of the statement  "                var decisions = _nzbSearchService.SeasonSearch(message.SeriesId' season.SeasonNumber' false' message.Trigger == CommandTrigger.Manual' false); " is 142.
Long Statement,NzbDrone.Core.Indexers.BitMeTv,BitMeTvRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BitMeTv\BitMeTvRequestGenerator.cs,GetRssRequests,The length of the statement  "            var request = new IndexerRequest(string.Format("{0}/rss.php?uid={1}&passkey={2}"' Settings.BaseUrl.Trim().TrimEnd('/')' Settings.UserId' Settings.RssPasskey)' HttpAccept.Html); " is 176.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "                        throw new IndexerException(indexerResponse' "Indexer API call returned an unexpected StatusCode [{0}]"' indexerResponse.HttpResponse.StatusCode); " is 145.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "            if (indexerResponse.HttpResponse.Headers.ContentType != null && indexerResponse.HttpResponse.Headers.ContentType.Contains("text/html")) " is 135.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "                throw new IndexerException(indexerResponse' "Indexer responded with html content. Site is likely blocked or unavailable."); " is 123.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "            JsonRpcResponse<BroadcastheNetTorrents> jsonResponse = new HttpResponse<JsonRpcResponse<BroadcastheNetTorrents>>(indexerResponse.HttpResponse).Resource; " is 152.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "                torrentInfo.InfoUrl = string.Format("{0}//broadcasthe.net/torrents.php?id={1}&torrentid={2}"' protocol' torrent.GroupID' torrent.TorrentID); " is 140.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "                torrentInfo.PublishDate = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).ToUniversalTime().AddSeconds(torrent.Time); " is 124.
Long Statement,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,FetchReleases,The length of the statement  "                        _logger.Warn("Indexer {0} rss sync didn't cover the period between {1} and {2} UTC. Search may be required."' Definition.Name' gapStart' gapEnd); " is 145.
Long Statement,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,FetchPage,The length of the statement  "                _logger.Trace("Unexpected Response content ({0} bytes): {1}"' response.HttpResponse.ResponseData.Length' response.HttpResponse.Content); " is 136.
Long Statement,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,TestConnection,The length of the statement  "                    return new ValidationFailure(string.Empty' "Query successful' but no results were returned from your indexer. This may be an issue with the indexer or your indexer category settings."); " is 185.
Long Statement,NzbDrone.Core.Indexers,IndexerFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\IndexerFactory.cs,FilterBlockedIndexers,The length of the statement  "                    _logger.Debug("Temporarily ignoring indexer {0} till {1} due to recent failures."' indexer.Definition.Name' blockedIndexerStatus.DisabledTill.Value.ToLocalTime()); " is 163.
Long Statement,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,LoadXmlDocument,The length of the statement  "                using (var xmlTextReader = XmlReader.Create(new StringReader(content)' new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore' IgnoreComments = true })) " is 158.
Long Statement,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,LoadXmlDocument,The length of the statement  "                _logger.Debug("Truncated response content (originally {0} characters): {1}"' indexerResponse.Content.Length' contentSample); " is 124.
Long Statement,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,PreProcess,The length of the statement  "                throw new IndexerException(indexerResponse' "Indexer API call resulted in an unexpected StatusCode [{0}]"' indexerResponse.HttpResponse.StatusCode); " is 148.
Long Statement,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,PreProcess,The length of the statement  "            if (indexerResponse.HttpResponse.Headers.ContentType != null && indexerResponse.HttpResponse.Headers.ContentType.Contains("text/html") && " is 137.
Long Statement,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,PreProcess,The length of the statement  "                indexerResponse.HttpRequest.Headers.Accept != null && !indexerResponse.HttpRequest.Headers.Accept.Contains("text/html")) " is 120.
Long Statement,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,PreProcess,The length of the statement  "                throw new IndexerException(indexerResponse' "Indexer responded with html content. Site is likely blocked or unavailable."); " is 123.
Long Statement,NzbDrone.Core.Indexers,RssSyncService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssSyncService.cs,Sync,The length of the statement  "            var message = string.Format("RSS Sync Completed. Reports found: {0}' Reports grabbed: {1}"' reports.Count' processed.Grabbed.Count); " is 132.
Long Statement,NzbDrone.Core.Indexers,SeedConfigProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\SeedConfigProvider.cs,GetSeedConfiguration,The length of the statement  "                    var seedTime = remoteEpisode.ParsedEpisodeInfo.FullSeason ? torrentIndexerSettings.SeedCriteria.SeasonPackSeedTime : torrentIndexerSettings.SeedCriteria.SeedTime; " is 162.
Long Statement,NzbDrone.Core.Indexers.Fanzub,FanzubRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Fanzub\FanzubRequestGenerator.cs,GetSearchRequests,The length of the statement  "            var searchTitles = searchCriteria.QueryTitles.SelectMany(v => GetTitleSearchStrings(v' searchCriteria.AbsoluteEpisodeNumber)).ToList(); " is 135.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabCapabilitiesProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabCapabilitiesProvider.cs,FetchCapabilities,The length of the statement  "                _logger.Error(ex' "Failed to determine newznab api capabilities for {0}' using the defaults instead till Sonarr restarts"' indexerSettings.BaseUrl); " is 148.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,GetPagedRequests,The length of the statement  "            var baseUrl = string.Format("{0}{1}?t={2}&cat={3}&extended=1{4}"' Settings.BaseUrl.TrimEnd('/')' Settings.ApiPath.TrimEnd('/')' searchType' categoriesQuery' Settings.AdditionalParameters); " is 188.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,GetPagedRequests,The length of the statement  "                    yield return new IndexerRequest(string.Format("{0}&offset={1}&limit={2}{3}"' baseUrl' page * PageSize' PageSize' parameters)' HttpAccept.Rss); " is 142.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabRssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRssParser.cs,PreProcess,The length of the statement  "            if (!indexerResponse.Request.Url.FullUri.Contains("apikey=") && (errorMessage == "Missing parameter" || errorMessage.Contains("apikey"))) " is 137.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabRssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRssParser.cs,PostProcess,The length of the statement  "                    _logger.Warn("Feed does not contain {0}' found {1}' did you intend to add a Torznab indexer?"' NzbEnclosureMimeType' enclosureTypes[0]); " is 136.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabRssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRssParser.cs,TryGetNewznabAttribute,The length of the statement  "            var attrElement = item.Elements(ns + "attr").FirstOrDefault(e => e.Attribute("name").Value.Equals(key' StringComparison.OrdinalIgnoreCase)); " is 140.
Long Statement,NzbDrone.Core.Indexers.Nyaa,Nyaa,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Nyaa\Nyaa.cs,GetParser,The length of the statement  "            return new TorrentRssParser() { UseGuidInfoUrl = true' ParseSizeInDescription = true' ParseSeedersInDescription = true }; " is 121.
Long Statement,NzbDrone.Core.Indexers.Omgwtfnzbs,OmgwtfnzbsRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Omgwtfnzbs\OmgwtfnzbsRequestGenerator.cs,GetPagedRequests,The length of the statement  "            url.AppendFormat("{0}?catid=19'20'30&user={1}&api={2}&eng=1&delay={3}"' BaseUrl' Settings.Username' Settings.ApiKey' Settings.Delay); " is 133.
Long Statement,NzbDrone.Core.Indexers.Rarbg,RarbgParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgParser.cs,ParseResponse,The length of the statement  "                        throw new IndexerException(indexerResponse' "Indexer API call returned an unexpected StatusCode [{0}]"' indexerResponse.HttpResponse.StatusCode); " is 145.
Long Statement,NzbDrone.Core.Indexers.Rarbg,RarbgParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgParser.cs,ParseResponse,The length of the statement  "                throw new IndexerException(indexerResponse' "Indexer API call returned error {0}: {1}"' jsonResponse.Resource.error_code' jsonResponse.Resource.error); " is 151.
Long Statement,NzbDrone.Core.Indexers.Rarbg,RarbgRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgRequestGenerator.cs,GetSearchRequests,The length of the statement  "            pageableRequests.Add(GetPagedRequests("search"' searchCriteria.Series.TvdbId' "S{0:00}E{1:00}"' searchCriteria.SeasonNumber' searchCriteria.EpisodeNumber)); " is 156.
Long Statement,NzbDrone.Core.Indexers.Rarbg,RarbgRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgRequestGenerator.cs,GetSearchRequests,The length of the statement  "            pageableRequests.Add(GetPagedRequests("search"' searchCriteria.Series.TvdbId' "\"{0:yyyy MM dd}\""' searchCriteria.AirDate)); " is 125.
Long Statement,NzbDrone.Core.Indexers.Torrentleech,TorrentleechRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torrentleech\TorrentleechRequestGenerator.cs,GetRssRequests,The length of the statement  "            yield return new IndexerRequest(string.Format("{0}/{1}{2}"' Settings.BaseUrl.Trim().TrimEnd('/')' Settings.ApiKey' searchParameters)' HttpAccept.Rss); " is 150.
Long Statement,NzbDrone.Core.Indexers.TorrentRss,TorrentRssSettingsDetector,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssSettingsDetector.cs,IsEZTVFeed,The length of the statement  "            using (var xmlTextReader = XmlReader.Create(new StringReader(content)' new XmlReaderSettings { DtdProcessing = DtdProcessing.Parse' ValidationType = ValidationType.None' IgnoreComments = true' XmlResolver = null })) " is 215.
Long Statement,NzbDrone.Core.Indexers.TorrentRss,TorrentRssSettingsDetector,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssSettingsDetector.cs,ValidateReleaseSize,The length of the statement  "                throw new UnsupportedFeedException("Size of one more releases lower than {0}' feed must contain release content size."' ValidSizeThreshold.SizeSuffix()); " is 153.
Long Statement,NzbDrone.Core.Indexers.Torznab,TorznabRssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torznab\TorznabRssParser.cs,PostProcess,The length of the statement  "                    _logger.Warn("Feed does not contain {0}' found {1}' did you intend to add a Newznab indexer?"' TorrentEnclosureMimeType' enclosureTypes[0]); " is 140.
Long Statement,NzbDrone.Core.Indexers.Torznab,TorznabRssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torznab\TorznabRssParser.cs,TryGetTorznabAttribute,The length of the statement  "            var attrElement = item.Elements(ns + "attr").FirstOrDefault(e => e.Attribute("name").Value.Equals(key' StringComparison.OrdinalIgnoreCase)); " is 140.
Long Statement,NzbDrone.Core.Instrumentation,ReconfigureLogging,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\ReconfigureLogging.cs,ReconfigureSentry,The length of the statement  "                sentryTarget.SentryEnabled = RuntimeInfo.IsProduction && _configFileProvider.AnalyticsEnabled || RuntimeInfo.IsDevelopment; " is 123.
Long Statement,NzbDrone.Core.Instrumentation,SlowRunningAsyncTargetWrapper,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\SlowRunningAsyncTargetWrapper.cs,StartLazyWriterTimer,The length of the statement  "            // Is executed when the background task has finished processing the queue. (also executed by base.InitializeTarget once) " is 120.
Long Statement,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The length of the statement  "            var scheduledTask = _scheduledTaskRepository.All().SingleOrDefault(c => c.TypeName == message.Command.Body.GetType().FullName); " is 127.
Long Statement,NzbDrone.Core.MediaCover,MediaCoverService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,ConvertToLocalUrls,The length of the statement  "                mediaCover.Url = _configFileProvider.UrlBase + @"/MediaCover/" + seriesId + "/" + mediaCover.CoverType.ToString().ToLower() + ".jpg"; " is 133.
Long Statement,NzbDrone.Core.MediaCover,MediaCoverService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The length of the statement  "                        _logger.Debug("Couldn't resize media cover {0}-{1} for {2}' using full size image instead."' cover.CoverType' height' series); " is 126.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesCommandService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesCommandService.cs,ProcessPath,The length of the statement  "                    return _downloadedEpisodesImportService.ProcessPath(message.Path' message.ImportMode' trackedDownload.RemoteEpisode.Series' trackedDownload.DownloadItem); " is 154.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesCommandService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesCommandService.cs,ProcessPath,The length of the statement  "                    _logger.Warn("External directory scan request for unknown download {0}' attempting normal import. [{1}]"' message.DownloadClientId' message.Path); " is 146.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ShouldDeleteFolder,The length of the statement  "            var rarFiles = _diskProvider.GetFiles(directoryInfo.FullName' SearchOption.AllDirectories).Where(f => Path.GetExtension(f).Equals(".rar"' StringComparison.OrdinalIgnoreCase)); " is 175.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ShouldDeleteFolder,The length of the statement  "                if (_detectSample.IsSample(series' videoFile' episodeParseResult.IsPossibleSpecialEpisode) != DetectSampleResult.Sample) " is 120.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ProcessFolder,The length of the statement  "            var videoFiles = _diskScanService.FilterFiles(directoryInfo.FullName' _diskScanService.GetVideoFiles(directoryInfo.FullName)); " is 126.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ProcessFolder,The length of the statement  "            var decisions = _importDecisionMaker.GetImportDecisions(videoFiles.ToList()' series' downloadClientItem' folderInfo' true); " is 123.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ProcessFile,The length of the statement  "                           new ImportResult(new ImportDecision(new LocalEpisode { Path = fileInfo.FullName }' new Rejection("Invalid video file' filename starts with '._'"))' "Invalid video file' filename starts with '._'") " is 196.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ProcessFile,The length of the statement  "            var decisions = _importDecisionMaker.GetImportDecisions(new List<string>() { fileInfo.FullName }' series' downloadClientItem' null' true); " is 138.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,FileIsLockedResult,The length of the statement  "            return new ImportResult(new ImportDecision(new LocalEpisode { Path = videoFile }' new Rejection("Locked file' try again later"))' "Locked file' try again later"); " is 162.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,LogInaccessiblePathError,The length of the statement  "                    _logger.Error("Import failed' path does not exist or is not accessible by Sonarr: {0}. It's recommended to avoid mapped network drives when running as a Windows service. See the FAQ for more info"' path); " is 204.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,LogInaccessiblePathError,The length of the statement  "                    _logger.Error("Import failed' path does not exist or is not accessible by Sonarr: {0}. Ensure the user running Sonarr has access to the network share"' path); " is 158.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,LogInaccessiblePathError,The length of the statement  "            _logger.Error("Import failed' path does not exist or is not accessible by Sonarr: {0}. Ensure the path exists and the user running Sonarr has the correct permissions to access this file/folder"' path); " is 201.
Long Statement,NzbDrone.Core.MediaFiles,EpisodeFileMovingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeFileMovingService.cs,MoveEpisodeFile,The length of the statement  "            var filePath = _buildFileNames.BuildFilePath(series' episodes.First().SeasonNumber' newFileName' Path.GetExtension(episodeFile.RelativePath)); " is 142.
Long Statement,NzbDrone.Core.MediaFiles,EpisodeFileMovingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeFileMovingService.cs,MoveEpisodeFile,The length of the statement  "            var filePath = _buildFileNames.BuildFilePath(localEpisode.Series' localEpisode.SeasonNumber' newFileName' Path.GetExtension(localEpisode.Path)); " is 144.
Long Statement,NzbDrone.Core.MediaFiles,EpisodeFileMovingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeFileMovingService.cs,CopyEpisodeFile,The length of the statement  "            var filePath = _buildFileNames.BuildFilePath(localEpisode.Series' localEpisode.SeasonNumber' newFileName' Path.GetExtension(localEpisode.Path)); " is 144.
Long Statement,NzbDrone.Core.MediaFiles,RecycleBinProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\RecycleBinProvider.cs,DeleteFile,The length of the statement  "                        destination = Path.Combine(destinationFolder' Path.GetFileNameWithoutExtension(fileInfo.Name) + "_" + index + fileInfo.Extension); " is 130.
Long Statement,NzbDrone.Core.MediaFiles,UpdateEpisodeFileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\UpdateEpisodeFileService.cs,Handle,The length of the statement  "                _logger.ProgressDebug("Changed file date for {0} files of {1} in {2}"' updated.Count' episodeFiles.Count' message.Series.Title); " is 128.
Long Statement,NzbDrone.Core.MediaFiles,UpgradeMediaFileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\UpgradeMediaFileService.cs,UpgradeEpisodeFile,The length of the statement  "            // If there are existing episode files and the root folder is missing' throw' so the old file isn't left behind during the import process. " is 138.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,IsSample,The length of the statement  "                _logger.Debug("[{0}] appears to be a sample. Runtime: {1} seconds. Expected at least: {2} seconds"' path' runTime' minimumRuntime); " is 131.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport,ImportApprovedEpisodes,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportApprovedEpisodes.cs,Import,The length of the statement  "            foreach (var importDecision in qualifiedImports.OrderBy(e => e.LocalEpisode.Episodes.Select(episode => episode.EpisodeNumber).MinOrDefault()) " is 141.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport,ImportApprovedEpisodes,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportApprovedEpisodes.cs,Import,The length of the statement  "                    _eventAggregator.PublishEvent(new EpisodeImportedEvent(localEpisode' episodeFile' oldFiles' newDownload' downloadClientItem)); " is 126.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport,ImportDecisionMaker,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,GetImportDecisions,The length of the statement  "            var newFiles = filterExistingFiles ? _mediaFileService.FilterExistingFiles(videoFiles.ToList()' series) : videoFiles.ToList(); " is 126.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport,ImportDecisionMaker,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,GetImportDecisions,The length of the statement  "            var nonSampleVideoFileCount = sceneSource ? GetNonSampleVideoFileCount(newFiles' series' downloadClientItemInfo' folderInfo) : videoFiles.Count; " is 144.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ProcessFolder,The length of the statement  "                var processedFolders = subfolders.SelectMany(subfolder => ProcessFolder(rootFolder' subfolder' downloadId' null' filterExistingFiles)); " is 135.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ProcessFolder,The length of the statement  "            var decisions = _importDecisionMaker.GetImportDecisions(seriesFiles' series' downloadClientItem' folderInfo' SceneSource(series' baseFolder)' filterExistingFiles); " is 163.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,MapItem,The length of the statement  "            if (decision.LocalEpisode.Episodes.Any() && decision.LocalEpisode.Episodes.Select(c => c.SeasonNumber).Distinct().Count() == 1) " is 127.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,MapItem,The length of the statement  "                    _logger.Warn("Expected one season' but found {0} ({1}) for: {2}"' seasons.Count' string.Join("' "' seasons)' decision.LocalEpisode.Path); " is 137.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,Execute,The length of the statement  "                    imported.AddRange(_importApprovedEpisodes.Import(new List<ImportDecision> { importDecision }' !existingFile' null' message.ImportMode)); " is 136.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,Execute,The length of the statement  "                    var importResult = _importApprovedEpisodes.Import(new List<ImportDecision> { importDecision }' true' trackedDownload.DownloadItem' message.ImportMode).First(); " is 159.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,Execute,The length of the statement  "            foreach (var groupedTrackedDownload in importedTrackedDownload.GroupBy(i => i.TrackedDownload.DownloadItem.DownloadId).ToList()) " is 128.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,Execute,The length of the statement  "                if (groupedTrackedDownload.Select(c => c.ImportResult).Count(c => c.Result == ImportResultType.Imported) >= Math.Max(1' trackedDownload.RemoteEpisode.Episodes.Count)) " is 166.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,MatchesFolderSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\MatchesFolderSpecification.cs,IsSatisfiedBy,The length of the statement  "                folderInfo = _parsingService.ParseSpecialEpisodeTitle(folderInfo' folderInfo.ReleaseTitle' localEpisode.Series.TvdbId' 0); " is 122.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,MatchesFolderSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\MatchesFolderSpecification.cs,IsSatisfiedBy,The length of the statement  "                return Decision.Reject("Season number {0} was unexpected considering the folder name {1}"' fileInfo.SeasonNumber' folderInfo.ReleaseTitle); " is 139.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,MatchesFolderSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\MatchesFolderSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("Episode number {0} was unexpected considering the {1} folder name"' unexpected.First()' folderInfo.ReleaseTitle); " is 137.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,MatchesFolderSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\MatchesFolderSpecification.cs,IsSatisfiedBy,The length of the statement  "                return Decision.Reject("Episode numbers {0} were unexpected considering the {1} folder name"' string.Join("' "' unexpected)' folderInfo.ReleaseTitle); " is 150.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,SameFileSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\SameFileSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Trace("Unable to get episode file details from the DB. EpisodeId: {0} EpisodeFileId: {1}"' episode.Id' episode.EpisodeFileId); " is 134.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,UnverifiedSceneNumberingSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\UnverifiedSceneNumberingSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("This file uses unverified scene numbers' will not auto-import until numbering is confirmed on TheXEM. Skipping {0}"' localEpisode.Path); " is 151.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,UnverifiedSceneNumberingSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\UnverifiedSceneNumberingSpecification.cs,IsSatisfiedBy,The length of the statement  "                return Decision.Reject("This show has individual episode mappings on TheXEM but the mapping for this episode has not been confirmed yet by their administrators. TheXEM needs manual input."); " is 190.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,UpgradeSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\UpgradeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    _logger.Trace("Unable to get episode file details from the DB. EpisodeId: {0} EpisodeFileId: {1}"' episode.Id' episode.EpisodeFileId); " is 134.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioCodec,The length of the statement  "            var splitAdditionalFeatures = (mediaInfo.AudioAdditionalFeatures ?? string.Empty).Split(new[] {' '}' StringSplitOptions.RemoveEmptyEntries); " is 140.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioCodec,The length of the statement  "                  .Message("Unknown audio format: '{0}' in '{1}'."' string.Join("' "' mediaInfo.AudioFormat' audioCodecID' audioProfile' audioCodecLibrary' mediaInfo.AudioAdditionalFeatures)' sceneName) " is 184.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoCodec,The length of the statement  "                  .Message("Unknown video format: '{0}' in '{1}'."' string.Join("' "' videoFormat' videoCodecID' videoProfile' videoCodecLibrary)' sceneName) " is 139.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioChannelsFromAudioChannelPositions,The length of the statement  "                Logger.Warn(e' "Unable to format audio channels using 'AudioChannelPositions'' with a value of: '{0}'"' audioChannelPositions); " is 127.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioChannelsFromAudioChannelPositionsText,The length of the statement  "                Logger.Warn(e' "Unable to format audio channels using 'AudioChannelPositionsText'' with a value of: '{0}'"' audioChannelPositionsText); " is 135.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,InitializeEncoding,The length of the statement  "                throw new NotSupportedException("Unsupported MediaInfoLib encoding' version check responses (may be gibberish' show it to the Sonarr devs): " + responses.Join("' ") ); " is 167.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Get,The length of the statement  "                    return MakeStringResult(MediaInfoA_Get(_handle' (IntPtr)streamKind' (IntPtr)streamNumber' pParameter' (IntPtr)infoKind' (IntPtr)searchKind)); " is 141.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Get,The length of the statement  "                    return MakeStringResult(MediaInfo_Get(_handle' (IntPtr)streamKind' (IntPtr)streamNumber' pParameter' (IntPtr)infoKind' (IntPtr)searchKind)); " is 140.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Get,The length of the statement  "                return MakeStringResult(MediaInfoA_GetI(_handle' (IntPtr)streamKind' (IntPtr)streamNumber' (IntPtr)parameter' (IntPtr)infoKind)); " is 129.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Get,The length of the statement  "                return MakeStringResult(MediaInfo_GetI(_handle' (IntPtr)streamKind' (IntPtr)streamNumber' (IntPtr)parameter' (IntPtr)infoKind)); " is 128.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The length of the statement  "                    decimal.TryParse(mediaInfo.Get(StreamKind.Video' 0' "FrameRate")' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out videoFrameRate); " is 148.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The length of the statement  "                    string aBitRate = mediaInfo.Get(StreamKind.Audio' 0' "BitRate").Split(new string[] { " /" }' StringSplitOptions.None)[0].Trim(); " is 128.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The length of the statement  "                    string audioChannelsStr = mediaInfo.Get(StreamKind.Audio' 0' "Channel(s)").Split(new string[] { " /" }' StringSplitOptions.None)[0].Trim(); " is 139.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The length of the statement  "                    string videoProfile = mediaInfo.Get(StreamKind.Video' 0' "Format_Profile").Split(new string[] { " /" }' StringSplitOptions.None)[0].Trim(); " is 139.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The length of the statement  "                    string audioProfile = mediaInfo.Get(StreamKind.Audio' 0' "Format_Profile").Split(new string[] { " /" }' StringSplitOptions.None)[0].Trim(); " is 139.
Long Statement,NzbDrone.Core.Messaging.Commands,CommandQueueManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Commands\CommandQueueManager.cs,PushMany,The length of the statement  "                var existing = existingCommands.SingleOrDefault(c => c.Name == command.Name && CommandEqualityComparer.Instance.Equals(c.Body' command)); " is 137.
Long Statement,NzbDrone.Core.Messaging.Events,EventAggregator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Events\EventAggregator.cs,PublishEvent,The length of the statement  "                        _logger.Warn("Thread pool state WT:{0} PT:{1}  MAXWT:{2} MAXPT:{3} MINWT:{4} MINPT:{5}"' workerThreads' completionPortThreads' maxWorkerThreads' maxCompletionPortThreads' minWorkerThreads' minCompletionPortThreads); " is 215.
Long Statement,NzbDrone.Core.Messaging.Events,EventAggregator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Events\EventAggregator.cs,GetEventName,The length of the statement  "            return string.Format("{0}<{1}>"' eventType.Name.Remove(eventType.Name.IndexOf('`'))' eventType.GetGenericArguments()[0].Name); " is 126.
Long Statement,NzbDrone.Core.Messaging.Events,EventAggregator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Events\EventAggregator.cs,GetEventHandleOrder,The length of the statement  "            var attribute = method.GetCustomAttributes(typeof(EventHandleOrderAttribute)' true).FirstOrDefault() as EventHandleOrderAttribute; " is 130.
Long Statement,NzbDrone.Core.MetadataSource.SkyHook,SkyHookProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MetadataSource\SkyHook\SkyHookProxy.cs,MapSeries,The length of the statement  "                series.FirstAired = DateTime.ParseExact(show.FirstAired' "yyyy-MM-dd"' DateTimeFormatInfo.InvariantInfo).ToUniversalTime(); " is 123.
Long Statement,NzbDrone.Core.Notifications.Boxcar,BoxcarProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Boxcar\BoxcarProxy.cs,SendNotification,The length of the statement  "                request.AddParameter("notification[icon_url]"' "https://raw.githubusercontent.com/Sonarr/Sonarr/7818f0c59b787312f0bcbc5c0eafc3c9dd7e5451/Logo/64.png"); " is 151.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_EpisodeNumbers"' string.Join("'"' remoteEpisode.Episodes.Select(e => e.EpisodeNumber))); " is 129.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_AbsoluteEpisodeNumbers"' string.Join("'"' remoteEpisode.Episodes.Select(e => e.AbsoluteEpisodeNumber))); " is 145.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_EpisodeAirDates"' string.Join("'"' remoteEpisode.Episodes.Select(e => e.AirDate))); " is 124.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_EpisodeAirDatesUtc"' string.Join("'"' remoteEpisode.Episodes.Select(e => e.AirDateUtc))); " is 130.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_EpisodeTitles"' string.Join("|"' remoteEpisode.Episodes.Select(e => e.Title))); " is 120.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_QualityVersion"' remoteEpisode.ParsedEpisodeInfo.Quality.Revision.Version.ToString()); " is 127.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "            environmentVariables.Add("Sonarr_EpisodeFile_EpisodeNumbers"' string.Join("'"' episodeFile.Episodes.Value.Select(e => e.EpisodeNumber))); " is 137.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "            environmentVariables.Add("Sonarr_EpisodeFile_EpisodeAirDates"' string.Join("'"' episodeFile.Episodes.Value.Select(e => e.AirDate))); " is 132.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "            environmentVariables.Add("Sonarr_EpisodeFile_EpisodeAirDatesUtc"' string.Join("'"' episodeFile.Episodes.Value.Select(e => e.AirDateUtc))); " is 138.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "            environmentVariables.Add("Sonarr_EpisodeFile_EpisodeTitles"' string.Join("|"' episodeFile.Episodes.Value.Select(e => e.Title))); " is 128.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "                environmentVariables.Add("Sonarr_DeletedRelativePaths"' string.Join("|"' message.OldFiles.Select(e => e.RelativePath))); " is 120.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "                environmentVariables.Add("Sonarr_DeletedPaths"' string.Join("|"' message.OldFiles.Select(e => Path.Combine(series.Path' e.RelativePath)))); " is 139.
Long Statement,NzbDrone.Core.Notifications.Discord,Discord,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Discord\Discord.cs,OnHealthIssue,The length of the statement  "                                      Color = healthCheck.Type == HealthCheck.HealthCheckResult.Warning ? (int)DiscordColors.Warning : (int)DiscordColors.Success " is 123.
Long Statement,NzbDrone.Core.Notifications,NotificationService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\NotificationService.cs,ShouldHandleSeries,The length of the statement  "            _logger.Debug("{0} does not have any intersecting tags with {1}. Notification will not be sent."' definition.Name' series.Title); " is 129.
Long Statement,NzbDrone.Core.Notifications,NotificationService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\NotificationService.cs,Handle,The length of the statement  "                    if (ShouldHandleHealthFailure(message.HealthCheck' ((NotificationDefinition)notification.Definition).IncludeHealthWarnings)) " is 124.
Long Statement,NzbDrone.Core.Notifications.Growl,Growl,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\Growl.cs,OnGrab,The length of the statement  "            _growlService.SendNotification(EPISODE_GRABBED_TITLE' grabMessage.Message' "GRAB"' Settings.Host' Settings.Port' Settings.Password); " is 132.
Long Statement,NzbDrone.Core.Notifications.Growl,Growl,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\Growl.cs,OnDownload,The length of the statement  "            _growlService.SendNotification(EPISODE_DOWNLOADED_TITLE' message.Message' "DOWNLOAD"' Settings.Host' Settings.Port' Settings.Password); " is 135.
Long Statement,NzbDrone.Core.Notifications.Growl,Growl,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\Growl.cs,OnHealthIssue,The length of the statement  "            _growlService.SendNotification(HEALTH_ISSUE_TITLE' message.Message' "HEALTHISSUE"' Settings.Host' Settings.Port' Settings.Password); " is 132.
Long Statement,NzbDrone.Core.Notifications.Growl,GrowlService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlService.cs,SendNotification,The length of the statement  "            var notification = new GrowlNotification(_growlApplication.Name' notificationType.Name' DateTime.Now.Ticks.ToString()' title' message); " is 135.
Long Statement,NzbDrone.Core.Notifications.Join,JoinProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Join\JoinProxy.cs,SendNotification,The length of the statement  "            request.AddParameter("smallicon"' "https://cdn.rawgit.com/Sonarr/Sonarr/develop/Logo/96-Outline-White.png"); // 96x96px with outline at 88x88px on a transparent background. " is 172.
Long Statement,NzbDrone.Core.Notifications.Plex.HomeTheater,PlexClientService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\HomeTheater\PlexClientService.cs,Test,The length of the statement  "                var command = string.Format("ExecBuiltIn(Notification({0}' {1}))"' "Test Notification"' "Success! Notifications are setup correctly"); " is 134.
Long Statement,NzbDrone.Core.Notifications.Plex.Server,PlexServerService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServerService.cs,UpdateLibrary,The length of the statement  "                var partialUpdates = _partialUpdateCache.Get(settings.Host' () => PartialUpdatesAllowed(settings' version)' TimeSpan.FromHours(2)); " is 131.
Long Statement,NzbDrone.Core.Notifications.Plex.Server,PlexServerService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServerService.cs,ValidateVersion,The length of the statement  "                throw new PlexVersionException("Found version {0}' upgrade to PMS 1.3.1 to fix library updating and then restart Sonarr"' version); " is 131.
Long Statement,NzbDrone.Core.Notifications.Prowl,Prowl,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Prowl\Prowl.cs,OnGrab,The length of the statement  "            _prowlService.SendNotification(EPISODE_GRABBED_TITLE' grabMessage.Message' Settings.ApiKey' (NotificationPriority)Settings.Priority); " is 133.
Long Statement,NzbDrone.Core.Notifications.Prowl,Prowl,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Prowl\Prowl.cs,OnDownload,The length of the statement  "            _prowlService.SendNotification(EPISODE_DOWNLOADED_TITLE' message.Message' Settings.ApiKey' (NotificationPriority)Settings.Priority); " is 132.
Long Statement,NzbDrone.Core.Notifications.Prowl,Prowl,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Prowl\Prowl.cs,OnHealthIssue,The length of the statement  "            _prowlService.SendNotification(HEALTH_ISSUE_TITLE' message.Message' Settings.ApiKey' (NotificationPriority)Settings.Priority); " is 126.
Long Statement,NzbDrone.Core.Notifications.Twitter,Twitter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Twitter\Twitter.cs,RequestAction,The length of the statement  "                var oauthRedirectUrl = _twitterService.GetOAuthRedirect(Settings.ConsumerKey' Settings.ConsumerSecret' query["callbackUrl"]); " is 125.
Long Statement,NzbDrone.Core.Notifications.Twitter,Twitter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Twitter\Twitter.cs,RequestAction,The length of the statement  "                var oauthToken = _twitterService.GetOAuthToken(Settings.ConsumerKey' Settings.ConsumerSecret' query["oauth_token"]' query["oauth_verifier"]); " is 141.
Long Statement,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,Notify,The length of the statement  "            var notification = string.Format("Notification({0}'{1}'{2}'{3})"' title' message' settings.DisplayTime * 1000' "https://raw.github.com/Sonarr/Sonarr/develop/Logo/64.png"); " is 171.
Long Statement,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,GetSeriesPath,The length of the statement  "                    "select path.strPath from path' tvshow' tvshowlinkpath where tvshow.c12 = {0} and tvshowlinkpath.idShow = tvshow.idShow and tvshowlinkpath.idPath = path.idPath"' " is 161.
Long Statement,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,GetSeriesPath,The length of the statement  "                "SetResponseFormat(webheader;false;webfooter;false;header;<xml>;footer;</xml>;opentag;<tag>;closetag;</tag>;closefinaltag;false)"; " is 130.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddSeasonEpisodeNumberingTokens,The length of the statement  "                tokenHandlers["{Episode}"] = m => episodes.First().EpisodeNumber.ToString(m.CustomFormat) + "-" + episodes.Last().EpisodeNumber.ToString(m.CustomFormat); " is 153.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddAbsoluteNumberingTokens,The length of the statement  "                        var repeatSeparator = absoluteEpisodeFormat.Separator.Trim().IsNullOrWhiteSpace() ? " " : absoluteEpisodeFormat.Separator.Trim(); " is 129.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddEpisodeTitleTokens,The length of the statement  "            tokenHandlers["{Episode CleanTitle}"] = m => GetEpisodeTitle(GetEpisodeTitles(episodes).Select(CleanTitle).ToList()' "and"' maxLength); " is 135.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddMediaInfoTokens,The length of the statement  "            var videoBitDepth = episodeFile.MediaInfo.VideoBitDepth > 0 ? episodeFile.MediaInfo.VideoBitDepth.ToString() : string.Empty; " is 124.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddMediaInfoTokens,The length of the statement  "            tokenHandlers["{MediaInfo Full}"] = m => $"{videoCodec} {audioCodec}{mediaInfoAudioLanguages} {mediaInfoSubtitleLanguages}"; " is 124.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,FormatNumberTokens,The length of the statement  "                pattern += EpisodeRegex.Replace(patternToReplace' match => ReplaceNumberToken(match.Groups["episode"].Value' episodes[i].EpisodeNumber)); " is 137.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,FormatAbsoluteNumberTokens,The length of the statement  "                pattern += AbsoluteEpisodeRegex.Replace(patternToReplace' match => ReplaceNumberToken(match.Groups["absolute"].Value' episodes[i].AbsoluteEpisodeNumber.Value)); " is 160.
Long Statement,NzbDrone.Core.Organizer,FileNameValidation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameValidation.cs,ValidSeriesFolderFormat,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator(FileNameBuilder.SeriesTitleRegex)).WithMessage("Must contain series title"); " is 139.
Long Statement,NzbDrone.Core.Organizer,FileNameValidation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameValidation.cs,ValidSeasonFolderFormat,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator(SeasonFolderRegex)).WithMessage("Must contain season number"); " is 125.
Long Statement,NzbDrone.Core.Parser,Parser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseMatchCollection,The length of the statement  "                lastSeasonEpisodeStringIndex = Math.Max(lastSeasonEpisodeStringIndex' matchCollection[0].Groups["airmonth"].EndIndex()); " is 120.
Long Statement,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetSeries,The length of the statement  "            var sceneMappingTvdbId = _sceneMappingService.FindTvdbId(parsedEpisodeInfo.SeriesTitle' parsedEpisodeInfo.ReleaseTitle); " is 120.
Long Statement,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetSeries,The length of the statement  "                           .Message("Found matching series by TVRage ID {0}' an alias may be need for: {1}"' tvRageId' parsedEpisodeInfo.SeriesTitle) " is 122.
Long Statement,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetSeries,The length of the statement  "                series = _seriesService.FindByTitle(parsedEpisodeInfo.SeriesTitleInfo.TitleWithoutYear' parsedEpisodeInfo.SeriesTitleInfo.Year); " is 128.
Long Statement,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetSeries,The length of the statement  "                           .Message("Found matching series by TVRage ID {0}' an alias may be need for: {1}"' tvdbId' parsedEpisodeInfo.SeriesTitle) " is 120.
Long Statement,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetAnimeEpisodes,The length of the statement  "            var sceneSeasonNumber = _sceneMappingService.GetSceneSeasonNumber(parsedEpisodeInfo.SeriesTitle' parsedEpisodeInfo.ReleaseTitle); " is 129.
Long Statement,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetStandardEpisodes,The length of the statement  "                var sceneMapping = _sceneMappingService.FindSceneMapping(parsedEpisodeInfo.SeriesTitle' parsedEpisodeInfo.ReleaseTitle); " is 120.
Long Statement,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetStandardEpisodes,The length of the statement  "                    episodeInfo = searchCriteria.Episodes.SingleOrDefault(e => e.SeasonNumber == seasonNumber && e.EpisodeNumber == episodeNumber); " is 127.
Long Statement,NzbDrone.Core.Parser.Model,ParsedEpisodeInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Model\ParsedEpisodeInfo.cs,ToString,The length of the statement  "                episodeString = string.Format("S{0:00}E{1}"' SeasonNumber' string.Join("-"' EpisodeNumbers.Select(c => c.ToString("00")))); " is 123.
Long Statement,NzbDrone.Core.Profiles.Releases,PerlRegexFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Profiles\Releases\PerlRegexFactory.cs,CreateRegex,The length of the statement  "            // For now we simply expect the pattern to be .net compliant. We should probably check and reject perl-specific constructs. " is 123.
Long Statement,NzbDrone.Core.Queue,QueueService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Queue\QueueService.cs,MapQueueItem,The length of the statement  "                queue.Id = HashConverter.GetHashInt31(string.Format("trackedDownload-{0}-ep{1}"' trackedDownload.DownloadItem.DownloadId' episode.Id)); " is 135.
Long Statement,NzbDrone.Core.RemotePathMappings,RemotePathMappingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\RemotePathMappings\RemotePathMappingService.cs,RemapRemoteToLocal,The length of the statement  "                if (host.Equals(mapping.Host' StringComparison.InvariantCultureIgnoreCase) && new OsPath(mapping.RemotePath).Contains(remotePath)) " is 130.
Long Statement,NzbDrone.Core.RemotePathMappings,RemotePathMappingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\RemotePathMappings\RemotePathMappingService.cs,RemapLocalToRemote,The length of the statement  "                if (host.Equals(mapping.Host' StringComparison.InvariantCultureIgnoreCase) && new OsPath(mapping.LocalPath).Contains(localPath)) " is 128.
Long Statement,NzbDrone.Core.Rest,RestSharpExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Rest\RestSharpExtensions.cs,ValidateResponse,The length of the statement  "            Logger.Debug("Validating Responses from [{0}] [{1}] status: [{2}]"' response.Request.Method' restClient.BuildUri(response.Request)' response.StatusCode); " is 153.
Long Statement,NzbDrone.Core.Rest,RestSharpExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Rest\RestSharpExtensions.cs,ValidateResponse,The length of the statement  "                        Logger.Warn("[{0}] [{1}] Failed. [{2}]"' response.Request.Method' response.ResponseUri.ToString()' response.StatusCode); " is 120.
Long Statement,NzbDrone.Core.RootFolders,RootFolderService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\RootFolders\RootFolderService.cs,Add,The length of the statement  "                throw new UnauthorizedAccessException(string.Format("Root folder path '{0}' is not writable by user '{1}'"' rootFolder.Path' Environment.UserName)); " is 148.
Long Statement,NzbDrone.Core.Security,X509CertificateValidationService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Security\X509CertificateValidationService.cs,ShouldByPassValidationError,The length of the statement  "                _logger.Error("https://{0} uses the obsolete md5 hash in it's https certificate' if that is your certificate' please (re)create certificate with better algorithm as soon as possible."' request.RequestUri.Authority); " is 215.
Long Statement,NzbDrone.Core.SeriesStats,SeriesStatisticsRepository,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\SeriesStats\SeriesStatisticsRepository.cs,GetSelectClause,The length of the statement  "                     MIN(CASE WHEN AirDateUtc < @currentDate OR EpisodeFileId > 0 OR Monitored = 0 THEN NULL ELSE AirDateUtc END) AS NextAiringString' " is 129.
Long Statement,NzbDrone.Core.SeriesStats,SeriesStatisticsRepository,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\SeriesStats\SeriesStatisticsRepository.cs,GetSelectClause,The length of the statement  "                     MAX(CASE WHEN AirDateUtc >= @currentDate OR EpisodeFileId = 0 AND Monitored = 0 THEN NULL ELSE AirDateUtc END) AS PreviousAiringString " is 134.
Long Statement,NzbDrone.Core.ThingiProvider,ProviderFactory<TProvider;TProviderDefinition>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\ThingiProvider\ProviderFactory.cs,GetImplementation,The length of the statement  "            return _providers.Select(c => c.GetType()).SingleOrDefault(c => c.Name.Equals(definition.Implementation' StringComparison.InvariantCultureIgnoreCase)); " is 151.
Long Statement,NzbDrone.Core.Tv,EpisodeAddedService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeAddedService.cs,Handle,The length of the statement  "                var previouslyAired = message.Added.Where(a => a.AirDateUtc.HasValue && a.AirDateUtc.Value.Before(DateTime.UtcNow.AddDays(1)) && a.Monitored).ToList(); " is 151.
Long Statement,NzbDrone.Core.Tv,EpisodeCutoffService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeCutoffService.cs,EpisodesWhereCutoffUnmet,The length of the statement  "                    qualitiesBelowCutoff.Add(new QualitiesBelowCutoff(profile.Id' belowCutoff.SelectMany(i => i.GetQualities().Select(q => q.Id)))); " is 128.
Long Statement,NzbDrone.Core.Tv,EpisodeMonitoredService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeMonitoredService.cs,SetEpisodeMonitoredStatus,The length of the statement  "                    ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && (!e.AirDateUtc.HasValue || e.AirDateUtc >= DateTime.UtcNow)); " is 127.
Long Statement,NzbDrone.Core.Tv,EpisodeMonitoredService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeMonitoredService.cs,LegacySetEpisodeMonitoredStatus,The length of the statement  "                ToggleEpisodesMonitoredState(episodes.Where(e => !e.HasFile && e.AirDateUtc.HasValue && e.AirDateUtc.Value.Before(DateTime.UtcNow))' false); " is 140.
Long Statement,NzbDrone.Core.Tv,EpisodeMonitoredService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeMonitoredService.cs,LegacySetEpisodeMonitoredStatus,The length of the statement  "                ToggleEpisodesMonitoredState(episodes.Where(e => !e.HasFile && e.AirDateUtc.HasValue && e.AirDateUtc.Value.Before(DateTime.UtcNow))' true); " is 139.
Long Statement,NzbDrone.Core.Tv,EpisodeRepository,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeRepository.cs,EpisodesWhereCutoffUnmet,The length of the statement  "            pagingSpec.TotalRecords = EpisodesWhereCutoffUnmetQuery(pagingSpec' qualitiesBelowCutoff' languagesBelowCutoff' startingSeasonNumber).GetRowCount(); " is 148.
Long Statement,NzbDrone.Core.Tv,EpisodeRepository,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeRepository.cs,EpisodesWhereCutoffUnmet,The length of the statement  "            pagingSpec.Records = EpisodesWhereCutoffUnmetQuery(pagingSpec' qualitiesBelowCutoff' languagesBelowCutoff' startingSeasonNumber).ToList(); " is 138.
Long Statement,NzbDrone.Core.Tv,EpisodeRepository,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeRepository.cs,BuildLanguageCutoffWhereClause,The length of the statement  "                    clauses.Add(String.Format("([t1].[LanguageProfileId] = {0} AND [t2].[Language] = {1})"' language.ProfileId' belowCutoff)); " is 122.
Long Statement,NzbDrone.Core.Tv,EpisodeRepository,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeRepository.cs,BuildQualityCutoffWhereClause,The length of the statement  "                    clauses.Add(string.Format("([t1].[QualityProfileId] = {0} AND [t2].[Quality] LIKE '%_quality_: {1}'%')"' profile.ProfileId' belowCutoff)); " is 138.
Long Statement,NzbDrone.Core.Tv,EpisodeService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeService.cs,FindEpisodeByTitle,The length of the statement  "                        Position = normalizedReleaseTitle.IndexOf(Parser.Parser.NormalizeEpisodeTitle(episode.Title)' StringComparison.CurrentCultureIgnoreCase)' " is 137.
Long Statement,NzbDrone.Core.Tv,EpisodeService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeService.cs,FindEpisodeByTitle,The length of the statement  "                        Position = cleanNormalizedReleaseTitle.IndexOf(Parser.Parser.CleanSeriesTitle(Parser.Parser.NormalizeEpisodeTitle(episode.Title))' StringComparison.CurrentCultureIgnoreCase)' " is 174.
Long Statement,NzbDrone.Core.Tv,EpisodeService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeService.cs,EpisodesBetweenDates,The length of the statement  "            var episodes = _episodeRepository.EpisodesBetweenDates(start.ToUniversalTime()' end.ToUniversalTime()' includeUnmonitored); " is 123.
Long Statement,NzbDrone.Core.Tv,MoveSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\MoveSeriesService.cs,MoveSingleSeries,The length of the statement  "                _logger.ProgressInfo("Moving {0} from '{1}' to '{2}' ({3}/{4})"' series.Title' sourcePath' destinationPath' index + 1' total); " is 126.
Long Statement,NzbDrone.Core.Tv,RefreshEpisodeService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshEpisodeService.cs,AdjustMultiEpisodeAirTime,The length of the statement  "                    _logger.Debug("Not adjusting multi-episode air times for series {0} season {1} since more than 3 episodes 'aired' on the same day"' series.Title' group.Key.SeasonNumber); " is 170.
Long Statement,NzbDrone.Core.Tv,RefreshEpisodeService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshEpisodeService.cs,AdjustDirectToDvdAirDate,The length of the statement  "            if (series.Status == SeriesStatusType.Ended && allEpisodes.All(v => !v.AirDateUtc.HasValue) && series.FirstAired.HasValue) " is 122.
Long Statement,NzbDrone.Core.Tv,RefreshEpisodeService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshEpisodeService.cs,GetEpisodeToUpdate,The length of the statement  "            return existingEpisodes.FirstOrDefault(e => e.SeasonNumber == episode.SeasonNumber && e.EpisodeNumber == episode.EpisodeNumber); " is 128.
Long Statement,NzbDrone.Core.Tv,RefreshSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,RefreshSeriesInfo,The length of the statement  "                _logger.Warn("Series '{0}' (tvdbid {1}) was replaced with '{2}' (tvdbid {3})' because the original was a duplicate."' series.Title' series.TvdbId' seriesInfo.Title' seriesInfo.TvdbId); " is 184.
Long Statement,NzbDrone.Core.Tv,RefreshSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,UpdateSeasons,The length of the statement  "                    _logger.Debug("New season ({0}) for series: [{1}] {2}' setting monitored to true"' season.SeasonNumber' series.TvdbId' series.Title); " is 133.
Long Statement,NzbDrone.Core.Tv,RefreshSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,Execute,The length of the statement  "                    _logger.Error("Series '{0}' (tvdbid {1}) was not found' it may have been removed from TheTVDB."' series.Title' series.TvdbId); " is 126.
Long Statement,NzbDrone.Core.Tv,RefreshSeriesService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,Execute,The length of the statement  "                            _logger.Error("Series '{0}' (tvdbid {1}) was not found' it may have been removed from TheTVDB."' series.Title' series.TvdbId); " is 126.
Long Statement,NzbDrone.Core.Update,UpdaterConfigProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\ConfigureUpdateMechanism.cs,Handle,The length of the statement  "                    _logger.Info("Update mechanism {0} not supported in the current configuration' changing to {1}."' updateMechanism' packageUpdateMechanism); " is 139.
Long Statement,NzbDrone.Core.Update,UpdaterConfigProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\ConfigureUpdateMechanism.cs,Handle,The length of the statement  "                    _logger.Info("External updater uses branch {0} instead of the currently selected {1}' changing to {0}."' packageBranch' currentBranch); " is 135.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,InstallUpdate,The length of the statement  "                    throw new UpdateFolderNotWritableException("Cannot install update because startup folder '{0}' is not writable by the user '{1}'."' startupFolder' Environment.UserName); " is 169.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,InstallUpdate,The length of the statement  "                    throw new UpdateFolderNotWritableException("Cannot install update because UI folder '{0}' is not writable by the user '{1}'."' uiFolder' Environment.UserName); " is 159.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,InstallUpdate,The length of the statement  "            _diskTransferService.TransferFolder(_appFolderInfo.GetUpdateClientFolder()' updateSandboxFolder' TransferMode.Move' false); " is 123.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,GetUpdaterArgs,The length of the statement  "            return string.Join(" "' processId' updateSandboxFolder.TrimEnd(Path.DirectorySeparatorChar).WrapInQuotes()' executingApplication.WrapInQuotes()' _startupContext.PreservedArguments); " is 181.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,EnsureAppDataSafety,The length of the statement  "                throw new UpdateFailedException("Your Sonarr configuration '{0}' is being stored in application folder '{1}' which will cause data lost during the upgrade. Please remove any symlinks or redirects before trying again."' _appFolderInfo.AppDataFolder' _appFolderInfo.StartUpFolder); " is 279.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,Execute,The length of the statement  "            if (_configFileProvider.UpdateMechanism == UpdateMechanism.BuiltIn && _deploymentInfoProvider.IsExternalUpdateMechanism) " is 120.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,Execute,The length of the statement  "                _logger.ProgressDebug("Built-In updater disabled' please use {0} to install"' _deploymentInfoProvider.PackageUpdateMechanism); " is 126.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,Execute,The length of the statement  "            else if (_configFileProvider.UpdateMechanism != UpdateMechanism.Script && _deploymentInfoProvider.IsExternalUpdateMechanism) " is 124.
Long Statement,NzbDrone.Core.Validation,IpValidation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Validation\IpValidation.cs,NotListenAllIp4Address,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator(@"^(?!0\.0\.0\.0)")).WithMessage("Use * instead of 0.0.0.0"); " is 124.
Long Statement,NzbDrone.Core.Validation,RuleBuilderExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,HaveHttpProtocol,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator("^https?://"' RegexOptions.IgnoreCase)).WithMessage("must start with http:// or https://"); " is 154.
Long Statement,NzbDrone.Core.Validation,RuleBuilderExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidHost,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator("^[-_a-z0-9.]+$"' RegexOptions.IgnoreCase)).WithMessage("must be valid Host without http://"); " is 157.
Long Statement,NzbDrone.Core.Validation,RuleBuilderExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidRootUrl,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator("^https?://[-_a-z0-9.]+"' RegexOptions.IgnoreCase)).WithMessage("must be valid URL that starts with http(s)://"); " is 176.
Long Statement,NzbDrone.Core.Validation,RuleBuilderExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidUrlBase,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator(@"^(?!\/?https?://[-_a-z0-9.]+)"' RegexOptions.IgnoreCase)).WithMessage($"Must be a valid URL path (ie: '{example}')"); " is 182.
Long Statement,NzbDrone.Core.Validation.Paths,SeriesPathValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Validation\Paths\SeriesPathValidator.cs,IsValid,The length of the statement  "            return (!_seriesService.GetAllSeries().Exists(s => s.Path.PathEquals(context.PropertyValue.ToString()) && s.Id != instanceId)); " is 127.
Complex Conditional,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The conditional expression  "list[j].Data.ContainsKey("downloadClient") && list[j].Data["downloadClient"] == grabbedEvent.Data["downloadClient"] &&                              list[j].Data.ContainsKey("downloadClientId") && list[j].Data["downloadClientId"] == grabbedEvent.Data["downloadClientId"]"  is complex.
Complex Conditional,NzbDrone.Core.Datastore.Migration.Framework,SqliteSchemaDumper,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSchemaDumper.cs,ParseCreateTableStatement,The conditional expression  "columnReader.ValueToUpper == "CONSTRAINT" ||                          columnReader.ValueToUpper == "PRIMARY" || columnReader.ValueToUpper == "UNIQUE" ||                          columnReader.ValueToUpper == "CHECK" || columnReader.ValueToUpper == "FOREIGN""  is complex.
Complex Conditional,NzbDrone.Core.Datastore.Migration.Framework,SqliteSyntaxReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSyntaxReader.cs,Read,The conditional expression  "end < Buffer.Length && (char.IsLetter(Buffer[end]) || char.IsNumber(Buffer[end]) || Buffer[end] == '_' || Buffer[end] == '(')"  is complex.
Complex Conditional,NzbDrone.Core.Datastore.Migration.Framework,SqliteSyntaxReader,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSyntaxReader.cs,Read,The conditional expression  "end >= Buffer.Length || Buffer[end] == ''' || Buffer[end] == ')' || char.IsWhiteSpace(Buffer[end])"  is complex.
Complex Conditional,NzbDrone.Core.DecisionEngine.Specifications,UpgradableSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradableSpecification.cs,IsUpgradeAllowed,The conditional expression  "isQualityUpgrade && qualityProfile.UpgradeAllowed ||                  isLanguageUpgrade && languageProfile.UpgradeAllowed"  is complex.
Complex Conditional,NzbDrone.Core.Download,CompletedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,Process,The conditional expression  "(OsInfo.IsWindows && !downloadItemOutputPath.IsWindowsPath) ||                      (OsInfo.IsNotWindows && !downloadItemOutputPath.IsUnixPath)"  is complex.
Complex Conditional,NzbDrone.Core.Download,DownloadEventHub,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadEventHub.cs,Handle,The conditional expression  "_configService.RemoveCompletedDownloads &&                  !message.TrackedDownload.DownloadItem.Removed &&                  message.TrackedDownload.DownloadItem.CanBeRemoved &&                  message.TrackedDownload.DownloadItem.Status != DownloadItemStatus.Downloading"  is complex.
Complex Conditional,NzbDrone.Core.Download,ProcessDownloadDecisions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\ProcessDownloadDecisions.cs,ProcessDecisions,The conditional expression  "downloadProtocol == DownloadProtocol.Usenet && usenetFailed ||                      downloadProtocol == DownloadProtocol.Torrent && torrentFailed"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.Deluge,Deluge,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,AddFromMagnetLink,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)DelugePriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)DelugePriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.Deluge,Deluge,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,AddFromTorrentFile,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)DelugePriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)DelugePriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,AddFromMagnetLink,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)QBittorrentPriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)QBittorrentPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,AddFromTorrentFile,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)QBittorrentPriority.First ||                      !isRecentEpisode && Settings.OlderTvPriority == (int)QBittorrentPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,GetItems,The conditional expression  "torrent.LeftUntilDone == 0 && (torrent.Status == TransmissionTorrentStatus.Stopped ||                                                          torrent.Status == TransmissionTorrentStatus.Seeding ||                                                          torrent.Status == TransmissionTorrentStatus.SeedingWait)"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,AddFromMagnetLink,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)TransmissionPriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)TransmissionPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,AddFromTorrentFile,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)TransmissionPriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)TransmissionPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,AddFromMagnetLink,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)UTorrentPriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)UTorrentPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,AddFromTorrentFile,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)UTorrentPriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)UTorrentPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,GetItems,The conditional expression  "torrent.Status.HasFlag(UTorrentTorrentStatus.Loaded) &&                           torrent.Status.HasFlag(UTorrentTorrentStatus.Checked) && torrent.Remaining == 0 && torrent.Progress == 1.0"  is complex.
Complex Conditional,NzbDrone.Core.Download.TrackedDownloads,TrackedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\TrackedDownloadService.cs,TrackDownload,The conditional expression  "parsedEpisodeInfo == null ||                          trackedDownload.RemoteEpisode == null ||                          trackedDownload.RemoteEpisode.Series == null ||                          trackedDownload.RemoteEpisode.Episodes.Empty()"  is complex.
Complex Conditional,NzbDrone.Core.Download.TrackedDownloads,TrackedDownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\TrackedDownloadService.cs,LogItemChange,The conditional expression  "existingItem == null ||                  existingItem.Status != downloadItem.Status ||                  existingItem.CanBeRemoved != downloadItem.CanBeRemoved ||                  existingItem.CanMoveFiles != downloadItem.CanMoveFiles"  is complex.
Complex Conditional,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,FindMetadataFile,The conditional expression  "parseResult != null &&                  !parseResult.FullSeason &&                  Path.GetExtension(filename).Equals(".nfo"' StringComparison.OrdinalIgnoreCase) &&                  _detectNfo.IsXbmcNfoFile(path)"  is complex.
Complex Conditional,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,PreProcess,The conditional expression  "indexerResponse.HttpResponse.Headers.ContentType != null && indexerResponse.HttpResponse.Headers.ContentType.Contains("text/html") &&                  indexerResponse.HttpRequest.Headers.Accept != null && !indexerResponse.HttpRequest.Headers.Accept.Contains("text/html")"  is complex.
Complex Conditional,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,AddTvIdPageableRequests,The conditional expression  "SupportsAggregatedIdSearch && (includeTvdbSearch || includeTvRageSearch || includeTvMazeSearch)"  is complex.
Complex Conditional,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,EpisodeTitleSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\EpisodeTitleSpecification.cs,IsSatisfiedBy,The conditional expression  "episodeTitleRequired == EpisodeTitleRequiredType.BulkSeasonReleases &&                  allEpisodesOnTheSameDay &&                  episodesInSeason.Count(e => e.AirDateUtc.HasValue &&                                              e.AirDateUtc.Value == firstEpisode.AirDateUtc.Value                                         ) < 4"  is complex.
Complex Conditional,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoCodec,The conditional expression  "videoCodecID.ContainsIgnoreCase("DIV3") ||                      videoCodecID.ContainsIgnoreCase("DIVX") ||                      videoCodecID.ContainsIgnoreCase("DX50") ||                      videoCodecLibrary.StartsWithIgnoreCase("DivX")"  is complex.
Complex Conditional,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoCodec,The conditional expression  "videoFormat.ContainsIgnoreCase("VP6") || videoFormat.ContainsIgnoreCase("VP7") ||                  videoFormat.ContainsIgnoreCase("VP8") || videoFormat.ContainsIgnoreCase("VP9")"  is complex.
Complex Conditional,NzbDrone.Core.MetadataSource.SkyHook,SkyHookProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MetadataSource\SkyHook\SkyHookProxy.cs,SearchForNewSeries,The conditional expression  "slug.IsNullOrWhiteSpace() || slug.Any(char.IsWhiteSpace) || !int.TryParse(slug' out tvdbId) || tvdbId <= 0"  is complex.
Complex Conditional,NzbDrone.Core.Parser,ParsingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetStandardEpisodes,The conditional expression  "sceneMapping != null && sceneMapping.SeasonNumber.HasValue && sceneMapping.SeasonNumber.Value >= 0 &&                      sceneMapping.SceneSeasonNumber == seasonNumber"  is complex.
Complex Conditional,NzbDrone.Core.Parser,QualityParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQualityName,The conditional expression  "sourceMatch.Groups["pdtv"].Success ||                      sourceMatch.Groups["sdtv"].Success ||                      sourceMatch.Groups["dsr"].Success ||                      sourceMatch.Groups["tvrip"].Success"  is complex.
Complex Conditional,NzbDrone.Core.Parser,SceneChecker,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\SceneChecker.cs,IsSceneTitle,The conditional expression  "parsedTitle == null ||                  parsedTitle.ReleaseGroup == null ||                  parsedTitle.Quality.Quality == Qualities.Quality.Unknown ||                  string.IsNullOrWhiteSpace(parsedTitle.SeriesTitle)"  is complex.
Complex Conditional,NzbDrone.Core.Update,UpdaterConfigProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Update\ConfigureUpdateMechanism.cs,Handle,The conditional expression  "packageUpdateMechanism != externalMechanism && updateMechanism == externalMechanism ||                      packageUpdateMechanism == externalMechanism && updateMechanism == UpdateMechanism.BuiltIn"  is complex.
Empty Catch Block,NzbDrone.Core.Indexers,TorrentRssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRssParser.cs,GetInfoHash,The method has an empty catch block.
Empty Catch Block,NzbDrone.Core.MediaFiles,RecycleBinProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\RecycleBinProvider.cs,SetLastWriteTime,The method has an empty catch block.
Empty Catch Block,NzbDrone.Core.MediaFiles,RecycleBinProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\RecycleBinProvider.cs,SetLastWriteTime,The method has an empty catch block.
Empty Catch Block,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,GetLanguagesToken,The method has an empty catch block.
Empty Catch Block,NzbDrone.Core.Parser,QualityParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQuality,The method has an empty catch block.
Magic Number,NzbDrone.Core.Backup,MakeDatabaseBackup,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Backup\MakeDatabaseBackup.cs,BackupDatabase,The following statement contains a magic number: sourceConnection.BackupDatabase(backupConnection' "main"' "main"' -1' null' 500);
Magic Number,NzbDrone.Core.Blacklisting,BlacklistService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Blacklisting\BlacklistService.cs,HasSamePublishedDate,The following statement contains a magic number: return item.PublishedDate.Value.AddMinutes(-2) <= publishedDate &&                     item.PublishedDate.Value.AddMinutes(2) >= publishedDate;
Magic Number,NzbDrone.Core.Blacklisting,BlacklistService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Blacklisting\BlacklistService.cs,HasSamePublishedDate,The following statement contains a magic number: return item.PublishedDate.Value.AddMinutes(-2) <= publishedDate &&                     item.PublishedDate.Value.AddMinutes(2) >= publishedDate;
Magic Number,NzbDrone.Core.Blacklisting,BlacklistService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Blacklisting\BlacklistService.cs,HasSameSize,The following statement contains a magic number: return difference <= 2.Megabytes();
Magic Number,NzbDrone.Core.DataAugmentation.Scene,SceneMappingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Scene\SceneMappingService.cs,FindMappings,The following statement contains a magic number: var closestMatch = candidates.OrderBy(v => seriesTitle.LevenshteinDistance(v.Title' 10' 1' 10))                                           .ThenByDescending(v => v.SeasonNumber)                                           .First();
Magic Number,NzbDrone.Core.DataAugmentation.Scene,SceneMappingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Scene\SceneMappingService.cs,FindMappings,The following statement contains a magic number: var closestMatch = candidates.OrderBy(v => seriesTitle.LevenshteinDistance(v.Title' 10' 1' 10))                                           .ThenByDescending(v => v.SeasonNumber)                                           .First();
Magic Number,NzbDrone.Core.DataAugmentation.Scene,SceneMappingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Scene\SceneMappingService.cs,FilterNonEnglish,The following statement contains a magic number: return titles.Where(title => title.All(c => c <= 255)).ToList();
Magic Number,NzbDrone.Core.DataAugmentation.Xem,XemProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemProxy.cs,GetSceneTvdbNames,The following statement contains a magic number: series.Key == 79151 && seasonNumber > 1
Magic Number,NzbDrone.Core.DataAugmentation.Xem,XemService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,Handle,The following statement contains a magic number: _cache.IsExpired(TimeSpan.FromHours(3))
Magic Number,NzbDrone.Core.Datastore,ConnectionStringFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\ConnectionStringFactory.cs,GetConnectionString,The following statement contains a magic number: connectionBuilder.CacheSize = (int)-10000;
Magic Number,NzbDrone.Core.Datastore,ConnectionStringFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\ConnectionStringFactory.cs,GetConnectionString,The following statement contains a magic number: connectionBuilder.Version = 3;
Magic Number,NzbDrone.Core.Datastore.Migration,add_api_key_to_pushover,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\033_add_api_key_to_pushover.cs,UpdatePushoverSettings,The following statement contains a magic number: settings.Priority == 2
Magic Number,NzbDrone.Core.Datastore.Migration,add_configurable_qualities,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\037_add_configurable_qualities.cs,ConvertQualities,The following statement contains a magic number: var maxSize = qualitySizeReader.GetInt32(2);
Magic Number,NzbDrone.Core.Datastore.Migration,convert_config_to_download_clients,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\043_convert_config_to_download_clients.cs,ConvertToThingyProvder,The following statement contains a magic number: var settings = new ClientSettingsForMigration                                 {                                     Host = GetConfigValue(config' "SabHost"' "localhost")'                                     Port = GetConfigValue(config' "SabPort"' 8080)'                                     ApiKey = GetConfigValue(config' "SabApiKey"' "")'                                     Username = GetConfigValue(config' "SabUsername"' "")'                                     Password = GetConfigValue(config' "SabPassword"' "")'                                     TvCategory = GetConfigValue(config' "SabTvCategory"' "tv")'                                     RecentTvPriority = GetSabnzbdPriority(GetConfigValue(config' "NzbgetRecentTvPriority"' "Default"))'                                     OlderTvPriority = GetSabnzbdPriority(GetConfigValue(config' "NzbgetOlderTvPriority"' "Default"))'                                     UseSsl = GetConfigValue(config' "SabUseSsl"' false)                                 };
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,ConvertFolderSettings,The following statement contains a magic number: var settings = downloadClientReader.GetString(2);
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,ConvertFolderSettings,The following statement contains a magic number: var configContract = downloadClientReader.GetString(3);
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The following statement contains a magic number: historyItems.Add(new MigrationHistoryItem                              {                                  Id = historyRead.GetInt32(0)'                                  EpisodeId = historyRead.GetInt32(1)'                                  SeriesId = historyRead.GetInt32(2)'                                  SourceTitle = historyRead.GetString(3)'                                  Date = historyRead.GetDateTime(4)'                                  Data = Json.Deserialize<Dictionary<string' string>>(historyRead.GetString(5))'                                  EventType = (MigrationHistoryEventType)historyRead.GetInt32(6)                              });
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The following statement contains a magic number: historyItems.Add(new MigrationHistoryItem                              {                                  Id = historyRead.GetInt32(0)'                                  EpisodeId = historyRead.GetInt32(1)'                                  SeriesId = historyRead.GetInt32(2)'                                  SourceTitle = historyRead.GetString(3)'                                  Date = historyRead.GetDateTime(4)'                                  Data = Json.Deserialize<Dictionary<string' string>>(historyRead.GetString(5))'                                  EventType = (MigrationHistoryEventType)historyRead.GetInt32(6)                              });
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The following statement contains a magic number: historyItems.Add(new MigrationHistoryItem                              {                                  Id = historyRead.GetInt32(0)'                                  EpisodeId = historyRead.GetInt32(1)'                                  SeriesId = historyRead.GetInt32(2)'                                  SourceTitle = historyRead.GetString(3)'                                  Date = historyRead.GetDateTime(4)'                                  Data = Json.Deserialize<Dictionary<string' string>>(historyRead.GetString(5))'                                  EventType = (MigrationHistoryEventType)historyRead.GetInt32(6)                              });
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The following statement contains a magic number: historyItems.Add(new MigrationHistoryItem                              {                                  Id = historyRead.GetInt32(0)'                                  EpisodeId = historyRead.GetInt32(1)'                                  SeriesId = historyRead.GetInt32(2)'                                  SourceTitle = historyRead.GetString(3)'                                  Date = historyRead.GetDateTime(4)'                                  Data = Json.Deserialize<Dictionary<string' string>>(historyRead.GetString(5))'                                  EventType = (MigrationHistoryEventType)historyRead.GetInt32(6)                              });
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The following statement contains a magic number: historyItems.Add(new MigrationHistoryItem                              {                                  Id = historyRead.GetInt32(0)'                                  EpisodeId = historyRead.GetInt32(1)'                                  SeriesId = historyRead.GetInt32(2)'                                  SourceTitle = historyRead.GetString(3)'                                  Date = historyRead.GetDateTime(4)'                                  Data = Json.Deserialize<Dictionary<string' string>>(historyRead.GetString(5))'                                  EventType = (MigrationHistoryEventType)historyRead.GetInt32(6)                              });
Magic Number,NzbDrone.Core.Datastore.Migration,convert_quality_models,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\062_convert_quality_models.cs,ConvertQualityModelsOnTable,The following statement contains a magic number: newQualityModel.Revision.Version = 2;
Magic Number,NzbDrone.Core.Datastore.Migration,quality_proper,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\069_quality_proper.cs,ConvertQualityTitle,The following statement contains a magic number: var currentAnime = configReader.GetString(2);
Magic Number,NzbDrone.Core.Datastore.Migration,delay_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\070_delay_profile.cs,GetProfiles,The following statement contains a magic number: profiles.Add(new Profile69                          {                              Id = id'                              GrabDelay = delay * 60                          });
Magic Number,NzbDrone.Core.Datastore.Migration,ProfileUpdater71,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\071_unknown_quality_in_profile.cs,GetProfiles,The following statement contains a magic number: profiles.Add(new Profile71                          {                              Id = profileReader.GetInt32(0)'                              Name = profileReader.GetString(1)'                              Cutoff = profileReader.GetInt32(2)'                              Items = Json.Deserialize<List<ProfileItem71>>(profileReader.GetString(3))'                              Language = profileReader.GetInt32(4)                          });
Magic Number,NzbDrone.Core.Datastore.Migration,ProfileUpdater71,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\071_unknown_quality_in_profile.cs,GetProfiles,The following statement contains a magic number: profiles.Add(new Profile71                          {                              Id = profileReader.GetInt32(0)'                              Name = profileReader.GetString(1)'                              Cutoff = profileReader.GetInt32(2)'                              Items = Json.Deserialize<List<ProfileItem71>>(profileReader.GetString(3))'                              Language = profileReader.GetInt32(4)                          });
Magic Number,NzbDrone.Core.Datastore.Migration,ProfileUpdater71,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\071_unknown_quality_in_profile.cs,GetProfiles,The following statement contains a magic number: profiles.Add(new Profile71                          {                              Id = profileReader.GetInt32(0)'                              Name = profileReader.GetString(1)'                              Cutoff = profileReader.GetInt32(2)'                              Items = Json.Deserialize<List<ProfileItem71>>(profileReader.GetString(3))'                              Language = profileReader.GetInt32(4)                          });
Magic Number,NzbDrone.Core.Datastore.Migration,add_ultrahd_quality_in_profiles,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\101_add_ultrahd_quality_in_profiles.cs,ConvertProfile,The following statement contains a magic number: updater.AppendQuality(16);
Magic Number,NzbDrone.Core.Datastore.Migration,add_ultrahd_quality_in_profiles,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\101_add_ultrahd_quality_in_profiles.cs,ConvertProfile,The following statement contains a magic number: updater.AppendQuality(18);
Magic Number,NzbDrone.Core.Datastore.Migration,add_ultrahd_quality_in_profiles,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\101_add_ultrahd_quality_in_profiles.cs,ConvertProfile,The following statement contains a magic number: updater.AppendQuality(19);
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(8' 1000' "WEB 480p"' new[] {12' 8});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(8' 1000' "WEB 480p"' new[] {12' 8});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(8' 1000' "WEB 480p"' new[] {12' 8});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(8' 1000' "WEB 480p"' new[] {12' 8});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(2' 1001' "DVD"' new[] {2' 13});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(2' 1001' "DVD"' new[] {2' 13});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(2' 1001' "DVD"' new[] {2' 13});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(2' 1001' "DVD"' new[] {2' 13});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(5' 1002' "WEB 720p"' new[] {14' 5});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(5' 1002' "WEB 720p"' new[] {14' 5});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(5' 1002' "WEB 720p"' new[] {14' 5});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(5' 1002' "WEB 720p"' new[] {14' 5});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(3' 1003' "WEB 1080p"' new[] {15' 3});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(3' 1003' "WEB 1080p"' new[] {15' 3});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(3' 1003' "WEB 1080p"' new[] {15' 3});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(3' 1003' "WEB 1080p"' new[] {15' 3});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(18' 1004' "WEB 2160p"' new[] {17' 18});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(18' 1004' "WEB 2160p"' new[] {17' 18});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(18' 1004' "WEB 2160p"' new[] {17' 18});
Magic Number,NzbDrone.Core.Datastore.Migration,add_webrip_and_br480_qualites_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.CreateGroupAt(18' 1004' "WEB 2160p"' new[] {17' 18});
Magic Number,NzbDrone.Core.Datastore.Migration,ProfileUpdater117,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,GetProfiles,The following statement contains a magic number: profiles.Add(new Profile117                                       {                                           Id = profileReader.GetInt32(0)'                                           Name = profileReader.GetString(1)'                                           Cutoff = profileReader.GetInt32(2)'                                           Items = Json.Deserialize<List<ProfileItem117>>(profileReader.GetString(3))                                       });
Magic Number,NzbDrone.Core.Datastore.Migration,ProfileUpdater117,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\117_add_webrip_and_br480_qualites_in_profile.cs,GetProfiles,The following statement contains a magic number: profiles.Add(new Profile117                                       {                                           Id = profileReader.GetInt32(0)'                                           Name = profileReader.GetString(1)'                                           Cutoff = profileReader.GetInt32(2)'                                           Items = Json.Deserialize<List<ProfileItem117>>(profileReader.GetString(3))                                       });
Magic Number,NzbDrone.Core.Datastore.Migration,add_remux_qualities_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\122_add_remux_qualities_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.SplitQualityAppend(19' 21);
Magic Number,NzbDrone.Core.Datastore.Migration,add_remux_qualities_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\122_add_remux_qualities_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.SplitQualityAppend(19' 21);
Magic Number,NzbDrone.Core.Datastore.Migration,add_remux_qualities_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\122_add_remux_qualities_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.SplitQualityAppend(7' 20);
Magic Number,NzbDrone.Core.Datastore.Migration,add_remux_qualities_in_profile,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\122_add_remux_qualities_in_profile.cs,ConvertProfile,The following statement contains a magic number: updater.SplitQualityAppend(7' 20);
Magic Number,NzbDrone.Core.Datastore.Migration,ProfileUpdater122,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\122_add_remux_qualities_in_profile.cs,GetProfiles,The following statement contains a magic number: profiles.Add(new Profile122                          {                              Id = profileReader.GetInt32(0)'                              Name = profileReader.GetString(1)'                              Cutoff = profileReader.GetInt32(2)'                              Items = Json.Deserialize<List<ProfileItem122>>(profileReader.GetString(3))                          });
Magic Number,NzbDrone.Core.Datastore.Migration,ProfileUpdater122,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\122_add_remux_qualities_in_profile.cs,GetProfiles,The following statement contains a magic number: profiles.Add(new Profile122                          {                              Id = profileReader.GetInt32(0)'                              Name = profileReader.GetString(1)'                              Cutoff = profileReader.GetInt32(2)'                              Items = Json.Deserialize<List<ProfileItem122>>(profileReader.GetString(3))                          });
Magic Number,NzbDrone.Core.Datastore.Migration.Framework,MigrationController,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\MigrationController.cs,Migrate,The following statement contains a magic number: var options = new MigrationOptions { PreviewOnly = false' Timeout = 60 };
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareAgeIfUsenet,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode =>              {                  var ageHours = remoteEpisode.Release.AgeHours;                  var age = remoteEpisode.Release.Age;                    if (ageHours < 1)                  {                      return 1000;                  }                    if (ageHours <= 24)                  {                      return 100;                  }                    if (age <= 7)                  {                      return 10;                  }                    return 1;              });
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareAgeIfUsenet,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode =>              {                  var ageHours = remoteEpisode.Release.AgeHours;                  var age = remoteEpisode.Release.Age;                    if (ageHours < 1)                  {                      return 1000;                  }                    if (ageHours <= 24)                  {                      return 100;                  }                    if (age <= 7)                  {                      return 10;                  }                    return 1;              });
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareAgeIfUsenet,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode =>              {                  var ageHours = remoteEpisode.Release.AgeHours;                  var age = remoteEpisode.Release.Age;                    if (ageHours < 1)                  {                      return 1000;                  }                    if (ageHours <= 24)                  {                      return 100;                  }                    if (age <= 7)                  {                      return 10;                  }                    return 1;              });
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareAgeIfUsenet,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode =>              {                  var ageHours = remoteEpisode.Release.AgeHours;                  var age = remoteEpisode.Release.Age;                    if (ageHours < 1)                  {                      return 1000;                  }                    if (ageHours <= 24)                  {                      return 100;                  }                    if (age <= 7)                  {                      return 10;                  }                    return 1;              });
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareAgeIfUsenet,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode =>              {                  var ageHours = remoteEpisode.Release.AgeHours;                  var age = remoteEpisode.Release.Age;                    if (ageHours < 1)                  {                      return 1000;                  }                    if (ageHours <= 24)                  {                      return 100;                  }                    if (age <= 7)                  {                      return 10;                  }                    return 1;              });
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareSize,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode => remoteEpisode.Release.Size.Round(200.Megabytes()));
Magic Number,NzbDrone.Core.DecisionEngine.Specifications,BlockedIndexerSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\BlockedIndexerSpecification.cs,BlockedIndexerSpecification,The following statement contains a magic number: _blockedIndexerCache = cacheManager.GetCacheDictionary(GetType()' "blocked"' FetchBlockedIndexer' TimeSpan.FromSeconds(15));
Magic Number,NzbDrone.Core.DecisionEngine.Specifications,NotSampleSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\NotSampleSpecification.cs,IsSatisfiedBy,The following statement contains a magic number: subject.Release.Title.ToLower().Contains("sample") && subject.Release.Size < 70.Megabytes()
Magic Number,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,IsSatisfiedBy,The following statement contains a magic number: var recent = mostRecent.Date.After(DateTime.UtcNow.AddHours(-12));
Magic Number,NzbDrone.Core.DecisionEngine.Specifications.RssSync,ProperSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\ProperSpecification.cs,IsSatisfiedBy,The following statement contains a magic number: file.DateAdded < DateTime.Today.AddDays(-7)
Magic Number,NzbDrone.Core.Download,DownloadClientStatusService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientStatusService.cs,DownloadClientStatusService,The following statement contains a magic number: MinimumTimeSinceInitialFailure = TimeSpan.FromMinutes(5);
Magic Number,NzbDrone.Core.Download,DownloadClientStatusService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientStatusService.cs,DownloadClientStatusService,The following statement contains a magic number: MaximumEscalationLevel = 5;
Magic Number,NzbDrone.Core.Download,DownloadService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadService.cs,DownloadReport,The following statement contains a magic number: _rateLimitService.WaitAndPulse(url.Host' TimeSpan.FromSeconds(2));
Magic Number,NzbDrone.Core.Download.Clients.Blackhole,ScanWatchFolder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\ScanWatchFolder.cs,GetItems,The following statement contains a magic number: _watchFolderItemCache.Set(watchFolder' newWatchItems' TimeSpan.FromMinutes(5));
Magic Number,NzbDrone.Core.Download.Clients.Blackhole,TorrentBlackhole,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\TorrentBlackhole.cs,TorrentBlackhole,The following statement contains a magic number: ScanGracePeriod = TimeSpan.FromSeconds(30);
Magic Number,NzbDrone.Core.Download.Clients.Blackhole,UsenetBlackhole,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\UsenetBlackhole.cs,UsenetBlackhole,The following statement contains a magic number: ScanGracePeriod = TimeSpan.FromSeconds(30);
Magic Number,NzbDrone.Core.Download.Clients.Deluge,DelugeProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeProxy.cs,BuildRequest,The following statement contains a magic number: requestBuilder.PostProcess += r => r.RequestTimeout = TimeSpan.FromSeconds(15);
Magic Number,NzbDrone.Core.Download.Clients.Deluge,DelugeProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeProxy.cs,ProcessRequest,The following statement contains a magic number: error.Code == 1 || error.Code == 2
Magic Number,NzbDrone.Core.Download.Clients.Deluge,DelugeSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeSettings.cs,DelugeSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.Deluge,DelugeSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeSettings.cs,DelugeSettings,The following statement contains a magic number: Port = 8112;
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,DownloadStationSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\DownloadStationSettings.cs,DownloadStationSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,DownloadStationSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\DownloadStationSettings.cs,DownloadStationSettings,The following statement contains a magic number: this.Port = 5000;
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,SerialNumberProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\SerialNumberProvider.cs,GetSerialNumber,The following statement contains a magic number: return _cache.Get(settings.Host' () => GetHashedSerialNumber(settings)' TimeSpan.FromMinutes(5));
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,ValidateVersion,The following statement contains a magic number: info.MinVersion > 2 || info.MaxVersion < 2
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,ValidateVersion,The following statement contains a magic number: info.MinVersion > 2 || info.MaxVersion < 2
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,ValidateVersion,The following statement contains a magic number: info.MinVersion > 2 || info.MaxVersion < 2
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,ValidateVersion,The following statement contains a magic number: info.MinVersion > 2 || info.MaxVersion < 2
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,AuthenticateClient,The following statement contains a magic number: var requestBuilder = BuildRequest(settings' authInfo' "login"' 2);
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The following statement contains a magic number: requestBuilder.AddFormParameter("_sid"' _sessionCache.Get(GenerateSessionCacheKey(settings)' () => AuthenticateClient(settings)' TimeSpan.FromHours(6)));
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DownloadStationTaskProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DownloadStationTaskProxy.cs,AddTaskFromData,The following statement contains a magic number: var requestBuilder = BuildRequest(settings' "create"' 2' HttpMethod.POST);
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DownloadStationTaskProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DownloadStationTaskProxy.cs,AddTaskFromUrl,The following statement contains a magic number: var requestBuilder = BuildRequest(settings' "create"' 3);
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,FileStationProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\FileStationProxy.cs,GetInfoFileOrDirectory,The following statement contains a magic number: var requestBuilder = BuildRequest(settings' "getinfo"' 2);
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: AuthMessages = new Dictionary<int' string>              {                  { 400' "No such account or incorrect password" }'                  { 401' "Account disabled" }'                  { 402' "Permission denied" }'                  { 403' "2-step verification code required" }'                  { 404' "Failed to authenticate 2-step verification code" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: AuthMessages = new Dictionary<int' string>              {                  { 400' "No such account or incorrect password" }'                  { 401' "Account disabled" }'                  { 402' "Permission denied" }'                  { 403' "2-step verification code required" }'                  { 404' "Failed to authenticate 2-step verification code" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: AuthMessages = new Dictionary<int' string>              {                  { 400' "No such account or incorrect password" }'                  { 401' "Account disabled" }'                  { 402' "Permission denied" }'                  { 403' "2-step verification code required" }'                  { 404' "Failed to authenticate 2-step verification code" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: AuthMessages = new Dictionary<int' string>              {                  { 400' "No such account or incorrect password" }'                  { 401' "Account disabled" }'                  { 402' "Permission denied" }'                  { 403' "2-step verification code required" }'                  { 404' "Failed to authenticate 2-step verification code" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: AuthMessages = new Dictionary<int' string>              {                  { 400' "No such account or incorrect password" }'                  { 401' "Account disabled" }'                  { 402' "Permission denied" }'                  { 403' "2-step verification code required" }'                  { 404' "Failed to authenticate 2-step verification code" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 160' "Permission denied. Give your user access to FileStation."}'                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,GetTorrents,The following statement contains a magic number: torrent.IsFinished = torrent.Progress >= 1000;
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      UploadedBytes = Convert.ToInt64(item[6])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      UploadedBytes = Convert.ToInt64(item[6])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      UploadedBytes = Convert.ToInt64(item[6])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      UploadedBytes = Convert.ToInt64(item[6])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      UploadedBytes = Convert.ToInt64(item[6])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      UploadedBytes = Convert.ToInt64(item[6])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      UploadedBytes = Convert.ToInt64(item[6])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      UploadedBytes = Convert.ToInt64(item[6])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      UploadedBytes = Convert.ToInt64(item[6])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenSettings.cs,HadoukenSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenSettings.cs,HadoukenSettings,The following statement contains a magic number: Port = 7070;
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,GetCategories,The following statement contains a magic number: i < 100
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,MakeInt64,The following statement contains a magic number: result = (result << 32) | (long)low;
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzb,The following statement contains a magic number: HasVersion(16' settings)
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzbLegacy12,The following statement contains a magic number: var item = queue.FirstOrDefault(q => q.NzbName == title.Substring(0' title.Length - 4));
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,RemoveItem,The following statement contains a magic number: id.Length < 10 && int.TryParse(id' out nzbId)
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetSettings.cs,NzbgetSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetSettings.cs,NzbgetSettings,The following statement contains a magic number: Port = 6789;
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,GetItems,The following statement contains a magic number: var vortexQueue = _proxy.GetQueue(30' Settings);
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,TestApiVersion,The following statement contains a magic number: version.Major < 2 || (version.Major == 2 && version.Minor < 3)
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,TestApiVersion,The following statement contains a magic number: version.Major < 2 || (version.Major == 2 && version.Minor < 3)
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,TestApiVersion,The following statement contains a magic number: version.Major < 2 || (version.Major == 2 && version.Minor < 3)
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortexSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortexSettings.cs,NzbVortexSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortexSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortexSettings.cs,NzbVortexSettings,The following statement contains a magic number: Port = 4321;
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,GetRemainingTime,The following statement contains a magic number: torrent.Eta < 0 || torrent.Eta > 365 * 24 * 3600
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,GetRemainingTime,The following statement contains a magic number: torrent.Eta < 0 || torrent.Eta > 365 * 24 * 3600
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,GetRemainingTime,The following statement contains a magic number: torrent.Eta < 0 || torrent.Eta > 365 * 24 * 3600
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,GetRemainingTime,The following statement contains a magic number: torrent.Eta == 8640000
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,HasReachedSeedingTimeLimit,The following statement contains a magic number: _seedingTimeCache.Set(cacheKey' cacheSeedingTime' TimeSpan.FromMinutes(5));
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,HasReachedSeedingTimeLimit,The following statement contains a magic number: _seedingTimeCache.Set(cacheKey' cacheSeedingTime' TimeSpan.FromMinutes(5));
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxySelector,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxySelector.cs,GetProxy,The following statement contains a magic number: return _proxyCache.Get(proxyKey' () => FetchProxy(settings)' TimeSpan.FromMinutes(10.0));
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxyV2,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxyV2.cs,SetTorrentSeedingConfiguration,The following statement contains a magic number: var ratioLimit = seedConfiguration.Ratio.HasValue ? seedConfiguration.Ratio : -2;
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxyV2,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxyV2.cs,SetTorrentSeedingConfiguration,The following statement contains a magic number: var seedingTimeLimit = seedConfiguration.SeedTime.HasValue ? (long)seedConfiguration.SeedTime.Value.TotalMinutes : -2;
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentSettings.cs,QBittorrentSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentSettings.cs,QBittorrentSettings,The following statement contains a magic number: Port = 8080;
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromMagnetLink,The following statement contains a magic number: var tries = 10;
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromMagnetLink,The following statement contains a magic number: var retryDelay = 500;
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromMagnetLink,The following statement contains a magic number: _logger.Warn("rTorrent could not resolve magnet within {0} seconds' download may remain stuck: {1}."' tries * retryDelay / 1000' magnetLink);
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromTorrentFile,The following statement contains a magic number: var tries = 10;
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromTorrentFile,The following statement contains a magic number: var retryDelay = 500;
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromTorrentFile,The following statement contains a magic number: _logger.Debug("rTorrent didn't add the torrent within {0} seconds: {1}."' tries * retryDelay / 1000' filename);
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: var labelDecoded = System.Web.HttpUtility.UrlDecode((string)torrent[3]);
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: item.Path = (string)torrent[2];
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: item.TotalSize = (long)torrent[4];
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: item.RemainingSize = (long)torrent[5];
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: item.DownRate = (long)torrent[6];
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: item.Ratio = (long)torrent[7];
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: item.IsOpen = Convert.ToBoolean((long)torrent[8]);
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: item.IsActive = Convert.ToBoolean((long)torrent[9]);
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: item.IsFinished = Convert.ToBoolean((long)torrent[10]);
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentSettings.cs,RTorrentSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentSettings.cs,RTorrentSettings,The following statement contains a magic number: Port = 8080;
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetQueue,The following statement contains a magic number: queueItem.TotalSize = (long)(sabQueueItem.Size * 1024 * 1024);
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetQueue,The following statement contains a magic number: queueItem.TotalSize = (long)(sabQueueItem.Size * 1024 * 1024);
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetQueue,The following statement contains a magic number: queueItem.RemainingSize = (long)(sabQueueItem.Sizeleft * 1024 * 1024);
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetQueue,The following statement contains a magic number: queueItem.RemainingSize = (long)(sabQueueItem.Sizeleft * 1024 * 1024);
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetQueue,The following statement contains a magic number: queueItem.Title = queueItem.Title.Substring(11);
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetCategories,The following statement contains a magic number: HasVersion(2' 0)
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestConnectionAndVersion,The following statement contains a magic number: version.Minor >= 7
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,SabnzbdSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\SabnzbdSettings.cs,SabnzbdSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,SabnzbdSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\SabnzbdSettings.cs,SabnzbdSettings,The following statement contains a magic number: Port = 8080;
Magic Number,NzbDrone.Core.Download.Clients.Transmission,Transmission,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\Transmission.cs,ValidateVersion,The following statement contains a magic number: version < new Version(2' 40)
Magic Number,NzbDrone.Core.Download.Clients.Transmission,Transmission,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\Transmission.cs,ValidateVersion,The following statement contains a magic number: version < new Version(2' 40)
Magic Number,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,HasReachedSeedLimit,The following statement contains a magic number: (isStopped || isSeeding) && torrent.SecondsSeeding > torrent.SeedIdleLimit * 60
Magic Number,NzbDrone.Core.Download.Clients.Transmission,TransmissionSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionSettings.cs,TransmissionSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.Transmission,TransmissionSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionSettings.cs,TransmissionSettings,The following statement contains a magic number: Port = 9091;
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,GetTorrents,The following statement contains a magic number: _torrentCache.Set(cacheKey' cache' TimeSpan.FromMinutes(15));
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,TestConnection,The following statement contains a magic number: version < 25406
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentProxy.cs,GetConfig,The following statement contains a magic number: configuration.Add(configItem[0].ToString()' configItem[2].ToString());
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentProxy.cs,SetTorrentSeedingConfiguration,The following statement contains a magic number: requestBuilder.AddQueryParam("s"' "seed_ratio")                                .AddQueryParam("v"' Convert.ToInt32(seedConfiguration.Ratio.Value * 1000));
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentSettings.cs,UTorrentSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentSettings.cs,UTorrentSettings,The following statement contains a magic number: Port = 8080;
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentTorrentJsonConverter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentTorrent.cs,ReadJson,The following statement contains a magic number: result.Progress = (int)reader.ReadAsInt32() / 1000.0;
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentTorrentJsonConverter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentTorrent.cs,ReadJson,The following statement contains a magic number: result.Ratio = (int)reader.ReadAsInt32() / 1000.0;
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentTorrentJsonConverter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentTorrent.cs,ReadJson,The following statement contains a magic number: result.Availablity = (int)reader.ReadAsInt32() / 65536.0;
Magic Number,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,DownloadMonitoringService,The following statement contains a magic number: _refreshDebounce = new Debouncer(QueueRefresh' TimeSpan.FromSeconds(5));
Magic Number,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeMetadata,The following statement contains a magic number: var actors = string.Join(" ' "' series.Actors.ConvertAll(c => c.Name + " - " + c.Character).GetRange(0' Math.Min(3' series.Actors.Count)));
Magic Number,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcNfoDetector,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcNfoDetector.cs,IsXbmcNfoFile,The following statement contains a magic number: _diskProvider.GetFileSize(path) > 10.Megabytes()
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Megabytes,The following statement contains a magic number: return Convert.ToInt64(megabytes * 1024L * 1024L);
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Megabytes,The following statement contains a magic number: return Convert.ToInt64(megabytes * 1024L * 1024L);
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Gigabytes,The following statement contains a magic number: return Convert.ToInt64(gigabytes * 1024L * 1024L * 1024L);
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Gigabytes,The following statement contains a magic number: return Convert.ToInt64(gigabytes * 1024L * 1024L * 1024L);
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Gigabytes,The following statement contains a magic number: return Convert.ToInt64(gigabytes * 1024L * 1024L * 1024L);
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Megabytes,The following statement contains a magic number: return Convert.ToInt64(megabytes * 1024L * 1024L);
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Megabytes,The following statement contains a magic number: return Convert.ToInt64(megabytes * 1024L * 1024L);
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Gigabytes,The following statement contains a magic number: return Convert.ToInt64(gigabytes * 1024L * 1024L * 1024L);
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Gigabytes,The following statement contains a magic number: return Convert.ToInt64(gigabytes * 1024L * 1024L * 1024L);
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Gigabytes,The following statement contains a magic number: return Convert.ToInt64(gigabytes * 1024L * 1024L * 1024L);
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,ToBestDateString,The following statement contains a magic number: dateTime > DateTime.Today.AddDays(1) && dateTime < DateTime.Today.AddDays(7)
Magic Number,NzbDrone.Core,Fluent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Truncate,The following statement contains a magic number: charSize = 2;
Magic Number,NzbDrone.Core.HealthCheck.Checks,UpdateCheck,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\UpdateCheck.cs,Check,The following statement contains a magic number: BuildInfo.BuildDateTime < DateTime.UtcNow.AddDays(-14)
Magic Number,NzbDrone.Core.Housekeeping.Housekeepers,CleanupDownloadClientUnavailablePendingReleases,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\CleanupDownloadClientUnavailablePendingReleases.cs,Clean,The following statement contains a magic number: var twoWeeksAgo = DateTime.UtcNow.AddDays(-14);
Magic Number,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,Clean,The following statement contains a magic number: var images = _metaFileService.GetFilesBySeries(show.Id)                      .Where(c => c.LastUpdated > new DateTime(2014' 12' 27) && c.RelativePath.EndsWith(".jpg"' StringComparison.InvariantCultureIgnoreCase));
Magic Number,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,Clean,The following statement contains a magic number: var images = _metaFileService.GetFilesBySeries(show.Id)                      .Where(c => c.LastUpdated > new DateTime(2014' 12' 27) && c.RelativePath.EndsWith(".jpg"' StringComparison.InvariantCultureIgnoreCase));
Magic Number,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,Clean,The following statement contains a magic number: var images = _metaFileService.GetFilesBySeries(show.Id)                      .Where(c => c.LastUpdated > new DateTime(2014' 12' 27) && c.RelativePath.EndsWith(".jpg"' StringComparison.InvariantCultureIgnoreCase));
Magic Number,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,IsValid,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,NzbDrone.Core.IndexerSearch,EpisodeSearchService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\EpisodeSearchService.cs,Execute,The following statement contains a magic number: var pagingSpec = new PagingSpec<Episode>                               {                                   Page = 1'                                   PageSize = 100000'                                   SortDirection = SortDirection.Ascending'                                   SortKey = "Id"                               };
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The following statement contains a magic number: torrentInfo.PublishDate = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).ToUniversalTime().AddSeconds(torrent.Time);
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetRequestGenerator.cs,BroadcastheNetRequestGenerator,The following statement contains a magic number: MaxPages = 10;
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetRequestGenerator.cs,BroadcastheNetRequestGenerator,The following statement contains a magic number: PageSize = 100;
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetRequestGenerator.cs,GetRecentRequests,The following statement contains a magic number: pageableRequests.Add(GetPagedRequests(MaxPages' new BroadcastheNetTorrentQuery()                  {                      Id = ">=" + (LastRecentTorrentID.Value - 100)                  }));
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetRequestGenerator.cs,GetPagedRequests,The following statement contains a magic number: builder.JsonParameters[3] = page * PageSize;
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetSettings.cs,BroadcastheNetSettingsValidator,The following statement contains a magic number: RuleFor(c => c.SeedCriteria).SetValidator(_ => new SeedCriteriaSettingsValidator(1.0' 24*60' 5*24*60));
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetSettings.cs,BroadcastheNetSettingsValidator,The following statement contains a magic number: RuleFor(c => c.SeedCriteria).SetValidator(_ => new SeedCriteriaSettingsValidator(1.0' 24*60' 5*24*60));
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetSettings.cs,BroadcastheNetSettingsValidator,The following statement contains a magic number: RuleFor(c => c.SeedCriteria).SetValidator(_ => new SeedCriteriaSettingsValidator(1.0' 24*60' 5*24*60));
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetSettings.cs,BroadcastheNetSettingsValidator,The following statement contains a magic number: RuleFor(c => c.SeedCriteria).SetValidator(_ => new SeedCriteriaSettingsValidator(1.0' 24*60' 5*24*60));
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetSettings.cs,BroadcastheNetSettingsValidator,The following statement contains a magic number: RuleFor(c => c.SeedCriteria).SetValidator(_ => new SeedCriteriaSettingsValidator(1.0' 24*60' 5*24*60));
Magic Number,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,FetchReleases,The following statement contains a magic number: pagedReleases.Count >= MaxNumResultsPerQuery &&                                      oldestReleaseDate < DateTime.UtcNow - TimeSpan.FromHours(24)
Magic Number,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ParseSize,The following statement contains a magic number: switch (unit)                  {                      case "kb":                          return ConvertToBytes(Convert.ToDouble(value)' 1' defaultToBinaryPrefix);                      case "mb":                          return ConvertToBytes(Convert.ToDouble(value)' 2' defaultToBinaryPrefix);                      case "gb":                          return ConvertToBytes(Convert.ToDouble(value)' 3' defaultToBinaryPrefix);                      case "kib":                          return ConvertToBytes(Convert.ToDouble(value)' 1' true);                      case "mib":                          return ConvertToBytes(Convert.ToDouble(value)' 2' true);                      case "gib":                          return ConvertToBytes(Convert.ToDouble(value)' 3' true);                      default:                          return (long)value;                  }
Magic Number,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ParseSize,The following statement contains a magic number: switch (unit)                  {                      case "kb":                          return ConvertToBytes(Convert.ToDouble(value)' 1' defaultToBinaryPrefix);                      case "mb":                          return ConvertToBytes(Convert.ToDouble(value)' 2' defaultToBinaryPrefix);                      case "gb":                          return ConvertToBytes(Convert.ToDouble(value)' 3' defaultToBinaryPrefix);                      case "kib":                          return ConvertToBytes(Convert.ToDouble(value)' 1' true);                      case "mib":                          return ConvertToBytes(Convert.ToDouble(value)' 2' true);                      case "gib":                          return ConvertToBytes(Convert.ToDouble(value)' 3' true);                      default:                          return (long)value;                  }
Magic Number,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ParseSize,The following statement contains a magic number: switch (unit)                  {                      case "kb":                          return ConvertToBytes(Convert.ToDouble(value)' 1' defaultToBinaryPrefix);                      case "mb":                          return ConvertToBytes(Convert.ToDouble(value)' 2' defaultToBinaryPrefix);                      case "gb":                          return ConvertToBytes(Convert.ToDouble(value)' 3' defaultToBinaryPrefix);                      case "kib":                          return ConvertToBytes(Convert.ToDouble(value)' 1' true);                      case "mib":                          return ConvertToBytes(Convert.ToDouble(value)' 2' true);                      case "gib":                          return ConvertToBytes(Convert.ToDouble(value)' 3' true);                      default:                          return (long)value;                  }
Magic Number,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ParseSize,The following statement contains a magic number: switch (unit)                  {                      case "kb":                          return ConvertToBytes(Convert.ToDouble(value)' 1' defaultToBinaryPrefix);                      case "mb":                          return ConvertToBytes(Convert.ToDouble(value)' 2' defaultToBinaryPrefix);                      case "gb":                          return ConvertToBytes(Convert.ToDouble(value)' 3' defaultToBinaryPrefix);                      case "kib":                          return ConvertToBytes(Convert.ToDouble(value)' 1' true);                      case "mib":                          return ConvertToBytes(Convert.ToDouble(value)' 2' true);                      case "gib":                          return ConvertToBytes(Convert.ToDouble(value)' 3' true);                      default:                          return (long)value;                  }
Magic Number,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ConvertToBytes,The following statement contains a magic number: var prefix = binaryPrefix ? 1024 : 1000;
Magic Number,NzbDrone.Core.Indexers,RssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ConvertToBytes,The following statement contains a magic number: var prefix = binaryPrefix ? 1024 : 1000;
Magic Number,NzbDrone.Core.Indexers.Fanzub,FanzubRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Fanzub\FanzubRequestGenerator.cs,FanzubRequestGenerator,The following statement contains a magic number: PageSize = 100;
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabCapabilities,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabCapabilities.cs,NewznabCapabilities,The following statement contains a magic number: DefaultPageSize = 100;
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabCapabilities,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabCapabilities.cs,NewznabCapabilities,The following statement contains a magic number: MaxPageSize = 100;
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabCapabilitiesProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabCapabilitiesProvider.cs,GetCapabilities,The following statement contains a magic number: var capabilities = _capabilitiesCache.Get(key' () => FetchCapabilities(indexerSettings)' TimeSpan.FromDays(7));
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,NewznabRequestGenerator,The following statement contains a magic number: MaxPages = 30;
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,NewznabRequestGenerator,The following statement contains a magic number: PageSize = 100;
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabRssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRssParser.cs,PreProcess,The following statement contains a magic number: code >= 100 && code <= 199
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabRssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRssParser.cs,PreProcess,The following statement contains a magic number: code >= 100 && code <= 199
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabSettings.cs,NewznabSettings,The following statement contains a magic number: Categories = new[] { 5030' 5040 };
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabSettings.cs,NewznabSettings,The following statement contains a magic number: Categories = new[] { 5030' 5040 };
Magic Number,NzbDrone.Core.Indexers.Nyaa,NyaaRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Nyaa\NyaaRequestGenerator.cs,NyaaRequestGenerator,The following statement contains a magic number: MaxPages = 30;
Magic Number,NzbDrone.Core.Indexers.Nyaa,NyaaRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Nyaa\NyaaRequestGenerator.cs,NyaaRequestGenerator,The following statement contains a magic number: PageSize = 100;
Magic Number,NzbDrone.Core.Indexers.Nyaa,NyaaRequestGenerator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Nyaa\NyaaRequestGenerator.cs,GetSearchRequests,The following statement contains a magic number: searchCriteria.AbsoluteEpisodeNumber < 10
Magic Number,NzbDrone.Core.Indexers.Omgwtfnzbs,OmgwtfnzbsSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Omgwtfnzbs\OmgwtfnzbsSettings.cs,OmgwtfnzbsSettings,The following statement contains a magic number: Delay = 30;
Magic Number,NzbDrone.Core.Indexers.Rarbg,RarbgParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgParser.cs,ParseResponse,The following statement contains a magic number: jsonResponse.Resource.error_code == 20 || jsonResponse.Resource.error_code == 8
Magic Number,NzbDrone.Core.Indexers.Rarbg,RarbgParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgParser.cs,ParseResponse,The following statement contains a magic number: jsonResponse.Resource.error_code == 20 || jsonResponse.Resource.error_code == 8
Magic Number,NzbDrone.Core.Indexers.Rarbg,RarbgTokenProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgTokenProvider.cs,GetToken,The following statement contains a magic number: return _tokenCache.Get(settings.BaseUrl' () =>                  {                      var requestBuilder = new HttpRequestBuilder(settings.BaseUrl.Trim('/'))                          .WithRateLimit(3.0)                          .Resource("/pubapi_v2.php?get_token=get_token&app_id=Sonarr")                          .Accept(HttpAccept.Json);                        if (settings.CaptchaToken.IsNotNullOrWhiteSpace())                      {                          requestBuilder.UseSimplifiedUserAgent = true;                          requestBuilder.SetCookie("cf_clearance"' settings.CaptchaToken);                      }                        var response = _httpClient.Get<JObject>(requestBuilder.Build());                        return response.Resource["token"].ToString();                  }' TimeSpan.FromMinutes(14.0));
Magic Number,NzbDrone.Core.Indexers.Rarbg,RarbgTokenProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgTokenProvider.cs,GetToken,The following statement contains a magic number: return _tokenCache.Get(settings.BaseUrl' () =>                  {                      var requestBuilder = new HttpRequestBuilder(settings.BaseUrl.Trim('/'))                          .WithRateLimit(3.0)                          .Resource("/pubapi_v2.php?get_token=get_token&app_id=Sonarr")                          .Accept(HttpAccept.Json);                        if (settings.CaptchaToken.IsNotNullOrWhiteSpace())                      {                          requestBuilder.UseSimplifiedUserAgent = true;                          requestBuilder.SetCookie("cf_clearance"' settings.CaptchaToken);                      }                        var response = _httpClient.Get<JObject>(requestBuilder.Build());                        return response.Resource["token"].ToString();                  }' TimeSpan.FromMinutes(14.0));
Magic Number,NzbDrone.Core.Indexers.TorrentRss,TorrentRssParserFactory,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssParserFactory.cs,GetParser,The following statement contains a magic number: var parserSettings = _settingsCache.Get(key' () => DetectParserSettings(indexerSettings)' TimeSpan.FromDays(7));
Magic Number,NzbDrone.Core.Indexers.TorrentRss,TorrentRssSettingsDetector,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssSettingsDetector.cs,GetGenericTorrentRssParserSettings,The following statement contains a magic number: releases.Count(r => r.Size >= ValidSizeThreshold) > releases.Count() / 2
Magic Number,NzbDrone.Core.Indexers.Torznab,TorznabRssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torznab\TorznabRssParser.cs,PreProcess,The following statement contains a magic number: code >= 100 && code <= 199
Magic Number,NzbDrone.Core.Indexers.Torznab,TorznabRssParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torznab\TorznabRssParser.cs,PreProcess,The following statement contains a magic number: code >= 100 && code <= 199
Magic Number,NzbDrone.Core.Instrumentation,DatabaseTarget,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\DatabaseTarget.cs,Register,The following statement contains a magic number: var target = new SlowRunningAsyncTargetWrapper(this) { TimeToSleepBetweenBatches = 500 };
Magic Number,NzbDrone.Core.Instrumentation,DatabaseTarget,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\DatabaseTarget.cs,Write,The following statement contains a magic number: log.Logger = log.Logger.Remove(0' 9);
Magic Number,NzbDrone.Core.Instrumentation,LogRepository,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\LogRepository.cs,Trim,The following statement contains a magic number: var trimDate = DateTime.UtcNow.AddDays(-7).Date;
Magic Number,NzbDrone.Core.Instrumentation,SlowRunningAsyncTargetWrapper,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\SlowRunningAsyncTargetWrapper.cs,Write,The following statement contains a magic number: Interlocked.Exchange(ref _state' 2) <= 0
Magic Number,NzbDrone.Core.Jobs,Scheduler,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\Scheduler.cs,Handle,The following statement contains a magic number: Timer.Interval = 1000 * 30;
Magic Number,NzbDrone.Core.Jobs,Scheduler,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\Scheduler.cs,Handle,The following statement contains a magic number: Timer.Interval = 1000 * 30;
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(CleanUpRecycleBinCommand).FullName}'                        new ScheduledTask                      {                          Interval = GetBackupInterval()'                          TypeName = typeof(BackupCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,GetBackupInterval,The following statement contains a magic number: return interval * 60 * 24;
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,GetBackupInterval,The following statement contains a magic number: return interval * 60 * 24;
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,GetRssSyncInterval,The following statement contains a magic number: return 10;
Magic Number,NzbDrone.Core.Jobs,TaskManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,GetRssSyncInterval,The following statement contains a magic number: interval > 0 && interval < 10
Magic Number,NzbDrone.Core.MediaCover,ImageResizer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\ImageResizer.cs,ImageResizer,The following statement contains a magic number: PlatformInfo.IsMono && platformInfo.Version < new System.Version(5' 8)
Magic Number,NzbDrone.Core.MediaCover,ImageResizer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\ImageResizer.cs,ImageResizer,The following statement contains a magic number: PlatformInfo.IsMono && platformInfo.Version < new System.Version(5' 8)
Magic Number,NzbDrone.Core.MediaCover,ImageResizer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\ImageResizer.cs,ImageResizer,The following statement contains a magic number: SixLabors.ImageSharp.Configuration.Default.ImageFormatsManager.SetEncoder(JpegFormat.Instance' new JpegEncoder              {                  Quality = 92              });
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ShouldDeleteFolder,The following statement contains a magic number: rarFiles.Any(f => _diskProvider.GetFileSize(f) > 10.Megabytes())
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Aggregation.Aggregators.Augmenters.Quality,AugmentQualityFromMediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Aggregation\Aggregators\Augmenters\Quality\AugmentQualityFromMediaInfo.cs,AugmentQuality,The following statement contains a magic number: return AugmentQualityResult.ResolutionOnly(2160' Confidence.MediaInfo);
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Aggregation.Aggregators.Augmenters.Quality,AugmentQualityFromMediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Aggregation\Aggregators\Augmenters\Quality\AugmentQualityFromMediaInfo.cs,AugmentQuality,The following statement contains a magic number: width >= 3200
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Aggregation.Aggregators.Augmenters.Quality,AugmentQualityFromMediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Aggregation\Aggregators\Augmenters\Quality\AugmentQualityFromMediaInfo.cs,AugmentQuality,The following statement contains a magic number: return AugmentQualityResult.ResolutionOnly(1080' Confidence.MediaInfo);
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Aggregation.Aggregators.Augmenters.Quality,AugmentQualityFromMediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Aggregation\Aggregators\Augmenters\Quality\AugmentQualityFromMediaInfo.cs,AugmentQuality,The following statement contains a magic number: width >= 1800
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Aggregation.Aggregators.Augmenters.Quality,AugmentQualityFromMediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Aggregation\Aggregators\Augmenters\Quality\AugmentQualityFromMediaInfo.cs,AugmentQuality,The following statement contains a magic number: return AugmentQualityResult.ResolutionOnly(720' Confidence.MediaInfo);
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Aggregation.Aggregators.Augmenters.Quality,AugmentQualityFromMediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Aggregation\Aggregators\Augmenters\Quality\AugmentQualityFromMediaInfo.cs,AugmentQuality,The following statement contains a magic number: width >= 1200
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Aggregation.Aggregators.Augmenters.Quality,AugmentQualityFromMediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Aggregation\Aggregators\Augmenters\Quality\AugmentQualityFromMediaInfo.cs,AugmentQuality,The following statement contains a magic number: return AugmentQualityResult.ResolutionOnly(480' Confidence.MediaInfo);
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: return 15;
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: series.Runtime <= 3
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: return 90;
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: series.Runtime <= 10
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: return 300;
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: series.Runtime <= 30
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: return 600;
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,EpisodeTitleSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\EpisodeTitleSpecification.cs,IsSatisfiedBy,The following statement contains a magic number: episodeTitleRequired == EpisodeTitleRequiredType.BulkSeasonReleases &&                  allEpisodesOnTheSameDay &&                  episodesInSeason.Count(e => e.AirDateUtc.HasValue &&                                              e.AirDateUtc.Value == firstEpisode.AirDateUtc.Value                                         ) < 4
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,NotUnpackingSpecification,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\NotUnpackingSpecification.cs,IsSatisfiedBy,The following statement contains a magic number: _diskProvider.FileGetLastWrite(localEpisode.Path) > DateTime.UtcNow.AddMinutes(-5)
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioChannelsFromAudioChannelPositionsText,The following statement contains a magic number: return audioChannelPositionsText.ContainsIgnoreCase("LFE") ? audioChannels - 1 + 0.1m : audioChannels;
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioChannelsFromAudioChannels,The following statement contains a magic number: mediaInfo.SchemaRevision >= 3
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoDynamicRange,The following statement contains a magic number: mediaInfo.VideoBitDepth >= 10 &&                  mediaInfo.VideoColourPrimaries.IsNotNullOrWhiteSpace() &&                  mediaInfo.VideoTransferCharacteristics.IsNotNullOrWhiteSpace()
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MakeStringParameter,The following statement contains a magic number: Array.Resize(ref buffer' buffer.Length + 4);
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Open,The following statement contains a magic number: stream.Length < 1024
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Open,The following statement contains a magic number: var buffer = new byte[16 * 1024];
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Open,The following statement contains a magic number: var buffer = new byte[16 * 1024];
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Open,The following statement contains a magic number: Logger.Trace("Read a total of {0} bytes ({1:0.0}%)"' totalRead' totalRead * 100.0 / stream.Length);
Magic Number,NzbDrone.Core.Messaging.Commands,CommandQueue,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Commands\CommandQueue.cs,GetConsumingEnumerable,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NzbDrone.Core.Messaging.Commands,CommandQueueManager,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Commands\CommandQueueManager.cs,CleanCommands,The following statement contains a magic number: var commands = _commandQueue.All()                                          .Where(c => c.EndedAt < DateTime.UtcNow.AddMinutes(-5))                                          .ToList();
Magic Number,NzbDrone.Core.Messaging.Commands,TestCommand,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Commands\TestCommand.cs,TestCommand,The following statement contains a magic number: Duration = 4000;
Magic Number,NzbDrone.Core.MetadataSource,SearchSeriesComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MetadataSource\SearchSeriesComparer.cs,GetYearFactor,The following statement contains a magic number: return 20 - 10 * offset;
Magic Number,NzbDrone.Core.MetadataSource,SearchSeriesComparer,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MetadataSource\SearchSeriesComparer.cs,GetYearFactor,The following statement contains a magic number: return 20 - 10 * offset;
Magic Number,NzbDrone.Core.Notifications.Email,EmailSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Email\EmailSettings.cs,EmailSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Notifications.Email,EmailSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Email\EmailSettings.cs,EmailSettings,The following statement contains a magic number: Port = 25;
Magic Number,NzbDrone.Core.Notifications.Gotify,GotifySettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Gotify\GotifySettings.cs,GotifySettings,The following statement contains a magic number: Priority = 5;
Magic Number,NzbDrone.Core.Notifications.Growl,GrowlService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlService.cs,SendNotification,The following statement contains a magic number: requestState.Wait(5000);
Magic Number,NzbDrone.Core.Notifications.Growl,GrowlService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlService.cs,Register,The following statement contains a magic number: requestState.Wait(5000);
Magic Number,NzbDrone.Core.Notifications.Growl,GrowlSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlSettings.cs,GrowlSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Notifications.Growl,GrowlSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlSettings.cs,GrowlSettings,The following statement contains a magic number: Port = 23053;
Magic Number,NzbDrone.Core.Notifications.Emby,MediaBrowserSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\MediaBrowser\MediaBrowserSettings.cs,MediaBrowserSettings,The following statement contains a magic number: Port = 8096;
Magic Number,NzbDrone.Core.Notifications.Plex.HomeTheater,PlexClientSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\HomeTheater\PlexClientSettings.cs,PlexClientSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Notifications.Plex.HomeTheater,PlexClientSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\HomeTheater\PlexClientSettings.cs,PlexClientSettings,The following statement contains a magic number: Port = 3000;
Magic Number,NzbDrone.Core.Notifications.Plex.HomeTheater,PlexHomeTheaterSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\HomeTheater\PlexHomeTheaterSettings.cs,PlexHomeTheaterSettings,The following statement contains a magic number: Port = 3005;
Magic Number,NzbDrone.Core.Notifications.Plex.Server,PlexServerService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServerService.cs,UpdateLibrary,The following statement contains a magic number: var version = _versionCache.Get(settings.Host' () => GetVersion(settings)' TimeSpan.FromHours(2));
Magic Number,NzbDrone.Core.Notifications.Plex.Server,PlexServerService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServerService.cs,UpdateLibrary,The following statement contains a magic number: var partialUpdates = _partialUpdateCache.Get(settings.Host' () => PartialUpdatesAllowed(settings' version)' TimeSpan.FromHours(2));
Magic Number,NzbDrone.Core.Notifications.Plex.Server,PlexServerService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServerService.cs,PartialUpdatesAllowed,The following statement contains a magic number: version >= new Version(0' 9' 12' 0)
Magic Number,NzbDrone.Core.Notifications.Plex.Server,PlexServerService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServerService.cs,PartialUpdatesAllowed,The following statement contains a magic number: version >= new Version(0' 9' 12' 0)
Magic Number,NzbDrone.Core.Notifications.Plex.Server,PlexServerService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServerService.cs,ValidateVersion,The following statement contains a magic number: version >= new Version(1' 3' 0) && version < new Version(1' 3' 1)
Magic Number,NzbDrone.Core.Notifications.Plex.Server,PlexServerService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServerService.cs,ValidateVersion,The following statement contains a magic number: version >= new Version(1' 3' 0) && version < new Version(1' 3' 1)
Magic Number,NzbDrone.Core.Notifications.Plex.Server,PlexServerSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServerSettings.cs,PlexServerSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Notifications.Plex.Server,PlexServerSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\Server\PlexServerSettings.cs,PlexServerSettings,The following statement contains a magic number: Port = 32400;
Magic Number,NzbDrone.Core.Notifications.Pushover,PushoverSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Pushover\PushoverSettings.cs,PushoverSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Retry).GreaterThanOrEqualTo(30).LessThanOrEqualTo(86400).When(c => (PushoverPriority)c.Priority == PushoverPriority.Emergency);
Magic Number,NzbDrone.Core.Notifications.Pushover,PushoverSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Pushover\PushoverSettings.cs,PushoverSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Retry).GreaterThanOrEqualTo(30).LessThanOrEqualTo(86400).When(c => (PushoverPriority)c.Priority == PushoverPriority.Emergency);
Magic Number,NzbDrone.Core.Notifications.Pushover,PushoverSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Pushover\PushoverSettings.cs,PushoverSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Retry).GreaterThanOrEqualTo(0).LessThanOrEqualTo(86400).When(c => (PushoverPriority)c.Priority == PushoverPriority.Emergency);
Magic Number,NzbDrone.Core.Notifications.Webhook,Webhook,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Webhook\Webhook.cs,SendWebhookTest,The following statement contains a magic number: var payload = new WebhookGrabPayload                      {                          EventType = "Test"'                          Series = new WebhookSeries()                          {                              Id = 1'                              Title = "Test Title"'                              Path = "C:\\testpath"'                              TvdbId = 1234                          }'                          Episodes = new List<WebhookEpisode>() {                              new WebhookEpisode()                              {                                  Id = 123'                                  EpisodeNumber = 1'                                  SeasonNumber = 1'                                  Title = "Test title"                              }                          }                      };
Magic Number,NzbDrone.Core.Notifications.Webhook,Webhook,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Webhook\Webhook.cs,SendWebhookTest,The following statement contains a magic number: var payload = new WebhookGrabPayload                      {                          EventType = "Test"'                          Series = new WebhookSeries()                          {                              Id = 1'                              Title = "Test Title"'                              Path = "C:\\testpath"'                              TvdbId = 1234                          }'                          Episodes = new List<WebhookEpisode>() {                              new WebhookEpisode()                              {                                  Id = 123'                                  EpisodeNumber = 1'                                  SeasonNumber = 1'                                  Title = "Test title"                              }                          }                      };
Magic Number,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,CanHandle,The following statement contains a magic number: return version < new XbmcVersion(5);
Magic Number,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,Notify,The following statement contains a magic number: var notification = string.Format("Notification({0}'{1}'{2}'{3})"' title' message' settings.DisplayTime * 1000' "https://raw.github.com/Sonarr/Sonarr/develop/Logo/64.png");
Magic Number,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,CheckForError,The following statement contains a magic number: var errorMessage = response.Substring(errorIndex + 6);
Magic Number,NzbDrone.Core.Notifications.Xbmc,JsonApiProvider,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\JsonApiProvider.cs,CanHandle,The following statement contains a magic number: return version >= new XbmcVersion(5);
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcJsonApiProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcJsonApiProxy.cs,Notify,The following statement contains a magic number: parameters.Add("displaytime"' settings.DisplayTime * 1000);
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcJsonApiProxy,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcJsonApiProxy.cs,ProcessRequest,The following statement contains a magic number: request.AddBody(new { jsonrpc = "2.0"' method = method' id = 10' @params = parameters });
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcService.cs,GetJsonVersion,The following statement contains a magic number: return _xbmcVersionCache.Get(settings.Address' () =>              {                  var response = _proxy.GetJsonVersion(settings);                    _logger.Debug("Getting version from response: " + response);                  var result = Json.Deserialize<XbmcJsonResult<JObject>>(response);                    var versionObject = result.Result.Property("version");                    if (versionObject.Value.Type == JTokenType.Integer)                  {                      return new XbmcVersion((int)versionObject.Value);                  }                    if (versionObject.Value.Type == JTokenType.Object)                  {                      return Json.Deserialize<XbmcVersion>(versionObject.Value.ToString());                  }                    throw new InvalidCastException("Unknown Version structure!: " + versionObject);              }' TimeSpan.FromHours(12));
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcSettingsValidator,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcSettings.cs,XbmcSettingsValidator,The following statement contains a magic number: RuleFor(c => c.DisplayTime).GreaterThanOrEqualTo(2);
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcSettings.cs,XbmcSettings,The following statement contains a magic number: Port = 8080;
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcSettings,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcSettings.cs,XbmcSettings,The following statement contains a magic number: DisplayTime = 5;
Magic Number,NzbDrone.Core.Notifications.Xbmc.Model,XbmcVersion,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\Model\XbmcVersion.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,NzbDrone.Core.Notifications.Xbmc.Model,XbmcVersion,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\Model\XbmcVersion.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Major.GetHashCode();
Magic Number,NzbDrone.Core.Notifications.Xbmc.Model,XbmcVersion,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\Model\XbmcVersion.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Minor.GetHashCode();
Magic Number,NzbDrone.Core.Notifications.Xbmc.Model,XbmcVersion,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\Model\XbmcVersion.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Patch.GetHashCode();
Magic Number,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,BuildFileName,The following statement contains a magic number: var maxEpisodeTitleLength = 255 - GetLengthWithoutEpisodeTitle(component' namingConfig);
Magic Number,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,GetEpisodeTitle,The following statement contains a magic number: firstTitle.Length + lastTitle.Length + 3 <= maxLength
Magic Number,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,GetEpisodeTitle,The following statement contains a magic number: titles.Count >= 2
Magic Number,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,GetEpisodeTitle,The following statement contains a magic number: titles.Count > 1 && firstTitle.Length + 3 <= maxLength
Magic Number,NzbDrone.Core.Organizer,FileNameBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,GetEpisodeTitle,The following statement contains a magic number: return $"{firstTitle.Substring(0' maxLength - 3).Trim(' '' '.')}{{ellipsis}}";
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _standardSeries = new Series              {                  SeriesType = SeriesTypes.Standard'                  Title = "The Series Title!"'                  Year = 2010'                  ImdbId = "tt12345"'                  TvdbId = 12345'                  TvMazeId = 54321              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _standardSeries = new Series              {                  SeriesType = SeriesTypes.Standard'                  Title = "The Series Title!"'                  Year = 2010'                  ImdbId = "tt12345"'                  TvdbId = 12345'                  TvMazeId = 54321              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _standardSeries = new Series              {                  SeriesType = SeriesTypes.Standard'                  Title = "The Series Title!"'                  Year = 2010'                  ImdbId = "tt12345"'                  TvdbId = 12345'                  TvMazeId = 54321              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _dailySeries = new Series              {                  SeriesType = SeriesTypes.Daily'                  Title = "The Series Title!"'                  Year = 2010'                  ImdbId = "tt12345"'                  TvdbId = 12345'                  TvMazeId = 54321              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _dailySeries = new Series              {                  SeriesType = SeriesTypes.Daily'                  Title = "The Series Title!"'                  Year = 2010'                  ImdbId = "tt12345"'                  TvdbId = 12345'                  TvMazeId = 54321              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _dailySeries = new Series              {                  SeriesType = SeriesTypes.Daily'                  Title = "The Series Title!"'                  Year = 2010'                  ImdbId = "tt12345"'                  TvdbId = 12345'                  TvMazeId = 54321              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _animeSeries = new Series              {                  SeriesType = SeriesTypes.Anime'                  Title = "The Series Title!"'                  Year = 2010'                  ImdbId = "tt12345"'                  TvdbId = 12345'                  TvMazeId = 54321              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _animeSeries = new Series              {                  SeriesType = SeriesTypes.Anime'                  Title = "The Series Title!"'                  Year = 2010'                  ImdbId = "tt12345"'                  TvdbId = 12345'                  TvMazeId = 54321              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _animeSeries = new Series              {                  SeriesType = SeriesTypes.Anime'                  Title = "The Series Title!"'                  Year = 2010'                  ImdbId = "tt12345"'                  TvdbId = 12345'                  TvMazeId = 54321              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _episode2 = new Episode              {                  SeasonNumber = 1'                  EpisodeNumber = 2'                  Title = "Episode Title (2)"'                  AbsoluteEpisodeNumber = 2              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _episode2 = new Episode              {                  SeasonNumber = 1'                  EpisodeNumber = 2'                  Title = "Episode Title (2)"'                  AbsoluteEpisodeNumber = 2              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _episode3 = new Episode              {                  SeasonNumber = 1'                  EpisodeNumber = 3'                  Title = "Episode Title (3)"'                  AbsoluteEpisodeNumber = 3              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _episode3 = new Episode              {                  SeasonNumber = 1'                  EpisodeNumber = 3'                  Title = "Episode Title (3)"'                  AbsoluteEpisodeNumber = 3              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: var mediaInfo = new MediaInfoModel()              {                  VideoCodec = "AVC"'                  VideoBitDepth = 10'                  VideoColourPrimaries = "BT.2020"'                  VideoTransferCharacteristics = "HLG"'                  AudioFormat = "DTS"'                  AudioChannels = 6'                  AudioChannelPositions = "3/2/0.1"'                  AudioLanguages = "English"'                  Subtitles = "English/German"              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: var mediaInfo = new MediaInfoModel()              {                  VideoCodec = "AVC"'                  VideoBitDepth = 10'                  VideoColourPrimaries = "BT.2020"'                  VideoTransferCharacteristics = "HLG"'                  AudioFormat = "DTS"'                  AudioChannels = 6'                  AudioChannelPositions = "3/2/0.1"'                  AudioLanguages = "English"'                  Subtitles = "English/German"              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: var mediaInfoAnime = new MediaInfoModel()              {                  VideoCodec = "AVC"'                  VideoBitDepth = 10'                  VideoColourPrimaries = "BT.2020"'                  VideoTransferCharacteristics = "HLG"'                  AudioFormat = "DTS"'                  AudioChannels = 6'                  AudioChannelPositions = "3/2/0.1"'                  AudioLanguages = "Japanese"'                  Subtitles = "Japanese/English"              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: var mediaInfoAnime = new MediaInfoModel()              {                  VideoCodec = "AVC"'                  VideoBitDepth = 10'                  VideoColourPrimaries = "BT.2020"'                  VideoTransferCharacteristics = "HLG"'                  AudioFormat = "DTS"'                  AudioChannels = 6'                  AudioChannelPositions = "3/2/0.1"'                  AudioLanguages = "Japanese"'                  Subtitles = "Japanese/English"              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _singleEpisodeFile = new EpisodeFile              {                  Quality = new QualityModel(Quality.HDTV720p' new Revision(2))'                  RelativePath = "Series.Title.S01E01.720p.HDTV.x264-EVOLVE.mkv"'                  SceneName = "Series.Title.S01E01.720p.HDTV.x264-EVOLVE"'                  ReleaseGroup = "RlsGrp"'                  MediaInfo = mediaInfo              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _multiEpisodeFile = new EpisodeFile              {                  Quality = new QualityModel(Quality.HDTV720p' new Revision(2))'                  RelativePath = "Series.Title.S01E01-E03.720p.HDTV.x264-EVOLVE.mkv"'                  SceneName = "Series.Title.S01E01-E03.720p.HDTV.x264-EVOLVE"'                  ReleaseGroup = "RlsGrp"'                  MediaInfo = mediaInfo'              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _dailyEpisodeFile = new EpisodeFile              {                  Quality = new QualityModel(Quality.HDTV720p' new Revision(2))'                  RelativePath = "Series.Title.2013.10.30.HDTV.x264-EVOLVE.mkv"'                  SceneName = "Series.Title.2013.10.30.HDTV.x264-EVOLVE"'                  ReleaseGroup = "RlsGrp"'                  MediaInfo = mediaInfo              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _animeEpisodeFile = new EpisodeFile              {                  Quality = new QualityModel(Quality.HDTV720p' new Revision(2))'                  RelativePath = "[RlsGroup] Series Title - 001 [720p].mkv"'                  SceneName = "[RlsGroup] Series Title - 001 [720p]"'                  ReleaseGroup = "RlsGrp"'                  MediaInfo = mediaInfoAnime              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _animeMultiEpisodeFile = new EpisodeFile              {                  Quality = new QualityModel(Quality.HDTV720p' new Revision(2))'                  RelativePath = "[RlsGroup] Series Title - 001 - 103 [720p].mkv"'                  SceneName = "[RlsGroup] Series Title - 001 - 103 [720p]"'                  ReleaseGroup = "RlsGrp"'                  MediaInfo = mediaInfoAnime              };
Magic Number,NzbDrone.Core.Parser,IsoLanguages,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\IsoLanguages.cs,Find,The following statement contains a magic number: isoCode.Length == 2
Magic Number,NzbDrone.Core.Parser,Parser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseMatchCollection,The following statement contains a magic number: airYear < 1900
Magic Number,NzbDrone.Core.Parser,QualityParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQualityModifiers,The following statement contains a magic number: result.Revision.Version = 2;
Magic Number,NzbDrone.Core.Parser,QualityParser,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQualityModifiers,The following statement contains a magic number: result.Revision.Version = 2;
Magic Number,NzbDrone.Core.Parser.Model,RemoteEpisode,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Model\RemoteEpisode.cs,IsRecentEpisode,The following statement contains a magic number: return Episodes.Any(e => e.AirDateUtc >= DateTime.UtcNow.Date.AddDays(-14));
Magic Number,NzbDrone.Core.Profiles.Delay,DelayProfileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Profiles\Delay\DelayProfileService.cs,BestForTags,The following statement contains a magic number: return _bestForTagsCache.Get(key' () => FetchBestForTags(tagIds)' TimeSpan.FromSeconds(30));
Magic Number,NzbDrone.Core.Profiles.Delay,DelayProfileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Profiles\Delay\DelayProfileService.cs,Reorder,The following statement contains a magic number: var afterCount = afterOrder + 2;
Magic Number,NzbDrone.Core.Profiles.Qualities,QualityProfileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Profiles\Qualities\QualityProfileService.cs,GetDefaultProfile,The following statement contains a magic number: var groupId = 1000;
Magic Number,NzbDrone.Core.Profiles.Releases,TermMatcherService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Profiles\Releases\TermMatcherService.cs,GetMatcher,The following statement contains a magic number: return _matcherCache.Get(term' () => CreateMatcherInternal(term)' TimeSpan.FromHours(24));
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,Quality,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 1' MaxSize = 199.9 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 2' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBRip480p)  { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 2' MaxSize = 100'  GroupName = "WEB 480p" }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.Bluray480p)  { Weight = 5'  MinSize = 2' MaxSize = 100'  GroupName = "DVD" }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 6'  MinSize = 3' MaxSize = 125 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 7'  MinSize = 4' MaxSize = 125 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 8'  MinSize = 4' MaxSize = null }'                  new QualityDefinition(Quality.WEBRip720p)  { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 9'  MinSize = 3' MaxSize = 130'  GroupName = "WEB 720p" }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 10' MinSize = 4' MaxSize = 130 }'                  new QualityDefinition(Quality.WEBRip1080p) { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 11' MinSize = 4' MaxSize = 130'  GroupName = "WEB 1080p" }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 12' MinSize = 4' MaxSize = 155 }'                  new QualityDefinition(Quality.Bluray1080pRemux) { Weight = 13' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 14' MinSize = 35' MaxSize = 199.9 }'                  new QualityDefinition(Quality.WEBRip2160p) { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 15' MinSize = 35' MaxSize = null' GroupName = "WEB 2160p" }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 16' MinSize = 35' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160pRemux) { Weight = 17' MinSize = 35' MaxSize = null }              };
Magic Number,NzbDrone.Core.Qualities,QualityDefinitionService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\QualityDefinitionService.cs,GetAll,The following statement contains a magic number: return _cache.Get("all"' () => _repo.All().Select(WithWeight).ToDictionary(v => v.Quality)' TimeSpan.FromSeconds(5.0));
Magic Number,NzbDrone.Core.Qualities,QualityModel,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\QualityModel.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,NzbDrone.Core.Qualities,QualityModel,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\QualityModel.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Revision.GetHashCode();
Magic Number,NzbDrone.Core.Qualities,QualityModel,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\QualityModel.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Quality.GetHashCode();
Magic Number,NzbDrone.Core.Qualities,Revision,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Revision.cs,GetHashCode,The following statement contains a magic number: return Version ^ Real << 8;
Magic Number,NzbDrone.Core.RemotePathMappings,RemotePathMappingService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\RemotePathMappings\RemotePathMappingService.cs,All,The following statement contains a magic number: return _cache.Get("all"' () => _remotePathMappingRepository.All().ToList()' TimeSpan.FromSeconds(10));
Magic Number,NzbDrone.Core.RootFolders,RootFolderService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\RootFolders\RootFolderService.cs,GetDetails,The following statement contains a magic number: Task.Run(() =>              {                  if (_diskProvider.FolderExists(rootFolder.Path))                  {                      rootFolder.Accessible = true;                      rootFolder.FreeSpace = _diskProvider.GetAvailableSpace(rootFolder.Path);                      rootFolder.TotalSpace = _diskProvider.GetTotalSize(rootFolder.Path);                      rootFolder.UnmappedFolders = GetUnmappedFolders(rootFolder.Path);                  }              }).Wait(5000);
Magic Number,TinyTwitter,RequestBuilder,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\TinyTwitter.cs,GetTimestamp,The following statement contains a magic number: return ((int)(DateTime.UtcNow - new DateTime(1970' 1' 1)).TotalSeconds).ToString();
Magic Number,NzbDrone.Core.Tv,EpisodeMonitoredService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeMonitoredService.cs,SetEpisodeMonitoredStatus,The following statement contains a magic number: switch (monitoringOptions.Monitor)              {                  case MonitorTypes.All:                      _logger.Debug("[{0}] Monitoring all episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0);                        break;                    case MonitorTypes.Future:                      _logger.Debug("[{0}] Monitoring future episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && (!e.AirDateUtc.HasValue || e.AirDateUtc >= DateTime.UtcNow));                        break;                    case MonitorTypes.Missing:                      _logger.Debug("[{0}] Monitoring missing episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && !e.HasFile);                        break;                    case MonitorTypes.Existing:                      _logger.Debug("[{0}] Monitoring existing episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && e.HasFile);                        break;                    case MonitorTypes.FirstSeason:                      _logger.Debug("[{0}] Monitoring first season episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && e.SeasonNumber == firstSeason);                        break;                    case MonitorTypes.LatestSeason:                        if (episodes.Where(e => e.SeasonNumber == lastSeason)                                  .All(e => e.AirDateUtc.HasValue &&                                            e.AirDateUtc.Value.Before(DateTime.UtcNow) &&                                            !e.AirDateUtc.Value.InLastDays(90)))                      {                          _logger.Debug("[{0}] Unmonitoring all episodes because latest season aired more than 90 days ago"' series.Title);                          ToggleEpisodesMonitoredState(episodes' e => false);                          break;                      }                        _logger.Debug("[{0}] Monitoring latest season episodes"' series.Title);                        ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && e.SeasonNumber == lastSeason);                        break;                    case MonitorTypes.None:                      _logger.Debug("[{0}] Unmonitoring all episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => false);                        break;              }
Magic Number,NzbDrone.Core.Tv,RefreshEpisodeService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshEpisodeService.cs,AdjustMultiEpisodeAirTime,The following statement contains a magic number: group.Key.SeasonNumber != 0 && group.Count() > 3
Magic Number,NzbDrone.Core.Tv,ShouldRefreshSeries,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\ShouldRefreshSeries.cs,ShouldRefresh,The following statement contains a magic number: series.LastInfoSync < DateTime.UtcNow.AddDays(-30)
Magic Number,NzbDrone.Core.Tv,ShouldRefreshSeries,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\ShouldRefreshSeries.cs,ShouldRefresh,The following statement contains a magic number: series.LastInfoSync >= DateTime.UtcNow.AddHours(-6)
Magic Number,NzbDrone.Core.Tv,ShouldRefreshSeries,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\ShouldRefreshSeries.cs,ShouldRefresh,The following statement contains a magic number: lastEpisode != null && lastEpisode.AirDateUtc > DateTime.UtcNow.AddDays(-30)
Magic Number,NzbDrone.Core.Validation,RuleBuilderExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidPort,The following statement contains a magic number: return ruleBuilder.SetValidator(new InclusiveBetweenValidator(1' 65535))                                .Must(x =>                                {                                    if (x <= 1024)                                    {                                        if (x == 80 || x == 443)                                        {                                            return true;                                        }                                          return false;                                    }                                      return true;                                });
Magic Number,NzbDrone.Core.Validation,RuleBuilderExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidPort,The following statement contains a magic number: return ruleBuilder.SetValidator(new InclusiveBetweenValidator(1' 65535))                                .Must(x =>                                {                                    if (x <= 1024)                                    {                                        if (x == 80 || x == 443)                                        {                                            return true;                                        }                                          return false;                                    }                                      return true;                                });
Magic Number,NzbDrone.Core.Validation,RuleBuilderExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidPort,The following statement contains a magic number: return ruleBuilder.SetValidator(new InclusiveBetweenValidator(1' 65535))                                .Must(x =>                                {                                    if (x <= 1024)                                    {                                        if (x == 80 || x == 443)                                        {                                            return true;                                        }                                          return false;                                    }                                      return true;                                });
Magic Number,NzbDrone.Core.Validation,RuleBuilderExtensions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidPort,The following statement contains a magic number: return ruleBuilder.SetValidator(new InclusiveBetweenValidator(1' 65535))                                .Must(x =>                                {                                    if (x <= 1024)                                    {                                        if (x == 80 || x == 443)                                        {                                            return true;                                        }                                          return false;                                    }                                      return true;                                });
Missing Default,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,GetStatus,The following switch statement is missing a default case: switch (torrent.Status)              {                  case DownloadStationTaskStatus.Unknown:                  case DownloadStationTaskStatus.Waiting:                  case DownloadStationTaskStatus.FilehostingWaiting:                      return torrent.Size == 0 || GetRemainingSize(torrent) > 0 ? DownloadItemStatus.Queued : DownloadItemStatus.Completed;                  case DownloadStationTaskStatus.Paused:                      return DownloadItemStatus.Paused;                  case DownloadStationTaskStatus.Finished:                  case DownloadStationTaskStatus.Seeding:                      return DownloadItemStatus.Completed;                  case DownloadStationTaskStatus.Error:                      return DownloadItemStatus.Failed;              }
Missing Default,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,GetStatus,The following switch statement is missing a default case: switch (task.Status)              {                  case DownloadStationTaskStatus.Unknown:                  case DownloadStationTaskStatus.Waiting:                  case DownloadStationTaskStatus.FilehostingWaiting:                      return task.Size == 0 || GetRemainingSize(task) > 0 ? DownloadItemStatus.Queued : DownloadItemStatus.Completed;                  case DownloadStationTaskStatus.Paused:                      return DownloadItemStatus.Paused;                  case DownloadStationTaskStatus.Finished:                  case DownloadStationTaskStatus.Seeding:                      return DownloadItemStatus.Completed;                  case DownloadStationTaskStatus.Error:                      return DownloadItemStatus.Failed;              }
Missing Default,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,SetInitialState,The following switch statement is missing a default case: switch ((QBittorrentState)Settings.InitialState)                  {                      case QBittorrentState.ForceStart:                          Proxy.SetForceStart(hash' true' Settings);                          break;                      case QBittorrentState.Start:                          Proxy.ResumeTorrent(hash' Settings);                          break;                      case QBittorrentState.Pause:                          Proxy.PauseTorrent(hash' Settings);                          break;                  }
Missing Default,NzbDrone.Core.Exceptions,StatusCodeToExceptions,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Exceptions\StatusCodeToExceptions.cs,VerifyStatusCode,The following switch statement is missing a default case: switch (statusCode)              {                  case HttpStatusCode.BadRequest:                      throw new BadRequestException(message);                    case HttpStatusCode.Unauthorized:                      throw new UnauthorizedAccessException(message);                    case HttpStatusCode.PaymentRequired:                      throw new DownstreamException(statusCode' message);                    case HttpStatusCode.InternalServerError:                      throw new DownstreamException(statusCode' message);              }
Missing Default,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,FindMetadataFile,The following switch statement is missing a default case: switch (Path.GetExtension(filename).ToLowerInvariant())                  {                      case ".xml":                          metadata.Type = MetadataType.EpisodeMetadata;                          return metadata;                      case ".metathumb":                          metadata.Type = MetadataType.EpisodeImage;                          return metadata;                  }
Missing Default,NzbDrone.Core.MediaFiles,UpdateEpisodeFileService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\UpdateEpisodeFileService.cs,ChangeFileDate,The following switch statement is missing a default case: switch (_configService.FileDate)              {                  case FileDateType.LocalAirDate:                      {                          var airDate = episodes.First().AirDate;                          var airTime = series.AirTime;                            if (airDate.IsNullOrWhiteSpace() || airTime.IsNullOrWhiteSpace())                          {                              return false;                          }                            return ChangeFileDateToLocalAirDate(episodeFilePath' airDate' airTime);                      }                    case FileDateType.UtcAirDate:                      {                          var airDateUtc = episodes.First().AirDateUtc;                            if (!airDateUtc.HasValue)                          {                              return false;                          }                            return ChangeFileDateToUtcAirDate(episodeFilePath' airDateUtc.Value);                      }              }
Missing Default,NzbDrone.Core.Parser.Model,TorrentInfo,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Model\TorrentInfo.cs,ToString,The following switch statement is missing a default case: switch (format.ToUpperInvariant())              {                  case "L": // Long format                      stringBuilder.AppendLine("MagnetUrl: " + MagnetUrl ?? "Empty");                      stringBuilder.AppendLine("InfoHash: " + InfoHash ?? "Empty");                      stringBuilder.AppendLine("Seeders: " + Seeders ?? "Empty");                      stringBuilder.AppendLine("Peers: " + Peers ?? "Empty");                      break;              }
Missing Default,NzbDrone.Core.Tv,EpisodeMonitoredService,D:\research\architectureSmells\repos1\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeMonitoredService.cs,SetEpisodeMonitoredStatus,The following switch statement is missing a default case: switch (monitoringOptions.Monitor)              {                  case MonitorTypes.All:                      _logger.Debug("[{0}] Monitoring all episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0);                        break;                    case MonitorTypes.Future:                      _logger.Debug("[{0}] Monitoring future episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && (!e.AirDateUtc.HasValue || e.AirDateUtc >= DateTime.UtcNow));                        break;                    case MonitorTypes.Missing:                      _logger.Debug("[{0}] Monitoring missing episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && !e.HasFile);                        break;                    case MonitorTypes.Existing:                      _logger.Debug("[{0}] Monitoring existing episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && e.HasFile);                        break;                    case MonitorTypes.FirstSeason:                      _logger.Debug("[{0}] Monitoring first season episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && e.SeasonNumber == firstSeason);                        break;                    case MonitorTypes.LatestSeason:                        if (episodes.Where(e => e.SeasonNumber == lastSeason)                                  .All(e => e.AirDateUtc.HasValue &&                                            e.AirDateUtc.Value.Before(DateTime.UtcNow) &&                                            !e.AirDateUtc.Value.InLastDays(90)))                      {                          _logger.Debug("[{0}] Unmonitoring all episodes because latest season aired more than 90 days ago"' series.Title);                          ToggleEpisodesMonitoredState(episodes' e => false);                          break;                      }                        _logger.Debug("[{0}] Monitoring latest season episodes"' series.Title);                        ToggleEpisodesMonitoredState(episodes' e => e.SeasonNumber > 0 && e.SeasonNumber == lastSeason);                        break;                    case MonitorTypes.None:                      _logger.Debug("[{0}] Unmonitoring all episodes"' series.Title);                      ToggleEpisodesMonitoredState(episodes' e => false);                        break;              }
