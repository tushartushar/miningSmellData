Implementation smell,Namespace,Class,File,Method,Description
Long Method,NzbDrone.Core.Datastore.Migration,InitialSetup,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\001_initial_setup.cs,MainDbUpgrade,The method has 108 lines of code.
Long Method,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,FetchReleases,The method has 149 lines of code.
Long Method,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The method has 124 lines of code.
Long Method,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The method has 102 lines of code.
Long Method,NzbDrone.Core.Parser,Parser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseMatchCollection,The method has 121 lines of code.
Long Method,NzbDrone.Core.Parser,QualityParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQualityName,The method has 214 lines of code.
Complex Method,NzbDrone.Core.DataAugmentation.Xem,XemService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,ExtrapolateMappings,Cyclomatic complexity of the method is 15
Complex Method,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,Cyclomatic complexity of the method is 13
Complex Method,NzbDrone.Core.Datastore.Migration.Framework,SqliteSyntaxReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSyntaxReader.cs,Read,Cyclomatic complexity of the method is 14
Complex Method,NzbDrone.Core.DecisionEngine,DownloadDecisionMaker,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionMaker.cs,GetDecisions,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DelaySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DelaySpecification.cs,IsSatisfiedBy,Cyclomatic complexity of the method is 10
Complex Method,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,IsSatisfiedBy,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Download,CompletedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,Process,Cyclomatic complexity of the method is 10
Complex Method,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,GetHistory,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetHistory,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,FetchReleases,Cyclomatic complexity of the method is 13
Complex Method,NzbDrone.Core.Indexers.Newznab,NewznabCapabilitiesProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabCapabilitiesProvider.cs,ParseCapabilities,Cyclomatic complexity of the method is 10
Complex Method,NzbDrone.Core.Indexers.Rarbg,RarbgParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgParser.cs,ParseResponse,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Indexers.TorrentRss,TorrentRssSettingsDetector,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssSettingsDetector.cs,GetGenericTorrentRssParserSettings,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.IndexerSearch,NzbSearchService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SeasonSearch,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ProcessFolder,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ProcessFile,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,MatchesFolderSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\MatchesFolderSpecification.cs,IsSatisfiedBy,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioCodec,Cyclomatic complexity of the method is 18
Complex Method,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioCodecLegacy,Cyclomatic complexity of the method is 11
Complex Method,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoCodec,Cyclomatic complexity of the method is 19
Complex Method,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoCodecLegacy,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Messaging.Commands,CommandEqualityComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Commands\CommandEqualityComparer.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,FindMetadataFile,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,FindMetadataFile,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Extras.Metadata,ExistingMetadataImporter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\ExistingMetadataImporter.cs,ProcessFiles,Cyclomatic complexity of the method is 9
Complex Method,NzbDrone.Core.Organizer,FileNameBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,BuildFileName,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Parser,LanguageParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\LanguageParser.cs,ParseLanguage,Cyclomatic complexity of the method is 22
Complex Method,NzbDrone.Core.Parser,LanguageParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\LanguageParser.cs,RegexLanguage,Cyclomatic complexity of the method is 12
Complex Method,NzbDrone.Core.Parser,Parser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseTitle,Cyclomatic complexity of the method is 12
Complex Method,NzbDrone.Core.Parser,Parser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseMatchCollection,Cyclomatic complexity of the method is 16
Complex Method,NzbDrone.Core.Parser,ParsingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,ParseSpecialEpisodeTitle,Cyclomatic complexity of the method is 8
Complex Method,NzbDrone.Core.Parser,ParsingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetSeries,Cyclomatic complexity of the method is 12
Complex Method,NzbDrone.Core.Parser,ParsingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetStandardEpisodes,Cyclomatic complexity of the method is 12
Complex Method,NzbDrone.Core.Parser,QualityParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQualityName,Cyclomatic complexity of the method is 42
Complex Method,NzbDrone.Core.Tv,EpisodeMonitoredService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeMonitoredService.cs,SetEpisodeMonitoredStatus,Cyclomatic complexity of the method is 8
Long Parameter List,NzbDrone.Core.Backup,BackupService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Backup\BackupService.cs,BackupService,The method has 7 parameters. Parameters: maindDb' makeDatabaseBackup' diskTransferService' diskProvider' appFolderInfo' archiveService' logger
Long Parameter List,NzbDrone.Core.DataAugmentation.Scene,SceneMappingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Scene\SceneMappingService.cs,SceneMappingService,The method has 5 parameters. Parameters: repository' cacheManager' sceneMappingProviders' eventAggregator' logger
Long Parameter List,NzbDrone.Core.DataAugmentation.Xem,XemService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,XemService,The method has 5 parameters. Parameters: episodeService' xemProxy' seriesService' cacheManager' logger
Long Parameter List,NzbDrone.Core.Datastore.Migration,convert_config_to_download_clients,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\043_convert_config_to_download_clients.cs,AddDownloadClient,The method has 7 parameters. Parameters: conn' tran' name' implementation' settings' configContract' protocol
Long Parameter List,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,NzbDroneSqliteProcessor,The method has 5 parameters. Parameters: connection' generator' announcer' options' factory
Long Parameter List,NzbDrone.Core.Download,CompletedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,CompletedDownloadService,The method has 7 parameters. Parameters: configService' eventAggregator' historyService' downloadedEpisodesImportService' parsingService' seriesService' logger
Long Parameter List,NzbDrone.Core.Download,UsenetClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\UsenetClientBase.cs,UsenetClientBase,The method has 6 parameters. Parameters: httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download,TorrentClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,TorrentClientBase,The method has 6 parameters. Parameters: torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download,DownloadClientFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientFactory.cs,DownloadClientFactory,The method has 6 parameters. Parameters: downloadClientStatusService' providerRepository' providers' container' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Download,DownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadService.cs,DownloadService,The method has 6 parameters. Parameters: downloadClientProvider' downloadClientStatusService' indexerStatusService' rateLimitService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Blackhole,TorrentBlackhole,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\TorrentBlackhole.cs,TorrentBlackhole,The method has 7 parameters. Parameters: scanWatchFolder' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Blackhole,UsenetBlackhole,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\UsenetBlackhole.cs,UsenetBlackhole,The method has 7 parameters. Parameters: scanWatchFolder' httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Deluge,Deluge,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,Deluge,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,DiskStationProxyBase,The method has 5 parameters. Parameters: apiType' apiName' httpClient' cacheManager' logger
Long Parameter List,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The method has 5 parameters. Parameters: settings' apiInfo' methodName' apiVersion' httpVerb
Long Parameter List,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TorrentDownloadStation,The method has 11 parameters. Parameters: sharedFolderResolver' serialNumberProvider' fileStationProxy' dsInfoProxy' dsTaskProxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,UsenetDownloadStation,The method has 11 parameters. Parameters: sharedFolderResolver' serialNumberProvider' fileStationProxy' dsInfoProxy' dsTaskProxy' httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Hadouken,Hadouken,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\Hadouken.cs,Hadouken,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,Nzbget,The method has 7 parameters. Parameters: proxy' httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,INzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzb,The method has 6 parameters. Parameters: nzbData' title' category' priority' addpaused' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzb,The method has 6 parameters. Parameters: nzbData' title' category' priority' addpaused' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzbLegacy13,The method has 5 parameters. Parameters: nzbData' title' category' priority' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzbLegacy12,The method has 5 parameters. Parameters: nzbData' title' category' priority' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,EditQueue,The method has 5 parameters. Parameters: command' offset' editText' id' settings
Long Parameter List,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,NzbVortex,The method has 7 parameters. Parameters: proxy' httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Pneumatic,Pneumatic,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Pneumatic\Pneumatic.cs,Pneumatic,The method has 5 parameters. Parameters: httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,QBittorrent,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,Sabnzbd,The method has 7 parameters. Parameters: proxy' httpClient' configService' diskProvider' remotePathMappingService' nzbValidationService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Sabnzbd,ISabnzbdProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\SabnzbdProxy.cs,DownloadNzb,The method has 5 parameters. Parameters: nzbData' filename' category' priority' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Sabnzbd,SabnzbdProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\SabnzbdProxy.cs,DownloadNzb,The method has 5 parameters. Parameters: nzbData' filename' category' priority' settings
Long Parameter List,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,RTorrent,The method has 8 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' rTorrentDirectoryValidator' logger
Long Parameter List,NzbDrone.Core.Download.Clients.RTorrent,IRTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,AddTorrentFromUrl,The method has 5 parameters. Parameters: torrentUrl' label' priority' directory' settings
Long Parameter List,NzbDrone.Core.Download.Clients.RTorrent,IRTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,AddTorrentFromFile,The method has 6 parameters. Parameters: fileName' fileContent' label' priority' directory' settings
Long Parameter List,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,AddTorrentFromUrl,The method has 5 parameters. Parameters: torrentUrl' label' priority' directory' settings
Long Parameter List,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,AddTorrentFromFile,The method has 6 parameters. Parameters: fileName' fileContent' label' priority' directory' settings
Long Parameter List,NzbDrone.Core.Download.Clients.Transmission,Transmission,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\Transmission.cs,Transmission,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,TransmissionBase,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,UTorrent,The method has 8 parameters. Parameters: proxy' cacheManager' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Clients.Vuze,Vuze,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Vuze\Vuze.cs,Vuze,The method has 7 parameters. Parameters: proxy' torrentFileInfoReader' httpClient' configService' diskProvider' remotePathMappingService' logger
Long Parameter List,NzbDrone.Core.Download.Pending,PendingReleaseService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Pending\PendingReleaseService.cs,PendingReleaseService,The method has 9 parameters. Parameters: indexerStatusService' repository' seriesService' parsingService' delayProfileService' taskManager' configService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,DownloadMonitoringService,The method has 9 parameters. Parameters: downloadClientStatusService' downloadClientFactory' eventAggregator' manageCommandQueue' configService' failedDownloadService' completedDownloadService' trackedDownloadService' logger
Long Parameter List,NzbDrone.Core.Extras,ExtraService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ExtraService.cs,ExtraService,The method has 6 parameters. Parameters: mediaFileService' episodeService' diskProvider' configService' extraFileManagers' logger
Long Parameter List,NzbDrone.Core.Extras.Files,IManageExtraFiles,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Files\ExtraFileManager.cs,Import,The method has 5 parameters. Parameters: series' episodeFile' path' extension' readOnly
Long Parameter List,NzbDrone.Core.Extras.Files,ExtraFileManager<TExtraFile>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Files\ExtraFileManager.cs,Import,The method has 5 parameters. Parameters: series' episodeFile' path' extension' readOnly
Long Parameter List,NzbDrone.Core.Extras.Files,ExtraFileManager<TExtraFile>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Files\ExtraFileManager.cs,ImportFile,The method has 6 parameters. Parameters: series' episodeFile' path' readOnly' extension' fileNameSuffix
Long Parameter List,NzbDrone.Core.Extras.Files,ExtraFileService<TExtraFile>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Files\ExtraFileService.cs,ExtraFileService,The method has 5 parameters. Parameters: repository' seriesService' diskProvider' recycleBinProvider' logger
Long Parameter List,NzbDrone.Core.Extras.Metadata.Files,MetadataFileService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Files\MetadataFileService.cs,MetadataFileService,The method has 5 parameters. Parameters: repository' seriesService' diskProvider' recycleBinProvider' logger
Long Parameter List,NzbDrone.Core.Extras.Others,OtherExtraFileService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Others\OtherExtraFileService.cs,OtherExtraFileService,The method has 5 parameters. Parameters: repository' seriesService' diskProvider' recycleBinProvider' logger
Long Parameter List,NzbDrone.Core.Extras.Others,OtherExtraService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Others\OtherExtraService.cs,OtherExtraService,The method has 5 parameters. Parameters: configService' diskProvider' diskTransferService' otherExtraFileService' logger
Long Parameter List,NzbDrone.Core.Extras.Others,OtherExtraService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Others\OtherExtraService.cs,Import,The method has 5 parameters. Parameters: series' episodeFile' path' extension' readOnly
Long Parameter List,NzbDrone.Core.Extras.Subtitles,SubtitleFileService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Subtitles\SubtitleFileService.cs,SubtitleFileService,The method has 5 parameters. Parameters: repository' seriesService' diskProvider' recycleBinProvider' logger
Long Parameter List,NzbDrone.Core.Extras.Subtitles,SubtitleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Subtitles\SubtitleService.cs,SubtitleService,The method has 5 parameters. Parameters: configService' diskProvider' diskTransferService' subtitleFileService' logger
Long Parameter List,NzbDrone.Core.Extras.Subtitles,SubtitleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Subtitles\SubtitleService.cs,Import,The method has 5 parameters. Parameters: series' episodeFile' path' extension' readOnly
Long Parameter List,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,DeleteBadMediaCovers,The method has 5 parameters. Parameters: metaFileService' seriesService' diskProvider' configService' logger
Long Parameter List,NzbDrone.Core.Indexers.BitMeTv,BitMeTv,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BitMeTv\BitMeTv.cs,BitMeTv,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNet,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNet.cs,BroadcastheNet,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers,IndexerFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\IndexerFactory.cs,IndexerFactory,The method has 6 parameters. Parameters: indexerStatusService' providerRepository' providers' container' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,HttpIndexerBase,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers,RssSyncService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssSyncService.cs,RssSyncService,The method has 8 parameters. Parameters: indexerStatusService' indexerFactory' rssFetcherAndParser' downloadDecisionMaker' processDownloadDecisions' pendingReleaseService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Indexers.Fanzub,Fanzub,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Fanzub\Fanzub.cs,Fanzub,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.HDBits,HDBits,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HDBits\HDBits.cs,HDBits,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.IPTorrents,IPTorrents,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\IPTorrents\IPTorrents.cs,IPTorrents,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Newznab,Newznab,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\Newznab.cs,Newznab,The method has 6 parameters. Parameters: capabilitiesProvider' httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,AddTvIdPageableRequests,The method has 5 parameters. Parameters: chain' maxPages' categories' searchCriteria' parameters
Long Parameter List,NzbDrone.Core.Indexers.Nyaa,Nyaa,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Nyaa\Nyaa.cs,Nyaa,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Omgwtfnzbs,Omgwtfnzbs,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Omgwtfnzbs\Omgwtfnzbs.cs,Omgwtfnzbs,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Rarbg,Rarbg,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\Rarbg.cs,Rarbg,The method has 6 parameters. Parameters: tokenProvider' httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Torrentleech,Torrentleech,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torrentleech\Torrentleech.cs,Torrentleech,The method has 5 parameters. Parameters: httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.TorrentRss,TorrentRssIndexer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssIndexer.cs,TorrentRssIndexer,The method has 6 parameters. Parameters: torrentRssParserFactory' httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.Indexers.Torznab,Torznab,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torznab\Torznab.cs,Torznab,The method has 6 parameters. Parameters: capabilitiesProvider' httpClient' indexerStatusService' configService' parsingService' logger
Long Parameter List,NzbDrone.Core.IndexerSearch,EpisodeSearchService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\EpisodeSearchService.cs,EpisodeSearchService,The method has 5 parameters. Parameters: nzbSearchService' processDownloadDecisions' episodeService' queueService' logger
Long Parameter List,NzbDrone.Core.IndexerSearch,NzbSearchService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,NzbSearchService,The method has 6 parameters. Parameters: indexerFactory' sceneMapping' seriesService' episodeService' makeDownloadDecision' logger
Long Parameter List,NzbDrone.Core.MediaCover,MediaCoverService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,MediaCoverService,The method has 8 parameters. Parameters: resizer' httpClient' diskProvider' appFolderInfo' coverExistsSpecification' configFileProvider' eventAggregator' logger
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,ImportApprovedEpisodes,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportApprovedEpisodes.cs,ImportApprovedEpisodes,The method has 6 parameters. Parameters: episodeFileUpgrader' mediaFileService' extraService' diskProvider' eventAggregator' logger
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,IMakeImportDecision,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,GetImportDecisions,The method has 5 parameters. Parameters: videoFiles' series' downloadClientItem' folderInfo' sceneSource
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,ImportDecisionMaker,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,ImportDecisionMaker,The method has 7 parameters. Parameters: specifications' parsingService' mediaFileService' diskProvider' videoFileInfoReader' detectSample' logger
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,ImportDecisionMaker,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,GetImportDecisions,The method has 5 parameters. Parameters: videoFiles' series' downloadClientItem' folderInfo' sceneSource
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport,ImportDecisionMaker,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportDecisionMaker.cs,GetDecision,The method has 6 parameters. Parameters: file' series' downloadClientItem' folderInfo' sceneSource' shouldUseFolderName
Long Parameter List,NzbDrone.Core.MediaFiles,DiskScanService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DiskScanService.cs,DiskScanService,The method has 8 parameters. Parameters: diskProvider' importDecisionMaker' importApprovedEpisodes' configService' seriesService' mediaFileTableCleanupService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,DownloadedEpisodesImportService,The method has 8 parameters. Parameters: diskProvider' diskScanService' seriesService' parsingService' importDecisionMaker' importApprovedEpisodes' detectSample' logger
Long Parameter List,NzbDrone.Core.MediaFiles,DownloadedEpisodesCommandService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesCommandService.cs,DownloadedEpisodesCommandService,The method has 5 parameters. Parameters: downloadedEpisodesImportService' trackedDownloadService' diskProvider' configService' logger
Long Parameter List,NzbDrone.Core.MediaFiles,EpisodeFileMovingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeFileMovingService.cs,EpisodeFileMovingService,The method has 9 parameters. Parameters: episodeService' updateEpisodeFileService' buildFileNames' diskTransferService' diskProvider' mediaFileAttributeService' eventAggregator' configService' logger
Long Parameter List,NzbDrone.Core.MediaFiles,EpisodeFileMovingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeFileMovingService.cs,TransferFile,The method has 5 parameters. Parameters: episodeFile' series' episodes' destinationFilePath' mode
Long Parameter List,NzbDrone.Core.MediaFiles,RenameEpisodeFileService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\RenameEpisodeFileService.cs,RenameEpisodeFileService,The method has 8 parameters. Parameters: seriesService' mediaFileService' episodeFileMover' eventAggregator' episodeService' filenameBuilder' diskProvider' logger
Long Parameter List,NzbDrone.Core.MediaFiles,UpgradeMediaFileService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\UpgradeMediaFileService.cs,UpgradeMediaFileService,The method has 5 parameters. Parameters: recycleBinProvider' mediaFileService' episodeFileMover' diskProvider' logger
Long Parameter List,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ManualImportService,The method has 12 parameters. Parameters: diskProvider' parsingService' diskScanService' importDecisionMaker' seriesService' episodeService' videoFileInfoReader' importApprovedEpisodes' trackedDownloadService' downloadedEpisodesImportService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.MediaFiles.Events,EpisodeImportedEvent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\Events\EpisodeImportedEvent.cs,EpisodeImportedEvent,The method has 5 parameters. Parameters: episodeInfo' importedEpisode' oldFiles' newDownload' downloadClientItem
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Get,The method has 5 parameters. Parameters: streamKind' streamNumber' parameter' infoKind' searchKind
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MediaInfo_GetI,The method has 5 parameters. Parameters: handle' streamKind' streamNumber' parameter' infoKind
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MediaInfo_Get,The method has 6 parameters. Parameters: handle' streamKind' streamNumber' parameter' infoKind' searchKind
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MediaInfoA_GetI,The method has 5 parameters. Parameters: handle' streamKind' streamNumber' parameter' infoKind
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MediaInfoA_Get,The method has 6 parameters. Parameters: handle' streamKind' streamNumber' parameter' infoKind' searchKind
Long Parameter List,NzbDrone.Core.MediaFiles.MediaInfo,UpdateMediaInfoService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\UpdateMediaInfoService.cs,UpdateMediaInfoService,The method has 5 parameters. Parameters: diskProvider' mediaFileService' videoFileInfoReader' configService' logger
Long Parameter List,NzbDrone.Core.Extras.Metadata,MetadataFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\MetadataFactory.cs,MetadataFactory,The method has 5 parameters. Parameters: providerRepository' providers' container' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Extras.Metadata,MetadataService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\MetadataService.cs,MetadataService,The method has 9 parameters. Parameters: configService' diskProvider' diskTransferService' metadataFactory' cleanMetadataService' httpClient' mediaFileAttributeService' metadataFileService' logger
Long Parameter List,NzbDrone.Core.Extras.Metadata,MetadataService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\MetadataService.cs,Import,The method has 5 parameters. Parameters: series' episodeFile' path' extension' readOnly
Long Parameter List,NzbDrone.Core.Notifications,NotificationFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\NotificationFactory.cs,NotificationFactory,The method has 5 parameters. Parameters: providerRepository' providers' container' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Notifications.Plex,PlexClientService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexClientService.cs,SendCommand,The method has 5 parameters. Parameters: host' port' command' username' password
Long Parameter List,NzbDrone.Core.Organizer,FileNameBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddAbsoluteNumberingTokens,The method has 5 parameters. Parameters: pattern' tokenHandlers' series' episodes' namingConfig
Long Parameter List,NzbDrone.Core.RemotePathMappings,RemotePathMappingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\RemotePathMappings\RemotePathMappingService.cs,RemotePathMappingService,The method has 5 parameters. Parameters: downloadClientRepository' remotePathMappingRepository' diskProvider' cacheManager' logger
Long Parameter List,NzbDrone.Core.Notifications.Email,EmailService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Email\EmailService.cs,Send,The method has 5 parameters. Parameters: email' server' port' ssl' credentials
Long Parameter List,NzbDrone.Core.Notifications.Growl,IGrowlService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlService.cs,SendNotification,The method has 6 parameters. Parameters: title' message' notificationTypeName' hostname' port' password
Long Parameter List,NzbDrone.Core.Notifications.Growl,GrowlService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlService.cs,SendNotification,The method has 6 parameters. Parameters: title' message' notificationTypeName' hostname' port' password
Long Parameter List,NzbDrone.Core.Notifications.Prowl,IProwlService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Prowl\ProwlService.cs,SendNotification,The method has 5 parameters. Parameters: title' message' apiKey' priority' url
Long Parameter List,NzbDrone.Core.Notifications.Prowl,ProwlService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Prowl\ProwlService.cs,SendNotification,The method has 5 parameters. Parameters: title' message' apiKey' priority' url
Long Parameter List,NzbDrone.Core.RootFolders,RootFolderService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\RootFolders\RootFolderService.cs,RootFolderService,The method has 5 parameters. Parameters: rootFolderRepository' diskProvider' seriesRepository' configService' logger
Long Parameter List,NzbDrone.Core.ThingiProvider,ProviderFactory<TProvider;TProviderDefinition>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\ThingiProvider\ProviderFactory.cs,ProviderFactory,The method has 5 parameters. Parameters: providerRepository' providers' container' eventAggregator' logger
Long Parameter List,TinyTwitter,TinyTwitter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\TinyTwitter.cs,GetTimeline,The method has 5 parameters. Parameters: url' sinceId' maxId' count' screenName
Long Parameter List,NzbDrone.Core.Tv,AddSeriesService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\AddSeriesService.cs,AddSeriesService,The method has 5 parameters. Parameters: seriesService' seriesInfo' fileNameBuilder' addSeriesValidator' logger
Long Parameter List,NzbDrone.Core.Tv,AddSeriesValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\AddSeriesValidator.cs,AddSeriesValidator,The method has 5 parameters. Parameters: rootFolderValidator' seriesPathValidator' droneFactoryValidator' seriesAncestorValidator' seriesTitleSlugValidator
Long Parameter List,NzbDrone.Core.Tv,MoveSeriesService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\MoveSeriesService.cs,MoveSeriesService,The method has 5 parameters. Parameters: seriesService' filenameBuilder' diskTransferService' eventAggregator' logger
Long Parameter List,NzbDrone.Core.Tv,RefreshSeriesService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,RefreshSeriesService,The method has 8 parameters. Parameters: seriesInfo' seriesService' refreshEpisodeService' eventAggregator' dailySeriesService' diskScanService' checkIfSeriesShouldBeRefreshed' logger
Long Parameter List,NzbDrone.Core.Tv,SeriesScannedHandler,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\SeriesScannedHandler.cs,SeriesScannedHandler,The method has 5 parameters. Parameters: episodeMonitoredService' seriesService' commandQueueManager' episodeAddedService' logger
Long Parameter List,NzbDrone.Core.Tv,SeriesService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\SeriesService.cs,SeriesService,The method has 5 parameters. Parameters: seriesRepository' eventAggregator' episodeService' fileNameBuilder' logger
Long Parameter List,NzbDrone.Core.Update,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,InstallUpdateService,The method has 13 parameters. Parameters: checkUpdateService' appFolderInfo' diskProvider' diskTransferService' httpClient' archiveService' processProvider' updateVerifier' startupContext' configFileProvider' runtimeInfo' backupService' logger
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,AnimeVersionUpgradeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AnimeVersionUpgradeSpecification.cs,AnimeVersionUpgradeSpecification,The length of the parameter qualityUpgradableSpecification is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,AnimeVersionUpgradeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AnimeVersionUpgradeSpecification.cs,,The length of the parameter _qualityUpgradableSpecification is 31.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,CutoffSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\CutoffSpecification.cs,CutoffSpecification,The length of the parameter qualityUpgradableSpecification is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,CutoffSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\CutoffSpecification.cs,,The length of the parameter _qualityUpgradableSpecification is 31.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,QueueSpecification,The length of the parameter qualityUpgradableSpecification is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,,The length of the parameter _qualityUpgradableSpecification is 31.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,UpgradeDiskSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradeDiskSpecification.cs,UpgradeDiskSpecification,The length of the parameter qualityUpgradableSpecification is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications,UpgradeDiskSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradeDiskSpecification.cs,,The length of the parameter _qualityUpgradableSpecification is 31.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DelaySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DelaySpecification.cs,DelaySpecification,The length of the parameter qualityUpgradableSpecification is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DelaySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DelaySpecification.cs,,The length of the parameter _qualityUpgradableSpecification is 31.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,HistorySpecification,The length of the parameter qualityUpgradableSpecification is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,,The length of the parameter _qualityUpgradableSpecification is 31.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications.RssSync,ProperSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\ProperSpecification.cs,ProperSpecification,The length of the parameter qualityUpgradableSpecification is 30.
Long Identifier,NzbDrone.Core.DecisionEngine.Specifications.RssSync,ProperSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\ProperSpecification.cs,,The length of the parameter _qualityUpgradableSpecification is 31.
Long Identifier,NzbDrone.Core.Download,CompletedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,CompletedDownloadService,The length of the parameter downloadedEpisodesImportService is 31.
Long Identifier,NzbDrone.Core.Download,CompletedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,,The length of the parameter _downloadedEpisodesImportService is 32.
Long Identifier,NzbDrone.Core.Download.Clients.Vuze,Vuze,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Vuze\Vuze.cs,,The length of the parameter MINIMUM_SUPPORTED_PROTOCOL_VERSION is 34.
Long Identifier,NzbDrone.Core.Extras.Subtitles,SubtitleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Subtitles\SubtitleService.cs,MoveFilesAfterRename,The length of the parameter groupedExtraFilesForEpisodeFile is 31.
Long Identifier,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the parameter downloadClientOutputInDroneFactory is 34.
Long Identifier,NzbDrone.Core.Housekeeping.Housekeepers,FixFutureDownloadClientStatusTimes,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\FixFutureDownloadClientStatusTimes.cs,FixFutureDownloadClientStatusTimes,The length of the parameter downloadClientStatusRepository is 30.
Long Identifier,NzbDrone.Core.MediaFiles,DownloadedEpisodesCommandService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesCommandService.cs,DownloadedEpisodesCommandService,The length of the parameter downloadedEpisodesImportService is 31.
Long Identifier,NzbDrone.Core.MediaFiles,DownloadedEpisodesCommandService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesCommandService.cs,,The length of the parameter _downloadedEpisodesImportService is 32.
Long Identifier,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ManualImportService,The length of the parameter downloadedEpisodesImportService is 31.
Long Identifier,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,,The length of the parameter _downloadedEpisodesImportService is 32.
Long Identifier,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,,The length of the parameter MINIMUM_MEDIA_INFO_SCHEMA_REVISION is 34.
Long Identifier,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,,The length of the parameter CURRENT_MEDIA_INFO_SCHEMA_REVISION is 34.
Long Identifier,NzbDrone.Core.Notifications,NotificationBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\NotificationBase.cs,,The length of the parameter EPISODE_DOWNLOADED_TITLE_BRANDED is 32.
Long Identifier,NzbDrone.Core.Tv,RefreshSeriesService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,RefreshSeriesService,The length of the parameter checkIfSeriesShouldBeRefreshed is 30.
Long Identifier,NzbDrone.Core.Tv,RefreshSeriesService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,,The length of the parameter _checkIfSeriesShouldBeRefreshed is 31.
Long Statement,NzbDrone.Core.Backup,MakeDatabaseBackup,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Backup\MakeDatabaseBackup.cs,BackupDatabase,The length of the statement  "            backupConnectionStringBuilder.DataSource = Path.Combine(targetDirectory' Path.GetFileName(backupConnectionStringBuilder.DataSource)); " is 133.
Long Statement,NzbDrone.Core.Backup,MakeDatabaseBackup,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Backup\MakeDatabaseBackup.cs,BackupDatabase,The length of the statement  "            // We MUST use journal mode instead of WAL coz WAL has issues when page sizes change. This should also automatically deal with the -journal and -wal files during restore. " is 170.
Long Statement,NzbDrone.Core.Configuration,ConfigFileProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Configuration\ConfigFileProvider.cs,SaveConfigDictionary,The length of the statement  "                if (configValue.Key.Equals("SslCertHash"' StringComparison.InvariantCultureIgnoreCase) && configValue.Value.ToString().IsNotNullOrWhiteSpace()) " is 143.
Long Statement,NzbDrone.Core.Configuration,ConfigFileProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Configuration\ConfigFileProvider.cs,LoadConfigFile,The length of the statement  "                            throw new InvalidConfigFileException($"{_configFile} is empty. Please delete the config file and Sonarr will recreate it."); " is 124.
Long Statement,NzbDrone.Core.Configuration,ConfigFileProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Configuration\ConfigFileProvider.cs,LoadConfigFile,The length of the statement  "                            throw new InvalidConfigFileException($"{_configFile} is corrupt. Please delete the config file and Sonarr will recreate it."); " is 126.
Long Statement,NzbDrone.Core.Configuration,ConfigFileProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Configuration\ConfigFileProvider.cs,LoadConfigFile,The length of the statement  "                throw new InvalidConfigFileException($"{_configFile} is corrupt is invalid. Please delete the config file and Sonarr will recreate it."' ex); " is 141.
Long Statement,NzbDrone.Core.DataAugmentation.Scene,InvalidSceneMappingException,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Scene\InvalidSceneMappingException.cs,FormatMessage,The length of the statement  "            return string.Format("Scene Mappings contains a conflict for tvdbids {0}. Please notify Sonarr developers. ({1})"' string.Join("'"' mappings.Select(v => v.TvdbId.ToString()))' releaseTitle); " is 190.
Long Statement,NzbDrone.Core.DataAugmentation.Xem,XemService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,PerformUpdate,The length of the statement  "                    _logger.Debug("Setting scene numbering mappings for {0} S{1:00}E{2:00}"' series' mapping.Tvdb.Season' mapping.Tvdb.Episode); " is 124.
Long Statement,NzbDrone.Core.DataAugmentation.Xem,XemService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,PerformUpdate,The length of the statement  "                    var episode = episodes.SingleOrDefault(e => e.SeasonNumber == mapping.Tvdb.Season && e.EpisodeNumber == mapping.Tvdb.Episode); " is 126.
Long Statement,NzbDrone.Core.DataAugmentation.Xem,XemService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,PerformUpdate,The length of the statement  "                        _logger.Debug("Mapping for {0} S{1:00}E{2:00} is invalid' skipping"' series' mapping.Tvdb.Season' mapping.Tvdb.Episode); " is 120.
Long Statement,NzbDrone.Core.DataAugmentation.Xem,XemService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,ExtrapolateMappings,The length of the statement  "                    var lastSceneSeasonMapping = mappings.Where(v => v.Scene.Season == lastEpisodeMapping.Scene.Season).OrderBy(v => v.Scene.Episode).Last(); " is 137.
Long Statement,NzbDrone.Core.Datastore,DbFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\DbFactory.cs,Create,The length of the statement  "                        throw new CorruptDatabaseException("Database file: {0} is corrupt' restore from backup if available. See: https://github.com/Sonarr/Sonarr/wiki/FAQ#i-use-sonarr-on-a-mac-and-it-suddenly-stopped-working-what-happened"' ex' fileName); " is 232.
Long Statement,NzbDrone.Core.Datastore,DbFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\DbFactory.cs,Create,The length of the statement  "                    throw new CorruptDatabaseException("Database file: {0} is corrupt' restore from backup if available. See: https://github.com/Sonarr/Sonarr/wiki/FAQ#i-am-getting-an-error-database-disk-image-is-malformed"' ex' fileName); " is 219.
Long Statement,NzbDrone.Core.Datastore,TableMapping,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\TableMapping.cs,RegisterMappers,The length of the statement  "            MapRepository.Instance.RegisterTypeConverter(typeof(List<ProfileQualityItem>)' new EmbeddedDocumentConverter(new QualityIntConverter())); " is 137.
Long Statement,NzbDrone.Core.Datastore,TableMapping,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\TableMapping.cs,RegisterMappers,The length of the statement  "            MapRepository.Instance.RegisterTypeConverter(typeof(QualityModel)' new EmbeddedDocumentConverter(new QualityIntConverter())); " is 125.
Long Statement,NzbDrone.Core.Datastore.Converters,BooleanIntConverter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Converters\BooleanIntConverter.cs,FromDB,The length of the statement  "                    throw new ConversionException(string.Format("The BooleanCharConverter could not convert the value '{0}' to a Boolean."' context.DbValue)); " is 138.
Long Statement,NzbDrone.Core.Datastore.Extensions,MappingExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Extensions\MappingExtensions.cs,IsMappableProperty,The length of the statement  "            if (propertyInfo.PropertyType.IsSimpleType() || MapRepository.Instance.TypeConverters.ContainsKey(propertyInfo.PropertyType)) " is 125.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_indexers,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\023_add_config_contract_to_indexers.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Indexers").Set(new { ConfigContract = "OmgwtfnzbsSettings" }).Where(new { Implementation = "Omgwtfnzbs" }); " is 121.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_notifications,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\026_add_config_contract_to_notifications.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Notifications").Set(new { ConfigContract = "NotifyMyAndroidSettings" }).Where(new { Implementation = "NotifyMyAndroid" }); " is 136.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_notifications,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\026_add_config_contract_to_notifications.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Notifications").Set(new { ConfigContract = "PlexClientSettings" }).Where(new { Implementation = "PlexClient" }); " is 126.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_notifications,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\026_add_config_contract_to_notifications.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Notifications").Set(new { ConfigContract = "PlexServerSettings" }).Where(new { Implementation = "PlexServer" }); " is 126.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_notifications,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\026_add_config_contract_to_notifications.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Notifications").Set(new { ConfigContract = "PushBulletSettings" }).Where(new { Implementation = "PushBullet" }); " is 126.
Long Statement,NzbDrone.Core.Datastore.Migration,add_config_contract_to_notifications,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\026_add_config_contract_to_notifications.cs,MainDbUpgrade,The length of the statement  "            Update.Table("Notifications").Set(new { ConfigContract = "PushoverSettings" }).Where(new { Implementation = "Pushover" }); " is 122.
Long Statement,NzbDrone.Core.Datastore.Migration,update_with_quality_converters,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\036_update_with_quality_converters.cs,ConvertQualityProfiles,The length of the statement  "                        var items = Quality.DefaultQualityDefinitions.OrderBy(v => v.Weight).Select(v => new ProfileQualityItem { Quality = v.Quality' Allowed = allowed.Contains(v.Quality) }).ToList(); " is 177.
Long Statement,NzbDrone.Core.Datastore.Migration,add_configurable_qualities,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\037_add_configurable_qualities.cs,ConvertQualities,The length of the statement  "                            updateCmd.CommandText = "INSERT INTO QualityDefinitions (Quality' Title' Weight' MinSize' MaxSize) VALUES (?' ?' ?' ?' ?)"; " is 123.
Long Statement,NzbDrone.Core.Datastore.Migration,convert_config_to_download_clients,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\043_convert_config_to_download_clients.cs,AddDownloadClient,The length of the statement  "                var text = string.Format("INSERT INTO DownloadClients (Enable' Name' Implementation' Settings' ConfigContract' Protocol) VALUES (1' ?' ?' ?' ?' ?)"); " is 149.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,ConvertFolderSettings,The length of the statement  "                downloadClientsCmd.CommandText = @"SELECT Id' Implementation' Settings' ConfigContract FROM DownloadClients WHERE ConfigContract = 'FolderSettings'"; " is 149.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "                historyCmd.CommandText = @"SELECT Id' EpisodeId' SeriesId' SourceTitle' Date' Data' EventType FROM History WHERE EventType NOT NULL"; " is 133.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "            var numHistoryItemsNotAssociated = historyItems.Count(v => v.EventType == MigrationHistoryEventType.DownloadFolderImported && " is 125.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "                    if (grabbedEvent.Data.GetValueOrDefault("downloadClient") == null || grabbedEvent.Data.GetValueOrDefault("downloadClientId") == null) continue; " is 143.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "                        if (list[j].Data.ContainsKey("downloadClient") && list[j].Data["downloadClient"] == grabbedEvent.Data["downloadClient"] && " is 122.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "                            list[j].Data.ContainsKey("downloadClientId") && list[j].Data["downloadClientId"] == grabbedEvent.Data["downloadClientId"]) " is 122.
Long Statement,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The length of the statement  "            _logger.Info("Updated old History items. {0}/{1} old ImportedEvents were associated with GrabbedEvents."' historyItemsToAssociate.Count' numHistoryItemsNotAssociated); " is 167.
Long Statement,NzbDrone.Core.Datastore.Migration,make_scene_numbering_nullable,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\065_make_scene_numbering_nullable.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Episodes SET SceneSeasonNumber = NULL' SceneEpisodeNumber = NULL WHERE SceneSeasonNumber = 0 AND SceneEpisodeNumber = 0"); " is 142.
Long Statement,NzbDrone.Core.Datastore.Migration,quality_proper,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\069_quality_proper.cs,ConvertQualityTitle,The length of the statement  "                namingConfigCmd.CommandText = @"SELECT StandardEpisodeFormat' DailyEpisodeFormat' AnimeEpisodeFormat FROM NamingConfig LIMIT 1"; " is 128.
Long Statement,NzbDrone.Core.Datastore.Migration,quality_proper,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\069_quality_proper.cs,ConvertQualityTitle,The length of the statement  "                            updateCmd.CommandText = "UPDATE NamingConfig SET StandardEpisodeFormat = ?' DailyEpisodeFormat = ?' AnimeEpisodeFormat = ?"; " is 124.
Long Statement,NzbDrone.Core.Datastore.Migration,delay_profile,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\070_delay_profile.cs,ConvertProfile,The length of the statement  "                    insertDelayProfileCmd.CommandText = "INSERT INTO DelayProfiles (EnableUsenet' EnableTorrent' PreferredProtocol' TorrentDelay' UsenetDelay' [Order]' Tags) VALUES (1' 1' 1' 0' ?' ?' ?)"; " is 184.
Long Statement,NzbDrone.Core.Datastore.Migration,disable_nyaa,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\116_disable_nyaa.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET EnableRss = 0' EnableSearch = 0' Settings = Replace(Settings' 'https://nyaa.se'' '') WHERE Implementation = 'Nyaa' AND Settings LIKE '%nyaa.se%';"); " is 181.
Long Statement,NzbDrone.Core.Datastore.Migration,consolidate_indexer_baseurl,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\113_consolidate_indexer_baseurl.cs,RenameUrlToBaseUrl,The length of the statement  "                cmd.CommandText = "SELECT Id' Settings FROM Indexers WHERE ConfigContract IN ('NewznabSettings'' 'TorznabSettings'' 'IPTorrentsSettings'' 'OmgwtfnzbsSettings')"; " is 161.
Long Statement,NzbDrone.Core.Datastore.Migration,update_btn_url,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\106_update_btn_url.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET Settings = Replace(Settings' 'api.btnapps.net'' 'api.broadcasthe.net') WHERE Implementation = 'BroadcastheNet';"); " is 147.
Long Statement,NzbDrone.Core.Datastore.Migration,disable_kickass,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\096_disable_kickass.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET EnableRss = 0' EnableSearch = 0' Settings = Replace(Settings' 'https://kat.cr'' '') WHERE Implementation = 'KickassTorrents' AND Settings LIKE '%kat.cr%';"); " is 190.
Long Statement,NzbDrone.Core.Datastore.Migration,disable_eztv,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\074_disable_eztv.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET EnableRss = 0' EnableSearch = 0 WHERE Implementation = 'Eztv' AND Settings LIKE '%ezrss.it%'"); " is 128.
Long Statement,NzbDrone.Core.Datastore.Migration,add_fanzub_settings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\082_add_fanzub_settings.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Indexers SET ConfigContract = 'FanzubSettings' WHERE Implementation = 'Fanzub' AND ConfigContract = 'NullConfig'"); " is 135.
Long Statement,NzbDrone.Core.Datastore.Migration,add_on_rename_to_notifcations,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\089_add_on_rename_to_notifcations.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Notifications SET OnRename = OnDownload WHERE Implementation IN ('PlexServer'' 'Xbmc'' 'MediaBrowser')"); " is 125.
Long Statement,NzbDrone.Core.Datastore.Migration,add_on_rename_to_notifcations,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\089_add_on_rename_to_notifcations.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE Notifications SET OnRename = 0 WHERE Implementation NOT IN ('PlexServer'' 'Xbmc'' 'MediaBrowser')"); " is 120.
Long Statement,NzbDrone.Core.Datastore.Migration,rename_torrent_downloadstation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\105_rename_torrent_downloadstation.cs,MainDbUpgrade,The length of the statement  "            Execute.Sql("UPDATE DownloadClients SET Implementation = 'TorrentDownloadStation' WHERE Implementation = 'DownloadStation';"); " is 126.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,Process,The length of the statement  "                throw new ApplicationException(string.Format("Column {0} does not exist on table {1}."' expression.Column.Name' expression.TableName)); " is 135.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,Process,The length of the statement  "                throw new ApplicationException(string.Format("Column {0} does not exist on table {1}."' columnsToRemove.First()' expression.TableName)); " is 136.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,Process,The length of the statement  "                throw new ApplicationException(string.Format("Column {0} does not exist on table {1}."' expression.OldName' expression.TableName)); " is 131.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,Process,The length of the statement  "                throw new ApplicationException(string.Format("Column {0} already exists on table {1}."' expression.NewName' expression.TableName)); " is 131.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,Process,The length of the statement  "                    index.Name = Regex.Replace(index.Name' "(?<=_)" + Regex.Escape(expression.OldName) + "(?=_|$)"' Regex.Escape(expression.NewName)); " is 130.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,ProcessAlterTable,The length of the statement  "            var columnsToFetch = string.Join("' "' (oldColumnDefinitions ?? tableDefinition.Columns).Select(c => quoter.QuoteColumnName(c.Name))); " is 134.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,NzbDroneSqliteProcessor,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\NzbDroneSqliteProcessor.cs,ProcessAlterTable,The length of the statement  "            Process(string.Format("INSERT INTO {0} ({1}) SELECT {2} FROM {3}"' quoter.QuoteTableName(tempTableName)' columnsToInsert' columnsToFetch' quoter.QuoteTableName(tableName))); " is 173.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,SqliteSchemaDumper,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSchemaDumper.cs,ReadTables,The length of the statement  "            const string sqlCommand = @"SELECT name' sql FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%' ORDER BY name;"; " is 128.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,SqliteSchemaDumper,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSchemaDumper.cs,ReadIndexes,The length of the statement  "            var sqlCommand = string.Format(@"SELECT type' name' sql FROM sqlite_master WHERE tbl_name = '{0}' AND type = 'index' AND name NOT LIKE 'sqlite_auto%';"' tableName); " is 164.
Long Statement,NzbDrone.Core.Datastore.Migration.Framework,SqliteSyntaxReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSyntaxReader.cs,CreateSyntaxException,The length of the statement  "            return new SyntaxErrorException(string.Format("{0}. Syntax Error near: {1}"' string.Format(message' args)' Buffer.Substring(_previousIndex))); " is 142.
Long Statement,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareQuality,The length of the statement  "            return CompareAll(CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode => remoteEpisode.Series.Profile.Value.Items.FindIndex(v => v.Quality == remoteEpisode.ParsedEpisodeInfo.Quality.Quality))' " is 198.
Long Statement,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareQuality,The length of the statement  "                           CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode => remoteEpisode.ParsedEpisodeInfo.Quality.Revision.Version)); " is 120.
Long Statement,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareEpisodeNumber,The length of the statement  "            return CompareByReverse(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode => remoteEpisode.Episodes.Select(e => e.EpisodeNumber).MinOrDefault()); " is 143.
Long Statement,NzbDrone.Core.DecisionEngine,DownloadDecisionMaker,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionMaker.cs,GetDecisions,The length of the statement  "                        var specialEpisodeInfo = _parsingService.ParseSpecialEpisodeTitle(report.Title' report.TvdbId' report.TvRageId' searchCriteria); " is 128.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    var runtimeMessage = subject.Episodes.Count == 1 ? $"{subject.Series.Runtime}min" : $"{subject.Episodes.Count}x {subject.Series.Runtime}min"; " is 141.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    _logger.Debug("Item: {0}' Size: {1} is smaller than minimum allowed size ({2} bytes for {3})' rejecting."' subject' subject.Release.Size' minSize' runtimeMessage); " is 163.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("{0} is smaller than minimum allowed {1} (for {2})"' subject.Release.Size.SizeSuffix()' minSize.SizeSuffix()' runtimeMessage); " is 149.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    if (seasonSearchCriteria != null && !seasonSearchCriteria.Series.UseSceneNumbering && seasonSearchCriteria.Episodes.Any(v => v.Id == episode.Id)) " is 145.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    if (seasonEpisodes.First().Id == episode.Id || (seasonEpisodes.Count() >= 10 && seasonEpisodes.Last().Id == episode.Id)) " is 120.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    var runtimeMessage = subject.Episodes.Count == 1 ? $"{subject.Series.Runtime}min" : $"{subject.Episodes.Count}x {subject.Series.Runtime}min"; " is 141.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    _logger.Debug("Item: {0}' Size: {1} is greater than maximum allowed size ({2} for {3})' rejecting."' subject' subject.Release.Size' maxSize' runtimeMessage); " is 157.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("{0} is larger than maximum allowed {1} (for {2})"' subject.Release.Size.SizeSuffix()' maxSize.SizeSuffix()' runtimeMessage); " is 148.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,CutoffSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\CutoffSpecification.cs,IsSatisfiedBy,The length of the statement  "                if (!_qualityUpgradableSpecification.CutoffNotMet(subject.Series.Profile' file.Quality' subject.ParsedEpisodeInfo.Quality)) " is 123.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,LanguageSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\LanguageSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Report Language: {0} rejected because it is not wanted' wanted {1}"' subject.ParsedEpisodeInfo.Language' wantedLanguage); " is 136.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "            var matchingEpisode = matchingSeries.Where(q => q.Episodes.Select(e => e.Id).Intersect(subject.Episodes.Select(e => e.Id)).Any()); " is 130.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Checking if existing release in queue meets cutoff. Queued quality is: {0}"' remoteEpisode.ParsedEpisodeInfo.Quality); " is 133.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                if (!_qualityUpgradableSpecification.CutoffNotMet(subject.Series.Profile' remoteEpisode.ParsedEpisodeInfo.Quality' subject.ParsedEpisodeInfo.Quality)) " is 150.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("Quality for release in queue already meets cutoff: {0}"' remoteEpisode.ParsedEpisodeInfo.Quality); " is 122.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Checking if release is higher quality than queued release. Queued quality is: {0}"' remoteEpisode.ParsedEpisodeInfo.Quality); " is 140.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                if (!_qualityUpgradableSpecification.IsUpgradable(subject.Series.Profile' remoteEpisode.ParsedEpisodeInfo.Quality' subject.ParsedEpisodeInfo.Quality)) " is 150.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QueueSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QueueSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("Quality for release in queue is of equal or higher preference: {0}"' remoteEpisode.ParsedEpisodeInfo.Quality); " is 134.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,QualityAllowedByProfileSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\QualityAllowedByProfileSpecification.cs,IsSatisfiedBy,The length of the statement  "            if (!subject.Series.Profile.Value.Items.Exists(v => v.Allowed && v.Quality == subject.ParsedEpisodeInfo.Quality.Quality)) " is 121.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,BlockedIndexerSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\BlockedIndexerSpecification.cs,IsSatisfiedBy,The length of the statement  "                return Decision.Reject($"Indexer {subject.Release.Indexer} is blocked till {status.DisabledTill} due to failures' cannot grab release."); " is 137.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications,UpgradeDiskSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\UpgradeDiskSpecification.cs,IsSatisfiedBy,The length of the statement  "                if (!_qualityUpgradableSpecification.IsUpgradable(subject.Series.Profile' file.Quality' subject.ParsedEpisodeInfo.Quality)) " is 123.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DelaySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DelaySpecification.cs,IsSatisfiedBy,The length of the statement  "                    var upgradable = _qualityUpgradableSpecification.IsUpgradable(profile' file.Quality' subject.ParsedEpisodeInfo.Quality); " is 120.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DelaySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DelaySpecification.cs,IsSatisfiedBy,The length of the statement  "                        var revisionUpgrade = _qualityUpgradableSpecification.IsRevisionUpgrade(file.Quality' subject.ParsedEpisodeInfo.Quality); " is 121.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DelaySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DelaySpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Waiting for better quality release' There is a {0} minute delay on {1}"' delay' subject.Release.DownloadProtocol); " is 129.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,IsSatisfiedBy,The length of the statement  "                    var cutoffUnmet = _qualityUpgradableSpecification.CutoffNotMet(subject.Series.Profile' mostRecent.Quality' subject.ParsedEpisodeInfo.Quality); " is 142.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,IsSatisfiedBy,The length of the statement  "                    var upgradeable = _qualityUpgradableSpecification.IsUpgradable(subject.Series.Profile' mostRecent.Quality' subject.ParsedEpisodeInfo.Quality); " is 142.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,IsSatisfiedBy,The length of the statement  "                        return Decision.Reject("CDH is disabled and grab event in history is of equal or higher quality: {0}"' mostRecent.Quality); " is 123.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.RssSync,DeletedEpisodeFileSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\DeletedEpisodeFileSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("Files for this episode exist in the database but not on disk' will be unmonitored on next diskscan. skipping."); " is 127.
Long Statement,NzbDrone.Core.DecisionEngine.Specifications.Search,DailyEpisodeMatchSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\Search\DailyEpisodeMatchSpecification.cs,IsSatisfiedBy,The length of the statement  "            var episode = _episodeService.GetEpisode(dailySearchSpec.Series.Id' dailySearchSpec.AirDate.ToString(Episode.AIR_DATE_FORMAT)); " is 127.
Long Statement,NzbDrone.Core.DiskSpace,DiskSpaceService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DiskSpace\DiskSpaceService.cs,GetDroneFactoryRootPaths,The length of the statement  "            if (_configService.DownloadedEpisodesFolder.IsNotNullOrWhiteSpace() && _diskProvider.FolderExists(_configService.DownloadedEpisodesFolder)) " is 139.
Long Statement,NzbDrone.Core.Download,CompletedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,Import,The length of the statement  "            var importResults = _downloadedEpisodesImportService.ProcessPath(outputPath' ImportMode.Auto' trackedDownload.RemoteEpisode.Series' trackedDownload.DownloadItem); " is 162.
Long Statement,NzbDrone.Core.Download,CompletedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,Import,The length of the statement  "            if (importResults.Count(c => c.Result == ImportResultType.Imported) >= Math.Max(1' trackedDownload.RemoteEpisode.Episodes.Count)) " is 129.
Long Statement,NzbDrone.Core.Download,DownloadEventHub,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadEventHub.cs,Handle,The length of the statement  "            if (trackedDownload == null || !trackedDownload.DownloadItem.CanBeRemoved || _configService.RemoveFailedDownloads == false) " is 123.
Long Statement,NzbDrone.Core.Download,DownloadEventHub,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadEventHub.cs,RemoveFromDownloadClient,The length of the statement  "                _logger.Debug("[{0}] Removing download from {1} history"' trackedDownload.DownloadItem.Title' trackedDownload.DownloadItem.DownloadClient); " is 139.
Long Statement,NzbDrone.Core.Download,NzbValidationService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\NzbValidationService.cs,Validate,The length of the statement  "            using (var xmlTextReader = XmlReader.Create(reader' new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore' IgnoreComments = true })) " is 139.
Long Statement,NzbDrone.Core.Download,UsenetClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\UsenetClientBase.cs,Download,The length of the statement  "                _logger.Debug("Downloaded nzb for episode '{0}' finished ({1} bytes from {2})"' remoteEpisode.Release.Title' nzbData.Length' url); " is 130.
Long Statement,NzbDrone.Core.Download,UsenetClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\UsenetClientBase.cs,Download,The length of the statement  "                    _logger.Error(ex' "Downloading nzb file for episode '{0}' failed since it no longer exists ({1})"' remoteEpisode.Release.Title' url); " is 133.
Long Statement,NzbDrone.Core.Download,TorrentClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,Download,The length of the statement  "            if (remoteEpisode.Release.DownloadUrl.IsNotNullOrWhiteSpace() && remoteEpisode.Release.DownloadUrl.StartsWith("magnet:")) " is 121.
Long Statement,NzbDrone.Core.Download,TorrentClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,Download,The length of the statement  "                        throw new ReleaseDownloadException(remoteEpisode.Release' "Magnet not supported by download client. ({0})"' ex.Message); " is 120.
Long Statement,NzbDrone.Core.Download,TorrentClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,Download,The length of the statement  "                            throw new ReleaseDownloadException(remoteEpisode.Release' "Magnet not supported by download client. ({0})"' ex.Message); " is 120.
Long Statement,NzbDrone.Core.Download,TorrentClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,DownloadFromWebUrl,The length of the statement  "                _logger.Debug("Downloading torrent for episode '{0}' finished ({1} bytes from {2})"' remoteEpisode.Release.Title' torrentFile.Length' torrentUrl); " is 146.
Long Statement,NzbDrone.Core.Download,TorrentClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,DownloadFromWebUrl,The length of the statement  "                    _logger.Error(ex' "Downloading torrent file for episode '{0}' failed since it no longer exists ({1})"' remoteEpisode.Release.Title' torrentUrl); " is 144.
Long Statement,NzbDrone.Core.Download,DownloadClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientBase.cs,DeleteItemData,The length of the statement  "                _logger.Warn(ex' string.Format("[{0}] Error occurred while trying to delete data from '{1}'."' item.Title' item.OutputPath)); " is 125.
Long Statement,NzbDrone.Core.Download,DownloadClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientBase.cs,TestFolder,The length of the statement  "                    DetailedDescription = string.Format("The folder you specified does not exist or is inaccessible. Please verify the folder permissions for the user account '{0}'' which is used to execute Sonarr."' Environment.UserName) " is 218.
Long Statement,NzbDrone.Core.Download,DownloadClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientBase.cs,TestFolder,The length of the statement  "                    DetailedDescription = string.Format("The folder you specified is not writable. Please verify the folder permissions for the user account '{0}'' which is used to execute Sonarr."' Environment.UserName) " is 200.
Long Statement,NzbDrone.Core.Download,DownloadClientFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientFactory.cs,FilterBlockedClients,The length of the statement  "                    _logger.Debug("Temporarily ignoring download client {0} till {1} due to recent failures."' client.Definition.Name' downloadClientStatus.DisabledTill.Value.ToLocalTime()); " is 170.
Long Statement,NzbDrone.Core.Download,DownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadService.cs,DownloadReport,The length of the statement  "                throw new DownloadClientUnavailableException($"{remoteEpisode.Release.DownloadProtocol} Download client isn't configured yet"); " is 127.
Long Statement,NzbDrone.Core.Download,DownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadService.cs,DownloadReport,The length of the statement  "            if (remoteEpisode.Release.DownloadUrl.IsNotNullOrWhiteSpace() && !remoteEpisode.Release.DownloadUrl.StartsWith("magnet:")) " is 122.
Long Statement,NzbDrone.Core.Download.Clients.Blackhole,ScanWatchFolder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\ScanWatchFolder.cs,GetDownloadItems,The length of the statement  "            foreach (var videoFile in _diskScanService.FilterFiles(watchFolder' _diskScanService.GetVideoFiles(watchFolder' false))) " is 120.
Long Statement,NzbDrone.Core.Download.Clients.Deluge,Deluge,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,GetItems,The length of the statement  "                // Here we detect if Deluge is managing the torrent and whether the seed criteria has been met. This allows drone to delete the torrent as appropriate. " is 151.
Long Statement,NzbDrone.Core.Download.Clients.Deluge,Deluge,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,GetItems,The length of the statement  "                item.CanMoveFiles = item.CanBeRemoved = (torrent.IsAutoManaged && torrent.StopAtRatio && torrent.Ratio >= torrent.StopRatio && torrent.State == DelugeTorrentStatus.Paused); " is 172.
Long Statement,NzbDrone.Core.Download.Clients.Deluge,Deluge,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,TestConnection,The length of the statement  "                            DetailedDescription = "Drone is unable to connect to Deluge using SSL. This problem could be computer related. Please try to configure both drone and Deluge to not use SSL." " is 173.
Long Statement,NzbDrone.Core.Download.Clients.Deluge,DelugeProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeProxy.cs,GetTorrents,The length of the statement  "            // TODO: get_torrents_status returns the files as well' which starts to cause deluge timeouts when you get enough season packs. " is 127.
Long Statement,NzbDrone.Core.Download.Clients.Deluge,DelugeProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeProxy.cs,GetTorrents,The length of the statement  "            //var response = ProcessRequest<Dictionary<String' DelugeTorrent>>(settings' "core.get_torrents_status"' filter' new String[0]); " is 128.
Long Statement,NzbDrone.Core.Download.Clients.Deluge,DelugeProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeProxy.cs,GetTorrentsByLabel,The length of the statement  "            //var response = ProcessRequest<Dictionary<String' DelugeTorrent>>(settings' "core.get_torrents_status"' filter' new String[0]); " is 128.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The length of the statement  "            var requestBuilder = new HttpRequestBuilder(settings.UseSsl' settings.Host' settings.Port).Resource($"webapi/{apiInfo.Path}"); " is 126.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The length of the statement  "                    requestBuilder.AddFormParameter("_sid"' _sessionCache.Get(GenerateSessionCacheKey(settings)' () => AuthenticateClient(settings)' TimeSpan.FromHours(6))); " is 153.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The length of the statement  "                    requestBuilder.AddQueryParam("_sid"' _sessionCache.Get(GenerateSessionCacheKey(settings)' () => AuthenticateClient(settings)' TimeSpan.FromHours(6))); " is 150.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,IsCompleted,The length of the statement  "            return torrent.Status == DownloadStationTaskStatus.Seeding || IsFinished(torrent) ||  (torrent.Status == DownloadStationTaskStatus.Waiting && torrent.Size != 0 && GetRemainingSize(torrent) <= 0); " is 195.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TestOutputPath,The length of the statement  "                        DetailedDescription = $"You must login into your Diskstation as {Settings.Username} and manually set it up into DownloadStation settings under BT/HTTP/FTP/NZB -> Location." " is 172.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TestOutputPath,The length of the statement  "                    var fieldName = Settings.TvDirectory.IsNotNullOrWhiteSpace() ? nameof(Settings.TvDirectory) : nameof(Settings.TvCategory); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TestOutputPath,The length of the statement  "                            DetailedDescription = $"The Diskstation does not have a Shared Folder with the name '{sharedFolder}'' are you sure you specified it correctly?" " is 143.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TestOutputPath,The length of the statement  "                            DetailedDescription = $"The folder '{downloadDir}' does not exist' it must be created manually inside the Shared Folder '{sharedFolder}'." " is 138.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,TestConnection,The length of the statement  "                    DetailedDescription = $"Please verify your username and password. Also verify if the host running Sonarr isn't blocked from accessing {Name} by WhiteList limitations in the {Name} configuration." " is 195.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,ValidateVersion,The length of the statement  "                return new ValidationFailure(string.Empty' $"Download Station API version not supported' should be at least 2. It supports from {info.MinVersion} to {info.MaxVersion}"); " is 169.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,SharedFolderResolver,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\SharedFolderResolver.cs,GetPhysicalPath,The length of the statement  "                _logger.Warn(ex' "Failed to get shared folder {0} from Disk Station {1}:{2}"' sharedFolder' settings.Host' settings.Port); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,SharedFolderResolver,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\SharedFolderResolver.cs,RemapToFullPath,The length of the statement  "            var mapping = _cache.Get($"{serialNumber}:{sharedFolder}"' () => GetPhysicalPath(sharedFolder' settings)' TimeSpan.FromHours(1)); " is 129.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,GetTasks,The length of the statement  "            return _dsTaskProxy.GetTasks(Settings).Where(v => v.Type.ToLower() == DownloadStationTaskType.NZB.ToString().ToLower()); " is 120.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,TestOutputPath,The length of the statement  "                        DetailedDescription = $"You must login into your Diskstation as {Settings.Username} and manually set it up into DownloadStation settings under BT/HTTP/FTP/NZB -> Location." " is 172.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,TestOutputPath,The length of the statement  "                    var fieldName = Settings.TvDirectory.IsNotNullOrWhiteSpace() ? nameof(Settings.TvDirectory) : nameof(Settings.TvCategory); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,TestOutputPath,The length of the statement  "                            DetailedDescription = $"The Diskstation does not have a Shared Folder with the name '{sharedFolder}'' are you sure you specified it correctly?" " is 143.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,TestOutputPath,The length of the statement  "                            DetailedDescription = $"The folder '{downloadDir}' does not exist' it must be created manually inside the Shared Folder '{sharedFolder}'." " is 138.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,TestConnection,The length of the statement  "                    DetailedDescription = $"Please verify your username and password. Also verify if the host running Sonarr isn't blocked from accessing {Name} by WhiteList limitations in the {Name} configuration." " is 195.
Long Statement,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,ValidateVersion,The length of the statement  "                return new ValidationFailure(string.Empty' $"Download Station API version not supported' should be at least 2. It supports from {info.MinVersion} to {info.MaxVersion}"); " is 169.
Long Statement,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,AddTorrentFile,The length of the statement  "            return ProcessRequest<string>(settings' "webui.addTorrent"' "file"' Convert.ToBase64String(fileContent)' new { label = settings.Category }); " is 140.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,GetQueue,The length of the statement  "                        queueItem.RemainingTime = TimeSpan.FromSeconds((totalRemainingSize + queueItem.RemainingSize) / globalStatus.DownloadRate); " is 123.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,GetHistory,The length of the statement  "                historyItem.Message = $"PAR Status: {item.ParStatus} - Unpack Status: {item.UnpackStatus} - Move Status: {item.MoveStatus} - Script Status: {item.ScriptStatus} - Delete Status: {item.DeleteStatus} - Mark Status: {item.MarkStatus}"; " is 231.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,GetStatus,The length of the statement  "                status.OutputRootFolders = new List<OsPath> { _remotePathMappingService.RemapRemoteToLocal(Settings.Host' new OsPath(category.DestDir)) }; " is 138.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzb,The length of the statement  "                var response = ProcessRequest<int>(settings' "append"' title' nzbData' category' priority' false' addpaused' string.Empty' 0' "all"' new string[] { "drone"' droneId }); " is 168.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzbLegacy13,The length of the statement  "            var response = ProcessRequest<int>(settings' "append"' title' nzbData' category' priority' false' false' string.Empty' 0' "all"); " is 129.
Long Statement,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,RetryDownload,The length of the statement  "            var item = history.SingleOrDefault(h => h.Parameters.SingleOrDefault(p => p.Name == "drone" && id == (p.Value as string)) != null); " is 131.
Long Statement,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,GetOutputPath,The length of the statement  "            var outputPath = _remotePathMappingService.RemapRemoteToLocal(Settings.Host' new OsPath(vortexQueueItem.DestinationPath)); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortexProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortexProxy.cs,Remove,The length of the statement  "            var requestBuilder = BuildRequest(settings).Resource(string.Format("nzb/{0}/{1}"' id' deleteData ? "cancelDelete" : "cancel")); " is 127.
Long Statement,NzbDrone.Core.Download.Clients.Pneumatic,Pneumatic,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Pneumatic\Pneumatic.cs,WriteStrmFile,The length of the statement  "            var contents = string.Format("plugin://plugin.program.pneumatic/?mode=strm&type=add_file&nzb={0}&nzbname={1}"' nzbFile' title); " is 127.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,GetItems,The length of the statement  "                // Removal also requires the torrent to be paused' in case a higher max ratio was set on the torrent itself (which is not exposed by the api). " is 142.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,GetItems,The length of the statement  "                item.CanMoveFiles = item.CanBeRemoved = (!config.MaxRatioEnabled || config.MaxRatio <= torrent.Ratio) && torrent.State == "pausedUP"; " is 133.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestConnection,The length of the statement  "                            DetailedDescription = "Labels are not supported until qBittorrent version 3.3.0. Please upgrade or try again with an empty Category." " is 133.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestConnection,The length of the statement  "                    return new NzbDroneValidationFailure(String.Empty' "qBittorrent is configured to remove torrents when they reach their Share Ratio Limit") " is 138.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestConnection,The length of the statement  "                        DetailedDescription = "Sonarr will be unable to perform Completed Download Handling as configured. You can fix this in qBittorrent ('Tools -> Options...' in the menu) by changing 'Options -> BitTorrent -> Share Ratio Limiting' from 'Remove them' to 'Pause them'." " is 263.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestPrioritySupport,The length of the statement  "                        return new NzbDroneValidationFailure(nameof(Settings.RecentTvPriority)' "Queueing not enabled") { DetailedDescription = "Torrent Queueing is not enabled in your qBittorrent settings. Enable it in qBittorrent or select 'Last' as priority." }; " is 241.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestPrioritySupport,The length of the statement  "                        return new NzbDroneValidationFailure(nameof(Settings.OlderTvPriority)' "Queueing not enabled") { DetailedDescription = "Torrent Queueing is not enabled in your qBittorrent settings. Enable it in qBittorrent or select 'Last' as priority." }; " is 240.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxy.cs,SetTorrentLabel,The length of the statement  "                if (ex.InnerException is HttpException && (ex.InnerException as HttpException).Response.StatusCode == HttpStatusCode.NotFound) " is 126.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxy.cs,MoveTorrentToTopInQueue,The length of the statement  "                // qBittorrent rejects all Prio commands with 403: Forbidden if Options -> BitTorrent -> Torrent Queueing is not enabled " is 120.
Long Statement,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentProxy.cs,MoveTorrentToTopInQueue,The length of the statement  "                if (ex.InnerException is HttpException && (ex.InnerException as HttpException).Response.StatusCode == HttpStatusCode.Forbidden) " is 127.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetHistory,The length of the statement  "                        sabHistoryItem.FailMessage.Equals("Unpacking failed' write error or disk is full?"' StringComparison.InvariantCultureIgnoreCase)) " is 129.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetItems,The length of the statement  "                if (downloadClientItem.Category == Settings.TvCategory || downloadClientItem.Category == "*" && Settings.TvCategory.IsNullOrWhiteSpace()) " is 137.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetStatus,The length of the statement  "                status.OutputRootFolders = new List<OsPath> { _remotePathMappingService.RemapRemoteToLocal(Settings.Host' category.FullPath) }; " is 127.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestGlobalConfig,The length of the statement  "                    DetailedDescription = "Using Check before download affects Sonarr ability to track new downloads. Also Sabnzbd recommends 'Abort jobs that cannot be completed' instead since it's more effective." " is 195.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestCategory,The length of the statement  "                        DetailedDescription = "Sonarr prefers each download to have a separate folder. With * appended to the Folder/Path Sabnzbd will not create these job folders. Go to Sabnzbd to fix it." " is 182.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestCategory,The length of the statement  "                    DetailedDescription = "You must disable Sabnzbd TV Sorting for the category Sonarr uses to prevent import issues. Go to Sabnzbd to fix it." " is 139.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestCategory,The length of the statement  "                    DetailedDescription = "You must disable Sabnzbd Movie Sorting for the category Sonarr uses to prevent import issues. Go to Sabnzbd to fix it." " is 142.
Long Statement,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestCategory,The length of the statement  "                    DetailedDescription = "You must disable Sabnzbd Date Sorting for the category Sonarr uses to prevent import issues. Go to Sabnzbd to fix it." " is 141.
Long Statement,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromMagnetLink,The length of the statement  "            var priority = (RTorrentPriority)(remoteEpisode.IsRecentEpisode() ? Settings.RecentTvPriority : Settings.OlderTvPriority); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromMagnetLink,The length of the statement  "                _logger.Warn("rTorrent could not resolve magnet within {0} seconds' download may remain stuck: {1}."' tries * retryDelay / 1000' magnetLink); " is 141.
Long Statement,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromTorrentFile,The length of the statement  "            var priority = (RTorrentPriority)(remoteEpisode.IsRecentEpisode() ? Settings.RecentTvPriority : Settings.OlderTvPriority); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,GetItems,The length of the statement  "                    throw new DownloadClientException("Download paths paths must be absolute. Please specify variable \"directory\" in rTorrent."); " is 127.
Long Statement,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,TestConnection,The length of the statement  "                    return new ValidationFailure(string.Empty' "rTorrent version should be at least 0.9.0. Version reported is {0}"' version); " is 122.
Long Statement,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,GetStatus,The length of the statement  "                OutputRootFolders = new List<OsPath> { _remotePathMappingService.RemapRemoteToLocal(Settings.Host' new OsPath(destDir)) } " is 121.
Long Statement,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,TestConnection,The length of the statement  "                    DetailedDescription = string.Format("Please verify your username and password. Also verify if the host running Sonarr isn't blocked from accessing {0} by WhiteList limitations in the {0} configuration."' Name) " is 209.
Long Statement,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,GetItems,The length of the statement  "                item.CanMoveFiles = item.CanBeRemoved = (!torrent.Status.HasFlag(UTorrentTorrentStatus.Queued) && !torrent.Status.HasFlag(UTorrentTorrentStatus.Started)); " is 154.
Long Statement,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,GetTorrents,The length of the statement  "                var removedAndUpdated = new HashSet<string>(response.TorrentsChanged.Select(v => v.Hash).Concat(response.TorrentsRemoved)); " is 123.
Long Statement,NzbDrone.Core.Download.Clients.Vuze,Vuze,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Vuze\Vuze.cs,ValidateVersion,The length of the statement  "                    return new ValidationFailure(string.Empty' "Protocol version not supported' use Vuze 5.0.0.0 or higher with Vuze Web Remote plugin."); " is 134.
Long Statement,NzbDrone.Core.Download.Pending,PendingReleaseService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Pending\PendingReleaseService.cs,AddMany,The length of the statement  "            var alreadyPending = decisions.Select(v => v.Item1.RemoteEpisode.Series.Id).Distinct().SelectMany(_repository.AllBySeriesId).ToList(); " is 134.
Long Statement,NzbDrone.Core.Download.Pending,PendingReleaseService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Pending\PendingReleaseService.cs,Add,The length of the statement  "                    _logger.Debug("The release {0} is already pending with reason {1}' changing to {2}"' decision.RemoteEpisode' matchingReport.Reason' reason); " is 140.
Long Statement,NzbDrone.Core.Download.Pending,PendingReleaseService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Pending\PendingReleaseService.cs,Add,The length of the statement  "                    _logger.Debug("The release {0} had {1} duplicate pending' removing duplicates."' decision.RemoteEpisode' matchingReports.Count() - 1); " is 134.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,RemoveCompletedDownloads,The length of the statement  "            foreach (var trackedDownload in trackedDownloads.Where(c => c.DownloadItem.CanBeRemoved && c.State == TrackedDownloadStage.Imported)) " is 133.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,ProcessClientItems,The length of the statement  "                var trackedDownload = _trackedDownloadService.TrackDownload((DownloadClientDefinition)downloadClient.Definition' downloadItem); " is 127.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,DownloadIsTrackable,The length of the statement  "            if (!_configService.EnableCompletedDownloadHandling && trackedDownload.DownloadItem.Status == DownloadItemStatus.Completed) " is 123.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,TrackedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\TrackedDownloadService.cs,TrackDownload,The length of the statement  "                        parsedEpisodeInfo = Parser.Parser.ParseTitle(firstHistoryItem.SourceTitle) ?? _parsingService.ParseSpecialEpisodeTitle(firstHistoryItem.SourceTitle' 0' 0); " is 155.
Long Statement,NzbDrone.Core.Download.TrackedDownloads,TrackedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\TrackedDownloadService.cs,TrackDownload,The length of the statement  "                            trackedDownload.RemoteEpisode = _parsingService.Map(parsedEpisodeInfo' firstHistoryItem.SeriesId' historyItems.Where(v => v.EventType == HistoryEventType.Grabbed).Select(h => h.EpisodeId).Distinct()); " is 200.
Long Statement,NzbDrone.Core.Extras,ExtraService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ExtraService.cs,ImportExtraFiles,The length of the statement  "            var matchingFilenames = files.Where(f => Path.GetFileNameWithoutExtension(f).StartsWith(sourceFileName' StringComparison.InvariantCultureIgnoreCase)); " is 150.
Long Statement,NzbDrone.Core.Extras,ImportExistingExtraFilesBase<TExtraFile>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ImportExistingExtraFilesBase.cs,Filter,The length of the statement  "            var previouslyImported = seriesFiles.IntersectBy(s => Path.Combine(series.Path' s.RelativePath)' filesOnDisk' f => f' PathEqualityComparer.Instance).ToList(); " is 158.
Long Statement,NzbDrone.Core.Extras,ImportExistingExtraFilesBase<TExtraFile>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ImportExistingExtraFilesBase.cs,Filter,The length of the statement  "            var filteredFiles = filesOnDisk.Except(previouslyImported.Select(f => Path.Combine(series.Path' f.RelativePath)).ToList()' PathEqualityComparer.Instance) " is 153.
Long Statement,NzbDrone.Core.Extras,ImportExistingExtraFilesBase<TExtraFile>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ImportExistingExtraFilesBase.cs,Clean,The length of the statement  "            var alreadyImportedFileIds = seriesFiles.IntersectBy(f => Path.Combine(series.Path' f.RelativePath)' importedFiles' i => i' PathEqualityComparer.Instance) " is 154.
Long Statement,NzbDrone.Core.Extras,ImportExistingExtraFilesBase<TExtraFile>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\ImportExistingExtraFilesBase.cs,Clean,The length of the statement  "            var deletedFiles = seriesFiles.ExceptBy(f => Path.Combine(series.Path' f.RelativePath)' filesOnDisk' i => i' PathEqualityComparer.Instance) " is 139.
Long Statement,NzbDrone.Core.Extras.Subtitles,SubtitleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Subtitles\SubtitleService.cs,MoveFilesAfterRename,The length of the statement  "                        _logger.Warn("Multiple subtitle files found with the same language and extension for {0}"' Path.Combine(series.Path' episodeFile.RelativePath)); " is 144.
Long Statement,NzbDrone.Core.HealthCheck.Checks,AppDataLocationCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\AppDataLocationCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "Updating will not be possible to prevent deleting AppData on Update"); " is 132.
Long Statement,NzbDrone.Core.HealthCheck.Checks,DownloadClientCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\DownloadClientCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Error' $"{message} {ex.Message}"' "#unable-to-communicate-with-download-client"); " is 133.
Long Statement,NzbDrone.Core.HealthCheck.Checks,DownloadClientStatusCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\DownloadClientStatusCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' "All download clients are unavailable due to failures"' "#download-clients-are-unavailable-due-to-failures"); " is 168.
Long Statement,NzbDrone.Core.HealthCheck.Checks,DownloadClientStatusCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\DownloadClientStatusCheck.cs,Check,The length of the statement  "            return new HealthCheck(GetType()' HealthCheckResult.Warning' string.Format("Download clients unavailable due to failures: {0}"' string.Join("' "' backOffProviders.Select(v => v.Provider.Definition.Name)))' "#download-clients-are-unavailable-due-to-failures"); " is 259.
Long Statement,NzbDrone.Core.HealthCheck.Checks,DeprecatedDroneFactoryCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\DeprecatedDroneFactoryCheck.cs,Check,The length of the statement  "            return new HealthCheck(GetType()' HealthCheckResult.Warning' "Drone Factory is deprecated and should not be used"' "#drone-factory-is-deprecated"); " is 147.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MonoTlsCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MonoTlsCheck.cs,Check,The length of the statement  "                //_logger.Debug("Mono version 5.0.0 or higher and legacy TLS provider is selected' recommending user to switch to btls."); " is 122.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MonoTlsCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MonoTlsCheck.cs,Check,The length of the statement  "                //return new HealthCheck(GetType()' HealthCheckResult.Warning' "Sonarr now supports Mono 5.x with btls enabled' consider removing MONO_TLS_PROVIDER=legacy option"); " is 164.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MountCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MountCheck.cs,Check,The length of the statement  "            // Not best for optimization but due to possible symlinks and junctions' we get mounts based on series path so internals can handle mount resolution. " is 149.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MountCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MountCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' "Mount containing a series path is mounted read-only: " + string.Join("'"' mounts.Select(m => m.Name))' "#series-mount-ro"); " is 183.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling if possible (Multi-Computer unsupported)"' "Migrating-to-Completed-Download-Handling#Unsupported-download-client-on-different-computer"); " is 234.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                        return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling if possible (Sabnzbd - Conflicting Category)"' "Migrating-to-Completed-Download-Handling#sabnzbd-conflicting-download-client-category"); " is 233.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling if possible (Sabnzbd)"' "Migrating-to-Completed-Download-Handling#sabnzbd-enable-completed-download-handling"); " is 208.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                        return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling if possible (Nzbget - Conflicting Category)"' "Migrating-to-Completed-Download-Handling#nzbget-conflicting-download-client-category"); " is 231.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling if possible (Nzbget)"' "Migrating-to-Completed-Download-Handling#nzbget-enable-completed-download-handling"); " is 206.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling if possible"' "Migrating-to-Completed-Download-Handling"); " is 155.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ImportMechanismCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ImportMechanismCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "Enable Completed Download Handling or configure Drone factory"); " is 126.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerRssCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerRssCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' "No indexers available with RSS sync enabled' Sonarr will not grab new releases automatically"); " is 155.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerRssCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerRssCheck.cs,Check,The length of the statement  "                 return new HealthCheck(GetType()' HealthCheckResult.Warning' "All rss-capable indexers are temporarily unavailable due to recent indexer errors"); " is 146.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerStatusCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerStatusCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' "All indexers are unavailable due to failures"' "#indexers-are-unavailable-due-to-failures"); " is 152.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerStatusCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerStatusCheck.cs,Check,The length of the statement  "            return new HealthCheck(GetType()' HealthCheckResult.Warning' string.Format("Indexers unavailable due to failures: {0}"' string.Join("' "' backOffProviders.Select(v => v.Provider.Definition.Name)))' "#indexers-are-unavailable-due-to-failures"); " is 243.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerSearchCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerSearchCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "No indexers available with Search enabled' Sonarr will not provide any search results"); " is 150.
Long Statement,NzbDrone.Core.HealthCheck.Checks,IndexerSearchCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\IndexerSearchCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Warning' "All search-capable indexers are temporarily unavailable due to recent indexer errors"); " is 149.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MonoVersionCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MonoVersionCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' "You are running an old and unsupported version of Mono with a known bug. You should upgrade to a higher version"); " is 174.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MonoVersionCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MonoVersionCheck.cs,Check,The length of the statement  "                return new HealthCheck(GetType()' HealthCheckResult.Error' $"Your Mono version {monoVersion} has a bug that causes issues connecting to indexers/download clients.  You should upgrade to a higher version"); " is 205.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MonoVersionCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MonoVersionCheck.cs,Check,The length of the statement  "            return new HealthCheck(GetType()' HealthCheckResult.Warning' "You are running an old and unsupported version of Mono. Please upgrade Mono for improved stability."); " is 164.
Long Statement,NzbDrone.Core.HealthCheck.Checks,MonoVersionCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\MonoVersionCheck.cs,HasMonoBug18599,The length of the statement  "                _logger.Debug("userFormatProvider field doesn't contain the ThreadStatic Attribute' version is affected by the critical bug #18599."); " is 134.
Long Statement,NzbDrone.Core.HealthCheck.Checks,ProxyCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\ProxyCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Error' string.Format("Failed to resolve the IP Address for the Configured Proxy Host {0}"' _configService.ProxyHostname)); " is 174.
Long Statement,NzbDrone.Core.HealthCheck.Checks,RootFolderCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\RootFolderCheck.cs,Check,The length of the statement  "                    return new HealthCheck(GetType()' HealthCheckResult.Error' "Missing root folder: " + missingRootFolders.First()' "#missing-root-folder"); " is 137.
Long Statement,NzbDrone.Core.HealthCheck.Checks,UpdateCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\UpdateCheck.cs,Check,The length of the statement  "                        string.Format("Cannot install update because startup folder '{0}' is not writable by the user '{1}'."' startupFolder' Environment.UserName)' " is 140.
Long Statement,NzbDrone.Core.HealthCheck.Checks,UpdateCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\UpdateCheck.cs,Check,The length of the statement  "                        string.Format("Cannot install update because UI folder '{0}' is not writable by the user '{1}'."' uiFolder' Environment.UserName)' " is 130.
Long Statement,NzbDrone.Core.History,HistoryService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\History\HistoryService.cs,FindDownloadId,The length of the statement  "            var allHistory = _historyRepository.FindDownloadHistory(trackedDownload.EpisodeInfo.Series.Id' trackedDownload.ImportedEpisode.Quality); " is 136.
Long Statement,NzbDrone.Core.History,HistoryService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\History\HistoryService.cs,FindDownloadId,The length of the statement  "            var stillDownloading = episodesHistory.Where(c => c.EventType == HistoryEventType.Grabbed && !processedDownloadId.Contains(c.DownloadId)).ToList(); " is 147.
Long Statement,NzbDrone.Core.History,HistoryService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\History\HistoryService.cs,FindDownloadId,The length of the statement  "                foreach (var matchingHistory in trackedDownload.EpisodeInfo.Episodes.Select(e => stillDownloading.Where(c => c.EpisodeId == e.Id).ToList())) " is 140.
Long Statement,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,Clean,The length of the statement  "                    .Where(c => c.LastUpdated > new DateTime(2014' 12' 27) && c.RelativePath.EndsWith(".jpg"' StringComparison.InvariantCultureIgnoreCase)); " is 136.
Long Statement,NzbDrone.Core.Http,HttpProxySettingsProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Http\HttpProxySettingsProvider.cs,ShouldProxyBeBypassed,The length of the statement  "            //We are utilising the WebProxy implementation here to save us having to reimplement it. This way we use Microsofts implementation " is 130.
Long Statement,NzbDrone.Core.Http,HttpProxySettingsProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Http\HttpProxySettingsProvider.cs,ShouldProxyBeBypassed,The length of the statement  "            var proxy = new WebProxy(proxySettings.Host + ":" + proxySettings.Port' proxySettings.BypassLocalAddress' proxySettings.BypassListAsArray); " is 139.
Long Statement,NzbDrone.Core.Indexers.BitMeTv,BitMeTvRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BitMeTv\BitMeTvRequestGenerator.cs,GetRssRequests,The length of the statement  "            var request = new IndexerRequest(string.Format("{0}/rss.php?uid={1}&passkey={2}"' Settings.BaseUrl.Trim().TrimEnd('/')' Settings.UserId' Settings.RssPasskey)' HttpAccept.Html); " is 176.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "                        throw new IndexerException(indexerResponse' "Indexer API call returned an unexpected StatusCode [{0}]"' indexerResponse.HttpResponse.StatusCode); " is 145.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "            if (indexerResponse.HttpResponse.Headers.ContentType != null && indexerResponse.HttpResponse.Headers.ContentType.Contains("text/html")) " is 135.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "                throw new IndexerException(indexerResponse' "Indexer responded with html content. Site is likely blocked or unavailable."); " is 123.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "            JsonRpcResponse<BroadcastheNetTorrents> jsonResponse = new HttpResponse<JsonRpcResponse<BroadcastheNetTorrents>>(indexerResponse.HttpResponse).Resource; " is 152.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "                torrentInfo.InfoUrl = string.Format("{0}//broadcasthe.net/torrents.php?id={1}&torrentid={2}"' protocol' torrent.GroupID' torrent.TorrentID); " is 140.
Long Statement,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The length of the statement  "                torrentInfo.PublishDate = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).ToUniversalTime().AddSeconds(torrent.Time); " is 124.
Long Statement,NzbDrone.Core.Indexers,IndexerFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\IndexerFactory.cs,FilterBlockedIndexers,The length of the statement  "                    _logger.Debug("Temporarily ignoring indexer {0} till {1} due to recent failures."' indexer.Definition.Name' blockedIndexerStatus.DisabledTill.Value.ToLocalTime()); " is 163.
Long Statement,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,FetchReleases,The length of the statement  "                        _logger.Warn("Indexer {0} rss sync didn't cover the period between {1} and {2} UTC. Search may be required."' Definition.Name' gapStart' gapEnd); " is 145.
Long Statement,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,LoadXmlDocument,The length of the statement  "                using (var xmlTextReader = XmlReader.Create(new StringReader(content)' new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore' IgnoreComments = true })) " is 158.
Long Statement,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,LoadXmlDocument,The length of the statement  "                _logger.Debug("Truncated response content (originally {0} characters): {1}"' indexerResponse.Content.Length' contentSample); " is 124.
Long Statement,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,PreProcess,The length of the statement  "                throw new IndexerException(indexerResponse' "Indexer API call resulted in an unexpected StatusCode [{0}]"' indexerResponse.HttpResponse.StatusCode); " is 148.
Long Statement,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,PreProcess,The length of the statement  "            if (indexerResponse.HttpResponse.Headers.ContentType != null && indexerResponse.HttpResponse.Headers.ContentType.Contains("text/html") && " is 137.
Long Statement,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,PreProcess,The length of the statement  "                indexerResponse.HttpRequest.Headers.Accept != null && !indexerResponse.HttpRequest.Headers.Accept.Contains("text/html")) " is 120.
Long Statement,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,PreProcess,The length of the statement  "                throw new IndexerException(indexerResponse' "Indexer responded with html content. Site is likely blocked or unavailable."); " is 123.
Long Statement,NzbDrone.Core.Indexers,RssSyncService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssSyncService.cs,Sync,The length of the statement  "            var message = string.Format("RSS Sync Completed. Reports found: {0}' Reports grabbed: {1}"' reports.Count' processed.Grabbed.Count); " is 132.
Long Statement,NzbDrone.Core.Indexers.Fanzub,FanzubRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Fanzub\FanzubRequestGenerator.cs,GetSearchRequests,The length of the statement  "            var searchTitles = searchCriteria.QueryTitles.SelectMany(v => GetTitleSearchStrings(v' searchCriteria.AbsoluteEpisodeNumber)).ToList(); " is 135.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabCapabilitiesProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabCapabilitiesProvider.cs,FetchCapabilities,The length of the statement  "                _logger.Error(ex' "Failed to determine newznab api capabilities for {0}' using the defaults instead till Sonarr restarts"' indexerSettings.BaseUrl); " is 148.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,GetPagedRequests,The length of the statement  "            var baseUrl = string.Format("{0}{1}?t={2}&cat={3}&extended=1{4}"' Settings.BaseUrl.TrimEnd('/')' Settings.ApiPath.TrimEnd('/')' searchType' categoriesQuery' Settings.AdditionalParameters); " is 188.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,GetPagedRequests,The length of the statement  "                    yield return new IndexerRequest(string.Format("{0}&offset={1}&limit={2}{3}"' baseUrl' page * PageSize' PageSize' parameters)' HttpAccept.Rss); " is 142.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabRssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRssParser.cs,PreProcess,The length of the statement  "            if (!indexerResponse.Request.Url.FullUri.Contains("apikey=") && (errorMessage == "Missing parameter" || errorMessage.Contains("apikey"))) " is 137.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabRssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRssParser.cs,PostProcess,The length of the statement  "                    _logger.Warn("Feed does not contain {0}' found {1}' did you intend to add a Torznab indexer?"' NzbEnclosureMimeType' enclosureTypes[0]); " is 136.
Long Statement,NzbDrone.Core.Indexers.Newznab,NewznabRssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRssParser.cs,TryGetNewznabAttribute,The length of the statement  "            var attrElement = item.Elements(ns + "attr").FirstOrDefault(e => e.Attribute("name").Value.Equals(key' StringComparison.OrdinalIgnoreCase)); " is 140.
Long Statement,NzbDrone.Core.Indexers.Nyaa,Nyaa,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Nyaa\Nyaa.cs,GetParser,The length of the statement  "            return new TorrentRssParser() { UseGuidInfoUrl = true' ParseSizeInDescription = true' ParseSeedersInDescription = true }; " is 121.
Long Statement,NzbDrone.Core.Indexers.Omgwtfnzbs,OmgwtfnzbsRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Omgwtfnzbs\OmgwtfnzbsRequestGenerator.cs,GetPagedRequests,The length of the statement  "            url.AppendFormat("{0}?catid=19'20'30&user={1}&api={2}&eng=1&delay={3}"' BaseUrl' Settings.Username' Settings.ApiKey' Settings.Delay); " is 133.
Long Statement,NzbDrone.Core.Indexers.Rarbg,RarbgRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgRequestGenerator.cs,GetSearchRequests,The length of the statement  "            pageableRequests.Add(GetPagedRequests("search"' searchCriteria.Series.TvdbId' "S{0:00}E{1:00}"' searchCriteria.SeasonNumber' searchCriteria.EpisodeNumber)); " is 156.
Long Statement,NzbDrone.Core.Indexers.Rarbg,RarbgRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgRequestGenerator.cs,GetSearchRequests,The length of the statement  "            pageableRequests.Add(GetPagedRequests("search"' searchCriteria.Series.TvdbId' "\"{0:yyyy MM dd}\""' searchCriteria.AirDate)); " is 125.
Long Statement,NzbDrone.Core.Indexers.Rarbg,RarbgParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgParser.cs,ParseResponse,The length of the statement  "                        throw new IndexerException(indexerResponse' "Indexer API call returned an unexpected StatusCode [{0}]"' indexerResponse.HttpResponse.StatusCode); " is 145.
Long Statement,NzbDrone.Core.Indexers.Rarbg,RarbgParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgParser.cs,ParseResponse,The length of the statement  "                throw new IndexerException(indexerResponse' "Indexer API call returned error {0}: {1}"' jsonResponse.Resource.error_code' jsonResponse.Resource.error); " is 151.
Long Statement,NzbDrone.Core.Indexers.Torrentleech,TorrentleechRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torrentleech\TorrentleechRequestGenerator.cs,GetRssRequests,The length of the statement  "            yield return new IndexerRequest(string.Format("{0}/{1}{2}"' Settings.BaseUrl.Trim().TrimEnd('/')' Settings.ApiKey' searchParameters)' HttpAccept.Rss); " is 150.
Long Statement,NzbDrone.Core.Indexers.TorrentRss,TorrentRssSettingsDetector,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssSettingsDetector.cs,IsEZTVFeed,The length of the statement  "            using (var xmlTextReader = XmlReader.Create(new StringReader(content)' new XmlReaderSettings { DtdProcessing = DtdProcessing.Parse' ValidationType = ValidationType.None' IgnoreComments = true' XmlResolver = null })) " is 215.
Long Statement,NzbDrone.Core.Indexers.TorrentRss,TorrentRssSettingsDetector,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssSettingsDetector.cs,ValidateReleaseSize,The length of the statement  "                throw new UnsupportedFeedException("Size of one more releases lower than {0}' feed must contain release content size."' ValidSizeThreshold.SizeSuffix()); " is 153.
Long Statement,NzbDrone.Core.Indexers.Torznab,TorznabRssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torznab\TorznabRssParser.cs,PostProcess,The length of the statement  "                    _logger.Warn("Feed does not contain {0}' found {1}' did you intend to add a Newznab indexer?"' TorrentEnclosureMimeType' enclosureTypes[0]); " is 140.
Long Statement,NzbDrone.Core.Indexers.Torznab,TorznabRssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torznab\TorznabRssParser.cs,TryGetTorznabAttribute,The length of the statement  "            var attrElement = item.Elements(ns + "attr").FirstOrDefault(e => e.Attribute("name").Value.Equals(key' StringComparison.OrdinalIgnoreCase)); " is 140.
Long Statement,NzbDrone.Core.IndexerSearch,EpisodeSearchService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\EpisodeSearchService.cs,SearchForMissingEpisodes,The length of the statement  "            _logger.ProgressInfo("Completed missing search for {0} episodes. {1} reports downloaded."' episodes.Count' downloadedCount); " is 124.
Long Statement,NzbDrone.Core.IndexerSearch,NzbSearchService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,SearchAnime,The length of the statement  "                throw new ArgumentOutOfRangeException("AbsoluteEpisodeNumber"' $"Can not search for {series.Title} - S{episode.SeasonNumber:00}E{episode.EpisodeNumber:00} it does not have an absolute episode number"); " is 201.
Long Statement,NzbDrone.Core.IndexerSearch,NzbSearchService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\NzbSearchService.cs,Dispatch,The length of the statement  "            _logger.Debug("Total of {0} reports were found for {1} from {2} indexers"' reports.Count' criteriaBase' indexers.Count); " is 120.
Long Statement,NzbDrone.Core.IndexerSearch,SeasonSearchService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\SeasonSearchService.cs,Execute,The length of the statement  "            var decisions = _nzbSearchService.SeasonSearch(message.SeriesId' message.SeasonNumber' false' message.Trigger == CommandTrigger.Manual); " is 136.
Long Statement,NzbDrone.Core.IndexerSearch,SeriesSearchService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\SeriesSearchService.cs,Execute,The length of the statement  "                var decisions = _nzbSearchService.SeasonSearch(message.SeriesId' season.SeasonNumber' false' message.Trigger == CommandTrigger.Manual); " is 135.
Long Statement,NzbDrone.Core.Instrumentation,SlowRunningAsyncTargetWrapper,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\SlowRunningAsyncTargetWrapper.cs,StartLazyWriterTimer,The length of the statement  "            // Is executed when the background task has finished processing the queue. (also executed by base.InitializeTarget once) " is 120.
Long Statement,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The length of the statement  "            var scheduledTask = _scheduledTaskRepository.All().SingleOrDefault(c => c.TypeName == message.Command.Body.GetType().FullName); " is 127.
Long Statement,NzbDrone.Core.MediaCover,GdiPlusInterop,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\GdiPlusInterop.cs,TestLibrary,The length of the statement  "                // We use StringFormat as test coz it gets properly cleaned up by the finalizer even if gdiplus is absent and is relatively non-invasive. " is 137.
Long Statement,NzbDrone.Core.MediaCover,MediaCoverService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,ConvertToLocalUrls,The length of the statement  "                mediaCover.Url = _configFileProvider.UrlBase + @"/MediaCover/" + seriesId + "/" + mediaCover.CoverType.ToString().ToLower() + ".jpg"; " is 133.
Long Statement,NzbDrone.Core.MediaCover,MediaCoverService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The length of the statement  "                        _logger.Debug("Couldn't resize media cover {0}-{1} for {2}' using full size image instead."' cover.CoverType' height' series); " is 126.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport,ImportApprovedEpisodes,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportApprovedEpisodes.cs,Import,The length of the statement  "            foreach (var importDecision in qualifiedImports.OrderBy(e => e.LocalEpisode.Episodes.Select(episode => episode.EpisodeNumber).MinOrDefault()) " is 141.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport,ImportApprovedEpisodes,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\ImportApprovedEpisodes.cs,Import,The length of the statement  "                    _eventAggregator.PublishEvent(new EpisodeImportedEvent(localEpisode' episodeFile' oldFiles' newDownload' downloadClientItem)); " is 126.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,IsSample,The length of the statement  "                _logger.Debug("[{0}] appears to be a sample. Runtime: {1} seconds. Expected at least: {2} seconds"' path' runTime' minimumRuntime); " is 131.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ShouldDeleteFolder,The length of the statement  "            var rarFiles = _diskProvider.GetFiles(directoryInfo.FullName' SearchOption.AllDirectories).Where(f => Path.GetExtension(f).Equals(".rar"' StringComparison.OrdinalIgnoreCase)); " is 175.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ShouldDeleteFolder,The length of the statement  "                if (_detectSample.IsSample(series' videoFile' episodeParseResult.IsPossibleSpecialEpisode) != DetectSampleResult.Sample) " is 120.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ProcessFolder,The length of the statement  "            var videoFiles = _diskScanService.FilterFiles(directoryInfo.FullName' _diskScanService.GetVideoFiles(directoryInfo.FullName)); " is 126.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ProcessFolder,The length of the statement  "            var decisions = _importDecisionMaker.GetImportDecisions(videoFiles.ToList()' series' downloadClientItem' folderInfo' true); " is 123.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ProcessFile,The length of the statement  "                           new ImportResult(new ImportDecision(new LocalEpisode { Path = fileInfo.FullName }' new Rejection("Invalid video file' filename starts with '._'"))' "Invalid video file' filename starts with '._'") " is 196.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ProcessFile,The length of the statement  "            var decisions = _importDecisionMaker.GetImportDecisions(new List<string>() { fileInfo.FullName }' series' downloadClientItem' null' true); " is 138.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,FileIsLockedResult,The length of the statement  "            return new ImportResult(new ImportDecision(new LocalEpisode { Path = videoFile }' new Rejection("Locked file' try again later"))' "Locked file' try again later"); " is 162.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesCommandService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesCommandService.cs,ProcessPath,The length of the statement  "                    return _downloadedEpisodesImportService.ProcessPath(message.Path' message.ImportMode' trackedDownload.RemoteEpisode.Series' trackedDownload.DownloadItem); " is 154.
Long Statement,NzbDrone.Core.MediaFiles,DownloadedEpisodesCommandService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesCommandService.cs,ProcessPath,The length of the statement  "                    _logger.Warn("External directory scan request for unknown download {0}' attempting normal import. [{1}]"' message.DownloadClientId' message.Path); " is 146.
Long Statement,NzbDrone.Core.MediaFiles,EpisodeFileMovingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeFileMovingService.cs,MoveEpisodeFile,The length of the statement  "            var filePath = _buildFileNames.BuildFilePath(series' episodes.First().SeasonNumber' newFileName' Path.GetExtension(episodeFile.RelativePath)); " is 142.
Long Statement,NzbDrone.Core.MediaFiles,EpisodeFileMovingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeFileMovingService.cs,MoveEpisodeFile,The length of the statement  "            var filePath = _buildFileNames.BuildFilePath(localEpisode.Series' localEpisode.SeasonNumber' newFileName' Path.GetExtension(localEpisode.Path)); " is 144.
Long Statement,NzbDrone.Core.MediaFiles,EpisodeFileMovingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeFileMovingService.cs,CopyEpisodeFile,The length of the statement  "            var filePath = _buildFileNames.BuildFilePath(localEpisode.Series' localEpisode.SeasonNumber' newFileName' Path.GetExtension(localEpisode.Path)); " is 144.
Long Statement,NzbDrone.Core.MediaFiles,RecycleBinProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\RecycleBinProvider.cs,DeleteFile,The length of the statement  "                        destination = Path.Combine(destinationFolder' Path.GetFileNameWithoutExtension(fileInfo.Name) + "_" + index + fileInfo.Extension); " is 130.
Long Statement,NzbDrone.Core.MediaFiles,UpdateEpisodeFileService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\UpdateEpisodeFileService.cs,Handle,The length of the statement  "                _logger.ProgressDebug("Changed file date for {0} files of {1} in {2}"' updated.Count' episodeFiles.Count' message.Series.Title); " is 128.
Long Statement,NzbDrone.Core.MediaFiles,UpgradeMediaFileService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\UpgradeMediaFileService.cs,UpgradeEpisodeFile,The length of the statement  "            // If there are existing episode files and the root folder is missing' throw' so the old file isn't left behind during the import process. " is 138.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,ProcessFolder,The length of the statement  "            var decisions = _importDecisionMaker.GetImportDecisions(seriesFiles' series' downloadClientItem' folderInfo' SceneSource(series' folder)); " is 138.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,Execute,The length of the statement  "                    imported.AddRange(_importApprovedEpisodes.Import(new List<ImportDecision> { importDecision }' !existingFile' null' message.ImportMode)); " is 136.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,Execute,The length of the statement  "                    var importResult = _importApprovedEpisodes.Import(new List<ImportDecision> { importDecision }' true' trackedDownload.DownloadItem' message.ImportMode).First(); " is 159.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,Execute,The length of the statement  "            foreach (var groupedTrackedDownload in importedTrackedDownload.GroupBy(i => i.TrackedDownload.DownloadItem.DownloadId).ToList()) " is 128.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Manual,ManualImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Manual\ManualImportService.cs,Execute,The length of the statement  "                if (groupedTrackedDownload.Select(c => c.ImportResult).Count(c => c.Result == ImportResultType.Imported) >= Math.Max(1' trackedDownload.RemoteEpisode.Episodes.Count)) " is 166.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,GrabbedReleaseQualitySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\GrabbedReleaseQualitySpecification.cs,IsSatisfiedBy,The length of the statement  "                    _logger.Debug("Quality for grabbed release ({0}) does not match the quality of the file ({1})"' item.Quality' localEpisode.Quality); " is 132.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,MatchesFolderSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\MatchesFolderSpecification.cs,IsSatisfiedBy,The length of the statement  "            var unexpected = localEpisode.ParsedEpisodeInfo.EpisodeNumbers.Where(f => !folderInfo.EpisodeNumbers.Contains(f)).ToList(); " is 123.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,MatchesFolderSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\MatchesFolderSpecification.cs,IsSatisfiedBy,The length of the statement  "                    return Decision.Reject("Episode Number {0} was unexpected considering the {1} folder name"' unexpected.First()' dirInfo.Name); " is 126.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,MatchesFolderSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\MatchesFolderSpecification.cs,IsSatisfiedBy,The length of the statement  "                return Decision.Reject("Episode Numbers {0} were unexpected considering the {1} folder name"' string.Join("' "' unexpected)' dirInfo.Name); " is 139.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,UnverifiedSceneNumberingSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\UnverifiedSceneNumberingSpecification.cs,IsSatisfiedBy,The length of the statement  "                _logger.Debug("This file uses unverified scene numbers' will not auto-import until numbering is confirmed on TheXEM. Skipping {0}"' localEpisode.Path); " is 151.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,UnverifiedSceneNumberingSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\UnverifiedSceneNumberingSpecification.cs,IsSatisfiedBy,The length of the statement  "                return Decision.Reject("This show has individual episode mappings on TheXEM but the mapping for this episode has not been confirmed yet by their administrators. TheXEM needs manual input."); " is 190.
Long Statement,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,UpgradeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\UpgradeSpecification.cs,IsSatisfiedBy,The length of the statement  "            if (localEpisode.Episodes.Any(e => e.EpisodeFileId != 0 && qualityComparer.Compare(e.EpisodeFile.Value.Quality' localEpisode.Quality) > 0)) " is 139.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioCodec,The length of the statement  "                  .Message("Unknown audio format: '{0}' in '{1}'."' string.Join("' "' audioFormat' audioCodecID' audioProfile' audioCodecLibrary)' sceneName) " is 139.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoCodec,The length of the statement  "                  .Message("Unknown video format: '{0}' in '{1}'."' string.Join("' "' videoFormat' videoCodecID' videoProfile' videoCodecLibrary)' sceneName) " is 139.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioChannelsFromAudioChannelPositions,The length of the statement  "                Logger.Debug("Formatiting audio channels using 'AudioChannelPositions'' with a value of: '{0}'"' audioChannelPositions); " is 120.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioChannelsFromAudioChannelPositionsText,The length of the statement  "                Logger.Debug("Formatiting audio channels using 'AudioChannelPositionsText'' with a value of: '{0}'"' audioChannelPositionsText); " is 128.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Get,The length of the statement  "                    return MakeStringResult(MediaInfoA_Get(_handle' (IntPtr)streamKind' (IntPtr)streamNumber' pParameter' (IntPtr)infoKind' (IntPtr)searchKind)); " is 141.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Get,The length of the statement  "                    return MakeStringResult(MediaInfo_Get(_handle' (IntPtr)streamKind' (IntPtr)streamNumber' pParameter' (IntPtr)infoKind' (IntPtr)searchKind)); " is 140.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Get,The length of the statement  "                return MakeStringResult(MediaInfoA_GetI(_handle' (IntPtr)streamKind' (IntPtr)streamNumber' (IntPtr)parameter' (IntPtr)infoKind)); " is 129.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Get,The length of the statement  "                return MakeStringResult(MediaInfo_GetI(_handle' (IntPtr)streamKind' (IntPtr)streamNumber' (IntPtr)parameter' (IntPtr)infoKind)); " is 128.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,UpdateMediaInfoService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\UpdateMediaInfoService.cs,Handle,The length of the statement  "            var filteredMediaFiles = allMediaFiles.Where(c => c.MediaInfo == null || c.MediaInfo.SchemaRevision < VideoFileInfoReader.MINIMUM_MEDIA_INFO_SCHEMA_REVISION).ToList(); " is 167.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The length of the statement  "                    decimal.TryParse(mediaInfo.Get(StreamKind.Video' 0' "FrameRate")' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out videoFrameRate); " is 148.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The length of the statement  "                    string aBitRate = mediaInfo.Get(StreamKind.Audio' 0' "BitRate").Split(new string[] { " /" }' StringSplitOptions.None)[0].Trim(); " is 128.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The length of the statement  "                    string audioChannelsStr = mediaInfo.Get(StreamKind.Audio' 0' "Channel(s)").Split(new string[] { " /" }' StringSplitOptions.None)[0].Trim(); " is 139.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The length of the statement  "                    string videoProfile = mediaInfo.Get(StreamKind.Video' 0' "Format_Profile").Split(new string[] { " /" }' StringSplitOptions.None)[0].Trim(); " is 139.
Long Statement,NzbDrone.Core.MediaFiles.MediaInfo,VideoFileInfoReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\VideoFileInfoReader.cs,GetMediaInfo,The length of the statement  "                    string audioProfile = mediaInfo.Get(StreamKind.Audio' 0' "Format_Profile").Split(new string[] { " /" }' StringSplitOptions.None)[0].Trim(); " is 139.
Long Statement,NzbDrone.Core.Messaging.Events,EventAggregator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Events\EventAggregator.cs,PublishEvent,The length of the statement  "                        _logger.Warn("Thread pool state WT:{0} PT:{1}  MAXWT:{2} MAXPT:{3} MINWT:{4} MINPT:{5}"' workerThreads' completionPortThreads' maxWorkerThreads' maxCompletionPortThreads' minWorkerThreads' minCompletionPortThreads); " is 215.
Long Statement,NzbDrone.Core.Messaging.Events,EventAggregator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Events\EventAggregator.cs,GetEventName,The length of the statement  "            return string.Format("{0}<{1}>"' eventType.Name.Remove(eventType.Name.IndexOf('`'))' eventType.GetGenericArguments()[0].Name); " is 126.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeMetadata,The length of the statement  "                    details.Add(new XElement("title"' string.Format("{0} - {1}x{2} - {3}"' series.Title' episode.SeasonNumber' episode.EpisodeNumber' episode.Title))); " is 147.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeMetadata,The length of the statement  "                    var actors = string.Join(" ' "' series.Actors.ConvertAll(c => c.Name + " - " + c.Character).GetRange(0' Math.Min(3' series.Actors.Count))); " is 139.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeMetadata,The length of the statement  "            return new MetadataFileResult(GetEpisodeMetadataFilename(episodeFile.RelativePath)' xmlResult.Trim(Environment.NewLine.ToCharArray())); " is 135.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,SeriesImages,The length of the statement  "            var image = series.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? series.Images.FirstOrDefault(); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,SeasonImages,The length of the statement  "            //Roksbox only supports one season image' so first of all try for poster otherwise just use whatever is first in the collection " is 127.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,SeasonImages,The length of the statement  "            var image = season.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? season.Images.FirstOrDefault(); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeImages,The length of the statement  "            var screenshot = episodeFile.Episodes.Value.First().Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot); " is 123.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeImages,The length of the statement  "            return new List<ImageFileResult> {new ImageFileResult(GetEpisodeImageFilename(episodeFile.RelativePath)' screenshot.Url)}; " is 122.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,EpisodeMetadata,The length of the statement  "                    details.Add(new XElement("title"' string.Format("{0} - {1}x{2:00} - {3}"' series.Title' episode.SeasonNumber' episode.EpisodeNumber' episode.Title))); " is 150.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,SeriesImages,The length of the statement  "            var image = series.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? series.Images.FirstOrDefault(); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,SeasonImages,The length of the statement  "            //WDTV only supports one season image' so first of all try for poster otherwise just use whatever is first in the collection " is 124.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,SeasonImages,The length of the statement  "            var image = season.Images.SingleOrDefault(c => c.CoverType == MediaCoverTypes.Poster) ?? season.Images.FirstOrDefault(); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,EpisodeImages,The length of the statement  "            var screenshot = episodeFile.Episodes.Value.First().Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot); " is 123.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,EpisodeImages,The length of the statement  "            return new List<ImageFileResult>{ new ImageFileResult(GetEpisodeImageFilename(episodeFile.RelativePath)' screenshot.Url) }; " is 123.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,SeriesMetadata,The length of the statement  "            var episodeGuideUrl = string.Format("http://www.thetvdb.com/api/1D62F2F90030C444/series/{0}/all/en.zip"' series.TvdbId); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,EpisodeMetadata,The length of the statement  "            return new MetadataFileResult(GetEpisodeMetadataFilename(episodeFile.RelativePath)' xmlResult.Trim(Environment.NewLine.ToCharArray())); " is 135.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,EpisodeImages,The length of the statement  "                var screenshot = episodeFile.Episodes.Value.First().Images.SingleOrDefault(i => i.CoverType == MediaCoverTypes.Screenshot); " is 123.
Long Statement,NzbDrone.Core.Extras.Metadata.Consumers.Xbmc,XbmcMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Xbmc\XbmcMetadata.cs,EpisodeImages,The length of the statement  "                _logger.Error(ex' "Unable to process episode image for file: {0}"' Path.Combine(series.Path' episodeFile.RelativePath)); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata,MetadataFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\MetadataFactory.cs,InitializeProviders,The length of the statement  "            var newProviders = definitions.Where(def => currentProviders.All(c => c.Implementation != def.Implementation)).ToList(); " is 120.
Long Statement,NzbDrone.Core.Extras.Metadata,MetadataService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\MetadataService.cs,MoveFilesAfterRename,The length of the statement  "                    var metadataFilesForConsumer = GetMetadataFilesForConsumer(consumer' metadataFiles).Where(m => m.EpisodeFileId == episodeFile.Id).ToList(); " is 139.
Long Statement,NzbDrone.Core.Notifications.Join,JoinProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Join\JoinProxy.cs,SendNotification,The length of the statement  "            request.AddParameter("smallicon"' "https://cdn.rawgit.com/Sonarr/Sonarr/develop/Logo/96-Outline-White.png"); // 96x96px with outline at 88x88px on a transparent background. " is 172.
Long Statement,NzbDrone.Core.Notifications.Boxcar,BoxcarProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Boxcar\BoxcarProxy.cs,SendNotification,The length of the statement  "                request.AddParameter("notification[icon_url]"' "https://raw.githubusercontent.com/Sonarr/Sonarr/7818f0c59b787312f0bcbc5c0eafc3c9dd7e5451/Logo/64.png"); " is 151.
Long Statement,NzbDrone.Core.Notifications.Plex,PlexClientService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexClientService.cs,Test,The length of the statement  "                var command = string.Format("ExecBuiltIn(Notification({0}' {1}))"' "Test Notification"' "Success! Notifications are setup correctly"); " is 134.
Long Statement,NzbDrone.Core.Notifications.Plex,PlexServerService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexServerService.cs,UpdateLibrary,The length of the statement  "                var partialUpdates = _partialUpdateCache.Get(settings.Host' () => PartialUpdatesAllowed(settings' version)' TimeSpan.FromHours(2)); " is 131.
Long Statement,NzbDrone.Core.Notifications.Plex,PlexServerService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexServerService.cs,ValidateVersion,The length of the statement  "                throw new PlexVersionException("Found version {0}' upgrade to PMS 1.3.1 to fix library updating and then restart Sonarr"' version); " is 131.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_EpisodeNumbers"' string.Join("'"' remoteEpisode.Episodes.Select(e => e.EpisodeNumber))); " is 129.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_EpisodeAirDates"' string.Join("'"' remoteEpisode.Episodes.Select(e => e.AirDate))); " is 124.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_EpisodeAirDatesUtc"' string.Join("'"' remoteEpisode.Episodes.Select(e => e.AirDateUtc))); " is 130.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_EpisodeTitles"' string.Join("|"' remoteEpisode.Episodes.Select(e => e.Title))); " is 120.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnGrab,The length of the statement  "            environmentVariables.Add("Sonarr_Release_QualityVersion"' remoteEpisode.ParsedEpisodeInfo.Quality.Revision.Version.ToString()); " is 127.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "            environmentVariables.Add("Sonarr_EpisodeFile_EpisodeNumbers"' string.Join("'"' episodeFile.Episodes.Value.Select(e => e.EpisodeNumber))); " is 137.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "            environmentVariables.Add("Sonarr_EpisodeFile_EpisodeAirDates"' string.Join("'"' episodeFile.Episodes.Value.Select(e => e.AirDate))); " is 132.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "            environmentVariables.Add("Sonarr_EpisodeFile_EpisodeAirDatesUtc"' string.Join("'"' episodeFile.Episodes.Value.Select(e => e.AirDateUtc))); " is 138.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "            environmentVariables.Add("Sonarr_EpisodeFile_EpisodeTitles"' string.Join("|"' episodeFile.Episodes.Value.Select(e => e.Title))); " is 128.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "                environmentVariables.Add("Sonarr_DeletedRelativePaths"' string.Join("|"' message.OldFiles.Select(e => e.RelativePath))); " is 120.
Long Statement,NzbDrone.Core.Notifications.CustomScript,CustomScript,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\CustomScript\CustomScript.cs,OnDownload,The length of the statement  "                environmentVariables.Add("Sonarr_DeletedPaths"' string.Join("|"' message.OldFiles.Select(e => Path.Combine(series.Path' e.RelativePath)))); " is 139.
Long Statement,NzbDrone.Core.Notifications.Twitter,Twitter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Twitter\Twitter.cs,RequestAction,The length of the statement  "                var oauthRedirectUrl = _twitterService.GetOAuthRedirect(Settings.ConsumerKey' Settings.ConsumerSecret' query["callbackUrl"]); " is 125.
Long Statement,NzbDrone.Core.Notifications.Twitter,Twitter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Twitter\Twitter.cs,RequestAction,The length of the statement  "                var oauthToken = _twitterService.GetOAuthToken(Settings.ConsumerKey' Settings.ConsumerSecret' query["oauth_token"]' query["oauth_verifier"]); " is 141.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddSeasonEpisodeNumberingTokens,The length of the statement  "                tokenHandlers["{Episode}"] = m => episodes.First().EpisodeNumber.ToString(m.CustomFormat) + "-" + episodes.Last().EpisodeNumber.ToString(m.CustomFormat); " is 153.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddAbsoluteNumberingTokens,The length of the statement  "                        var repeatSeparator = absoluteEpisodeFormat.Separator.Trim().IsNullOrWhiteSpace() ? " " : absoluteEpisodeFormat.Separator.Trim(); " is 129.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddMediaInfoTokens,The length of the statement  "            var videoBitDepth = episodeFile.MediaInfo.VideoBitDepth > 0 ? episodeFile.MediaInfo.VideoBitDepth.ToString() : string.Empty; " is 124.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,AddMediaInfoTokens,The length of the statement  "            tokenHandlers["{MediaInfo Full}"] = m => $"{videoCodec} {audioCodec}{mediaInfoAudioLanguages} {mediaInfoSubtitleLanguages}"; " is 124.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,FormatNumberTokens,The length of the statement  "                pattern += EpisodeRegex.Replace(patternToReplace' match => ReplaceNumberToken(match.Groups["episode"].Value' episodes[i].EpisodeNumber)); " is 137.
Long Statement,NzbDrone.Core.Organizer,FileNameBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,FormatAbsoluteNumberTokens,The length of the statement  "                pattern += AbsoluteEpisodeRegex.Replace(patternToReplace' match => ReplaceNumberToken(match.Groups["absolute"].Value' episodes[i].AbsoluteEpisodeNumber.Value)); " is 160.
Long Statement,NzbDrone.Core.Organizer,FileNameValidation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameValidation.cs,ValidSeriesFolderFormat,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator(FileNameBuilder.SeriesTitleRegex)).WithMessage("Must contain series title"); " is 139.
Long Statement,NzbDrone.Core.Organizer,FileNameValidation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameValidation.cs,ValidSeasonFolderFormat,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator(SeasonFolderRegex)).WithMessage("Must contain season number"); " is 125.
Long Statement,NzbDrone.Core.Parser,Parser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseTitle,The length of the statement  "                    simpleTitle = airDateMatch.Groups[1].Value + airDateMatch.Groups["airyear"].Value + "." + airDateMatch.Groups["airmonth"].Value + "." + airDateMatch.Groups["airday"].Value; " is 172.
Long Statement,NzbDrone.Core.Parser,ParsingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetSeries,The length of the statement  "            var sceneMappingTvdbId = _sceneMappingService.FindTvdbId(parsedEpisodeInfo.SeriesTitle' parsedEpisodeInfo.ReleaseTitle); " is 120.
Long Statement,NzbDrone.Core.Parser,ParsingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetSeries,The length of the statement  "                series = _seriesService.FindByTitle(parsedEpisodeInfo.SeriesTitleInfo.TitleWithoutYear' parsedEpisodeInfo.SeriesTitleInfo.Year); " is 128.
Long Statement,NzbDrone.Core.Parser,ParsingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetAnimeEpisodes,The length of the statement  "            var sceneSeasonNumber = _sceneMappingService.GetSceneSeasonNumber(parsedEpisodeInfo.SeriesTitle' parsedEpisodeInfo.ReleaseTitle); " is 129.
Long Statement,NzbDrone.Core.Parser,ParsingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetStandardEpisodes,The length of the statement  "                var sceneMapping = _sceneMappingService.FindSceneMapping(parsedEpisodeInfo.SeriesTitle' parsedEpisodeInfo.ReleaseTitle); " is 120.
Long Statement,NzbDrone.Core.Parser,ParsingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetStandardEpisodes,The length of the statement  "                    episodeInfo = searchCriteria.Episodes.SingleOrDefault(e => e.SeasonNumber == seasonNumber && e.EpisodeNumber == episodeNumber); " is 127.
Long Statement,NzbDrone.Core.Notifications.Growl,Growl,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\Growl.cs,OnGrab,The length of the statement  "            _growlService.SendNotification(EPISODE_GRABBED_TITLE' grabMessage.Message' "GRAB"' Settings.Host' Settings.Port' Settings.Password); " is 132.
Long Statement,NzbDrone.Core.Notifications.Growl,Growl,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\Growl.cs,OnDownload,The length of the statement  "            _growlService.SendNotification(EPISODE_DOWNLOADED_TITLE' message.Message' "DOWNLOAD"' Settings.Host' Settings.Port' Settings.Password); " is 135.
Long Statement,NzbDrone.Core.Notifications.Growl,GrowlService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlService.cs,SendNotification,The length of the statement  "            var notification = new GrowlNotification(_growlApplication.Name' notificationType.Name' DateTime.Now.Ticks.ToString()' title' message); " is 135.
Long Statement,NzbDrone.Core.Notifications.NotifyMyAndroid,NotifyMyAndroid,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\NotifyMyAndroid\NotifyMyAndroid.cs,OnGrab,The length of the statement  "            _proxy.SendNotification(EPISODE_GRABBED_TITLE' grabMessage.Message' Settings.ApiKey' (NotifyMyAndroidPriority)Settings.Priority); " is 129.
Long Statement,NzbDrone.Core.Notifications.NotifyMyAndroid,NotifyMyAndroid,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\NotifyMyAndroid\NotifyMyAndroid.cs,OnDownload,The length of the statement  "            _proxy.SendNotification(EPISODE_DOWNLOADED_TITLE' message.Message' Settings.ApiKey' (NotifyMyAndroidPriority)Settings.Priority); " is 128.
Long Statement,NzbDrone.Core.Notifications.Prowl,Prowl,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Prowl\Prowl.cs,OnGrab,The length of the statement  "            _prowlService.SendNotification(EPISODE_GRABBED_TITLE' grabMessage.Message' Settings.ApiKey' (NotificationPriority)Settings.Priority); " is 133.
Long Statement,NzbDrone.Core.Notifications.Prowl,Prowl,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Prowl\Prowl.cs,OnDownload,The length of the statement  "            _prowlService.SendNotification(EPISODE_DOWNLOADED_TITLE' message.Message' Settings.ApiKey' (NotificationPriority)Settings.Priority); " is 132.
Long Statement,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,Notify,The length of the statement  "            var notification = string.Format("Notification({0}'{1}'{2}'{3})"' title' message' settings.DisplayTime * 1000' "https://raw.github.com/Sonarr/Sonarr/develop/Logo/64.png"); " is 171.
Long Statement,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,GetSeriesPath,The length of the statement  "                    "select path.strPath from path' tvshow' tvshowlinkpath where tvshow.c12 = {0} and tvshowlinkpath.idShow = tvshow.idShow and tvshowlinkpath.idPath = path.idPath"' " is 161.
Long Statement,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,GetSeriesPath,The length of the statement  "                "SetResponseFormat(webheader;false;webfooter;false;header;<xml>;footer;</xml>;opentag;<tag>;closetag;</tag>;closefinaltag;false)"; " is 130.
Long Statement,NzbDrone.Core.Parser.Model,ParsedEpisodeInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Model\ParsedEpisodeInfo.cs,ToString,The length of the statement  "                episodeString = string.Format("S{0:00}E{1}"' SeasonNumber' string.Join("-"' EpisodeNumbers.Select(c => c.ToString("00")))); " is 123.
Long Statement,NzbDrone.Core.Queue,QueueService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Queue\QueueService.cs,MapEpisode,The length of the statement  "                Id = HashConverter.GetHashInt31(string.Format("trackedDownload-{0}-ep{1}"' trackedDownload.DownloadItem.DownloadId' episode.Id))' " is 129.
Long Statement,NzbDrone.Core.Rest,RestSharpExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Rest\RestSharpExtensions.cs,ValidateResponse,The length of the statement  "            Logger.Debug("Validating Responses from [{0}] [{1}] status: [{2}]"' response.Request.Method' restClient.BuildUri(response.Request)' response.StatusCode); " is 153.
Long Statement,NzbDrone.Core.Rest,RestSharpExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Rest\RestSharpExtensions.cs,ValidateResponse,The length of the statement  "                        Logger.Warn("[{0}] [{1}] Failed. [{2}]"' response.Request.Method' response.ResponseUri.ToString()' response.StatusCode); " is 120.
Long Statement,NzbDrone.Core.RootFolders,RootFolderService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\RootFolders\RootFolderService.cs,Add,The length of the statement  "            if (_configService.DownloadedEpisodesFolder.IsNotNullOrWhiteSpace() && _configService.DownloadedEpisodesFolder.PathEquals(rootFolder.Path)) " is 139.
Long Statement,NzbDrone.Core.RootFolders,RootFolderService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\RootFolders\RootFolderService.cs,Add,The length of the statement  "                throw new UnauthorizedAccessException(string.Format("Root folder path '{0}' is not writable by user '{1}'"' rootFolder.Path' Environment.UserName)); " is 148.
Long Statement,NzbDrone.Core.SeriesStats,SeriesStatisticsRepository,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\SeriesStats\SeriesStatisticsRepository.cs,GetSelectClause,The length of the statement  "                     MIN(CASE WHEN AirDateUtc < @currentDate OR EpisodeFileId > 0 OR Monitored = 0 THEN NULL ELSE AirDateUtc END) AS NextAiringString' " is 129.
Long Statement,NzbDrone.Core.SeriesStats,SeriesStatisticsRepository,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\SeriesStats\SeriesStatisticsRepository.cs,GetSelectClause,The length of the statement  "                     MAX(CASE WHEN AirDateUtc >= @currentDate OR EpisodeFileId = 0 AND Monitored = 0 THEN NULL ELSE AirDateUtc END) AS PreviousAiringString " is 134.
Long Statement,NzbDrone.Core.ThingiProvider,ProviderFactory<TProvider;TProviderDefinition>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\ThingiProvider\ProviderFactory.cs,GetImplementation,The length of the statement  "            return _providers.Select(c => c.GetType()).SingleOrDefault(c => c.Name.Equals(definition.Implementation' StringComparison.InvariantCultureIgnoreCase)); " is 151.
Long Statement,NzbDrone.Core.Tv,EpisodeAddedService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeAddedService.cs,Handle,The length of the statement  "                var previouslyAired = message.Added.Where(a => a.AirDateUtc.HasValue && a.AirDateUtc.Value.Before(DateTime.UtcNow.AddDays(1)) && a.Monitored).ToList(); " is 151.
Long Statement,NzbDrone.Core.Tv,EpisodeMonitoredService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeMonitoredService.cs,SetEpisodeMonitoredStatus,The length of the statement  "                    ToggleEpisodesMonitoredState(episodes.Where(e => !e.HasFile && e.AirDateUtc.HasValue && e.AirDateUtc.Value.Before(DateTime.UtcNow))' false); " is 140.
Long Statement,NzbDrone.Core.Tv,EpisodeMonitoredService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeMonitoredService.cs,SetEpisodeMonitoredStatus,The length of the statement  "                    ToggleEpisodesMonitoredState(episodes.Where(e => !e.HasFile && e.AirDateUtc.HasValue && e.AirDateUtc.Value.Before(DateTime.UtcNow))' true); " is 139.
Long Statement,NzbDrone.Core.Tv,EpisodeRepository,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeRepository.cs,EpisodesWhereCutoffUnmet,The length of the statement  "            pagingSpec.TotalRecords = EpisodesWhereCutoffUnmetQuery(pagingSpec' qualitiesBelowCutoff' startingSeasonNumber).GetRowCount(); " is 126.
Long Statement,NzbDrone.Core.Tv,EpisodeRepository,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeRepository.cs,BuildQualityCutoffWhereClause,The length of the statement  "                    clauses.Add(string.Format("([t1].[ProfileId] = {0} AND [t2].[Quality] LIKE '%_quality_: {1}'%')"' profile.ProfileId' belowCutoff)); " is 131.
Long Statement,NzbDrone.Core.Tv,EpisodeService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeService.cs,FindEpisodeByTitle,The length of the statement  "                               Position = normalizedReleaseTitle.IndexOf(Parser.Parser.NormalizeEpisodeTitle(episode.Title)' StringComparison.CurrentCultureIgnoreCase)' " is 137.
Long Statement,NzbDrone.Core.Tv,EpisodeService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\EpisodeService.cs,EpisodesBetweenDates,The length of the statement  "            var episodes = _episodeRepository.EpisodesBetweenDates(start.ToUniversalTime()' end.ToUniversalTime()' includeUnmonitored); " is 123.
Long Statement,NzbDrone.Core.Tv,RefreshEpisodeService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshEpisodeService.cs,AdjustDirectToDvdAirDate,The length of the statement  "            if (series.Status == SeriesStatusType.Ended && allEpisodes.All(v => !v.AirDateUtc.HasValue) && series.FirstAired.HasValue) " is 122.
Long Statement,NzbDrone.Core.Tv,RefreshEpisodeService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshEpisodeService.cs,GetEpisodeToUpdate,The length of the statement  "            return existingEpisodes.FirstOrDefault(e => e.SeasonNumber == episode.SeasonNumber && e.EpisodeNumber == episode.EpisodeNumber); " is 128.
Long Statement,NzbDrone.Core.Tv,RefreshSeriesService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,RefreshSeriesInfo,The length of the statement  "                _logger.Error("Series '{0}' (tvdbid {1}) was not found' it may have been removed from TheTVDB."' series.Title' series.TvdbId); " is 126.
Long Statement,NzbDrone.Core.Tv,RefreshSeriesService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,RefreshSeriesInfo,The length of the statement  "                _logger.Warn("Series '{0}' (tvdbid {1}) was replaced with '{2}' (tvdbid {3})' because the original was a duplicate."' series.Title' series.TvdbId' seriesInfo.Title' seriesInfo.TvdbId); " is 184.
Long Statement,NzbDrone.Core.Tv,RefreshSeriesService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\RefreshSeriesService.cs,UpdateSeasons,The length of the statement  "                    _logger.Debug("New season ({0}) for series: [{1}] {2}' setting monitored to true"' season.SeasonNumber' series.TvdbId' series.Title); " is 133.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,InstallUpdate,The length of the statement  "                    throw new UpdateFolderNotWritableException("Cannot install update because startup folder '{0}' is not writable by the user '{1}'."' startupFolder' Environment.UserName); " is 169.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,InstallUpdate,The length of the statement  "                    throw new UpdateFolderNotWritableException("Cannot install update because UI folder '{0}' is not writable by the user '{1}'."' uiFolder' Environment.UserName); " is 159.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,InstallUpdate,The length of the statement  "            _diskTransferService.TransferFolder(_appFolderInfo.GetUpdateClientFolder()' updateSandboxFolder' TransferMode.Move' false); " is 123.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,GetUpdaterArgs,The length of the statement  "            return string.Join(" "' processId' updateSandboxFolder.TrimEnd(Path.DirectorySeparatorChar).WrapInQuotes()' executingApplication.WrapInQuotes()' _startupContext.PreservedArguments); " is 181.
Long Statement,NzbDrone.Core.Update,InstallUpdateService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Update\InstallUpdateService.cs,EnsureAppDataSafety,The length of the statement  "                throw new UpdateFailedException("Your Sonarr configuration '{0}' is being stored in application folder '{1}' which will cause data lost during the upgrade. Please remove any symlinks or redirects before trying again."' _appFolderInfo.AppDataFolder' _appFolderInfo.StartUpFolder); " is 279.
Long Statement,NzbDrone.Core.Validation,IpValidation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Validation\IpValidation.cs,NotListenAllIp4Address,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator(@"^(?!0\.0\.0\.0)")).WithMessage("Use * instead of 0.0.0.0"); " is 124.
Long Statement,NzbDrone.Core.Validation,RuleBuilderExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,HaveHttpProtocol,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator("^https?://"' RegexOptions.IgnoreCase)).WithMessage("must start with http:// or https://"); " is 154.
Long Statement,NzbDrone.Core.Validation,RuleBuilderExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidHost,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator("^[-_a-z0-9.]+$"' RegexOptions.IgnoreCase)).WithMessage("must be valid Host without http://"); " is 157.
Long Statement,NzbDrone.Core.Validation,RuleBuilderExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidRootUrl,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator("^https?://[-_a-z0-9.]+"' RegexOptions.IgnoreCase)).WithMessage("must be valid URL that starts with http(s)://"); " is 176.
Long Statement,NzbDrone.Core.Validation,RuleBuilderExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidUrlBase,The length of the statement  "            return ruleBuilder.SetValidator(new RegularExpressionValidator(@"^(?!\/?https?://[-_a-z0-9.]+)"' RegexOptions.IgnoreCase)).WithMessage($"Must be a valid URL path (ie: '{example}')"); " is 182.
Long Statement,NzbDrone.Core.Validation.Paths,SeriesPathValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Validation\Paths\SeriesPathValidator.cs,IsValid,The length of the statement  "            return (!_seriesService.GetAllSeries().Exists(s => s.Path.PathEquals(context.PropertyValue.ToString()) && s.Id != instanceId)); " is 127.
Complex Conditional,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The conditional expression  "list[j].Data.ContainsKey("downloadClient") && list[j].Data["downloadClient"] == grabbedEvent.Data["downloadClient"] &&                              list[j].Data.ContainsKey("downloadClientId") && list[j].Data["downloadClientId"] == grabbedEvent.Data["downloadClientId"]"  is complex.
Complex Conditional,NzbDrone.Core.Datastore.Migration.Framework,SqliteSchemaDumper,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSchemaDumper.cs,ParseCreateTableStatement,The conditional expression  "columnReader.ValueToUpper == "CONSTRAINT" ||                          columnReader.ValueToUpper == "PRIMARY" || columnReader.ValueToUpper == "UNIQUE" ||                          columnReader.ValueToUpper == "CHECK" || columnReader.ValueToUpper == "FOREIGN""  is complex.
Complex Conditional,NzbDrone.Core.Datastore.Migration.Framework,SqliteSyntaxReader,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\SqliteSyntaxReader.cs,Read,The conditional expression  "end >= Buffer.Length || Buffer[end] == ''' || Buffer[end] == ')' || char.IsWhiteSpace(Buffer[end])"  is complex.
Complex Conditional,NzbDrone.Core.Download,CompletedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\CompletedDownloadService.cs,Process,The conditional expression  "(OsInfo.IsWindows && !downloadItemOutputPath.IsWindowsPath) ||                      (OsInfo.IsNotWindows && !downloadItemOutputPath.IsUnixPath)"  is complex.
Complex Conditional,NzbDrone.Core.Download,DownloadEventHub,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadEventHub.cs,Handle,The conditional expression  "!_configService.RemoveCompletedDownloads ||                  message.TrackedDownload.DownloadItem.Removed ||                  !message.TrackedDownload.DownloadItem.CanBeRemoved ||                  message.TrackedDownload.DownloadItem.Status == DownloadItemStatus.Downloading"  is complex.
Complex Conditional,NzbDrone.Core.Download,ProcessDownloadDecisions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\ProcessDownloadDecisions.cs,ProcessDecisions,The conditional expression  "downloadProtocol == DownloadProtocol.Usenet && usenetFailed ||                      downloadProtocol == DownloadProtocol.Torrent && torrentFailed"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.Deluge,Deluge,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,AddFromMagnetLink,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)DelugePriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)DelugePriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.Deluge,Deluge,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\Deluge.cs,AddFromTorrentFile,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)DelugePriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)DelugePriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,AddFromMagnetLink,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)QBittorrentPriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)QBittorrentPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,AddFromTorrentFile,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)QBittorrentPriority.First ||                      !isRecentEpisode && Settings.OlderTvPriority == (int)QBittorrentPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,GetItems,The conditional expression  "torrent.LeftUntilDone == 0 && (torrent.Status == TransmissionTorrentStatus.Stopped ||                                                          torrent.Status == TransmissionTorrentStatus.Seeding ||                                                          torrent.Status == TransmissionTorrentStatus.SeedingWait)"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,AddFromMagnetLink,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)TransmissionPriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)TransmissionPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.Transmission,TransmissionBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionBase.cs,AddFromTorrentFile,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)TransmissionPriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)TransmissionPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,AddFromMagnetLink,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)UTorrentPriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)UTorrentPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,AddFromTorrentFile,The conditional expression  "isRecentEpisode && Settings.RecentTvPriority == (int)UTorrentPriority.First ||                  !isRecentEpisode && Settings.OlderTvPriority == (int)UTorrentPriority.First"  is complex.
Complex Conditional,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,GetItems,The conditional expression  "torrent.Status.HasFlag(UTorrentTorrentStatus.Loaded) &&                           torrent.Status.HasFlag(UTorrentTorrentStatus.Checked) && torrent.Remaining == 0 && torrent.Progress == 1.0"  is complex.
Complex Conditional,NzbDrone.Core.Download.TrackedDownloads,TrackedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\TrackedDownloadService.cs,TrackDownload,The conditional expression  "parsedEpisodeInfo == null ||                          trackedDownload.RemoteEpisode == null ||                          trackedDownload.RemoteEpisode.Series == null ||                          trackedDownload.RemoteEpisode.Episodes.Empty()"  is complex.
Complex Conditional,NzbDrone.Core.Download.TrackedDownloads,TrackedDownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\TrackedDownloadService.cs,LogItemChange,The conditional expression  "existingItem == null ||                  existingItem.Status != downloadItem.Status ||                  existingItem.CanBeRemoved != downloadItem.CanBeRemoved ||                  existingItem.CanMoveFiles != downloadItem.CanMoveFiles"  is complex.
Complex Conditional,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,PreProcess,The conditional expression  "indexerResponse.HttpResponse.Headers.ContentType != null && indexerResponse.HttpResponse.Headers.ContentType.Contains("text/html") &&                  indexerResponse.HttpRequest.Headers.Accept != null && !indexerResponse.HttpRequest.Headers.Accept.Contains("text/html")"  is complex.
Complex Conditional,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,AddTvIdPageableRequests,The conditional expression  "SupportsAggregatedIdSearch && (includeTvdbSearch || includeTvRageSearch || includeTvMazeSearch)"  is complex.
Complex Conditional,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatVideoCodec,The conditional expression  "videoFormat.EqualsIgnoreCase("VP6") || videoFormat.EqualsIgnoreCase("VP7") ||                  videoFormat.EqualsIgnoreCase("VP8") || videoFormat.EqualsIgnoreCase("VP9")"  is complex.
Complex Conditional,NzbDrone.Core.MetadataSource.SkyHook,SkyHookProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MetadataSource\SkyHook\SkyHookProxy.cs,SearchForNewSeries,The conditional expression  "slug.IsNullOrWhiteSpace() || slug.Any(char.IsWhiteSpace) || !int.TryParse(slug' out tvdbId) || tvdbId <= 0"  is complex.
Complex Conditional,NzbDrone.Core.Parser,ParsingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\ParsingService.cs,GetStandardEpisodes,The conditional expression  "sceneMapping != null && sceneMapping.SeasonNumber.HasValue && sceneMapping.SeasonNumber.Value >= 0 &&                      sceneMapping.SceneSeasonNumber == seasonNumber"  is complex.
Complex Conditional,NzbDrone.Core.Parser,SceneChecker,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\SceneChecker.cs,IsSceneTitle,The conditional expression  "parsedTitle == null ||                  parsedTitle.ReleaseGroup == null ||                  parsedTitle.Quality.Quality == Qualities.Quality.Unknown ||                  string.IsNullOrWhiteSpace(parsedTitle.SeriesTitle)"  is complex.
Complex Conditional,NzbDrone.Core.Parser,QualityParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQualityName,The conditional expression  "sourceMatch.Groups["pdtv"].Success ||                      sourceMatch.Groups["sdtv"].Success ||                      sourceMatch.Groups["dsr"].Success ||                      sourceMatch.Groups["tvrip"].Success"  is complex.
Virtual Method Call from Constructor,NzbDrone.Core.DataAugmentation.Xem,XemProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemProxy.cs,XemProxy,The constructor "XemProxy" calls a virtual method "AddSuffixQueryParam".
Empty Catch Block,NzbDrone.Core.Indexers,TorrentRssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRssParser.cs,GetInfoHash,The method has an empty catch block.
Empty Catch Block,NzbDrone.Core.MediaFiles,RecycleBinProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\RecycleBinProvider.cs,SetLastWriteTime,The method has an empty catch block.
Empty Catch Block,NzbDrone.Core.Organizer,FileNameBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameBuilder.cs,GetLanguagesToken,The method has an empty catch block.
Empty Catch Block,NzbDrone.Core.Parser,QualityParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQuality,The method has an empty catch block.
Magic Number,NzbDrone.Core.Backup,BackupService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Backup\BackupService.cs,CleanupOldBackups,The following statement contains a magic number: foreach (var file in files)              {                  var lastWriteTime = _diskProvider.FileGetLastWrite(file);                    if (lastWriteTime.AddDays(28) < DateTime.UtcNow)                  {                      _logger.Debug("Deleting old backup file: {0}"' file);                      _diskProvider.DeleteFile(file);                  }              }
Magic Number,NzbDrone.Core.Backup,MakeDatabaseBackup,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Backup\MakeDatabaseBackup.cs,BackupDatabase,The following statement contains a magic number: using (var sourceConnection = (SQLiteConnection)SQLiteFactory.Instance.CreateConnection())              using (var backupConnection = (SQLiteConnection)SQLiteFactory.Instance.CreateConnection())              {                  sourceConnection.ConnectionString = sourceConnectionString;                  backupConnection.ConnectionString = backupConnectionStringBuilder.ToString();                    sourceConnection.Open();                  backupConnection.Open();                    sourceConnection.BackupDatabase(backupConnection' "main"' "main"' -1' null' 500);                    // The backup changes the journal_mode' force it to truncate again.                  using (var command = backupConnection.CreateCommand())                  {                      command.CommandText = "pragma journal_mode=truncate";                      command.ExecuteNonQuery();                  }                    // Make sure there are no lingering connections.                  SQLiteConnection.ClearAllPools();              }
Magic Number,NzbDrone.Core.Blacklisting,BlacklistService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Blacklisting\BlacklistService.cs,HasSamePublishedDate,The following statement contains a magic number: return item.PublishedDate.Value.AddMinutes(-2) <= publishedDate &&                     item.PublishedDate.Value.AddMinutes(2) >= publishedDate;
Magic Number,NzbDrone.Core.Blacklisting,BlacklistService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Blacklisting\BlacklistService.cs,HasSamePublishedDate,The following statement contains a magic number: return item.PublishedDate.Value.AddMinutes(-2) <= publishedDate &&                     item.PublishedDate.Value.AddMinutes(2) >= publishedDate;
Magic Number,NzbDrone.Core.Blacklisting,BlacklistService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Blacklisting\BlacklistService.cs,HasSameSize,The following statement contains a magic number: return difference <= 2.Megabytes();
Magic Number,NzbDrone.Core.DataAugmentation.Scene,SceneMappingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Scene\SceneMappingService.cs,FindMappings,The following statement contains a magic number: var closestMatch = candidates.OrderBy(v => seriesTitle.LevenshteinDistance(v.Title' 10' 1' 10))                                           .ThenByDescending(v => v.SeasonNumber)                                           .First();
Magic Number,NzbDrone.Core.DataAugmentation.Scene,SceneMappingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Scene\SceneMappingService.cs,FindMappings,The following statement contains a magic number: var closestMatch = candidates.OrderBy(v => seriesTitle.LevenshteinDistance(v.Title' 10' 1' 10))                                           .ThenByDescending(v => v.SeasonNumber)                                           .First();
Magic Number,NzbDrone.Core.DataAugmentation.Scene,SceneMappingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Scene\SceneMappingService.cs,FilterNonEnglish,The following statement contains a magic number: return titles.Where(title => title.All(c => c <= 255)).ToList();
Magic Number,NzbDrone.Core.DataAugmentation.Xem,XemProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemProxy.cs,GetSceneTvdbNames,The following statement contains a magic number: foreach (var series in response.Data)              {                  foreach (var name in series.Value)                  {                      foreach (var n in name)                      {                          int seasonNumber;                          if (!int.TryParse(n.Value.ToString()' out seasonNumber))                          {                              continue;                          }                            //hack to deal with Fate/Zero                           if (series.Key == 79151 && seasonNumber > 1)                          {                              continue;                          }                            result.Add(new SceneMapping                                     {                                         Title = n.Key'                                         SearchTerm = n.Key'                                         SceneSeasonNumber = seasonNumber'                                         TvdbId = series.Key                                     });                      }                  }              }
Magic Number,NzbDrone.Core.DataAugmentation.Xem,XemService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DataAugmentation\Xem\XemService.cs,Handle,The following statement contains a magic number: if (_cache.IsExpired(TimeSpan.FromHours(3)))              {                  UpdateXemSeriesIds();              }
Magic Number,NzbDrone.Core.Datastore,ConnectionStringFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\ConnectionStringFactory.cs,GetConnectionString,The following statement contains a magic number: connectionBuilder.CacheSize = (int)-10.Megabytes();
Magic Number,NzbDrone.Core.Datastore,ConnectionStringFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\ConnectionStringFactory.cs,GetConnectionString,The following statement contains a magic number: connectionBuilder.Version = 3;
Magic Number,NzbDrone.Core.Datastore.Migration,add_api_key_to_pushover,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\033_add_api_key_to_pushover.cs,UpdatePushoverSettings,The following statement contains a magic number: using (IDbCommand selectCommand = conn.CreateCommand())              {                  selectCommand.Transaction = tran;                  selectCommand.CommandText = @"SELECT * FROM Notifications WHERE ConfigContract = 'PushoverSettings'";                    using (IDataReader reader = selectCommand.ExecuteReader())                  {                      while (reader.Read())                      {                          var idIndex = reader.GetOrdinal("Id");                          var settingsIndex = reader.GetOrdinal("Settings");                            var id = reader.GetInt32(idIndex);                          var settings = Json.Deserialize<PushoverSettingsForV33>(reader.GetString(settingsIndex));                          settings.ApiKey = API_KEY;                            //Set priority to high if its currently emergency                          if (settings.Priority == 2)                          {                              settings.Priority = 1;                          }                            using (IDbCommand updateCmd = conn.CreateCommand())                          {                              var text = string.Format("UPDATE Notifications " +                                                       "SET Settings = '{0}'" +                                                       "WHERE Id = {1}"'                                  settings.ToJson()' id                                  );                                updateCmd.Transaction = tran;                              updateCmd.CommandText = text;                              updateCmd.ExecuteNonQuery();                          }                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,add_configurable_qualities,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\037_add_configurable_qualities.cs,ConvertQualities,The following statement contains a magic number: using (IDbCommand qualitySizeCmd = conn.CreateCommand())              {                  qualitySizeCmd.Transaction = tran;                  qualitySizeCmd.CommandText = @"SELECT QualityId' MinSize' MaxSize FROM QualitySizes";                  using (IDataReader qualitySizeReader = qualitySizeCmd.ExecuteReader())                  {                      while (qualitySizeReader.Read())                      {                          var qualityId = qualitySizeReader.GetInt32(0);                          var minSize = qualitySizeReader.GetInt32(1);                          var maxSize = qualitySizeReader.GetInt32(2);                            var defaultConfig = Quality.DefaultQualityDefinitions.Single(p => (int)p.Quality == qualityId);                            using (IDbCommand updateCmd = conn.CreateCommand())                          {                              updateCmd.Transaction = tran;                              updateCmd.CommandText = "INSERT INTO QualityDefinitions (Quality' Title' Weight' MinSize' MaxSize) VALUES (?' ?' ?' ?' ?)";                              updateCmd.AddParameter(qualityId);                              updateCmd.AddParameter(defaultConfig.Title);                              updateCmd.AddParameter(defaultConfig.Weight);                              updateCmd.AddParameter(minSize);                              updateCmd.AddParameter(maxSize);                                updateCmd.ExecuteNonQuery();                          }                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,convert_config_to_download_clients,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\043_convert_config_to_download_clients.cs,ConvertToThingyProvder,The following statement contains a magic number: if (client.Equals("sabnzbd"' StringComparison.InvariantCultureIgnoreCase))              {                  var settings = new ClientSettingsForMigration                                 {                                     Host = GetConfigValue(config' "SabHost"' "localhost")'                                     Port = GetConfigValue(config' "SabPort"' 8080)'                                     ApiKey = GetConfigValue(config' "SabApiKey"' "")'                                     Username = GetConfigValue(config' "SabUsername"' "")'                                     Password = GetConfigValue(config' "SabPassword"' "")'                                     TvCategory = GetConfigValue(config' "SabTvCategory"' "tv")'                                     RecentTvPriority = GetSabnzbdPriority(GetConfigValue(config' "NzbgetRecentTvPriority"' "Default"))'                                     OlderTvPriority = GetSabnzbdPriority(GetConfigValue(config' "NzbgetOlderTvPriority"' "Default"))'                                     UseSsl = GetConfigValue(config' "SabUseSsl"' false)                                 };                    AddDownloadClient(conn' tran' "Sabnzbd"' "Sabnzbd"' settings.ToJson()' "SabnzbdSettings"' 1);              }                else if (client.Equals("nzbget"' StringComparison.InvariantCultureIgnoreCase))              {                  var settings = new ClientSettingsForMigration                  {                      Host = GetConfigValue(config' "NzbGetHost"' "localhost")'                      Port = GetConfigValue(config' "NzbgetPort"' 6789)'                      Username = GetConfigValue(config' "NzbgetUsername"' "nzbget")'                      Password = GetConfigValue(config' "NzbgetPassword"' "")'                      TvCategory = GetConfigValue(config' "NzbgetTvCategory"' "tv")'                      RecentTvPriority = GetNzbgetPriority(GetConfigValue(config' "NzbgetRecentTvPriority"' "Normal"))'                      OlderTvPriority = GetNzbgetPriority(GetConfigValue(config' "NzbgetOlderTvPriority"' "Normal"))'                  };                    AddDownloadClient(conn' tran' "Nzbget"' "Nzbget"' settings.ToJson()' "NzbgetSettings"' 1);              }                else if (client.Equals("pneumatic"' StringComparison.InvariantCultureIgnoreCase))              {                  var settings = new FolderSettingsForMigration                                 {                                     Folder = GetConfigValue(config' "PneumaticFolder"' "")                                 };                    AddDownloadClient(conn' tran' "Pneumatic"' "Pneumatic"' settings.ToJson()' "FolderSettings"' 1);              }                else if (client.Equals("blackhole"' StringComparison.InvariantCultureIgnoreCase))              {                  var settings = new FolderSettingsForMigration                  {                      Folder = GetConfigValue(config' "BlackholeFolder"' "")                  };                    AddDownloadClient(conn' tran' "Blackhole"' "Blackhole"' settings.ToJson()' "FolderSettings"' 1);              }
Magic Number,NzbDrone.Core.Datastore.Migration,convert_config_to_download_clients,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\043_convert_config_to_download_clients.cs,ConvertToThingyProvder,The following statement contains a magic number: if (client.Equals("sabnzbd"' StringComparison.InvariantCultureIgnoreCase))              {                  var settings = new ClientSettingsForMigration                                 {                                     Host = GetConfigValue(config' "SabHost"' "localhost")'                                     Port = GetConfigValue(config' "SabPort"' 8080)'                                     ApiKey = GetConfigValue(config' "SabApiKey"' "")'                                     Username = GetConfigValue(config' "SabUsername"' "")'                                     Password = GetConfigValue(config' "SabPassword"' "")'                                     TvCategory = GetConfigValue(config' "SabTvCategory"' "tv")'                                     RecentTvPriority = GetSabnzbdPriority(GetConfigValue(config' "NzbgetRecentTvPriority"' "Default"))'                                     OlderTvPriority = GetSabnzbdPriority(GetConfigValue(config' "NzbgetOlderTvPriority"' "Default"))'                                     UseSsl = GetConfigValue(config' "SabUseSsl"' false)                                 };                    AddDownloadClient(conn' tran' "Sabnzbd"' "Sabnzbd"' settings.ToJson()' "SabnzbdSettings"' 1);              }                else if (client.Equals("nzbget"' StringComparison.InvariantCultureIgnoreCase))              {                  var settings = new ClientSettingsForMigration                  {                      Host = GetConfigValue(config' "NzbGetHost"' "localhost")'                      Port = GetConfigValue(config' "NzbgetPort"' 6789)'                      Username = GetConfigValue(config' "NzbgetUsername"' "nzbget")'                      Password = GetConfigValue(config' "NzbgetPassword"' "")'                      TvCategory = GetConfigValue(config' "NzbgetTvCategory"' "tv")'                      RecentTvPriority = GetNzbgetPriority(GetConfigValue(config' "NzbgetRecentTvPriority"' "Normal"))'                      OlderTvPriority = GetNzbgetPriority(GetConfigValue(config' "NzbgetOlderTvPriority"' "Normal"))'                  };                    AddDownloadClient(conn' tran' "Nzbget"' "Nzbget"' settings.ToJson()' "NzbgetSettings"' 1);              }                else if (client.Equals("pneumatic"' StringComparison.InvariantCultureIgnoreCase))              {                  var settings = new FolderSettingsForMigration                                 {                                     Folder = GetConfigValue(config' "PneumaticFolder"' "")                                 };                    AddDownloadClient(conn' tran' "Pneumatic"' "Pneumatic"' settings.ToJson()' "FolderSettings"' 1);              }                else if (client.Equals("blackhole"' StringComparison.InvariantCultureIgnoreCase))              {                  var settings = new FolderSettingsForMigration                  {                      Folder = GetConfigValue(config' "BlackholeFolder"' "")                  };                    AddDownloadClient(conn' tran' "Blackhole"' "Blackhole"' settings.ToJson()' "FolderSettings"' 1);              }
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,ConvertFolderSettings,The following statement contains a magic number: using (IDbCommand downloadClientsCmd = conn.CreateCommand())              {                  downloadClientsCmd.Transaction = tran;                  downloadClientsCmd.CommandText = @"SELECT Value FROM Config WHERE Key = 'downloadedepisodesfolder'";                  var downloadedEpisodesFolder = downloadClientsCmd.ExecuteScalar() as string;                    downloadClientsCmd.Transaction = tran;                  downloadClientsCmd.CommandText = @"SELECT Id' Implementation' Settings' ConfigContract FROM DownloadClients WHERE ConfigContract = 'FolderSettings'";                  using (IDataReader downloadClientReader = downloadClientsCmd.ExecuteReader())                  {                      while (downloadClientReader.Read())                      {                          var id = downloadClientReader.GetInt32(0);                          var implementation = downloadClientReader.GetString(1);                          var settings = downloadClientReader.GetString(2);                          var configContract = downloadClientReader.GetString(3);                            var settingsJson = JsonConvert.DeserializeObject(settings) as Newtonsoft.Json.Linq.JObject;                            if (implementation == "Blackhole")                          {                              var newSettings = new                              {                                  NzbFolder = settingsJson.Value<string>("folder")'                                  WatchFolder = downloadedEpisodesFolder                              }.ToJson();                                using (IDbCommand updateCmd = conn.CreateCommand())                              {                                  updateCmd.Transaction = tran;                                  updateCmd.CommandText = "UPDATE DownloadClients SET Implementation = ?' Settings = ?' ConfigContract = ? WHERE Id = ?";                                  updateCmd.AddParameter("UsenetBlackhole");                                  updateCmd.AddParameter(newSettings);                                  updateCmd.AddParameter("UsenetBlackholeSettings");                                  updateCmd.AddParameter(id);                                    updateCmd.ExecuteNonQuery();                              }                          }                          else if (implementation == "Pneumatic")                          {                              var newSettings = new                              {                                  NzbFolder = settingsJson.Value<string>("folder")                              }.ToJson();                                using (IDbCommand updateCmd = conn.CreateCommand())                              {                                  updateCmd.Transaction = tran;                                  updateCmd.CommandText = "UPDATE DownloadClients SET Settings = ?' ConfigContract = ? WHERE Id = ?";                                  updateCmd.AddParameter(newSettings);                                  updateCmd.AddParameter("PneumaticSettings");                                  updateCmd.AddParameter(id);                                    updateCmd.ExecuteNonQuery();                              }                          }                          else                          {                              using (IDbCommand updateCmd = conn.CreateCommand())                              {                                  updateCmd.Transaction = tran;                                  updateCmd.CommandText = "DELETE FROM DownloadClients WHERE Id = ?";                                  updateCmd.AddParameter(id);                                    updateCmd.ExecuteNonQuery();                              }                          }                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,ConvertFolderSettings,The following statement contains a magic number: using (IDbCommand downloadClientsCmd = conn.CreateCommand())              {                  downloadClientsCmd.Transaction = tran;                  downloadClientsCmd.CommandText = @"SELECT Value FROM Config WHERE Key = 'downloadedepisodesfolder'";                  var downloadedEpisodesFolder = downloadClientsCmd.ExecuteScalar() as string;                    downloadClientsCmd.Transaction = tran;                  downloadClientsCmd.CommandText = @"SELECT Id' Implementation' Settings' ConfigContract FROM DownloadClients WHERE ConfigContract = 'FolderSettings'";                  using (IDataReader downloadClientReader = downloadClientsCmd.ExecuteReader())                  {                      while (downloadClientReader.Read())                      {                          var id = downloadClientReader.GetInt32(0);                          var implementation = downloadClientReader.GetString(1);                          var settings = downloadClientReader.GetString(2);                          var configContract = downloadClientReader.GetString(3);                            var settingsJson = JsonConvert.DeserializeObject(settings) as Newtonsoft.Json.Linq.JObject;                            if (implementation == "Blackhole")                          {                              var newSettings = new                              {                                  NzbFolder = settingsJson.Value<string>("folder")'                                  WatchFolder = downloadedEpisodesFolder                              }.ToJson();                                using (IDbCommand updateCmd = conn.CreateCommand())                              {                                  updateCmd.Transaction = tran;                                  updateCmd.CommandText = "UPDATE DownloadClients SET Implementation = ?' Settings = ?' ConfigContract = ? WHERE Id = ?";                                  updateCmd.AddParameter("UsenetBlackhole");                                  updateCmd.AddParameter(newSettings);                                  updateCmd.AddParameter("UsenetBlackholeSettings");                                  updateCmd.AddParameter(id);                                    updateCmd.ExecuteNonQuery();                              }                          }                          else if (implementation == "Pneumatic")                          {                              var newSettings = new                              {                                  NzbFolder = settingsJson.Value<string>("folder")                              }.ToJson();                                using (IDbCommand updateCmd = conn.CreateCommand())                              {                                  updateCmd.Transaction = tran;                                  updateCmd.CommandText = "UPDATE DownloadClients SET Settings = ?' ConfigContract = ? WHERE Id = ?";                                  updateCmd.AddParameter(newSettings);                                  updateCmd.AddParameter("PneumaticSettings");                                  updateCmd.AddParameter(id);                                    updateCmd.ExecuteNonQuery();                              }                          }                          else                          {                              using (IDbCommand updateCmd = conn.CreateCommand())                              {                                  updateCmd.Transaction = tran;                                  updateCmd.CommandText = "DELETE FROM DownloadClients WHERE Id = ?";                                  updateCmd.AddParameter(id);                                    updateCmd.ExecuteNonQuery();                              }                          }                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The following statement contains a magic number: using (IDbCommand historyCmd = conn.CreateCommand())              {                  historyCmd.Transaction = tran;                  historyCmd.CommandText = @"SELECT Id' EpisodeId' SeriesId' SourceTitle' Date' Data' EventType FROM History WHERE EventType NOT NULL";                  using (IDataReader historyRead = historyCmd.ExecuteReader())                  {                      while (historyRead.Read())                      {                          historyItems.Add(new MigrationHistoryItem                              {                                  Id = historyRead.GetInt32(0)'                                  EpisodeId = historyRead.GetInt32(1)'                                  SeriesId = historyRead.GetInt32(2)'                                  SourceTitle = historyRead.GetString(3)'                                  Date = historyRead.GetDateTime(4)'                                  Data = Json.Deserialize<Dictionary<string' string>>(historyRead.GetString(5))'                                  EventType = (MigrationHistoryEventType)historyRead.GetInt32(6)                              });                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The following statement contains a magic number: using (IDbCommand historyCmd = conn.CreateCommand())              {                  historyCmd.Transaction = tran;                  historyCmd.CommandText = @"SELECT Id' EpisodeId' SeriesId' SourceTitle' Date' Data' EventType FROM History WHERE EventType NOT NULL";                  using (IDataReader historyRead = historyCmd.ExecuteReader())                  {                      while (historyRead.Read())                      {                          historyItems.Add(new MigrationHistoryItem                              {                                  Id = historyRead.GetInt32(0)'                                  EpisodeId = historyRead.GetInt32(1)'                                  SeriesId = historyRead.GetInt32(2)'                                  SourceTitle = historyRead.GetString(3)'                                  Date = historyRead.GetDateTime(4)'                                  Data = Json.Deserialize<Dictionary<string' string>>(historyRead.GetString(5))'                                  EventType = (MigrationHistoryEventType)historyRead.GetInt32(6)                              });                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The following statement contains a magic number: using (IDbCommand historyCmd = conn.CreateCommand())              {                  historyCmd.Transaction = tran;                  historyCmd.CommandText = @"SELECT Id' EpisodeId' SeriesId' SourceTitle' Date' Data' EventType FROM History WHERE EventType NOT NULL";                  using (IDataReader historyRead = historyCmd.ExecuteReader())                  {                      while (historyRead.Read())                      {                          historyItems.Add(new MigrationHistoryItem                              {                                  Id = historyRead.GetInt32(0)'                                  EpisodeId = historyRead.GetInt32(1)'                                  SeriesId = historyRead.GetInt32(2)'                                  SourceTitle = historyRead.GetString(3)'                                  Date = historyRead.GetDateTime(4)'                                  Data = Json.Deserialize<Dictionary<string' string>>(historyRead.GetString(5))'                                  EventType = (MigrationHistoryEventType)historyRead.GetInt32(6)                              });                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The following statement contains a magic number: using (IDbCommand historyCmd = conn.CreateCommand())              {                  historyCmd.Transaction = tran;                  historyCmd.CommandText = @"SELECT Id' EpisodeId' SeriesId' SourceTitle' Date' Data' EventType FROM History WHERE EventType NOT NULL";                  using (IDataReader historyRead = historyCmd.ExecuteReader())                  {                      while (historyRead.Read())                      {                          historyItems.Add(new MigrationHistoryItem                              {                                  Id = historyRead.GetInt32(0)'                                  EpisodeId = historyRead.GetInt32(1)'                                  SeriesId = historyRead.GetInt32(2)'                                  SourceTitle = historyRead.GetString(3)'                                  Date = historyRead.GetDateTime(4)'                                  Data = Json.Deserialize<Dictionary<string' string>>(historyRead.GetString(5))'                                  EventType = (MigrationHistoryEventType)historyRead.GetInt32(6)                              });                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,download_client_import,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\051_download_client_import.cs,AssociateImportedHistoryItems,The following statement contains a magic number: using (IDbCommand historyCmd = conn.CreateCommand())              {                  historyCmd.Transaction = tran;                  historyCmd.CommandText = @"SELECT Id' EpisodeId' SeriesId' SourceTitle' Date' Data' EventType FROM History WHERE EventType NOT NULL";                  using (IDataReader historyRead = historyCmd.ExecuteReader())                  {                      while (historyRead.Read())                      {                          historyItems.Add(new MigrationHistoryItem                              {                                  Id = historyRead.GetInt32(0)'                                  EpisodeId = historyRead.GetInt32(1)'                                  SeriesId = historyRead.GetInt32(2)'                                  SourceTitle = historyRead.GetString(3)'                                  Date = historyRead.GetDateTime(4)'                                  Data = Json.Deserialize<Dictionary<string' string>>(historyRead.GetString(5))'                                  EventType = (MigrationHistoryEventType)historyRead.GetInt32(6)                              });                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,convert_quality_models,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\062_convert_quality_models.cs,ConvertQualityModelsOnTable,The following statement contains a magic number: using (IDbCommand qualityModelCmd = conn.CreateCommand())              {                  qualityModelCmd.Transaction = tran;                  qualityModelCmd.CommandText = @"SELECT Distinct Quality FROM " + tableName;                    using (IDataReader qualityModelReader = qualityModelCmd.ExecuteReader())                  {                      while (qualityModelReader.Read())                      {                          var qualityJson = qualityModelReader.GetString(0);                            LegacyQualityModel062 quality;                            if (!Json.TryDeserialize<LegacyQualityModel062>(qualityJson' out quality))                          {                              continue;                          }                            var newQualityModel = new QualityModel062 { Quality = quality.Quality' Revision = new Revision() };                          if (quality.Proper)                              newQualityModel.Revision.Version = 2;                          var newQualityJson = newQualityModel.ToJson();                            qualitiesToUpdate.Add(qualityJson' newQualityJson);                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,quality_proper,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\069_quality_proper.cs,ConvertQualityTitle,The following statement contains a magic number: using (IDbCommand namingConfigCmd = conn.CreateCommand())              {                  namingConfigCmd.Transaction = tran;                  namingConfigCmd.CommandText = @"SELECT StandardEpisodeFormat' DailyEpisodeFormat' AnimeEpisodeFormat FROM NamingConfig LIMIT 1";                    using (IDataReader configReader = namingConfigCmd.ExecuteReader())                  {                      while (configReader.Read())                      {                          var currentStandard = configReader.GetString(0);                          var currentDaily = configReader.GetString(1);                          var currentAnime = configReader.GetString(2);                            var newStandard = GetNewFormat(currentStandard);                          var newDaily = GetNewFormat(currentDaily);                          var newAnime = GetNewFormat(currentAnime);                            using (IDbCommand updateCmd = conn.CreateCommand())                          {                              updateCmd.Transaction = tran;                                updateCmd.CommandText = "UPDATE NamingConfig SET StandardEpisodeFormat = ?' DailyEpisodeFormat = ?' AnimeEpisodeFormat = ?";                              updateCmd.AddParameter(newStandard);                              updateCmd.AddParameter(newDaily);                              updateCmd.AddParameter(newAnime);                                updateCmd.ExecuteNonQuery();                          }                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,delay_profile,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\070_delay_profile.cs,GetProfiles,The following statement contains a magic number: using (IDbCommand getProfilesCmd = conn.CreateCommand())              {                  getProfilesCmd.Transaction = tran;                  getProfilesCmd.CommandText = @"SELECT Id' GrabDelay FROM Profiles";                                    using (IDataReader profileReader = getProfilesCmd.ExecuteReader())                  {                      while (profileReader.Read())                      {                          var id = profileReader.GetInt32(0);                          var delay = profileReader.GetInt32(1);                            profiles.Add(new Profile69                          {                              Id = id'                              GrabDelay = delay * 60                          });                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,add_ultrahd_quality_in_profiles,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\101_add_ultrahd_quality_in_profiles.cs,ConvertProfile,The following statement contains a magic number: updater.AppendQuality(16);
Magic Number,NzbDrone.Core.Datastore.Migration,add_ultrahd_quality_in_profiles,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\101_add_ultrahd_quality_in_profiles.cs,ConvertProfile,The following statement contains a magic number: updater.AppendQuality(18);
Magic Number,NzbDrone.Core.Datastore.Migration,add_ultrahd_quality_in_profiles,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\101_add_ultrahd_quality_in_profiles.cs,ConvertProfile,The following statement contains a magic number: updater.AppendQuality(19);
Magic Number,NzbDrone.Core.Datastore.Migration,ProfileUpdater70,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\071_unknown_quality_in_profile.cs,GetProfiles,The following statement contains a magic number: using (var getProfilesCmd = _connection.CreateCommand())              {                  getProfilesCmd.Transaction = _transaction;                  getProfilesCmd.CommandText = @"SELECT Id' Name' Cutoff' Items' Language FROM Profiles";                    using (var profileReader = getProfilesCmd.ExecuteReader())                  {                      while (profileReader.Read())                      {                          profiles.Add(new Profile70                          {                              Id = profileReader.GetInt32(0)'                              Name = profileReader.GetString(1)'                              Cutoff = profileReader.GetInt32(2)'                              Items = Json.Deserialize<List<ProfileItem70>>(profileReader.GetString(3))'                              Language = profileReader.GetInt32(4)                          });                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,ProfileUpdater70,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\071_unknown_quality_in_profile.cs,GetProfiles,The following statement contains a magic number: using (var getProfilesCmd = _connection.CreateCommand())              {                  getProfilesCmd.Transaction = _transaction;                  getProfilesCmd.CommandText = @"SELECT Id' Name' Cutoff' Items' Language FROM Profiles";                    using (var profileReader = getProfilesCmd.ExecuteReader())                  {                      while (profileReader.Read())                      {                          profiles.Add(new Profile70                          {                              Id = profileReader.GetInt32(0)'                              Name = profileReader.GetString(1)'                              Cutoff = profileReader.GetInt32(2)'                              Items = Json.Deserialize<List<ProfileItem70>>(profileReader.GetString(3))'                              Language = profileReader.GetInt32(4)                          });                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration,ProfileUpdater70,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\071_unknown_quality_in_profile.cs,GetProfiles,The following statement contains a magic number: using (var getProfilesCmd = _connection.CreateCommand())              {                  getProfilesCmd.Transaction = _transaction;                  getProfilesCmd.CommandText = @"SELECT Id' Name' Cutoff' Items' Language FROM Profiles";                    using (var profileReader = getProfilesCmd.ExecuteReader())                  {                      while (profileReader.Read())                      {                          profiles.Add(new Profile70                          {                              Id = profileReader.GetInt32(0)'                              Name = profileReader.GetString(1)'                              Cutoff = profileReader.GetInt32(2)'                              Items = Json.Deserialize<List<ProfileItem70>>(profileReader.GetString(3))'                              Language = profileReader.GetInt32(4)                          });                      }                  }              }
Magic Number,NzbDrone.Core.Datastore.Migration.Framework,MigrationController,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Datastore\Migration\Framework\MigrationController.cs,Migrate,The following statement contains a magic number: var options = new MigrationOptions { PreviewOnly = false' Timeout = 60 };
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareAgeIfUsenet,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode =>              {                  var ageHours = remoteEpisode.Release.AgeHours;                  var age = remoteEpisode.Release.Age;                    if (ageHours < 1)                  {                      return 1000;                  }                    if (ageHours <= 24)                  {                      return 100;                  }                    if (age <= 7)                  {                      return 10;                  }                    return 1;              });
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareAgeIfUsenet,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode =>              {                  var ageHours = remoteEpisode.Release.AgeHours;                  var age = remoteEpisode.Release.Age;                    if (ageHours < 1)                  {                      return 1000;                  }                    if (ageHours <= 24)                  {                      return 100;                  }                    if (age <= 7)                  {                      return 10;                  }                    return 1;              });
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareAgeIfUsenet,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode =>              {                  var ageHours = remoteEpisode.Release.AgeHours;                  var age = remoteEpisode.Release.Age;                    if (ageHours < 1)                  {                      return 1000;                  }                    if (ageHours <= 24)                  {                      return 100;                  }                    if (age <= 7)                  {                      return 10;                  }                    return 1;              });
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareAgeIfUsenet,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode =>              {                  var ageHours = remoteEpisode.Release.AgeHours;                  var age = remoteEpisode.Release.Age;                    if (ageHours < 1)                  {                      return 1000;                  }                    if (ageHours <= 24)                  {                      return 100;                  }                    if (age <= 7)                  {                      return 10;                  }                    return 1;              });
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareAgeIfUsenet,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode =>              {                  var ageHours = remoteEpisode.Release.AgeHours;                  var age = remoteEpisode.Release.Age;                    if (ageHours < 1)                  {                      return 1000;                  }                    if (ageHours <= 24)                  {                      return 100;                  }                    if (age <= 7)                  {                      return 10;                  }                    return 1;              });
Magic Number,NzbDrone.Core.DecisionEngine,DownloadDecisionComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\DownloadDecisionComparer.cs,CompareSize,The following statement contains a magic number: return CompareBy(x.RemoteEpisode' y.RemoteEpisode' remoteEpisode => remoteEpisode.Release.Size.Round(200.Megabytes()));
Magic Number,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The following statement contains a magic number: if (!qualityDefinition.MaxSize.HasValue || qualityDefinition.MaxSize.Value == 0)              {                  _logger.Debug("Max size is unlimited - skipping check.");              }              else              {                  var maxSize = qualityDefinition.MaxSize.Value.Megabytes();                    //Multiply maxSize by Series.Runtime                  maxSize = maxSize * subject.Series.Runtime * subject.Episodes.Count;                    if (subject.Episodes.Count == 1)                  {                      Episode episode = subject.Episodes.First();                      List<Episode> seasonEpisodes;                        var seasonSearchCriteria = searchCriteria as SeasonSearchCriteria;                      if (seasonSearchCriteria != null && !seasonSearchCriteria.Series.UseSceneNumbering && seasonSearchCriteria.Episodes.Any(v => v.Id == episode.Id))                      {                          seasonEpisodes = (searchCriteria as SeasonSearchCriteria).Episodes;                      }                      else                      {                          seasonEpisodes = _episodeService.GetEpisodesBySeason(episode.SeriesId' episode.SeasonNumber);                      }                        //Ensure that this is either the first episode                      //or is the last episode in a season that has 10 or more episodes                      if (seasonEpisodes.First().Id == episode.Id || (seasonEpisodes.Count() >= 10 && seasonEpisodes.Last().Id == episode.Id))                      {                          _logger.Debug("Possible double episode' doubling allowed size.");                          maxSize = maxSize * 2;                      }                  }                    //If the parsed size is greater than maxSize we don't want it                  if (subject.Release.Size > maxSize)                  {                      var runtimeMessage = subject.Episodes.Count == 1 ? $"{subject.Series.Runtime}min" : $"{subject.Episodes.Count}x {subject.Series.Runtime}min";                        _logger.Debug("Item: {0}' Size: {1} is greater than maximum allowed size ({2} for {3})' rejecting."' subject' subject.Release.Size' maxSize' runtimeMessage);                      return Decision.Reject("{0} is larger than maximum allowed {1} (for {2})"' subject.Release.Size.SizeSuffix()' maxSize.SizeSuffix()' runtimeMessage);                  }              }
Magic Number,NzbDrone.Core.DecisionEngine.Specifications,AcceptableSizeSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\AcceptableSizeSpecification.cs,IsSatisfiedBy,The following statement contains a magic number: if (!qualityDefinition.MaxSize.HasValue || qualityDefinition.MaxSize.Value == 0)              {                  _logger.Debug("Max size is unlimited - skipping check.");              }              else              {                  var maxSize = qualityDefinition.MaxSize.Value.Megabytes();                    //Multiply maxSize by Series.Runtime                  maxSize = maxSize * subject.Series.Runtime * subject.Episodes.Count;                    if (subject.Episodes.Count == 1)                  {                      Episode episode = subject.Episodes.First();                      List<Episode> seasonEpisodes;                        var seasonSearchCriteria = searchCriteria as SeasonSearchCriteria;                      if (seasonSearchCriteria != null && !seasonSearchCriteria.Series.UseSceneNumbering && seasonSearchCriteria.Episodes.Any(v => v.Id == episode.Id))                      {                          seasonEpisodes = (searchCriteria as SeasonSearchCriteria).Episodes;                      }                      else                      {                          seasonEpisodes = _episodeService.GetEpisodesBySeason(episode.SeriesId' episode.SeasonNumber);                      }                        //Ensure that this is either the first episode                      //or is the last episode in a season that has 10 or more episodes                      if (seasonEpisodes.First().Id == episode.Id || (seasonEpisodes.Count() >= 10 && seasonEpisodes.Last().Id == episode.Id))                      {                          _logger.Debug("Possible double episode' doubling allowed size.");                          maxSize = maxSize * 2;                      }                  }                    //If the parsed size is greater than maxSize we don't want it                  if (subject.Release.Size > maxSize)                  {                      var runtimeMessage = subject.Episodes.Count == 1 ? $"{subject.Series.Runtime}min" : $"{subject.Episodes.Count}x {subject.Series.Runtime}min";                        _logger.Debug("Item: {0}' Size: {1} is greater than maximum allowed size ({2} for {3})' rejecting."' subject' subject.Release.Size' maxSize' runtimeMessage);                      return Decision.Reject("{0} is larger than maximum allowed {1} (for {2})"' subject.Release.Size.SizeSuffix()' maxSize.SizeSuffix()' runtimeMessage);                  }              }
Magic Number,NzbDrone.Core.DecisionEngine.Specifications,NotSampleSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\NotSampleSpecification.cs,IsSatisfiedBy,The following statement contains a magic number: if (subject.Release.Title.ToLower().Contains("sample") && subject.Release.Size < 70.Megabytes())              {                  _logger.Debug("Sample release' rejecting.");                  return Decision.Reject("Sample");              }
Magic Number,NzbDrone.Core.DecisionEngine.Specifications,BlockedIndexerSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\BlockedIndexerSpecification.cs,BlockedIndexerSpecification,The following statement contains a magic number: _blockedIndexerCache = cacheManager.GetCacheDictionary(GetType()' "blocked"' FetchBlockedIndexer' TimeSpan.FromSeconds(15));
Magic Number,NzbDrone.Core.DecisionEngine.Specifications.RssSync,HistorySpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\HistorySpecification.cs,IsSatisfiedBy,The following statement contains a magic number: foreach (var episode in subject.Episodes)              {                  _logger.Debug("Checking current status of episode [{0}] in history"' episode.Id);                  var mostRecent = _historyService.MostRecentForEpisode(episode.Id);                    if (mostRecent != null && mostRecent.EventType == HistoryEventType.Grabbed)                  {                      var recent = mostRecent.Date.After(DateTime.UtcNow.AddHours(-12));                      var cutoffUnmet = _qualityUpgradableSpecification.CutoffNotMet(subject.Series.Profile' mostRecent.Quality' subject.ParsedEpisodeInfo.Quality);                      var upgradeable = _qualityUpgradableSpecification.IsUpgradable(subject.Series.Profile' mostRecent.Quality' subject.ParsedEpisodeInfo.Quality);                        if (!recent && cdhEnabled)                      {                          continue;                      }                        if (!cutoffUnmet)                      {                          if (recent)                          {                              return Decision.Reject("Recent grab event in history already meets cutoff: {0}"' mostRecent.Quality);                          }                            return Decision.Reject("CDH is disabled and grab event in history already meets cutoff: {0}"' mostRecent.Quality);                      }                        if (!upgradeable)                      {                          if (recent)                          {                              return Decision.Reject("Recent grab event in history is of equal or higher quality: {0}"' mostRecent.Quality);                          }                            return Decision.Reject("CDH is disabled and grab event in history is of equal or higher quality: {0}"' mostRecent.Quality);                      }                  }              }
Magic Number,NzbDrone.Core.DecisionEngine.Specifications.RssSync,ProperSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\DecisionEngine\Specifications\RssSync\ProperSpecification.cs,IsSatisfiedBy,The following statement contains a magic number: foreach (var file in subject.Episodes.Where(c => c.EpisodeFileId != 0).Select(c => c.EpisodeFile.Value))              {                  if (_qualityUpgradableSpecification.IsRevisionUpgrade(file.Quality' subject.ParsedEpisodeInfo.Quality))                  {                      if (file.DateAdded < DateTime.Today.AddDays(-7))                      {                          _logger.Debug("Proper for old file' rejecting: {0}"' subject);                          return Decision.Reject("Proper for old file");                      }                        if (!_configService.AutoDownloadPropers)                      {                          _logger.Debug("Auto downloading of propers is disabled");                          return Decision.Reject("Proper downloading is disabled");                      }                  }              }
Magic Number,NzbDrone.Core.Download,DownloadClientStatusService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientStatusService.cs,DownloadClientStatusService,The following statement contains a magic number: MinimumTimeSinceInitialFailure = TimeSpan.FromMinutes(5);
Magic Number,NzbDrone.Core.Download,DownloadClientStatusService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadClientStatusService.cs,DownloadClientStatusService,The following statement contains a magic number: MaximumEscalationLevel = 5;
Magic Number,NzbDrone.Core.Download,UsenetClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\UsenetClientBase.cs,Download,The following statement contains a magic number: try              {                  nzbData = _httpClient.Get(new HttpRequest(url)).ResponseData;                    _logger.Debug("Downloaded nzb for episode '{0}' finished ({1} bytes from {2})"' remoteEpisode.Release.Title' nzbData.Length' url);              }              catch (HttpException ex)              {                  if (ex.Response.StatusCode == HttpStatusCode.NotFound)                  {                      _logger.Error(ex' "Downloading nzb file for episode '{0}' failed since it no longer exists ({1})"' remoteEpisode.Release.Title' url);                      throw new ReleaseUnavailableException(remoteEpisode.Release' "Downloading torrent failed"' ex);                  }                    if ((int)ex.Response.StatusCode == 429)                  {                      _logger.Error("API Grab Limit reached for {0}"' url);                  }                  else                  {                      _logger.Error(ex' "Downloading nzb for episode '{0}' failed ({1})"' remoteEpisode.Release.Title' url);                  }                    throw new ReleaseDownloadException(remoteEpisode.Release' "Downloading nzb failed"' ex);              }              catch (WebException ex)              {                  _logger.Error(ex' "Downloading nzb for episode '{0}' failed ({1})"' remoteEpisode.Release.Title' url);                    throw new ReleaseDownloadException(remoteEpisode.Release' "Downloading nzb failed"' ex);              }
Magic Number,NzbDrone.Core.Download,TorrentClientBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TorrentClientBase.cs,DownloadFromWebUrl,The following statement contains a magic number: try              {                  var request = new HttpRequest(torrentUrl);                  request.Headers.Accept = "application/x-bittorrent";                  request.AllowAutoRedirect = false;                    var response = _httpClient.Get(request);                    if (response.StatusCode == HttpStatusCode.MovedPermanently ||                      response.StatusCode == HttpStatusCode.Found ||                      response.StatusCode == HttpStatusCode.SeeOther)                  {                      var locationHeader = response.Headers.GetSingleValue("Location");                        _logger.Trace("Torrent request is being redirected to: {0}"' locationHeader);                        if (locationHeader != null)                      {                          if (locationHeader.StartsWith("magnet:"))                          {                              return DownloadFromMagnetUrl(remoteEpisode' locationHeader);                          }                            return DownloadFromWebUrl(remoteEpisode' locationHeader);                      }                        throw new WebException("Remote website tried to redirect without providing a location.");                  }                    torrentFile = response.ResponseData;                    _logger.Debug("Downloading torrent for episode '{0}' finished ({1} bytes from {2})"' remoteEpisode.Release.Title' torrentFile.Length' torrentUrl);              }              catch (HttpException ex)              {                  if (ex.Response.StatusCode == HttpStatusCode.NotFound)                  {                      _logger.Error(ex' "Downloading torrent file for episode '{0}' failed since it no longer exists ({1})"' remoteEpisode.Release.Title' torrentUrl);                      throw new ReleaseUnavailableException(remoteEpisode.Release' "Downloading torrent failed"' ex);                  }                    if ((int)ex.Response.StatusCode == 429)                  {                      _logger.Error("API Grab Limit reached for {0}"' torrentUrl);                  }                  else                  {                      _logger.Error(ex' "Downloading torrent file for episode '{0}' failed ({1})"' remoteEpisode.Release.Title' torrentUrl);                  }                    throw new ReleaseDownloadException(remoteEpisode.Release' "Downloading torrent failed"' ex);              }              catch (WebException ex)              {                  _logger.Error(ex' "Downloading torrent file for episode '{0}' failed ({1})"' remoteEpisode.Release.Title' torrentUrl);                    throw new ReleaseDownloadException(remoteEpisode.Release' "Downloading torrent failed"' ex);              }
Magic Number,NzbDrone.Core.Download,DownloadService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\DownloadService.cs,DownloadReport,The following statement contains a magic number: if (remoteEpisode.Release.DownloadUrl.IsNotNullOrWhiteSpace() && !remoteEpisode.Release.DownloadUrl.StartsWith("magnet:"))              {                  var url = new HttpUri(remoteEpisode.Release.DownloadUrl);                  _rateLimitService.WaitAndPulse(url.Host' TimeSpan.FromSeconds(2));              }
Magic Number,NzbDrone.Core.Download.Clients.Blackhole,ScanWatchFolder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\ScanWatchFolder.cs,GetItems,The following statement contains a magic number: _watchFolderItemCache.Set(watchFolder' newWatchItems' TimeSpan.FromMinutes(5));
Magic Number,NzbDrone.Core.Download.Clients.Blackhole,TorrentBlackhole,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\TorrentBlackhole.cs,TorrentBlackhole,The following statement contains a magic number: ScanGracePeriod = TimeSpan.FromSeconds(30);
Magic Number,NzbDrone.Core.Download.Clients.Blackhole,UsenetBlackhole,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Blackhole\UsenetBlackhole.cs,UsenetBlackhole,The following statement contains a magic number: ScanGracePeriod = TimeSpan.FromSeconds(30);
Magic Number,NzbDrone.Core.Download.Clients.Deluge,DelugeProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeProxy.cs,BuildRequest,The following statement contains a magic number: requestBuilder.PostProcess += r => r.RequestTimeout = TimeSpan.FromSeconds(15);
Magic Number,NzbDrone.Core.Download.Clients.Deluge,DelugeProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeProxy.cs,ProcessRequest,The following statement contains a magic number: if (response.Error != null)              {                  var error = response.Error.ToObject<DelugeError>();                  if (error.Code == 1 || error.Code == 2)                  {                      AuthenticateClient(requestBuilder' settings' true);                        response = ExecuteRequest<TResult>(requestBuilder' method' arguments);                        if (response.Error == null)                      {                          return response.Result;                      }                      error = response.Error.ToObject<DelugeError>();                        throw new DownloadClientAuthenticationException(error.Message);                  }                    throw new DelugeException(error.Message' error.Code);              }
Magic Number,NzbDrone.Core.Download.Clients.Deluge,DelugeSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeSettings.cs,DelugeSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.Deluge,DelugeSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Deluge\DelugeSettings.cs,DelugeSettings,The following statement contains a magic number: Port = 8112;
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DownloadStationTaskProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DownloadStationTaskProxy.cs,AddTaskFromData,The following statement contains a magic number: var requestBuilder = BuildRequest(settings' "create"' 2' HttpMethod.POST);
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DownloadStationTaskProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DownloadStationTaskProxy.cs,AddTaskFromUrl,The following statement contains a magic number: var requestBuilder = BuildRequest(settings' "create"' 3);
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,FileStationProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\FileStationProxy.cs,GetInfoFileOrDirectory,The following statement contains a magic number: var requestBuilder = BuildRequest(settings' "getinfo"' 2);
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,ProcessRequest,The following statement contains a magic number: if (response.StatusCode == HttpStatusCode.OK)              {                  var responseContent = Json.Deserialize<DiskStationResponse<T>>(response.Content);                    if (responseContent.Success)                  {                      return responseContent;                  }                  else                  {                      var msg = $"Failed to {operation}. Reason: {responseContent.Error.GetMessage(api)}";                      _logger.Error(msg);                        if (responseContent.Error.SessionError)                      {                          _sessionCache.Remove(GenerateSessionCacheKey(settings));                            if (responseContent.Error.Code == 105)                          {                              throw new DownloadClientAuthenticationException(msg);                          }                      }                        throw new DownloadClientException(msg);                  }              }              else              {                  throw new HttpException(request' response);              }
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,AuthenticateClient,The following statement contains a magic number: var requestBuilder = BuildRequest(settings' authInfo' "login"' 2);
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The following statement contains a magic number: if (httpVerb == HttpMethod.POST)              {                  if (apiInfo.NeedsAuthentication)                  {                      requestBuilder.AddFormParameter("_sid"' _sessionCache.Get(GenerateSessionCacheKey(settings)' () => AuthenticateClient(settings)' TimeSpan.FromHours(6)));                  }                    requestBuilder.AddFormParameter("api"' apiInfo.Name);                  requestBuilder.AddFormParameter("version"' apiVersion);                  requestBuilder.AddFormParameter("method"' methodName);              }              else              {                  if (apiInfo.NeedsAuthentication)                  {                      requestBuilder.AddQueryParam("_sid"' _sessionCache.Get(GenerateSessionCacheKey(settings)' () => AuthenticateClient(settings)' TimeSpan.FromHours(6)));                  }                    requestBuilder.AddQueryParam("api"' apiInfo.Name);                  requestBuilder.AddQueryParam("version"' apiVersion);                  requestBuilder.AddQueryParam("method"' methodName);              }
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Proxies,DiskStationProxyBase,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Proxies\DiskStationProxyBase.cs,BuildRequest,The following statement contains a magic number: if (httpVerb == HttpMethod.POST)              {                  if (apiInfo.NeedsAuthentication)                  {                      requestBuilder.AddFormParameter("_sid"' _sessionCache.Get(GenerateSessionCacheKey(settings)' () => AuthenticateClient(settings)' TimeSpan.FromHours(6)));                  }                    requestBuilder.AddFormParameter("api"' apiInfo.Name);                  requestBuilder.AddFormParameter("version"' apiVersion);                  requestBuilder.AddFormParameter("method"' methodName);              }              else              {                  if (apiInfo.NeedsAuthentication)                  {                      requestBuilder.AddQueryParam("_sid"' _sessionCache.Get(GenerateSessionCacheKey(settings)' () => AuthenticateClient(settings)' TimeSpan.FromHours(6)));                  }                    requestBuilder.AddQueryParam("api"' apiInfo.Name);                  requestBuilder.AddQueryParam("version"' apiVersion);                  requestBuilder.AddQueryParam("method"' methodName);              }
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,ValidateVersion,The following statement contains a magic number: if (info.MinVersion > 2 || info.MaxVersion < 2)              {                  return new ValidationFailure(string.Empty' $"Download Station API version not supported' should be at least 2. It supports from {info.MinVersion} to {info.MaxVersion}");              }
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,ValidateVersion,The following statement contains a magic number: if (info.MinVersion > 2 || info.MaxVersion < 2)              {                  return new ValidationFailure(string.Empty' $"Download Station API version not supported' should be at least 2. It supports from {info.MinVersion} to {info.MaxVersion}");              }
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,DownloadStationSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\DownloadStationSettings.cs,DownloadStationSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,DownloadStationSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\DownloadStationSettings.cs,DownloadStationSettings,The following statement contains a magic number: this.Port = 5000;
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,SerialNumberProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\SerialNumberProvider.cs,GetSerialNumber,The following statement contains a magic number: try              {                  return _cache.Get(settings.Host' () => GetHashedSerialNumber(settings)' TimeSpan.FromMinutes(5));              }              catch (Exception ex)              {                  _logger.Warn(ex' "Could not get the serial number from Download Station {0}:{1}"' settings.Host' settings.Port);                  throw;              }
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,ValidateVersion,The following statement contains a magic number: if (info.MinVersion > 2 || info.MaxVersion < 2)              {                  return new ValidationFailure(string.Empty' $"Download Station API version not supported' should be at least 2. It supports from {info.MinVersion} to {info.MaxVersion}");              }
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,ValidateVersion,The following statement contains a magic number: if (info.MinVersion > 2 || info.MaxVersion < 2)              {                  return new ValidationFailure(string.Empty' $"Download Station API version not supported' should be at least 2. It supports from {info.MinVersion} to {info.MaxVersion}");              }
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: CommonMessages = new Dictionary<int' string>              {                  { 100' "Unknown error" }'                  { 101' "Invalid parameter" }'                  { 102' "The requested API does not exist" }'                  { 103' "The requested method does not exist" }'                  { 104' "The requested version does not support the functionality" }'                  { 105' "The logged in session does not have permission" }'                  { 106' "Session timeout" }'                  { 107' "Session interrupted by duplicate login" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: AuthMessages = new Dictionary<int' string>              {                  { 400' "No such account or incorrect password" }'                  { 401' "Account disabled" }'                  { 402' "Permission denied" }'                  { 403' "2-step verification code required" }'                  { 404' "Failed to authenticate 2-step verification code" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: AuthMessages = new Dictionary<int' string>              {                  { 400' "No such account or incorrect password" }'                  { 401' "Account disabled" }'                  { 402' "Permission denied" }'                  { 403' "2-step verification code required" }'                  { 404' "Failed to authenticate 2-step verification code" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: AuthMessages = new Dictionary<int' string>              {                  { 400' "No such account or incorrect password" }'                  { 401' "Account disabled" }'                  { 402' "Permission denied" }'                  { 403' "2-step verification code required" }'                  { 404' "Failed to authenticate 2-step verification code" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: AuthMessages = new Dictionary<int' string>              {                  { 400' "No such account or incorrect password" }'                  { 401' "Account disabled" }'                  { 402' "Permission denied" }'                  { 403' "2-step verification code required" }'                  { 404' "Failed to authenticate 2-step verification code" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: AuthMessages = new Dictionary<int' string>              {                  { 400' "No such account or incorrect password" }'                  { 401' "Account disabled" }'                  { 402' "Permission denied" }'                  { 403' "2-step verification code required" }'                  { 404' "Failed to authenticate 2-step verification code" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: DownloadStationTaskMessages = new Dictionary<int' string>              {                  { 400' "File upload failed" }'                  { 401' "Max number of tasks reached" }'                  { 402' "Destination denied" }'                  { 403' "Destination does not exist" }'                  { 404' "Invalid task id" }'                  { 405' "Invalid task action" }'                  { 406' "No default destination" }'                  { 407' "Set destination failed" }'                  { 408' "File does not exist" }              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.DownloadStation.Responses,DiskStationError,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\Responses\DiskStationError.cs,DiskStationError,The following statement contains a magic number: FileStationMessages = new Dictionary<int' string>              {                  { 400' "Invalid parameter of file operation" }'                  { 401' "Unknown error of file operation" }'                  { 402' "System is too busy" }'                  { 403' "Invalid user does this file operation" }'                  { 404' "Invalid group does this file operation" }'                  { 405' "Invalid user and group does this file operation" }'                  { 406' "Can’t get user/group information from the account server" }'                  { 407' "Operation not permitted" }'                  { 408' "No such file or directory" }'                  { 409' "Non-supported file system" }'                  { 410' "Failed to connect internet-based file system (ex: CIFS)" }'                  { 411' "Read-only file system" }'                  { 412' "Filename too long in the non-encrypted file system" }'                  { 413' "Filename too long in the encrypted file system" }'                  { 414' "File already exists" }'                  { 415' "Disk quota exceeded" }'                  { 416' "No space left on device" }'                  { 417' "Input/output error" }'                  { 418' "Illegal name or path" }'                  { 419' "Illegal file name" }'                  { 420' "Illegal file name on FAT file system" }'                  { 421' "Device or resource busy" }'                  { 599' "No such task of the file operation" }'              };
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,GetTorrents,The following statement contains a magic number: foreach (var item in torrentsRaw)              {                  var torrent = MapTorrent(item);                  if (torrent != null)                  {                      torrent.IsFinished = torrent.Progress >= 1000;                      torrents.Add(torrent);                  }              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: try              {                  torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };              }              catch(Exception ex)              {                  _logger.ErrorException("Failed to map Hadouken torrent data."' ex);              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: try              {                  torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };              }              catch(Exception ex)              {                  _logger.ErrorException("Failed to map Hadouken torrent data."' ex);              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: try              {                  torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };              }              catch(Exception ex)              {                  _logger.ErrorException("Failed to map Hadouken torrent data."' ex);              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: try              {                  torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };              }              catch(Exception ex)              {                  _logger.ErrorException("Failed to map Hadouken torrent data."' ex);              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: try              {                  torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };              }              catch(Exception ex)              {                  _logger.ErrorException("Failed to map Hadouken torrent data."' ex);              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: try              {                  torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };              }              catch(Exception ex)              {                  _logger.ErrorException("Failed to map Hadouken torrent data."' ex);              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: try              {                  torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };              }              catch(Exception ex)              {                  _logger.ErrorException("Failed to map Hadouken torrent data."' ex);              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,MapTorrent,The following statement contains a magic number: try              {                  torrent = new HadoukenTorrent()                  {                      InfoHash = Convert.ToString(item[0])'                      State = ParseState(Convert.ToInt32(item[1]))'                      Name = Convert.ToString(item[2])'                      TotalSize = Convert.ToInt64(item[3])'                      Progress = Convert.ToDouble(item[4])'                      DownloadedBytes = Convert.ToInt64(item[5])'                      DownloadRate = Convert.ToInt64(item[9])'                      Label = Convert.ToString(item[11])'                      Error = Convert.ToString(item[21])'                      SavePath = Convert.ToString(item[26])                  };              }              catch(Exception ex)              {                  _logger.ErrorException("Failed to map Hadouken torrent data."' ex);              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,ParseState,The following statement contains a magic number: if ((state & 1) == 1)              {                  return HadoukenTorrentState.Downloading;              }              else if ((state & 2) == 2)              {                  return HadoukenTorrentState.CheckingFiles;              }              else if ((state & 32) == 32)              {                  return HadoukenTorrentState.Paused;              }              else if ((state & 64) == 64)              {                  return HadoukenTorrentState.QueuedForChecking;              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,ParseState,The following statement contains a magic number: if ((state & 1) == 1)              {                  return HadoukenTorrentState.Downloading;              }              else if ((state & 2) == 2)              {                  return HadoukenTorrentState.CheckingFiles;              }              else if ((state & 32) == 32)              {                  return HadoukenTorrentState.Paused;              }              else if ((state & 64) == 64)              {                  return HadoukenTorrentState.QueuedForChecking;              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,ParseState,The following statement contains a magic number: if ((state & 1) == 1)              {                  return HadoukenTorrentState.Downloading;              }              else if ((state & 2) == 2)              {                  return HadoukenTorrentState.CheckingFiles;              }              else if ((state & 32) == 32)              {                  return HadoukenTorrentState.Paused;              }              else if ((state & 64) == 64)              {                  return HadoukenTorrentState.QueuedForChecking;              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,ParseState,The following statement contains a magic number: if ((state & 1) == 1)              {                  return HadoukenTorrentState.Downloading;              }              else if ((state & 2) == 2)              {                  return HadoukenTorrentState.CheckingFiles;              }              else if ((state & 32) == 32)              {                  return HadoukenTorrentState.Paused;              }              else if ((state & 64) == 64)              {                  return HadoukenTorrentState.QueuedForChecking;              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,ParseState,The following statement contains a magic number: if ((state & 1) == 1)              {                  return HadoukenTorrentState.Downloading;              }              else if ((state & 2) == 2)              {                  return HadoukenTorrentState.CheckingFiles;              }              else if ((state & 32) == 32)              {                  return HadoukenTorrentState.Paused;              }              else if ((state & 64) == 64)              {                  return HadoukenTorrentState.QueuedForChecking;              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenProxy.cs,ParseState,The following statement contains a magic number: if ((state & 1) == 1)              {                  return HadoukenTorrentState.Downloading;              }              else if ((state & 2) == 2)              {                  return HadoukenTorrentState.CheckingFiles;              }              else if ((state & 32) == 32)              {                  return HadoukenTorrentState.Paused;              }              else if ((state & 64) == 64)              {                  return HadoukenTorrentState.QueuedForChecking;              }
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenSettings.cs,HadoukenSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.Hadouken,HadoukenSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Hadouken\HadoukenSettings.cs,HadoukenSettings,The following statement contains a magic number: Port = 7070;
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,GetCategories,The following statement contains a magic number: for (int i = 1; i < 100; i++)              {                  var name = config.GetValueOrDefault("Category" + i + ".Name");                    if (name == null) yield break;                    var destDir = config.GetValueOrDefault("Category" + i + ".DestDir");                    if (destDir.IsNullOrWhiteSpace())                  {                      var mainDir = config.GetValueOrDefault("MainDir");                      destDir = config.GetValueOrDefault("DestDir"' string.Empty).Replace("${MainDir}"' mainDir);                        if (config.GetValueOrDefault("AppendCategoryDir"' "yes") == "yes")                      {                          destDir = Path.Combine(destDir' name);                      }                  }                    yield return new NzbgetCategory                  {                      Name = name'                      DestDir = destDir'                      Unpack = config.GetValueOrDefault("Category" + i + ".Unpack") == "yes"'                      DefScript = config.GetValueOrDefault("Category" + i + ".DefScript")'                      Aliases = config.GetValueOrDefault("Category" + i + ".Aliases")'                  };              }
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,TestSettings,The following statement contains a magic number: if (!int.TryParse(keepHistory' NumberStyles.None' CultureInfo.InvariantCulture' out value) || value == 0)              {                  return new NzbDroneValidationFailure(string.Empty' "NzbGet setting KeepHistory should be greater than 0")                  {                      InfoLink = string.Format("http://{0}:{1}/"' Settings.Host' Settings.Port)'                      DetailedDescription = "NzbGet setting KeepHistory is set to 0. Which prevents Sonarr from seeing completed downloads."                  };              }              else if (value > 25000)              {                  return new NzbDroneValidationFailure(string.Empty' "NzbGet setting KeepHistory should be less than 25000")                  {                      InfoLink = string.Format("http://{0}:{1}/"' Settings.Host' Settings.Port)'                      DetailedDescription = "NzbGet setting KeepHistory is set too high."                  };              }
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,Nzbget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\Nzbget.cs,MakeInt64,The following statement contains a magic number: result = (result << 32) | (long)low;
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzb,The following statement contains a magic number: if (HasVersion(16' settings))              {                  var droneId = Guid.NewGuid().ToString().Replace("-"' "");                  var response = ProcessRequest<int>(settings' "append"' title' nzbData' category' priority' false' addpaused' string.Empty' 0' "all"' new string[] { "drone"' droneId });                  if (response <= 0)                  {                      return null;                  }                    return droneId;              }              else if (HasVersion(13' settings))              {                  return DownloadNzbLegacy13(nzbData' title' category' priority' settings);              }              else              {                  return DownloadNzbLegacy12(nzbData' title' category' priority' settings);              }
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzb,The following statement contains a magic number: if (HasVersion(16' settings))              {                  var droneId = Guid.NewGuid().ToString().Replace("-"' "");                  var response = ProcessRequest<int>(settings' "append"' title' nzbData' category' priority' false' addpaused' string.Empty' 0' "all"' new string[] { "drone"' droneId });                  if (response <= 0)                  {                      return null;                  }                    return droneId;              }              else if (HasVersion(13' settings))              {                  return DownloadNzbLegacy13(nzbData' title' category' priority' settings);              }              else              {                  return DownloadNzbLegacy12(nzbData' title' category' priority' settings);              }
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,DownloadNzbLegacy12,The following statement contains a magic number: var item = queue.FirstOrDefault(q => q.NzbName == title.Substring(0' title.Length - 4));
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetProxy.cs,RemoveItem,The following statement contains a magic number: if (id.Length < 10 && int.TryParse(id' out nzbId))              {                  // Download wasn't grabbed by Sonarr' so the id is the NzbId reported by nzbget.                  queueItem = queue.SingleOrDefault(h => h.NzbId == nzbId);                  historyItem = history.SingleOrDefault(h => h.Id == nzbId);              }              else              {                  queueItem = queue.SingleOrDefault(h => h.Parameters.Any(p => p.Name == "drone" && id == (p.Value as string)));                  historyItem = history.SingleOrDefault(h => h.Parameters.Any(p => p.Name == "drone" && id == (p.Value as string)));              }
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetSettings.cs,NzbgetSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.Nzbget,NzbgetSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Nzbget\NzbgetSettings.cs,NzbgetSettings,The following statement contains a magic number: Port = 6789;
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,GetItems,The following statement contains a magic number: var vortexQueue = _proxy.GetQueue(30' Settings);
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,RemoveItem,The following statement contains a magic number: if (int.TryParse(downloadId' out id))              {                  _proxy.Remove(id' deleteData' Settings);              }                else              {                  var queue = _proxy.GetQueue(30' Settings);                  var queueItem = queue.FirstOrDefault(c => c.AddUUID == downloadId);                    if (queueItem != null)                  {                      _proxy.Remove(queueItem.Id' deleteData' Settings);                  }              }
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,TestApiVersion,The following statement contains a magic number: try              {                  var response = _proxy.GetApiVersion(Settings);                  var version = new Version(response.ApiLevel);                    if (version.Major < 2 || (version.Major == 2 && version.Minor < 3))                  {                      return new ValidationFailure("Host"' "NZBVortex needs to be updated");                  }              }              catch (Exception ex)              {                  _logger.Error(ex' "Unable to connect to NZBVortex");                  return new ValidationFailure("Host"' "Unable to connect to NZBVortex");              }
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,TestApiVersion,The following statement contains a magic number: try              {                  var response = _proxy.GetApiVersion(Settings);                  var version = new Version(response.ApiLevel);                    if (version.Major < 2 || (version.Major == 2 && version.Minor < 3))                  {                      return new ValidationFailure("Host"' "NZBVortex needs to be updated");                  }              }              catch (Exception ex)              {                  _logger.Error(ex' "Unable to connect to NZBVortex");                  return new ValidationFailure("Host"' "Unable to connect to NZBVortex");              }
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortex,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortex.cs,TestApiVersion,The following statement contains a magic number: try              {                  var response = _proxy.GetApiVersion(Settings);                  var version = new Version(response.ApiLevel);                    if (version.Major < 2 || (version.Major == 2 && version.Minor < 3))                  {                      return new ValidationFailure("Host"' "NZBVortex needs to be updated");                  }              }              catch (Exception ex)              {                  _logger.Error(ex' "Unable to connect to NZBVortex");                  return new ValidationFailure("Host"' "Unable to connect to NZBVortex");              }
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortexSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortexSettings.cs,NzbVortexSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.NzbVortex,NzbVortexSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\NzbVortex\NzbVortexSettings.cs,NzbVortexSettings,The following statement contains a magic number: Port = 4321;
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestConnection,The following statement contains a magic number: try              {                  var version = _proxy.GetVersion(Settings);                  if (version < 5)                  {                      // API version 5 introduced the "save_path" property in /query/torrents                      return new NzbDroneValidationFailure("Host"' "Unsupported client version")                      {                          DetailedDescription = "Please upgrade to qBittorrent version 3.2.4 or higher."                      };                  }                  else if (version < 6)                  {                      // API version 6 introduced support for labels                      if (Settings.TvCategory.IsNotNullOrWhiteSpace())                      {                          return new NzbDroneValidationFailure("Category"' "Category is not supported")                          {                              DetailedDescription = "Labels are not supported until qBittorrent version 3.3.0. Please upgrade or try again with an empty Category."                          };                      }                  }                  else if (Settings.TvCategory.IsNullOrWhiteSpace())                  {                      // warn if labels are supported' but category is not provided                      return new NzbDroneValidationFailure("TvCategory"' "Category is recommended")                      {                          IsWarning = true'                          DetailedDescription = "Sonarr will not attempt to import completed downloads without a category."                      };                  }                    // Complain if qBittorrent is configured to remove torrents on max ratio                  var config = _proxy.GetConfig(Settings);                  if (config.MaxRatioEnabled && config.RemoveOnMaxRatio)                  {                      return new NzbDroneValidationFailure(String.Empty' "qBittorrent is configured to remove torrents when they reach their Share Ratio Limit")                      {                          DetailedDescription = "Sonarr will be unable to perform Completed Download Handling as configured. You can fix this in qBittorrent ('Tools -> Options...' in the menu) by changing 'Options -> BitTorrent -> Share Ratio Limiting' from 'Remove them' to 'Pause them'."                      };                  }              }              catch (DownloadClientAuthenticationException ex)              {                  _logger.Error(ex' ex.Message);                  return new NzbDroneValidationFailure("Username"' "Authentication failure")                  {                      DetailedDescription = "Please verify your username and password."                  };              }              catch (WebException ex)              {                  _logger.Error(ex' "Unable to connect to qBittorrent");                  if (ex.Status == WebExceptionStatus.ConnectFailure)                  {                      return new NzbDroneValidationFailure("Host"' "Unable to connect")                      {                          DetailedDescription = "Please verify the hostname and port."                      };                  }                  return new NzbDroneValidationFailure(String.Empty' "Unknown exception: " + ex.Message);              }              catch (Exception ex)              {                  _logger.Error(ex' "Unable to test qBittorrent");                  return new NzbDroneValidationFailure(String.Empty' "Unknown exception: " + ex.Message);              }
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,TestConnection,The following statement contains a magic number: try              {                  var version = _proxy.GetVersion(Settings);                  if (version < 5)                  {                      // API version 5 introduced the "save_path" property in /query/torrents                      return new NzbDroneValidationFailure("Host"' "Unsupported client version")                      {                          DetailedDescription = "Please upgrade to qBittorrent version 3.2.4 or higher."                      };                  }                  else if (version < 6)                  {                      // API version 6 introduced support for labels                      if (Settings.TvCategory.IsNotNullOrWhiteSpace())                      {                          return new NzbDroneValidationFailure("Category"' "Category is not supported")                          {                              DetailedDescription = "Labels are not supported until qBittorrent version 3.3.0. Please upgrade or try again with an empty Category."                          };                      }                  }                  else if (Settings.TvCategory.IsNullOrWhiteSpace())                  {                      // warn if labels are supported' but category is not provided                      return new NzbDroneValidationFailure("TvCategory"' "Category is recommended")                      {                          IsWarning = true'                          DetailedDescription = "Sonarr will not attempt to import completed downloads without a category."                      };                  }                    // Complain if qBittorrent is configured to remove torrents on max ratio                  var config = _proxy.GetConfig(Settings);                  if (config.MaxRatioEnabled && config.RemoveOnMaxRatio)                  {                      return new NzbDroneValidationFailure(String.Empty' "qBittorrent is configured to remove torrents when they reach their Share Ratio Limit")                      {                          DetailedDescription = "Sonarr will be unable to perform Completed Download Handling as configured. You can fix this in qBittorrent ('Tools -> Options...' in the menu) by changing 'Options -> BitTorrent -> Share Ratio Limiting' from 'Remove them' to 'Pause them'."                      };                  }              }              catch (DownloadClientAuthenticationException ex)              {                  _logger.Error(ex' ex.Message);                  return new NzbDroneValidationFailure("Username"' "Authentication failure")                  {                      DetailedDescription = "Please verify your username and password."                  };              }              catch (WebException ex)              {                  _logger.Error(ex' "Unable to connect to qBittorrent");                  if (ex.Status == WebExceptionStatus.ConnectFailure)                  {                      return new NzbDroneValidationFailure("Host"' "Unable to connect")                      {                          DetailedDescription = "Please verify the hostname and port."                      };                  }                  return new NzbDroneValidationFailure(String.Empty' "Unknown exception: " + ex.Message);              }              catch (Exception ex)              {                  _logger.Error(ex' "Unable to test qBittorrent");                  return new NzbDroneValidationFailure(String.Empty' "Unknown exception: " + ex.Message);              }
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentSettings.cs,QBittorrentSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrentSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrentSettings.cs,QBittorrentSettings,The following statement contains a magic number: Port = 8080;
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd.JsonConverters,SabnzbdQueueTimeConverter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\JsonConverters\SabnzbdQueueTimeConverter.cs,ReadJson,The following statement contains a magic number: switch (split.Count())              {                  case 4:                      return new TimeSpan(split[0] * 24 + split[1]' split[2]' split[3]);                  case 3:                      return new TimeSpan(split[0]' split[1]' split[2]);                  default:                      throw new ArgumentException("Expected either 0:0:0:0 or 0:0:0 format' but received: " + reader.Value);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetQueue,The following statement contains a magic number: foreach (var sabQueueItem in sabQueue.Items)              {                  if (sabQueueItem.Status == SabnzbdDownloadStatus.Deleted)                  {                      continue;                  }                    var queueItem = new DownloadClientItem();                  queueItem.DownloadClient = Definition.Name;                  queueItem.DownloadId = sabQueueItem.Id;                  queueItem.Category = sabQueueItem.Category;                  queueItem.Title = sabQueueItem.Title;                  queueItem.TotalSize = (long)(sabQueueItem.Size * 1024 * 1024);                  queueItem.RemainingSize = (long)(sabQueueItem.Sizeleft * 1024 * 1024);                  queueItem.RemainingTime = sabQueueItem.Timeleft;                  queueItem.CanBeRemoved = true;                  queueItem.CanMoveFiles = true;                    if ((sabQueue.Paused && sabQueueItem.Priority != SabnzbdPriority.Force) ||                      sabQueueItem.Status == SabnzbdDownloadStatus.Paused)                  {                      queueItem.Status = DownloadItemStatus.Paused;                        queueItem.RemainingTime = null;                  }                  else if (sabQueueItem.Status == SabnzbdDownloadStatus.Queued ||                           sabQueueItem.Status == SabnzbdDownloadStatus.Grabbing ||                           sabQueueItem.Status == SabnzbdDownloadStatus.Propagating)                  {                      queueItem.Status = DownloadItemStatus.Queued;                  }                  else                  {                      queueItem.Status = DownloadItemStatus.Downloading;                  }                    if (queueItem.Title.StartsWith("ENCRYPTED /"))                  {                      queueItem.Title = queueItem.Title.Substring(11);                      queueItem.IsEncrypted = true;                  }                    queueItems.Add(queueItem);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetQueue,The following statement contains a magic number: foreach (var sabQueueItem in sabQueue.Items)              {                  if (sabQueueItem.Status == SabnzbdDownloadStatus.Deleted)                  {                      continue;                  }                    var queueItem = new DownloadClientItem();                  queueItem.DownloadClient = Definition.Name;                  queueItem.DownloadId = sabQueueItem.Id;                  queueItem.Category = sabQueueItem.Category;                  queueItem.Title = sabQueueItem.Title;                  queueItem.TotalSize = (long)(sabQueueItem.Size * 1024 * 1024);                  queueItem.RemainingSize = (long)(sabQueueItem.Sizeleft * 1024 * 1024);                  queueItem.RemainingTime = sabQueueItem.Timeleft;                  queueItem.CanBeRemoved = true;                  queueItem.CanMoveFiles = true;                    if ((sabQueue.Paused && sabQueueItem.Priority != SabnzbdPriority.Force) ||                      sabQueueItem.Status == SabnzbdDownloadStatus.Paused)                  {                      queueItem.Status = DownloadItemStatus.Paused;                        queueItem.RemainingTime = null;                  }                  else if (sabQueueItem.Status == SabnzbdDownloadStatus.Queued ||                           sabQueueItem.Status == SabnzbdDownloadStatus.Grabbing ||                           sabQueueItem.Status == SabnzbdDownloadStatus.Propagating)                  {                      queueItem.Status = DownloadItemStatus.Queued;                  }                  else                  {                      queueItem.Status = DownloadItemStatus.Downloading;                  }                    if (queueItem.Title.StartsWith("ENCRYPTED /"))                  {                      queueItem.Title = queueItem.Title.Substring(11);                      queueItem.IsEncrypted = true;                  }                    queueItems.Add(queueItem);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetQueue,The following statement contains a magic number: foreach (var sabQueueItem in sabQueue.Items)              {                  if (sabQueueItem.Status == SabnzbdDownloadStatus.Deleted)                  {                      continue;                  }                    var queueItem = new DownloadClientItem();                  queueItem.DownloadClient = Definition.Name;                  queueItem.DownloadId = sabQueueItem.Id;                  queueItem.Category = sabQueueItem.Category;                  queueItem.Title = sabQueueItem.Title;                  queueItem.TotalSize = (long)(sabQueueItem.Size * 1024 * 1024);                  queueItem.RemainingSize = (long)(sabQueueItem.Sizeleft * 1024 * 1024);                  queueItem.RemainingTime = sabQueueItem.Timeleft;                  queueItem.CanBeRemoved = true;                  queueItem.CanMoveFiles = true;                    if ((sabQueue.Paused && sabQueueItem.Priority != SabnzbdPriority.Force) ||                      sabQueueItem.Status == SabnzbdDownloadStatus.Paused)                  {                      queueItem.Status = DownloadItemStatus.Paused;                        queueItem.RemainingTime = null;                  }                  else if (sabQueueItem.Status == SabnzbdDownloadStatus.Queued ||                           sabQueueItem.Status == SabnzbdDownloadStatus.Grabbing ||                           sabQueueItem.Status == SabnzbdDownloadStatus.Propagating)                  {                      queueItem.Status = DownloadItemStatus.Queued;                  }                  else                  {                      queueItem.Status = DownloadItemStatus.Downloading;                  }                    if (queueItem.Title.StartsWith("ENCRYPTED /"))                  {                      queueItem.Title = queueItem.Title.Substring(11);                      queueItem.IsEncrypted = true;                  }                    queueItems.Add(queueItem);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetQueue,The following statement contains a magic number: foreach (var sabQueueItem in sabQueue.Items)              {                  if (sabQueueItem.Status == SabnzbdDownloadStatus.Deleted)                  {                      continue;                  }                    var queueItem = new DownloadClientItem();                  queueItem.DownloadClient = Definition.Name;                  queueItem.DownloadId = sabQueueItem.Id;                  queueItem.Category = sabQueueItem.Category;                  queueItem.Title = sabQueueItem.Title;                  queueItem.TotalSize = (long)(sabQueueItem.Size * 1024 * 1024);                  queueItem.RemainingSize = (long)(sabQueueItem.Sizeleft * 1024 * 1024);                  queueItem.RemainingTime = sabQueueItem.Timeleft;                  queueItem.CanBeRemoved = true;                  queueItem.CanMoveFiles = true;                    if ((sabQueue.Paused && sabQueueItem.Priority != SabnzbdPriority.Force) ||                      sabQueueItem.Status == SabnzbdDownloadStatus.Paused)                  {                      queueItem.Status = DownloadItemStatus.Paused;                        queueItem.RemainingTime = null;                  }                  else if (sabQueueItem.Status == SabnzbdDownloadStatus.Queued ||                           sabQueueItem.Status == SabnzbdDownloadStatus.Grabbing ||                           sabQueueItem.Status == SabnzbdDownloadStatus.Propagating)                  {                      queueItem.Status = DownloadItemStatus.Queued;                  }                  else                  {                      queueItem.Status = DownloadItemStatus.Downloading;                  }                    if (queueItem.Title.StartsWith("ENCRYPTED /"))                  {                      queueItem.Title = queueItem.Title.Substring(11);                      queueItem.IsEncrypted = true;                  }                    queueItems.Add(queueItem);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetQueue,The following statement contains a magic number: foreach (var sabQueueItem in sabQueue.Items)              {                  if (sabQueueItem.Status == SabnzbdDownloadStatus.Deleted)                  {                      continue;                  }                    var queueItem = new DownloadClientItem();                  queueItem.DownloadClient = Definition.Name;                  queueItem.DownloadId = sabQueueItem.Id;                  queueItem.Category = sabQueueItem.Category;                  queueItem.Title = sabQueueItem.Title;                  queueItem.TotalSize = (long)(sabQueueItem.Size * 1024 * 1024);                  queueItem.RemainingSize = (long)(sabQueueItem.Sizeleft * 1024 * 1024);                  queueItem.RemainingTime = sabQueueItem.Timeleft;                  queueItem.CanBeRemoved = true;                  queueItem.CanMoveFiles = true;                    if ((sabQueue.Paused && sabQueueItem.Priority != SabnzbdPriority.Force) ||                      sabQueueItem.Status == SabnzbdDownloadStatus.Paused)                  {                      queueItem.Status = DownloadItemStatus.Paused;                        queueItem.RemainingTime = null;                  }                  else if (sabQueueItem.Status == SabnzbdDownloadStatus.Queued ||                           sabQueueItem.Status == SabnzbdDownloadStatus.Grabbing ||                           sabQueueItem.Status == SabnzbdDownloadStatus.Propagating)                  {                      queueItem.Status = DownloadItemStatus.Queued;                  }                  else                  {                      queueItem.Status = DownloadItemStatus.Downloading;                  }                    if (queueItem.Title.StartsWith("ENCRYPTED /"))                  {                      queueItem.Title = queueItem.Title.Substring(11);                      queueItem.IsEncrypted = true;                  }                    queueItems.Add(queueItem);              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,GetCategories,The following statement contains a magic number: if (!completeDir.IsRooted)              {                  if (HasVersion(2' 0))                  {                      var status = _proxy.GetFullStatus(Settings);                      completeDir = new OsPath(status.CompleteDir);                  }                  else                  {                      var queue = _proxy.GetQueue(0' 1' Settings);                      var defaultRootFolder = new OsPath(queue.DefaultRootFolder);                        completeDir = defaultRootFolder + completeDir;                  }              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,Sabnzbd,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\Sabnzbd.cs,TestConnectionAndVersion,The following statement contains a magic number: try              {                  var rawVersion = _proxy.GetVersion(Settings);                  var version = ParseVersion(rawVersion);                    if (version == null)                  {                      return new ValidationFailure("Version"' "Unknown Version: " + rawVersion);                  }                    if (rawVersion.Equals("develop"' StringComparison.InvariantCultureIgnoreCase))                  {                      return new NzbDroneValidationFailure("Version"' "Sabnzbd develop version' assuming version 1.1.0 or higher.")                      {                          IsWarning = true'                          DetailedDescription = "Sonarr may not be able to support new features added to SABnzbd when running develop versions."                      };                  }                    if (version.Major >= 1)                  {                      return null;                  }                    if (version.Minor >= 7)                  {                      return null;                  }                    return new ValidationFailure("Version"' "Version 0.7.0+ is required' but found: " + version);              }              catch (Exception ex)              {                  _logger.Error(ex' ex.Message);                  return new ValidationFailure("Host"' "Unable to connect to SABnzbd");              }
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,SabnzbdSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\SabnzbdSettings.cs,SabnzbdSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.Sabnzbd,SabnzbdSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Sabnzbd\SabnzbdSettings.cs,SabnzbdSettings,The following statement contains a magic number: Port = 8080;
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromMagnetLink,The following statement contains a magic number: var tries = 10;
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromMagnetLink,The following statement contains a magic number: var retryDelay = 500;
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromMagnetLink,The following statement contains a magic number: if (!WaitForTorrent(hash' tries' retryDelay))              {                  _logger.Warn("rTorrent could not resolve magnet within {0} seconds' download may remain stuck: {1}."' tries * retryDelay / 1000' magnetLink);                    return hash;              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromTorrentFile,The following statement contains a magic number: var tries = 10;
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromTorrentFile,The following statement contains a magic number: var retryDelay = 500;
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrent.cs,AddFromTorrentFile,The following statement contains a magic number: if (!WaitForTorrent(hash' tries' retryDelay))              {                  _logger.Debug("rTorrent didn't add the torrent within {0} seconds: {1}."' tries * retryDelay / 1000' filename);                    throw new ReleaseDownloadException(remoteEpisode.Release' "Downloading torrent failed");              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: foreach (object[] torrent in ret)              {                  var labelDecoded = System.Web.HttpUtility.UrlDecode((string) torrent[3]);                    var item = new RTorrentTorrent();                  item.Name = (string) torrent[0];                  item.Hash = (string) torrent[1];                  item.Path = (string) torrent[2];                  item.Category = labelDecoded;                  item.TotalSize = (long) torrent[4];                  item.RemainingSize = (long) torrent[5];                  item.DownRate = (long) torrent[6];                  item.Ratio = (long) torrent[7];                  item.IsOpen = Convert.ToBoolean((long) torrent[8]);                  item.IsActive = Convert.ToBoolean((long) torrent[9]);                  item.IsFinished = Convert.ToBoolean((long) torrent[10]);                    items.Add(item);              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: foreach (object[] torrent in ret)              {                  var labelDecoded = System.Web.HttpUtility.UrlDecode((string) torrent[3]);                    var item = new RTorrentTorrent();                  item.Name = (string) torrent[0];                  item.Hash = (string) torrent[1];                  item.Path = (string) torrent[2];                  item.Category = labelDecoded;                  item.TotalSize = (long) torrent[4];                  item.RemainingSize = (long) torrent[5];                  item.DownRate = (long) torrent[6];                  item.Ratio = (long) torrent[7];                  item.IsOpen = Convert.ToBoolean((long) torrent[8]);                  item.IsActive = Convert.ToBoolean((long) torrent[9]);                  item.IsFinished = Convert.ToBoolean((long) torrent[10]);                    items.Add(item);              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: foreach (object[] torrent in ret)              {                  var labelDecoded = System.Web.HttpUtility.UrlDecode((string) torrent[3]);                    var item = new RTorrentTorrent();                  item.Name = (string) torrent[0];                  item.Hash = (string) torrent[1];                  item.Path = (string) torrent[2];                  item.Category = labelDecoded;                  item.TotalSize = (long) torrent[4];                  item.RemainingSize = (long) torrent[5];                  item.DownRate = (long) torrent[6];                  item.Ratio = (long) torrent[7];                  item.IsOpen = Convert.ToBoolean((long) torrent[8]);                  item.IsActive = Convert.ToBoolean((long) torrent[9]);                  item.IsFinished = Convert.ToBoolean((long) torrent[10]);                    items.Add(item);              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: foreach (object[] torrent in ret)              {                  var labelDecoded = System.Web.HttpUtility.UrlDecode((string) torrent[3]);                    var item = new RTorrentTorrent();                  item.Name = (string) torrent[0];                  item.Hash = (string) torrent[1];                  item.Path = (string) torrent[2];                  item.Category = labelDecoded;                  item.TotalSize = (long) torrent[4];                  item.RemainingSize = (long) torrent[5];                  item.DownRate = (long) torrent[6];                  item.Ratio = (long) torrent[7];                  item.IsOpen = Convert.ToBoolean((long) torrent[8]);                  item.IsActive = Convert.ToBoolean((long) torrent[9]);                  item.IsFinished = Convert.ToBoolean((long) torrent[10]);                    items.Add(item);              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: foreach (object[] torrent in ret)              {                  var labelDecoded = System.Web.HttpUtility.UrlDecode((string) torrent[3]);                    var item = new RTorrentTorrent();                  item.Name = (string) torrent[0];                  item.Hash = (string) torrent[1];                  item.Path = (string) torrent[2];                  item.Category = labelDecoded;                  item.TotalSize = (long) torrent[4];                  item.RemainingSize = (long) torrent[5];                  item.DownRate = (long) torrent[6];                  item.Ratio = (long) torrent[7];                  item.IsOpen = Convert.ToBoolean((long) torrent[8]);                  item.IsActive = Convert.ToBoolean((long) torrent[9]);                  item.IsFinished = Convert.ToBoolean((long) torrent[10]);                    items.Add(item);              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: foreach (object[] torrent in ret)              {                  var labelDecoded = System.Web.HttpUtility.UrlDecode((string) torrent[3]);                    var item = new RTorrentTorrent();                  item.Name = (string) torrent[0];                  item.Hash = (string) torrent[1];                  item.Path = (string) torrent[2];                  item.Category = labelDecoded;                  item.TotalSize = (long) torrent[4];                  item.RemainingSize = (long) torrent[5];                  item.DownRate = (long) torrent[6];                  item.Ratio = (long) torrent[7];                  item.IsOpen = Convert.ToBoolean((long) torrent[8]);                  item.IsActive = Convert.ToBoolean((long) torrent[9]);                  item.IsFinished = Convert.ToBoolean((long) torrent[10]);                    items.Add(item);              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: foreach (object[] torrent in ret)              {                  var labelDecoded = System.Web.HttpUtility.UrlDecode((string) torrent[3]);                    var item = new RTorrentTorrent();                  item.Name = (string) torrent[0];                  item.Hash = (string) torrent[1];                  item.Path = (string) torrent[2];                  item.Category = labelDecoded;                  item.TotalSize = (long) torrent[4];                  item.RemainingSize = (long) torrent[5];                  item.DownRate = (long) torrent[6];                  item.Ratio = (long) torrent[7];                  item.IsOpen = Convert.ToBoolean((long) torrent[8]);                  item.IsActive = Convert.ToBoolean((long) torrent[9]);                  item.IsFinished = Convert.ToBoolean((long) torrent[10]);                    items.Add(item);              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: foreach (object[] torrent in ret)              {                  var labelDecoded = System.Web.HttpUtility.UrlDecode((string) torrent[3]);                    var item = new RTorrentTorrent();                  item.Name = (string) torrent[0];                  item.Hash = (string) torrent[1];                  item.Path = (string) torrent[2];                  item.Category = labelDecoded;                  item.TotalSize = (long) torrent[4];                  item.RemainingSize = (long) torrent[5];                  item.DownRate = (long) torrent[6];                  item.Ratio = (long) torrent[7];                  item.IsOpen = Convert.ToBoolean((long) torrent[8]);                  item.IsActive = Convert.ToBoolean((long) torrent[9]);                  item.IsFinished = Convert.ToBoolean((long) torrent[10]);                    items.Add(item);              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentProxy.cs,GetTorrents,The following statement contains a magic number: foreach (object[] torrent in ret)              {                  var labelDecoded = System.Web.HttpUtility.UrlDecode((string) torrent[3]);                    var item = new RTorrentTorrent();                  item.Name = (string) torrent[0];                  item.Hash = (string) torrent[1];                  item.Path = (string) torrent[2];                  item.Category = labelDecoded;                  item.TotalSize = (long) torrent[4];                  item.RemainingSize = (long) torrent[5];                  item.DownRate = (long) torrent[6];                  item.Ratio = (long) torrent[7];                  item.IsOpen = Convert.ToBoolean((long) torrent[8]);                  item.IsActive = Convert.ToBoolean((long) torrent[9]);                  item.IsFinished = Convert.ToBoolean((long) torrent[10]);                    items.Add(item);              }
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentSettings.cs,RTorrentSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.RTorrent,RTorrentSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\rTorrent\RTorrentSettings.cs,RTorrentSettings,The following statement contains a magic number: Port = 8080;
Magic Number,NzbDrone.Core.Download.Clients.Transmission,Transmission,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\Transmission.cs,ValidateVersion,The following statement contains a magic number: if (version < new Version(2' 40))              {                  return new ValidationFailure(string.Empty' "Transmission version not supported' should be 2.40 or higher.");              }
Magic Number,NzbDrone.Core.Download.Clients.Transmission,Transmission,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\Transmission.cs,ValidateVersion,The following statement contains a magic number: if (version < new Version(2' 40))              {                  return new ValidationFailure(string.Empty' "Transmission version not supported' should be 2.40 or higher.");              }
Magic Number,NzbDrone.Core.Download.Clients.Transmission,TransmissionSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionSettings.cs,TransmissionSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.Transmission,TransmissionSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\Transmission\TransmissionSettings.cs,TransmissionSettings,The following statement contains a magic number: Port = 9091;
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,GetTorrents,The following statement contains a magic number: _torrentCache.Set(cacheKey' cache' TimeSpan.FromMinutes(15));
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrent.cs,TestConnection,The following statement contains a magic number: try              {                  var version = _proxy.GetVersion(Settings);                    if (version < 25406)                  {                      return new ValidationFailure(string.Empty' "Old uTorrent client with unsupported API' need 3.0 or higher");                  }              }              catch (DownloadClientAuthenticationException ex)              {                  _logger.Error(ex' ex.Message);                  return new NzbDroneValidationFailure("Username"' "Authentication failure")                  {                      DetailedDescription = "Please verify your username and password."                  };              }              catch (WebException ex)              {                  _logger.Error(ex' "Unable to connect to uTorrent");                  if (ex.Status == WebExceptionStatus.ConnectFailure)                  {                      return new NzbDroneValidationFailure("Host"' "Unable to connect")                      {                          DetailedDescription = "Please verify the hostname and port."                      };                  }                  return new NzbDroneValidationFailure(string.Empty' "Unknown exception: " + ex.Message);              }              catch (Exception ex)              {                  _logger.Error(ex' "Failed to test uTorrent");                  return new NzbDroneValidationFailure(string.Empty' "Unknown exception: " + ex.Message);              }
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentProxy.cs,GetConfig,The following statement contains a magic number: foreach (var configItem in result.Settings)              {                  configuration.Add(configItem[0].ToString()' configItem[2].ToString());              }
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentProxy.cs,SetTorrentSeedingConfiguration,The following statement contains a magic number: if (seedConfiguration.Ratio != null)              {                  requestBuilder.AddQueryParam("s"' "seed_ratio")                                .AddQueryParam("v"' Convert.ToInt32(seedConfiguration.Ratio.Value * 1000));              }
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentSettings.cs,UTorrentSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentSettings.cs,UTorrentSettings,The following statement contains a magic number: Port = 8080;
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentTorrentJsonConverter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentTorrent.cs,ReadJson,The following statement contains a magic number: result.Progress = (int)reader.ReadAsInt32() / 1000.0;
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentTorrentJsonConverter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentTorrent.cs,ReadJson,The following statement contains a magic number: result.Ratio = (int)reader.ReadAsInt32() / 1000.0;
Magic Number,NzbDrone.Core.Download.Clients.UTorrent,UTorrentTorrentJsonConverter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\uTorrent\UTorrentTorrent.cs,ReadJson,The following statement contains a magic number: result.Availablity = (int)reader.ReadAsInt32() / 65536.0;
Magic Number,NzbDrone.Core.Download.TrackedDownloads,DownloadMonitoringService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\TrackedDownloads\DownloadMonitoringService.cs,DownloadMonitoringService,The following statement contains a magic number: _refreshDebounce = new Debouncer(QueueRefresh' TimeSpan.FromSeconds(5));
Magic Number,NzbDrone.Core,Fluent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,ToBestDateString,The following statement contains a magic number: if (dateTime > DateTime.Today.AddDays(1) && dateTime < DateTime.Today.AddDays(7))                  return dateTime.DayOfWeek.ToString();
Magic Number,NzbDrone.Core,Fluent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Fluent.cs,Truncate,The following statement contains a magic number: while (i < cs.Length)              {                  int charSize = 1;                  if (i < (cs.Length - 1) && char.IsSurrogate(cs[i]))                      charSize = 2;                  int byteSize = Encoding.UTF8.GetByteCount(cs' i' charSize);                  if ((byteSize + length) <= maxLength)                  {                      i = i + charSize;                      length += byteSize;                  }                  else                      break;              }
Magic Number,NzbDrone.Core.HealthCheck.Checks,UpdateCheck,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\HealthCheck\Checks\UpdateCheck.cs,Check,The following statement contains a magic number: if (BuildInfo.BuildDateTime < DateTime.UtcNow.AddDays(-14))              {                  if (_checkUpdateService.AvailableUpdate() != null)                  {                      return new HealthCheck(GetType()' HealthCheckResult.Warning' "New update is available");                  }              }
Magic Number,NzbDrone.Core.Housekeeping.Housekeepers,CleanupDownloadClientUnavailablePendingReleases,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\CleanupDownloadClientUnavailablePendingReleases.cs,Clean,The following statement contains a magic number: var twoWeeksAgo = DateTime.UtcNow.AddDays(-14);
Magic Number,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,Clean,The following statement contains a magic number: foreach (var show in series)              {                  var images = _metaFileService.GetFilesBySeries(show.Id)                      .Where(c => c.LastUpdated > new DateTime(2014' 12' 27) && c.RelativePath.EndsWith(".jpg"' StringComparison.InvariantCultureIgnoreCase));                    foreach (var image in images)                  {                      try                      {                          var path = Path.Combine(show.Path' image.RelativePath);                          if (!IsValid(path))                          {                              _logger.Debug("Deleting invalid image file " + path);                              DeleteMetadata(image.Id' path);                          }                      }                      catch (Exception e)                      {                          _logger.Error(e' "Couldn't validate image {0}"' image.RelativePath);                      }                  }              }
Magic Number,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,Clean,The following statement contains a magic number: foreach (var show in series)              {                  var images = _metaFileService.GetFilesBySeries(show.Id)                      .Where(c => c.LastUpdated > new DateTime(2014' 12' 27) && c.RelativePath.EndsWith(".jpg"' StringComparison.InvariantCultureIgnoreCase));                    foreach (var image in images)                  {                      try                      {                          var path = Path.Combine(show.Path' image.RelativePath);                          if (!IsValid(path))                          {                              _logger.Debug("Deleting invalid image file " + path);                              DeleteMetadata(image.Id' path);                          }                      }                      catch (Exception e)                      {                          _logger.Error(e' "Couldn't validate image {0}"' image.RelativePath);                      }                  }              }
Magic Number,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,Clean,The following statement contains a magic number: foreach (var show in series)              {                  var images = _metaFileService.GetFilesBySeries(show.Id)                      .Where(c => c.LastUpdated > new DateTime(2014' 12' 27) && c.RelativePath.EndsWith(".jpg"' StringComparison.InvariantCultureIgnoreCase));                    foreach (var image in images)                  {                      try                      {                          var path = Path.Combine(show.Path' image.RelativePath);                          if (!IsValid(path))                          {                              _logger.Debug("Deleting invalid image file " + path);                              DeleteMetadata(image.Id' path);                          }                      }                      catch (Exception e)                      {                          _logger.Error(e' "Couldn't validate image {0}"' image.RelativePath);                      }                  }              }
Magic Number,NzbDrone.Core.Housekeeping.Housekeepers,DeleteBadMediaCovers,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Housekeeping\Housekeepers\DeleteBadMediaCovers.cs,IsValid,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetRequestGenerator.cs,BroadcastheNetRequestGenerator,The following statement contains a magic number: MaxPages = 10;
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetRequestGenerator.cs,BroadcastheNetRequestGenerator,The following statement contains a magic number: PageSize = 100;
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetRequestGenerator.cs,GetRecentRequests,The following statement contains a magic number: if (LastRecentTorrentID.HasValue)              {                  pageableRequests.Add(GetPagedRequests(MaxPages' new BroadcastheNetTorrentQuery()                  {                      Id = ">=" + (LastRecentTorrentID.Value - 100)                  }));              }
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetRequestGenerator.cs,GetPagedRequests,The following statement contains a magic number: for (var page = 0; page < maxPages; page++)              {                  builder.JsonParameters[3] = page * PageSize;                    yield return new IndexerRequest(builder.Build());              }
Magic Number,NzbDrone.Core.Indexers.BroadcastheNet,BroadcastheNetParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\BroadcastheNet\BroadcastheNetParser.cs,ParseResponse,The following statement contains a magic number: foreach (var torrent in jsonResponse.Result.Torrents.Values)              {                  var torrentInfo = new TorrentInfo();                    torrentInfo.Guid = string.Format("BTN-{0}"' torrent.TorrentID);                  torrentInfo.Title = CleanReleaseName(torrent.ReleaseName);                  torrentInfo.Size = torrent.Size;                  torrentInfo.DownloadUrl = RegexProtocol.Replace(torrent.DownloadURL' protocol);                  torrentInfo.InfoUrl = string.Format("{0}//broadcasthe.net/torrents.php?id={1}&torrentid={2}"' protocol' torrent.GroupID' torrent.TorrentID);                  //torrentInfo.CommentUrl =                  if (torrent.TvdbID.HasValue)                  {                      torrentInfo.TvdbId = torrent.TvdbID.Value;                  }                  if (torrent.TvrageID.HasValue)                  {                      torrentInfo.TvRageId = torrent.TvrageID.Value;                  }                  torrentInfo.PublishDate = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).ToUniversalTime().AddSeconds(torrent.Time);                  //torrentInfo.MagnetUrl =                  torrentInfo.InfoHash = torrent.InfoHash;                  torrentInfo.Seeders = torrent.Seeders;                  torrentInfo.Peers = torrent.Leechers + torrent.Seeders;                    torrentInfo.Origin = torrent.Origin;                  torrentInfo.Source = torrent.Source;                  torrentInfo.Container = torrent.Container;                  torrentInfo.Codec = torrent.Codec;                  torrentInfo.Resolution = torrent.Resolution;                    results.Add(torrentInfo);              }
Magic Number,NzbDrone.Core.Indexers,HttpIndexerBase<TSettings>,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\HttpIndexerBase.cs,FetchReleases,The following statement contains a magic number: try              {                  var generator = GetRequestGenerator();                  var parser = GetParser();                    var pageableRequestChain = pageableRequestChainSelector(generator);                    var fullyUpdated = false;                  ReleaseInfo lastReleaseInfo = null;                  if (isRecent)                  {                      lastReleaseInfo = _indexerStatusService.GetLastRssSyncReleaseInfo(Definition.Id);                  }                    for (int i = 0; i < pageableRequestChain.Tiers; i++)                  {                      var pageableRequests = pageableRequestChain.GetTier(i);                        foreach (var pageableRequest in pageableRequests)                      {                          var pagedReleases = new List<ReleaseInfo>();                            foreach (var request in pageableRequest)                          {                              url = request.Url.FullUri;                                var page = FetchPage(request' parser);                                pagedReleases.AddRange(page);                                if (isRecent && page.Any())                              {                                  if (lastReleaseInfo == null)                                  {                                      fullyUpdated = true;                                      break;                                  }                                  var oldestReleaseDate = page.Select(v => v.PublishDate).Min();                                  if (oldestReleaseDate < lastReleaseInfo.PublishDate || page.Any(v => v.DownloadUrl == lastReleaseInfo.DownloadUrl))                                  {                                      fullyUpdated = true;                                      break;                                  }                                    if (pagedReleases.Count >= MaxNumResultsPerQuery &&                                      oldestReleaseDate < DateTime.UtcNow - TimeSpan.FromHours(24))                                  {                                      fullyUpdated = false;                                      break;                                  }                              }                              else if (pagedReleases.Count >= MaxNumResultsPerQuery)                              {                                  break;                              }                                if (!IsFullPage(page))                              {                                  break;                              }                          }                            releases.AddRange(pagedReleases.Where(IsValidRelease));                      }                        if (releases.Any())                      {                          break;                      }                  }                    if (isRecent && !releases.Empty())                  {                      var ordered = releases.OrderByDescending(v => v.PublishDate).ToList();                        if (!fullyUpdated && lastReleaseInfo != null)                      {                          var gapStart = lastReleaseInfo.PublishDate;                          var gapEnd = ordered.Last().PublishDate;                          _logger.Warn("Indexer {0} rss sync didn't cover the period between {1} and {2} UTC. Search may be required."' Definition.Name' gapStart' gapEnd);                      }                      lastReleaseInfo = ordered.First();                      _indexerStatusService.UpdateRssSyncStatus(Definition.Id' lastReleaseInfo);                  }                    _indexerStatusService.RecordSuccess(Definition.Id);              }              catch (WebException webException)              {                  if (webException.Status == WebExceptionStatus.NameResolutionFailure ||                      webException.Status == WebExceptionStatus.ConnectFailure)                  {                      _indexerStatusService.RecordConnectionFailure(Definition.Id);                  }                  else                  {                      _indexerStatusService.RecordFailure(Definition.Id);                  }                    if (webException.Message.Contains("502") || webException.Message.Contains("503") ||                      webException.Message.Contains("timed out"))                  {                      _logger.Warn("{0} server is currently unavailable. {1} {2}"' this' url' webException.Message);                  }                  else                  {                      _logger.Warn("{0} {1} {2}"' this' url' webException.Message);                  }              }              catch (TooManyRequestsException ex)              {                  if (ex.RetryAfter != TimeSpan.Zero)                  {                      _indexerStatusService.RecordFailure(Definition.Id' ex.RetryAfter);                  }                  else                  {                      _indexerStatusService.RecordFailure(Definition.Id' TimeSpan.FromHours(1));                  }                  _logger.Warn("API Request Limit reached for {0}"' this);              }              catch (HttpException ex)              {                  _indexerStatusService.RecordFailure(Definition.Id);                  _logger.Warn("{0} {1}"' this' ex.Message);              }              catch (RequestLimitReachedException)              {                  _indexerStatusService.RecordFailure(Definition.Id' TimeSpan.FromHours(1));                  _logger.Warn("API Request Limit reached for {0}"' this);              }              catch (ApiKeyException)              {                  _indexerStatusService.RecordFailure(Definition.Id);                  _logger.Warn("Invalid API Key for {0} {1}"' this' url);              }              catch (CloudFlareCaptchaException ex)              {                  _indexerStatusService.RecordFailure(Definition.Id);                  ex.WithData("FeedUrl"' url);                  if (ex.IsExpired)                  {                      _logger.Error(ex' "Expired CAPTCHA token for {0}' please refresh in indexer settings."' this);                  }                  else                  {                      _logger.Error(ex' "CAPTCHA token required for {0}' check indexer settings."' this);                  }              }              catch (IndexerException ex)              {                  _indexerStatusService.RecordFailure(Definition.Id);                  _logger.Warn(ex' "{0}"' url);              }              catch (Exception ex)              {                  _indexerStatusService.RecordFailure(Definition.Id);                  ex.WithData("FeedUrl"' url);                  _logger.Error(ex' "An error occurred while processing feed. {0}"' url);              }
Magic Number,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,LoadXmlDocument,The following statement contains a magic number: try              {                  var content = XmlCleaner.ReplaceEntities(indexerResponse.Content);                  content = XmlCleaner.ReplaceUnicode(content);                    using (var xmlTextReader = XmlReader.Create(new StringReader(content)' new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore' IgnoreComments = true }))                  {                      return XDocument.Load(xmlTextReader);                  }              }              catch (XmlException ex)              {                  var contentSample = indexerResponse.Content.Substring(0' Math.Min(indexerResponse.Content.Length' 512));                  _logger.Debug("Truncated response content (originally {0} characters): {1}"' indexerResponse.Content.Length' contentSample);                    ex.WithData(indexerResponse.HttpResponse);                    throw;              }
Magic Number,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ParseSize,The following statement contains a magic number: if (match.Count != 0)              {                  var value = decimal.Parse(Regex.Replace(match[0].Groups["value"].Value' "\\'"' "")' CultureInfo.InvariantCulture);                    var unit = match[0].Groups["unit"].Value.ToLower();                    switch (unit)                  {                      case "kb":                          return ConvertToBytes(Convert.ToDouble(value)' 1' defaultToBinaryPrefix);                      case "mb":                          return ConvertToBytes(Convert.ToDouble(value)' 2' defaultToBinaryPrefix);                      case "gb":                          return ConvertToBytes(Convert.ToDouble(value)' 3' defaultToBinaryPrefix);                      case "kib":                          return ConvertToBytes(Convert.ToDouble(value)' 1' true);                      case "mib":                          return ConvertToBytes(Convert.ToDouble(value)' 2' true);                      case "gib":                          return ConvertToBytes(Convert.ToDouble(value)' 3' true);                      default:                          return (long)value;                  }              }
Magic Number,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ParseSize,The following statement contains a magic number: if (match.Count != 0)              {                  var value = decimal.Parse(Regex.Replace(match[0].Groups["value"].Value' "\\'"' "")' CultureInfo.InvariantCulture);                    var unit = match[0].Groups["unit"].Value.ToLower();                    switch (unit)                  {                      case "kb":                          return ConvertToBytes(Convert.ToDouble(value)' 1' defaultToBinaryPrefix);                      case "mb":                          return ConvertToBytes(Convert.ToDouble(value)' 2' defaultToBinaryPrefix);                      case "gb":                          return ConvertToBytes(Convert.ToDouble(value)' 3' defaultToBinaryPrefix);                      case "kib":                          return ConvertToBytes(Convert.ToDouble(value)' 1' true);                      case "mib":                          return ConvertToBytes(Convert.ToDouble(value)' 2' true);                      case "gib":                          return ConvertToBytes(Convert.ToDouble(value)' 3' true);                      default:                          return (long)value;                  }              }
Magic Number,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ParseSize,The following statement contains a magic number: if (match.Count != 0)              {                  var value = decimal.Parse(Regex.Replace(match[0].Groups["value"].Value' "\\'"' "")' CultureInfo.InvariantCulture);                    var unit = match[0].Groups["unit"].Value.ToLower();                    switch (unit)                  {                      case "kb":                          return ConvertToBytes(Convert.ToDouble(value)' 1' defaultToBinaryPrefix);                      case "mb":                          return ConvertToBytes(Convert.ToDouble(value)' 2' defaultToBinaryPrefix);                      case "gb":                          return ConvertToBytes(Convert.ToDouble(value)' 3' defaultToBinaryPrefix);                      case "kib":                          return ConvertToBytes(Convert.ToDouble(value)' 1' true);                      case "mib":                          return ConvertToBytes(Convert.ToDouble(value)' 2' true);                      case "gib":                          return ConvertToBytes(Convert.ToDouble(value)' 3' true);                      default:                          return (long)value;                  }              }
Magic Number,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ParseSize,The following statement contains a magic number: if (match.Count != 0)              {                  var value = decimal.Parse(Regex.Replace(match[0].Groups["value"].Value' "\\'"' "")' CultureInfo.InvariantCulture);                    var unit = match[0].Groups["unit"].Value.ToLower();                    switch (unit)                  {                      case "kb":                          return ConvertToBytes(Convert.ToDouble(value)' 1' defaultToBinaryPrefix);                      case "mb":                          return ConvertToBytes(Convert.ToDouble(value)' 2' defaultToBinaryPrefix);                      case "gb":                          return ConvertToBytes(Convert.ToDouble(value)' 3' defaultToBinaryPrefix);                      case "kib":                          return ConvertToBytes(Convert.ToDouble(value)' 1' true);                      case "mib":                          return ConvertToBytes(Convert.ToDouble(value)' 2' true);                      case "gib":                          return ConvertToBytes(Convert.ToDouble(value)' 3' true);                      default:                          return (long)value;                  }              }
Magic Number,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ConvertToBytes,The following statement contains a magic number: var prefix = binaryPrefix ? 1024 : 1000;
Magic Number,NzbDrone.Core.Indexers,RssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\RssParser.cs,ConvertToBytes,The following statement contains a magic number: var prefix = binaryPrefix ? 1024 : 1000;
Magic Number,NzbDrone.Core.Indexers.Fanzub,FanzubRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Fanzub\FanzubRequestGenerator.cs,FanzubRequestGenerator,The following statement contains a magic number: PageSize = 100;
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabCapabilities,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabCapabilities.cs,NewznabCapabilities,The following statement contains a magic number: DefaultPageSize = 100;
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabCapabilities,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabCapabilities.cs,NewznabCapabilities,The following statement contains a magic number: MaxPageSize = 100;
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabCapabilitiesProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabCapabilitiesProvider.cs,GetCapabilities,The following statement contains a magic number: var capabilities = _capabilitiesCache.Get(key' () => FetchCapabilities(indexerSettings)' TimeSpan.FromDays(7));
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,NewznabRequestGenerator,The following statement contains a magic number: MaxPages = 30;
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRequestGenerator.cs,NewznabRequestGenerator,The following statement contains a magic number: PageSize = 100;
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabRssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRssParser.cs,PreProcess,The following statement contains a magic number: if (code >= 100 && code <= 199)              {                  _logger.Warn("Invalid API Key: {0}"' errorMessage);                  throw new ApiKeyException("Invalid API key");              }
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabRssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabRssParser.cs,PreProcess,The following statement contains a magic number: if (code >= 100 && code <= 199)              {                  _logger.Warn("Invalid API Key: {0}"' errorMessage);                  throw new ApiKeyException("Invalid API key");              }
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabSettings.cs,NewznabSettings,The following statement contains a magic number: Categories = new[] { 5030' 5040 };
Magic Number,NzbDrone.Core.Indexers.Newznab,NewznabSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Newznab\NewznabSettings.cs,NewznabSettings,The following statement contains a magic number: Categories = new[] { 5030' 5040 };
Magic Number,NzbDrone.Core.Indexers.Nyaa,NyaaRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Nyaa\NyaaRequestGenerator.cs,NyaaRequestGenerator,The following statement contains a magic number: MaxPages = 30;
Magic Number,NzbDrone.Core.Indexers.Nyaa,NyaaRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Nyaa\NyaaRequestGenerator.cs,NyaaRequestGenerator,The following statement contains a magic number: PageSize = 100;
Magic Number,NzbDrone.Core.Indexers.Nyaa,NyaaRequestGenerator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Nyaa\NyaaRequestGenerator.cs,GetSearchRequests,The following statement contains a magic number: foreach (var queryTitle in searchCriteria.QueryTitles)              {                  var searchTitle = PrepareQuery(queryTitle);                    pageableRequests.Add(GetPagedRequests(MaxPages' $"{searchTitle}+{searchCriteria.AbsoluteEpisodeNumber:0}"));                    if (searchCriteria.AbsoluteEpisodeNumber < 10)                  {                      pageableRequests.Add(GetPagedRequests(MaxPages' $"{searchTitle}+{searchCriteria.AbsoluteEpisodeNumber:00}"));                  }              }
Magic Number,NzbDrone.Core.Indexers.Omgwtfnzbs,OmgwtfnzbsSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Omgwtfnzbs\OmgwtfnzbsSettings.cs,OmgwtfnzbsSettings,The following statement contains a magic number: Delay = 30;
Magic Number,NzbDrone.Core.Indexers.Rarbg,RarbgParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgParser.cs,ParseResponse,The following statement contains a magic number: if (jsonResponse.Resource.error_code.HasValue)              {                  if (jsonResponse.Resource.error_code == 20 || jsonResponse.Resource.error_code == 8)                  {                      // No results found                      return results;                  }                    throw new IndexerException(indexerResponse' "Indexer API call returned error {0}: {1}"' jsonResponse.Resource.error_code' jsonResponse.Resource.error);              }
Magic Number,NzbDrone.Core.Indexers.Rarbg,RarbgParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgParser.cs,ParseResponse,The following statement contains a magic number: if (jsonResponse.Resource.error_code.HasValue)              {                  if (jsonResponse.Resource.error_code == 20 || jsonResponse.Resource.error_code == 8)                  {                      // No results found                      return results;                  }                    throw new IndexerException(indexerResponse' "Indexer API call returned error {0}: {1}"' jsonResponse.Resource.error_code' jsonResponse.Resource.error);              }
Magic Number,NzbDrone.Core.Indexers.Rarbg,RarbgTokenProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgTokenProvider.cs,GetToken,The following statement contains a magic number: return _tokenCache.Get(settings.BaseUrl' () =>                  {                      var requestBuilder = new HttpRequestBuilder(settings.BaseUrl.Trim('/'))                          .WithRateLimit(3.0)                          .Resource("/pubapi_v2.php?get_token=get_token&app_id=Sonarr")                          .Accept(HttpAccept.Json);                        if (settings.CaptchaToken.IsNotNullOrWhiteSpace())                      {                          requestBuilder.UseSimplifiedUserAgent = true;                          requestBuilder.SetCookie("cf_clearance"' settings.CaptchaToken);                      }                        var response = _httpClient.Get<JObject>(requestBuilder.Build());                        return response.Resource["token"].ToString();                  }' TimeSpan.FromMinutes(14.0));
Magic Number,NzbDrone.Core.Indexers.Rarbg,RarbgTokenProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Rarbg\RarbgTokenProvider.cs,GetToken,The following statement contains a magic number: return _tokenCache.Get(settings.BaseUrl' () =>                  {                      var requestBuilder = new HttpRequestBuilder(settings.BaseUrl.Trim('/'))                          .WithRateLimit(3.0)                          .Resource("/pubapi_v2.php?get_token=get_token&app_id=Sonarr")                          .Accept(HttpAccept.Json);                        if (settings.CaptchaToken.IsNotNullOrWhiteSpace())                      {                          requestBuilder.UseSimplifiedUserAgent = true;                          requestBuilder.SetCookie("cf_clearance"' settings.CaptchaToken);                      }                        var response = _httpClient.Get<JObject>(requestBuilder.Build());                        return response.Resource["token"].ToString();                  }' TimeSpan.FromMinutes(14.0));
Magic Number,NzbDrone.Core.Indexers.TorrentRss,TorrentRssParserFactory,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssParserFactory.cs,GetParser,The following statement contains a magic number: var parserSettings = _settingsCache.Get(key' () => DetectParserSettings(indexerSettings)' TimeSpan.FromDays(7));
Magic Number,NzbDrone.Core.Indexers.TorrentRss,TorrentRssSettingsDetector,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\TorrentRss\TorrentRssSettingsDetector.cs,GetGenericTorrentRssParserSettings,The following statement contains a magic number: if (releases.Count(r => r.Size >= ValidSizeThreshold) > releases.Count() / 2)              {                  if (releases.Any(r => r.Size < ValidSizeThreshold))                  {                      _logger.Debug("Feed {0} contains very small releases."' response.Request.Url);                  }                  _logger.Trace("Feed has valid size in description.");                  return settings;              }
Magic Number,NzbDrone.Core.Indexers.Torznab,TorznabRssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torznab\TorznabRssParser.cs,PreProcess,The following statement contains a magic number: if (code >= 100 && code <= 199) throw new ApiKeyException("Invalid API key");
Magic Number,NzbDrone.Core.Indexers.Torznab,TorznabRssParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Indexers\Torznab\TorznabRssParser.cs,PreProcess,The following statement contains a magic number: if (code >= 100 && code <= 199) throw new ApiKeyException("Invalid API key");
Magic Number,NzbDrone.Core.IndexerSearch,EpisodeSearchService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\IndexerSearch\EpisodeSearchService.cs,Execute,The following statement contains a magic number: if (message.SeriesId.HasValue)              {                  episodes = _episodeService.GetEpisodeBySeries(message.SeriesId.Value)                                            .Where(e => e.Monitored &&                                                   !e.HasFile &&                                                   e.AirDateUtc.HasValue &&                                                   e.AirDateUtc.Value.Before(DateTime.UtcNow))                                            .ToList();              }                else              {                  episodes = _episodeService.EpisodesWithoutFiles(new PagingSpec<Episode>                                                                      {                                                                          Page = 1'                                                                          PageSize = 100000'                                                                          SortDirection = SortDirection.Ascending'                                                                          SortKey = "Id"'                                                                          FilterExpression =                                                                              v =>                                                                              v.Monitored == true &&                                                                              v.Series.Monitored == true                                                                      }).Records.ToList();              }
Magic Number,NzbDrone.Core.Instrumentation,DatabaseTarget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\DatabaseTarget.cs,Register,The following statement contains a magic number: var target = new SlowRunningAsyncTargetWrapper(this) { TimeToSleepBetweenBatches = 500 };
Magic Number,NzbDrone.Core.Instrumentation,DatabaseTarget,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\DatabaseTarget.cs,Write,The following statement contains a magic number: try              {                  var log = new Log();                  log.Time = logEvent.TimeStamp;                  log.Message = CleanseLogMessage.Cleanse(logEvent.FormattedMessage);                    log.Logger = logEvent.LoggerName;                    if (log.Logger.StartsWith("NzbDrone."))                  {                      log.Logger = log.Logger.Remove(0' 9);                  }                    if (logEvent.Exception != null)                  {                      if (string.IsNullOrWhiteSpace(log.Message))                      {                          log.Message = logEvent.Exception.Message;                      }                      else                      {                          log.Message += ": " + logEvent.Exception.Message;                      }                        log.Exception = logEvent.Exception.ToString();                      log.ExceptionType = logEvent.Exception.GetType().ToString();                  }                    log.Level = logEvent.Level.Name;                    var sqlCommand = new SQLiteCommand(INSERT_COMMAND' _connection);                    sqlCommand.Parameters.Add(new SQLiteParameter("Message"' DbType.String) { Value = log.Message });                  sqlCommand.Parameters.Add(new SQLiteParameter("Time"' DbType.DateTime) { Value = log.Time.ToUniversalTime() });                  sqlCommand.Parameters.Add(new SQLiteParameter("Logger"' DbType.String) { Value = log.Logger });                  sqlCommand.Parameters.Add(new SQLiteParameter("Exception"' DbType.String) { Value = log.Exception });                  sqlCommand.Parameters.Add(new SQLiteParameter("ExceptionType"' DbType.String) { Value = log.ExceptionType });                  sqlCommand.Parameters.Add(new SQLiteParameter("Level"' DbType.String) { Value = log.Level });                    sqlCommand.ExecuteNonQuery();              }              catch (SQLiteException ex)              {                  InternalLogger.Error(ex' "Unable to save log event to database");                  throw;              }
Magic Number,NzbDrone.Core.Instrumentation,LogRepository,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\LogRepository.cs,Trim,The following statement contains a magic number: var trimDate = DateTime.UtcNow.AddDays(-7).Date;
Magic Number,NzbDrone.Core.Instrumentation,SlowRunningAsyncTargetWrapper,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Instrumentation\SlowRunningAsyncTargetWrapper.cs,Write,The following statement contains a magic number: if (Interlocked.Exchange(ref _state' 2) <= 0)              { // Timer was idle. Starting.                  base.StartLazyWriterTimer();              }
Magic Number,NzbDrone.Core.Jobs,Scheduler,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\Scheduler.cs,Handle,The following statement contains a magic number: Timer.Interval = 1000 * 30;
Magic Number,NzbDrone.Core.Jobs,Scheduler,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\Scheduler.cs,Handle,The following statement contains a magic number: Timer.Interval = 1000 * 30;
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,Handle,The following statement contains a magic number: var defaultTasks = new[]                  {                      new ScheduledTask{ Interval = 1' TypeName = typeof(CheckForFinishedDownloadCommand).FullName}'                      new ScheduledTask{ Interval = 5' TypeName = typeof(MessagingCleanupCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(ApplicationUpdateCommand).FullName}'                      new ScheduledTask{ Interval = 3*60' TypeName = typeof(UpdateSceneMappingCommand).FullName}'                      new ScheduledTask{ Interval = 6*60' TypeName = typeof(CheckHealthCommand).FullName}'                      new ScheduledTask{ Interval = 12*60' TypeName = typeof(RefreshSeriesCommand).FullName}'                      new ScheduledTask{ Interval = 24*60' TypeName = typeof(HousekeepingCommand).FullName}'                      new ScheduledTask{ Interval = 7*24*60' TypeName = typeof(BackupCommand).FullName}'                        new ScheduledTask                      {                           Interval = GetRssSyncInterval()'                          TypeName = typeof(RssSyncCommand).FullName                      }'                        new ScheduledTask                      {                           Interval = _configService.DownloadedEpisodesScanInterval'                          TypeName = typeof(DownloadedEpisodesScanCommand).FullName                      }'                  };
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,GetRssSyncInterval,The following statement contains a magic number: if (interval > 0 && interval < 10)              {                  return 10;              }
Magic Number,NzbDrone.Core.Jobs,TaskManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Jobs\TaskManager.cs,GetRssSyncInterval,The following statement contains a magic number: if (interval > 0 && interval < 10)              {                  return 10;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaCover,MediaCoverService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaCover\MediaCoverService.cs,EnsureResizedCovers,The following statement contains a magic number: switch (cover.CoverType)              {                  default:                      return;                    case MediaCoverTypes.Poster:                  case MediaCoverTypes.Headshot:                      heights = new[] { 500' 250 };                      break;                    case MediaCoverTypes.Banner:                      heights = new[] { 70' 35 };                      break;                    case MediaCoverTypes.Fanart:                  case MediaCoverTypes.Screenshot:                      heights = new[] { 360' 180 };                      break;              }
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: if (series.Runtime <= 3)              {                  return 15;              }
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: if (series.Runtime <= 3)              {                  return 15;              }
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: if (series.Runtime <= 10)              {                  return 90;              }
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: if (series.Runtime <= 10)              {                  return 90;              }
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: if (series.Runtime <= 30)              {                  return 300;              }
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: if (series.Runtime <= 30)              {                  return 300;              }
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport,DetectSample,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\DetectSample.cs,GetMinimumAllowedRuntime,The following statement contains a magic number: return 600;
Magic Number,NzbDrone.Core.MediaFiles,DownloadedEpisodesImportService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\DownloadedEpisodesImportService.cs,ShouldDeleteFolder,The following statement contains a magic number: if (rarFiles.Any(f => _diskProvider.GetFileSize(f) > 10.Megabytes()))              {                  _logger.Warn("RAR file detected' will require manual cleanup");                  return false;              }
Magic Number,NzbDrone.Core.MediaFiles,RecycleBinProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\RecycleBinProvider.cs,Cleanup,The following statement contains a magic number: foreach (var folder in _diskProvider.GetDirectories(_configService.RecycleBin))              {                  if (_diskProvider.FolderGetLastWrite(folder).AddDays(7) > DateTime.UtcNow)                  {                      _logger.Debug("Folder hasn't expired yet' skipping: {0}"' folder);                      continue;                  }                    _diskProvider.DeleteFolder(folder' true);              }
Magic Number,NzbDrone.Core.MediaFiles,RecycleBinProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\RecycleBinProvider.cs,Cleanup,The following statement contains a magic number: foreach (var file in _diskProvider.GetFiles(_configService.RecycleBin' SearchOption.TopDirectoryOnly))              {                  if (_diskProvider.FileGetLastWrite(file).AddDays(7) > DateTime.UtcNow)                  {                      _logger.Debug("File hasn't expired yet' skipping: {0}"' file);                      continue;                  }                    _diskProvider.DeleteFile(file);              }
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,FreeSpaceSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\FreeSpaceSpecification.cs,IsSatisfiedBy,The following statement contains a magic number: try              {                  if (localEpisode.ExistingFile)                  {                      _logger.Debug("Skipping free space check for existing episode");                      return Decision.Accept();                  }                    var path = Directory.GetParent(localEpisode.Series.Path);                  var freeSpace = _diskProvider.GetAvailableSpace(path.FullName);                    if (!freeSpace.HasValue)                  {                      _logger.Debug("Free space check returned an invalid result for: {0}"' path);                      return Decision.Accept();                  }                    if (freeSpace < localEpisode.Size + 100.Megabytes())                  {                      _logger.Warn("Not enough free space ({0}) to import: {1} ({2})"' freeSpace' localEpisode' localEpisode.Size);                      return Decision.Reject("Not enough free space");                  }              }              catch (DirectoryNotFoundException ex)              {                  _logger.Error(ex' "Unable to check free disk space while importing.");              }              catch (Exception ex)              {                  _logger.Error(ex' "Unable to check free disk space while importing. {0}"' localEpisode.Path);              }
Magic Number,NzbDrone.Core.MediaFiles.EpisodeImport.Specifications,NotUnpackingSpecification,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\EpisodeImport\Specifications\NotUnpackingSpecification.cs,IsSatisfiedBy,The following statement contains a magic number: foreach (var workingFolder in _configService.DownloadClientWorkingFolders.Split('|'))              {                  DirectoryInfo parent = Directory.GetParent(localEpisode.Path);                  while (parent != null)                  {                      if (parent.Name.StartsWith(workingFolder))                      {                          if (OsInfo.IsNotWindows)                          {                              _logger.Debug("{0} is still being unpacked"' localEpisode.Path);                              return Decision.Reject("File is still being unpacked");                          }                            if (_diskProvider.FileGetLastWrite(localEpisode.Path) > DateTime.UtcNow.AddMinutes(-5))                          {                              _logger.Debug("{0} appears to be unpacking still"' localEpisode.Path);                              return Decision.Reject("File is still being unpacked");                          }                      }                        parent = parent.Parent;                  }              }
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfoFormatter,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoFormatter.cs,FormatAudioChannelsFromAudioChannels,The following statement contains a magic number: if (mediaInfo.SchemaRevision >= 3)              {                  Logger.Debug("Formatiting audio channels using 'AudioChannels'' with a value of: '{0}'"' audioChannels);                    return audioChannels;              }
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MakeStringParameter,The following statement contains a magic number: Array.Resize(ref buffer' buffer.Length + 4);
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MakeStringResult,The following statement contains a magic number: if (Encoding == Encoding.Unicode)              {                  return Marshal.PtrToStringUni(value);              }              else if (Encoding == Encoding.UTF32)              {                  int i = 0;                  for (; i < 1024; i += 4)                  {                      var data = Marshal.ReadInt32(value' i);                      if (data == 0)                      {                          break;                      }                  }                    var buffer = new byte[i];                  Marshal.Copy(value' buffer' 0' i);                    return Encoding.GetString(buffer' 0' i);              }              else              {                  return Marshal.PtrToStringAnsi(value);              }
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,MakeStringResult,The following statement contains a magic number: if (Encoding == Encoding.Unicode)              {                  return Marshal.PtrToStringUni(value);              }              else if (Encoding == Encoding.UTF32)              {                  int i = 0;                  for (; i < 1024; i += 4)                  {                      var data = Marshal.ReadInt32(value' i);                      if (data == 0)                      {                          break;                      }                  }                    var buffer = new byte[i];                  Marshal.Copy(value' buffer' 0' i);                    return Encoding.GetString(buffer' 0' i);              }              else              {                  return Marshal.PtrToStringAnsi(value);              }
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Open,The following statement contains a magic number: if (stream.Length < 1024)              {                  return 0;              }
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Open,The following statement contains a magic number: if (isValid == 1)              {                  var buffer = new byte[16 * 1024];                  long seekStart = 0;                  long totalRead = 0;                  int bufferRead;                    do                  {                      bufferRead = stream.Read(buffer' 0' buffer.Length);                      totalRead += bufferRead;                        var status = (BufferStatus)MediaInfo_Open_Buffer_Continue(_handle' buffer' (IntPtr)bufferRead);                        if (status.HasFlag(BufferStatus.Finalized) || status <= 0 || bufferRead == 0)                      {                          Logger.Trace("Read file offset {0}-{1} ({2} bytes)"' seekStart' stream.Position' stream.Position - seekStart);                          break;                      }                        var seekPos = MediaInfo_Open_Buffer_Continue_GoTo_Get(_handle);                      if (seekPos != -1)                      {                          Logger.Trace("Read file offset {0}-{1} ({2} bytes)"' seekStart' stream.Position' stream.Position - seekStart);                          seekPos = stream.Seek(seekPos' SeekOrigin.Begin);                          seekStart = seekPos;                          MediaInfo_Open_Buffer_Init(_handle' stream.Length' seekPos);                      }                  } while (bufferRead > 0);                    MediaInfo_Open_Buffer_Finalize(_handle);                    Logger.Trace("Read a total of {0} bytes ({1:0.0}%)"' totalRead' totalRead * 100.0 / stream.Length);              }
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Open,The following statement contains a magic number: if (isValid == 1)              {                  var buffer = new byte[16 * 1024];                  long seekStart = 0;                  long totalRead = 0;                  int bufferRead;                    do                  {                      bufferRead = stream.Read(buffer' 0' buffer.Length);                      totalRead += bufferRead;                        var status = (BufferStatus)MediaInfo_Open_Buffer_Continue(_handle' buffer' (IntPtr)bufferRead);                        if (status.HasFlag(BufferStatus.Finalized) || status <= 0 || bufferRead == 0)                      {                          Logger.Trace("Read file offset {0}-{1} ({2} bytes)"' seekStart' stream.Position' stream.Position - seekStart);                          break;                      }                        var seekPos = MediaInfo_Open_Buffer_Continue_GoTo_Get(_handle);                      if (seekPos != -1)                      {                          Logger.Trace("Read file offset {0}-{1} ({2} bytes)"' seekStart' stream.Position' stream.Position - seekStart);                          seekPos = stream.Seek(seekPos' SeekOrigin.Begin);                          seekStart = seekPos;                          MediaInfo_Open_Buffer_Init(_handle' stream.Length' seekPos);                      }                  } while (bufferRead > 0);                    MediaInfo_Open_Buffer_Finalize(_handle);                    Logger.Trace("Read a total of {0} bytes ({1:0.0}%)"' totalRead' totalRead * 100.0 / stream.Length);              }
Magic Number,NzbDrone.Core.MediaFiles.MediaInfo,MediaInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\MediaInfo\MediaInfoLib.cs,Open,The following statement contains a magic number: if (isValid == 1)              {                  var buffer = new byte[16 * 1024];                  long seekStart = 0;                  long totalRead = 0;                  int bufferRead;                    do                  {                      bufferRead = stream.Read(buffer' 0' buffer.Length);                      totalRead += bufferRead;                        var status = (BufferStatus)MediaInfo_Open_Buffer_Continue(_handle' buffer' (IntPtr)bufferRead);                        if (status.HasFlag(BufferStatus.Finalized) || status <= 0 || bufferRead == 0)                      {                          Logger.Trace("Read file offset {0}-{1} ({2} bytes)"' seekStart' stream.Position' stream.Position - seekStart);                          break;                      }                        var seekPos = MediaInfo_Open_Buffer_Continue_GoTo_Get(_handle);                      if (seekPos != -1)                      {                          Logger.Trace("Read file offset {0}-{1} ({2} bytes)"' seekStart' stream.Position' stream.Position - seekStart);                          seekPos = stream.Seek(seekPos' SeekOrigin.Begin);                          seekStart = seekPos;                          MediaInfo_Open_Buffer_Init(_handle' stream.Length' seekPos);                      }                  } while (bufferRead > 0);                    MediaInfo_Open_Buffer_Finalize(_handle);                    Logger.Trace("Read a total of {0} bytes ({1:0.0}%)"' totalRead' totalRead * 100.0 / stream.Length);              }
Magic Number,NzbDrone.Core.Messaging.Commands,CommandQueueManager,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Commands\CommandQueueManager.cs,CleanCommands,The following statement contains a magic number: var old = _commandCache.Values.Where(c => c.EndedAt < DateTime.UtcNow.AddMinutes(-5));
Magic Number,NzbDrone.Core.Messaging.Commands,TestCommand,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Messaging\Commands\TestCommand.cs,TestCommand,The following statement contains a magic number: Duration = 4000;
Magic Number,NzbDrone.Core.MetadataSource,SearchSeriesComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MetadataSource\SearchSeriesComparer.cs,GetYearFactor,The following statement contains a magic number: if (_year.HasValue)              {                  var offset = Math.Abs(series.Year - _year.Value);                  if (offset <= 1)                  {                      return 20 - 10 * offset;                  }              }
Magic Number,NzbDrone.Core.MetadataSource,SearchSeriesComparer,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MetadataSource\SearchSeriesComparer.cs,GetYearFactor,The following statement contains a magic number: if (_year.HasValue)              {                  var offset = Math.Abs(series.Year - _year.Value);                  if (offset <= 1)                  {                      return 20 - 10 * offset;                  }              }
Magic Number,NzbDrone.Core.Extras.Metadata.Consumers.Roksbox,RoksboxMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Roksbox\RoksboxMetadata.cs,EpisodeMetadata,The following statement contains a magic number: foreach (var episode in episodeFile.Episodes.Value)              {                  var sb = new StringBuilder();                  var xws = new XmlWriterSettings();                  xws.OmitXmlDeclaration = true;                  xws.Indent = false;                    using (var xw = XmlWriter.Create(sb' xws))                  {                      var doc = new XDocument();                        var details = new XElement("video");                      details.Add(new XElement("title"' string.Format("{0} - {1}x{2} - {3}"' series.Title' episode.SeasonNumber' episode.EpisodeNumber' episode.Title)));                      details.Add(new XElement("year"' episode.AirDate));                      details.Add(new XElement("genre"' string.Join(" / "' series.Genres)));                      var actors = string.Join(" ' "' series.Actors.ConvertAll(c => c.Name + " - " + c.Character).GetRange(0' Math.Min(3' series.Actors.Count)));                      details.Add(new XElement("actors"' actors));                      details.Add(new XElement("description"' episode.Overview));                      details.Add(new XElement("length"' series.Runtime));                        if (series.Certification.IsNotNullOrWhiteSpace() &&                          ValidCertification.Contains(series.Certification.ToUpperInvariant()))                      {                          details.Add(new XElement("mpaa"' series.Certification.ToUpperInvariant()));                      }                        else                      {                          details.Add(new XElement("mpaa"' "UNRATED"));                      }                        doc.Add(details);                      doc.Save(xw);                        xmlResult += doc.ToString();                      xmlResult += Environment.NewLine;                  }              }
Magic Number,NzbDrone.Core.Notifications.Plex,PlexHomeTheaterSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexHomeTheaterSettings.cs,PlexHomeTheaterSettings,The following statement contains a magic number: Port = 3005;
Magic Number,NzbDrone.Core.Notifications.Plex,PlexClientSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexClientSettings.cs,PlexClientSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Notifications.Plex,PlexClientSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexClientSettings.cs,PlexClientSettings,The following statement contains a magic number: Port = 3000;
Magic Number,NzbDrone.Core.Notifications.Plex,PlexServerSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexServerSettings.cs,PlexServerSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Notifications.Plex,PlexServerSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexServerSettings.cs,PlexServerSettings,The following statement contains a magic number: Port = 32400;
Magic Number,NzbDrone.Core.Notifications.Plex,PlexServerService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexServerService.cs,UpdateLibrary,The following statement contains a magic number: try              {                  _logger.Debug("Sending Update Request to Plex Server");                    var version = _versionCache.Get(settings.Host' () => GetVersion(settings)' TimeSpan.FromHours(2));                  ValidateVersion(version);                    var sections = GetSections(settings);                  var partialUpdates = _partialUpdateCache.Get(settings.Host' () => PartialUpdatesAllowed(settings' version)' TimeSpan.FromHours(2));                    if (partialUpdates)                  {                      UpdatePartialSection(series' sections' settings);                  }                    else                  {                      sections.ForEach(s => UpdateSection(s.Id' settings));                  }              }                catch(Exception ex)              {                  _logger.Warn(ex' "Failed to Update Plex host: " + settings.Host);                  throw;              }
Magic Number,NzbDrone.Core.Notifications.Plex,PlexServerService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexServerService.cs,UpdateLibrary,The following statement contains a magic number: try              {                  _logger.Debug("Sending Update Request to Plex Server");                    var version = _versionCache.Get(settings.Host' () => GetVersion(settings)' TimeSpan.FromHours(2));                  ValidateVersion(version);                    var sections = GetSections(settings);                  var partialUpdates = _partialUpdateCache.Get(settings.Host' () => PartialUpdatesAllowed(settings' version)' TimeSpan.FromHours(2));                    if (partialUpdates)                  {                      UpdatePartialSection(series' sections' settings);                  }                    else                  {                      sections.ForEach(s => UpdateSection(s.Id' settings));                  }              }                catch(Exception ex)              {                  _logger.Warn(ex' "Failed to Update Plex host: " + settings.Host);                  throw;              }
Magic Number,NzbDrone.Core.Notifications.Plex,PlexServerService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexServerService.cs,PartialUpdatesAllowed,The following statement contains a magic number: try              {                  if (version >= new Version(0' 9' 12' 0))                  {                      var preferences = GetPreferences(settings);                      var partialScanPreference = preferences.SingleOrDefault(p => p.Id.Equals("FSEventLibraryPartialScanEnabled"));                        if (partialScanPreference == null)                      {                          return false;                      }                        return Convert.ToBoolean(partialScanPreference.Value);                  }              }              catch (Exception ex)              {                  _logger.Warn(ex' "Unable to check if partial updates are allowed");              }
Magic Number,NzbDrone.Core.Notifications.Plex,PlexServerService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexServerService.cs,PartialUpdatesAllowed,The following statement contains a magic number: try              {                  if (version >= new Version(0' 9' 12' 0))                  {                      var preferences = GetPreferences(settings);                      var partialScanPreference = preferences.SingleOrDefault(p => p.Id.Equals("FSEventLibraryPartialScanEnabled"));                        if (partialScanPreference == null)                      {                          return false;                      }                        return Convert.ToBoolean(partialScanPreference.Value);                  }              }              catch (Exception ex)              {                  _logger.Warn(ex' "Unable to check if partial updates are allowed");              }
Magic Number,NzbDrone.Core.Notifications.Plex,PlexServerService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexServerService.cs,ValidateVersion,The following statement contains a magic number: if (version >= new Version(1' 3' 0) && version < new Version(1' 3' 1))              {                  throw new PlexVersionException("Found version {0}' upgrade to PMS 1.3.1 to fix library updating and then restart Sonarr"' version);              }
Magic Number,NzbDrone.Core.Notifications.Plex,PlexServerService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Plex\PlexServerService.cs,ValidateVersion,The following statement contains a magic number: if (version >= new Version(1' 3' 0) && version < new Version(1' 3' 1))              {                  throw new PlexVersionException("Found version {0}' upgrade to PMS 1.3.1 to fix library updating and then restart Sonarr"' version);              }
Magic Number,NzbDrone.Core.Notifications.Webhook,Webhook,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Webhook\Webhook.cs,SendWebhookTest,The following statement contains a magic number: try              {                  var payload = new WebhookGrabPayload                      {                          EventType = "Test"'                          Series = new WebhookSeries()                          {                              Id = 1'                              Title = "Test Title"'                              Path = "C:\\testpath"'                              TvdbId = 1234                          }'                          Episodes = new List<WebhookEpisode>() {                              new WebhookEpisode()                              {                                  Id = 123'                                  EpisodeNumber = 1'                                  SeasonNumber = 1'                                  Title = "Test title"                              }                          }                      };                    _proxy.SendWebhook(payload' Settings);              }              catch (WebhookException ex)              {                  return new NzbDroneValidationFailure("Url"' ex.Message);              }
Magic Number,NzbDrone.Core.Notifications.Webhook,Webhook,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Webhook\Webhook.cs,SendWebhookTest,The following statement contains a magic number: try              {                  var payload = new WebhookGrabPayload                      {                          EventType = "Test"'                          Series = new WebhookSeries()                          {                              Id = 1'                              Title = "Test Title"'                              Path = "C:\\testpath"'                              TvdbId = 1234                          }'                          Episodes = new List<WebhookEpisode>() {                              new WebhookEpisode()                              {                                  Id = 123'                                  EpisodeNumber = 1'                                  SeasonNumber = 1'                                  Title = "Test title"                              }                          }                      };                    _proxy.SendWebhook(payload' Settings);              }              catch (WebhookException ex)              {                  return new NzbDroneValidationFailure("Url"' ex.Message);              }
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _episode2 = new Episode              {                  SeasonNumber = 1'                  EpisodeNumber = 2'                  Title = "Episode Title (2)"'                  AbsoluteEpisodeNumber = 2              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _episode2 = new Episode              {                  SeasonNumber = 1'                  EpisodeNumber = 2'                  Title = "Episode Title (2)"'                  AbsoluteEpisodeNumber = 2              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _episode3 = new Episode              {                  SeasonNumber = 1'                  EpisodeNumber = 3'                  Title = "Episode Title (3)"'                  AbsoluteEpisodeNumber = 3              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _episode3 = new Episode              {                  SeasonNumber = 1'                  EpisodeNumber = 3'                  Title = "Episode Title (3)"'                  AbsoluteEpisodeNumber = 3              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: var mediaInfo = new MediaInfoModel()              {                  VideoCodec = "AVC"'                  VideoBitDepth = 8'                  AudioFormat = "DTS"'                  AudioChannels = 6'                  AudioChannelPositions = "3/2/0.1"'                  AudioLanguages = "English"'                  Subtitles = "English/German"              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: var mediaInfo = new MediaInfoModel()              {                  VideoCodec = "AVC"'                  VideoBitDepth = 8'                  AudioFormat = "DTS"'                  AudioChannels = 6'                  AudioChannelPositions = "3/2/0.1"'                  AudioLanguages = "English"'                  Subtitles = "English/German"              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: var mediaInfoAnime = new MediaInfoModel()              {                  VideoCodec = "AVC"'                  VideoBitDepth = 8'                  AudioFormat = "DTS"'                  AudioChannels = 6'                  AudioChannelPositions = "3/2/0.1"'                  AudioLanguages = "Japanese"'                  Subtitles = "Japanese/English"              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: var mediaInfoAnime = new MediaInfoModel()              {                  VideoCodec = "AVC"'                  VideoBitDepth = 8'                  AudioFormat = "DTS"'                  AudioChannels = 6'                  AudioChannelPositions = "3/2/0.1"'                  AudioLanguages = "Japanese"'                  Subtitles = "Japanese/English"              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _singleEpisodeFile = new EpisodeFile              {                  Quality = new QualityModel(Quality.HDTV720p' new Revision(2))'                  RelativePath = "Series.Title.S01E01.720p.HDTV.x264-EVOLVE.mkv"'                  SceneName = "Series.Title.S01E01.720p.HDTV.x264-EVOLVE"'                  ReleaseGroup = "RlsGrp"'                  MediaInfo = mediaInfo              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _multiEpisodeFile = new EpisodeFile              {                  Quality = new QualityModel(Quality.HDTV720p' new Revision(2))'                  RelativePath = "Series.Title.S01E01-E03.720p.HDTV.x264-EVOLVE.mkv"'                  SceneName = "Series.Title.S01E01-E03.720p.HDTV.x264-EVOLVE"'                  ReleaseGroup = "RlsGrp"'                  MediaInfo = mediaInfo'              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _dailyEpisodeFile = new EpisodeFile              {                  Quality = new QualityModel(Quality.HDTV720p' new Revision(2))'                  RelativePath = "Series.Title.2013.10.30.HDTV.x264-EVOLVE.mkv"'                  SceneName = "Series.Title.2013.10.30.HDTV.x264-EVOLVE"'                  ReleaseGroup = "RlsGrp"'                  MediaInfo = mediaInfo              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _animeEpisodeFile = new EpisodeFile              {                  Quality = new QualityModel(Quality.HDTV720p' new Revision(2))'                  RelativePath = "[RlsGroup] Series Title - 001 [720p].mkv"'                  SceneName = "[RlsGroup] Series Title - 001 [720p]"'                  ReleaseGroup = "RlsGrp"'                  MediaInfo = mediaInfoAnime              };
Magic Number,NzbDrone.Core.Organizer,FileNameSampleService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Organizer\FileNameSampleService.cs,FileNameSampleService,The following statement contains a magic number: _animeMultiEpisodeFile = new EpisodeFile              {                  Quality = new QualityModel(Quality.HDTV720p' new Revision(2))'                  RelativePath = "[RlsGroup] Series Title - 001 - 103 [720p].mkv"'                  SceneName = "[RlsGroup] Series Title - 001 - 103 [720p]"'                  ReleaseGroup = "RlsGrp"'                  MediaInfo = mediaInfoAnime              };
Magic Number,NzbDrone.Core.Parser,IsoLanguages,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\IsoLanguages.cs,Find,The following statement contains a magic number: if (isoCode.Length == 2)              {                  //Lookup ISO639-1 code                  return All.SingleOrDefault(l => l.TwoLetterCode == isoCode);              }              else if (isoCode.Length == 3)              {                  //Lookup ISO639-2T code                  return All.SingleOrDefault(l => l.ThreeLetterCode == isoCode);              }
Magic Number,NzbDrone.Core.Parser,IsoLanguages,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\IsoLanguages.cs,Find,The following statement contains a magic number: if (isoCode.Length == 2)              {                  //Lookup ISO639-1 code                  return All.SingleOrDefault(l => l.TwoLetterCode == isoCode);              }              else if (isoCode.Length == 3)              {                  //Lookup ISO639-2T code                  return All.SingleOrDefault(l => l.ThreeLetterCode == isoCode);              }
Magic Number,NzbDrone.Core.Parser,Parser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseMatchCollection,The following statement contains a magic number: if (airYear < 1900)              {                  var seasons = new List<int>();                    foreach (Capture seasonCapture in matchCollection[0].Groups["season"].Captures)                  {                      int parsedSeason;                      if (int.TryParse(seasonCapture.Value' out parsedSeason))                          seasons.Add(parsedSeason);                  }                    //If no season was found it should be treated as a mini series and season 1                  if (seasons.Count == 0) seasons.Add(1);                    //If more than 1 season was parsed go to the next REGEX (A multi-season release is unlikely)                  if (seasons.Distinct().Count() > 1) return null;                    result = new ParsedEpisodeInfo                  {                      ReleaseTitle = releaseTitle'                      SeasonNumber = seasons.First()'                      EpisodeNumbers = new int[0]'                      AbsoluteEpisodeNumbers = new int[0]                  };                    foreach (Match matchGroup in matchCollection)                  {                      var episodeCaptures = matchGroup.Groups["episode"].Captures.Cast<Capture>().ToList();                      var absoluteEpisodeCaptures = matchGroup.Groups["absoluteepisode"].Captures.Cast<Capture>().ToList();                        //Allows use to return a list of 0 episodes (We can handle that as a full season release)                      if (episodeCaptures.Any())                      {                          var first = ParseNumber(episodeCaptures.First().Value);                          var last = ParseNumber(episodeCaptures.Last().Value);                            if (first > last)                          {                              return null;                          }                            var count = last - first + 1;                          result.EpisodeNumbers = Enumerable.Range(first' count).ToArray();                      }                        if (absoluteEpisodeCaptures.Any())                      {                          var first = Convert.ToInt32(absoluteEpisodeCaptures.First().Value);                          var last = Convert.ToInt32(absoluteEpisodeCaptures.Last().Value);                            if (first > last)                          {                              return null;                          }                            var count = last - first + 1;                          result.AbsoluteEpisodeNumbers = Enumerable.Range(first' count).ToArray();                            if (matchGroup.Groups["special"].Success)                          {                              result.Special = true;                          }                      }                        if (!episodeCaptures.Any() && !absoluteEpisodeCaptures.Any())                      {                          //Check to see if this is an "Extras" or "SUBPACK" release' if it is' set                          // IsSeasonExtra so they can be filtered out                          if (!matchCollection[0].Groups["extras"].Value.IsNullOrWhiteSpace())                          {                              result.IsSeasonExtra = true;                          }                            // Partial season packs will have a seasonpart group so they can be differentiated                          // from a full season/single episode release                          var seasonPart = matchCollection[0].Groups["seasonpart"].Value;                            if (seasonPart.IsNotNullOrWhiteSpace())                          {                              result.SeasonPart = Convert.ToInt32(seasonPart);                              result.IsPartialSeason = true;                          }                          else                          {                              result.FullSeason = true;                          }                      }                  }                    if (result.AbsoluteEpisodeNumbers.Any() && !result.EpisodeNumbers.Any())                  {                      result.SeasonNumber = 0;                  }              }                else              {                  //Try to Parse as a daily show                  var airmonth = Convert.ToInt32(matchCollection[0].Groups["airmonth"].Value);                  var airday = Convert.ToInt32(matchCollection[0].Groups["airday"].Value);                    //Swap day and month if month is bigger than 12 (scene fail)                  if (airmonth > 12)                  {                      var tempDay = airday;                      airday = airmonth;                      airmonth = tempDay;                  }                    DateTime airDate;                    try                  {                      airDate = new DateTime(airYear' airmonth' airday);                  }                  catch (Exception)                  {                      throw new InvalidDateException("Invalid date found: {0}-{1}-{2}"' airYear' airmonth' airday);                  }                    //Check if episode is in the future (most likely a parse error)                  if (airDate > DateTime.Now.AddDays(1).Date || airDate < new DateTime(1970' 1' 1))                  {                      throw new InvalidDateException("Invalid date found: {0}"' airDate);                  }                    result = new ParsedEpisodeInfo                  {                      ReleaseTitle = releaseTitle'                      AirDate = airDate.ToString(Episode.AIR_DATE_FORMAT)'                  };              }
Magic Number,NzbDrone.Core.Parser,Parser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseMatchCollection,The following statement contains a magic number: if (airYear < 1900)              {                  var seasons = new List<int>();                    foreach (Capture seasonCapture in matchCollection[0].Groups["season"].Captures)                  {                      int parsedSeason;                      if (int.TryParse(seasonCapture.Value' out parsedSeason))                          seasons.Add(parsedSeason);                  }                    //If no season was found it should be treated as a mini series and season 1                  if (seasons.Count == 0) seasons.Add(1);                    //If more than 1 season was parsed go to the next REGEX (A multi-season release is unlikely)                  if (seasons.Distinct().Count() > 1) return null;                    result = new ParsedEpisodeInfo                  {                      ReleaseTitle = releaseTitle'                      SeasonNumber = seasons.First()'                      EpisodeNumbers = new int[0]'                      AbsoluteEpisodeNumbers = new int[0]                  };                    foreach (Match matchGroup in matchCollection)                  {                      var episodeCaptures = matchGroup.Groups["episode"].Captures.Cast<Capture>().ToList();                      var absoluteEpisodeCaptures = matchGroup.Groups["absoluteepisode"].Captures.Cast<Capture>().ToList();                        //Allows use to return a list of 0 episodes (We can handle that as a full season release)                      if (episodeCaptures.Any())                      {                          var first = ParseNumber(episodeCaptures.First().Value);                          var last = ParseNumber(episodeCaptures.Last().Value);                            if (first > last)                          {                              return null;                          }                            var count = last - first + 1;                          result.EpisodeNumbers = Enumerable.Range(first' count).ToArray();                      }                        if (absoluteEpisodeCaptures.Any())                      {                          var first = Convert.ToInt32(absoluteEpisodeCaptures.First().Value);                          var last = Convert.ToInt32(absoluteEpisodeCaptures.Last().Value);                            if (first > last)                          {                              return null;                          }                            var count = last - first + 1;                          result.AbsoluteEpisodeNumbers = Enumerable.Range(first' count).ToArray();                            if (matchGroup.Groups["special"].Success)                          {                              result.Special = true;                          }                      }                        if (!episodeCaptures.Any() && !absoluteEpisodeCaptures.Any())                      {                          //Check to see if this is an "Extras" or "SUBPACK" release' if it is' set                          // IsSeasonExtra so they can be filtered out                          if (!matchCollection[0].Groups["extras"].Value.IsNullOrWhiteSpace())                          {                              result.IsSeasonExtra = true;                          }                            // Partial season packs will have a seasonpart group so they can be differentiated                          // from a full season/single episode release                          var seasonPart = matchCollection[0].Groups["seasonpart"].Value;                            if (seasonPart.IsNotNullOrWhiteSpace())                          {                              result.SeasonPart = Convert.ToInt32(seasonPart);                              result.IsPartialSeason = true;                          }                          else                          {                              result.FullSeason = true;                          }                      }                  }                    if (result.AbsoluteEpisodeNumbers.Any() && !result.EpisodeNumbers.Any())                  {                      result.SeasonNumber = 0;                  }              }                else              {                  //Try to Parse as a daily show                  var airmonth = Convert.ToInt32(matchCollection[0].Groups["airmonth"].Value);                  var airday = Convert.ToInt32(matchCollection[0].Groups["airday"].Value);                    //Swap day and month if month is bigger than 12 (scene fail)                  if (airmonth > 12)                  {                      var tempDay = airday;                      airday = airmonth;                      airmonth = tempDay;                  }                    DateTime airDate;                    try                  {                      airDate = new DateTime(airYear' airmonth' airday);                  }                  catch (Exception)                  {                      throw new InvalidDateException("Invalid date found: {0}-{1}-{2}"' airYear' airmonth' airday);                  }                    //Check if episode is in the future (most likely a parse error)                  if (airDate > DateTime.Now.AddDays(1).Date || airDate < new DateTime(1970' 1' 1))                  {                      throw new InvalidDateException("Invalid date found: {0}"' airDate);                  }                    result = new ParsedEpisodeInfo                  {                      ReleaseTitle = releaseTitle'                      AirDate = airDate.ToString(Episode.AIR_DATE_FORMAT)'                  };              }
Magic Number,NzbDrone.Core.Parser,Parser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Parser.cs,ParseMatchCollection,The following statement contains a magic number: if (airYear < 1900)              {                  var seasons = new List<int>();                    foreach (Capture seasonCapture in matchCollection[0].Groups["season"].Captures)                  {                      int parsedSeason;                      if (int.TryParse(seasonCapture.Value' out parsedSeason))                          seasons.Add(parsedSeason);                  }                    //If no season was found it should be treated as a mini series and season 1                  if (seasons.Count == 0) seasons.Add(1);                    //If more than 1 season was parsed go to the next REGEX (A multi-season release is unlikely)                  if (seasons.Distinct().Count() > 1) return null;                    result = new ParsedEpisodeInfo                  {                      ReleaseTitle = releaseTitle'                      SeasonNumber = seasons.First()'                      EpisodeNumbers = new int[0]'                      AbsoluteEpisodeNumbers = new int[0]                  };                    foreach (Match matchGroup in matchCollection)                  {                      var episodeCaptures = matchGroup.Groups["episode"].Captures.Cast<Capture>().ToList();                      var absoluteEpisodeCaptures = matchGroup.Groups["absoluteepisode"].Captures.Cast<Capture>().ToList();                        //Allows use to return a list of 0 episodes (We can handle that as a full season release)                      if (episodeCaptures.Any())                      {                          var first = ParseNumber(episodeCaptures.First().Value);                          var last = ParseNumber(episodeCaptures.Last().Value);                            if (first > last)                          {                              return null;                          }                            var count = last - first + 1;                          result.EpisodeNumbers = Enumerable.Range(first' count).ToArray();                      }                        if (absoluteEpisodeCaptures.Any())                      {                          var first = Convert.ToInt32(absoluteEpisodeCaptures.First().Value);                          var last = Convert.ToInt32(absoluteEpisodeCaptures.Last().Value);                            if (first > last)                          {                              return null;                          }                            var count = last - first + 1;                          result.AbsoluteEpisodeNumbers = Enumerable.Range(first' count).ToArray();                            if (matchGroup.Groups["special"].Success)                          {                              result.Special = true;                          }                      }                        if (!episodeCaptures.Any() && !absoluteEpisodeCaptures.Any())                      {                          //Check to see if this is an "Extras" or "SUBPACK" release' if it is' set                          // IsSeasonExtra so they can be filtered out                          if (!matchCollection[0].Groups["extras"].Value.IsNullOrWhiteSpace())                          {                              result.IsSeasonExtra = true;                          }                            // Partial season packs will have a seasonpart group so they can be differentiated                          // from a full season/single episode release                          var seasonPart = matchCollection[0].Groups["seasonpart"].Value;                            if (seasonPart.IsNotNullOrWhiteSpace())                          {                              result.SeasonPart = Convert.ToInt32(seasonPart);                              result.IsPartialSeason = true;                          }                          else                          {                              result.FullSeason = true;                          }                      }                  }                    if (result.AbsoluteEpisodeNumbers.Any() && !result.EpisodeNumbers.Any())                  {                      result.SeasonNumber = 0;                  }              }                else              {                  //Try to Parse as a daily show                  var airmonth = Convert.ToInt32(matchCollection[0].Groups["airmonth"].Value);                  var airday = Convert.ToInt32(matchCollection[0].Groups["airday"].Value);                    //Swap day and month if month is bigger than 12 (scene fail)                  if (airmonth > 12)                  {                      var tempDay = airday;                      airday = airmonth;                      airmonth = tempDay;                  }                    DateTime airDate;                    try                  {                      airDate = new DateTime(airYear' airmonth' airday);                  }                  catch (Exception)                  {                      throw new InvalidDateException("Invalid date found: {0}-{1}-{2}"' airYear' airmonth' airday);                  }                    //Check if episode is in the future (most likely a parse error)                  if (airDate > DateTime.Now.AddDays(1).Date || airDate < new DateTime(1970' 1' 1))                  {                      throw new InvalidDateException("Invalid date found: {0}"' airDate);                  }                    result = new ParsedEpisodeInfo                  {                      ReleaseTitle = releaseTitle'                      AirDate = airDate.ToString(Episode.AIR_DATE_FORMAT)'                  };              }
Magic Number,NzbDrone.Core.Parser,QualityParser,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\QualityParser.cs,ParseQualityModifiers,The following statement contains a magic number: if (ProperRegex.IsMatch(normalizedName))              {                  result.Revision.Version = 2;              }
Magic Number,NzbDrone.Core.Profiles.Delay,DelayProfileService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Profiles\Delay\DelayProfileService.cs,BestForTags,The following statement contains a magic number: return _bestForTagsCache.Get(key' () => FetchBestForTags(tagIds)' TimeSpan.FromSeconds(30));
Magic Number,NzbDrone.Core.Qualities,Revision,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Revision.cs,GetHashCode,The following statement contains a magic number: return Version ^ Real << 8;
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,Quality,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\Quality.cs,Quality,The following statement contains a magic number: DefaultQualityDefinitions = new HashSet<QualityDefinition>              {                  new QualityDefinition(Quality.Unknown)     { Weight = 1'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.SDTV)        { Weight = 2'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL480p)   { Weight = 3'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.DVD)         { Weight = 4'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV720p)    { Weight = 5'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV1080p)   { Weight = 6'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.RAWHD)       { Weight = 7'  MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL720p)   { Weight = 8'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray720p)  { Weight = 9'  MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.WEBDL1080p)  { Weight = 10' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.Bluray1080p) { Weight = 11' MinSize = 0' MaxSize = 100 }'                  new QualityDefinition(Quality.HDTV2160p)   { Weight = 12' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.WEBDL2160p)  { Weight = 13' MinSize = 0' MaxSize = null }'                  new QualityDefinition(Quality.Bluray2160p) { Weight = 14' MinSize = 0' MaxSize = null }'              };
Magic Number,NzbDrone.Core.Qualities,QualityDefinitionService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\QualityDefinitionService.cs,GetAll,The following statement contains a magic number: return _cache.Get("all"' () => _repo.All().Select(WithWeight).ToDictionary(v => v.Quality)' TimeSpan.FromSeconds(5.0));
Magic Number,NzbDrone.Core.Qualities,QualityModel,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\QualityModel.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  hash = hash * 23 + Revision.GetHashCode();                  hash = hash * 23 + Quality.GetHashCode();                  return hash;              }
Magic Number,NzbDrone.Core.Qualities,QualityModel,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\QualityModel.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  hash = hash * 23 + Revision.GetHashCode();                  hash = hash * 23 + Quality.GetHashCode();                  return hash;              }
Magic Number,NzbDrone.Core.Qualities,QualityModel,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Qualities\QualityModel.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  hash = hash * 23 + Revision.GetHashCode();                  hash = hash * 23 + Quality.GetHashCode();                  return hash;              }
Magic Number,NzbDrone.Core.RemotePathMappings,RemotePathMappingService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\RemotePathMappings\RemotePathMappingService.cs,All,The following statement contains a magic number: return _cache.Get("all"' () => _remotePathMappingRepository.All().ToList()' TimeSpan.FromSeconds(10));
Magic Number,NzbDrone.Core.Notifications.Email,EmailSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Email\EmailSettings.cs,EmailSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Notifications.Email,EmailSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Email\EmailSettings.cs,EmailSettings,The following statement contains a magic number: Port = 25;
Magic Number,NzbDrone.Core.Notifications.Growl,GrowlService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlService.cs,SendNotification,The following statement contains a magic number: requestState.Wait(5000);
Magic Number,NzbDrone.Core.Notifications.Growl,GrowlService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlService.cs,Register,The following statement contains a magic number: requestState.Wait(5000);
Magic Number,NzbDrone.Core.Notifications.Growl,GrowlSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlSettings.cs,GrowlSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Port).InclusiveBetween(1' 65535);
Magic Number,NzbDrone.Core.Notifications.Growl,GrowlSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Growl\GrowlSettings.cs,GrowlSettings,The following statement contains a magic number: Port = 23053;
Magic Number,NzbDrone.Core.Notifications.Emby,MediaBrowserSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\MediaBrowser\MediaBrowserSettings.cs,MediaBrowserSettings,The following statement contains a magic number: Port = 8096;
Magic Number,NzbDrone.Core.Notifications.Pushover,PushoverSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Pushover\PushoverSettings.cs,PushoverSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Retry).GreaterThanOrEqualTo(30).LessThanOrEqualTo(86400).When(c => (PushoverPriority)c.Priority == PushoverPriority.Emergency);
Magic Number,NzbDrone.Core.Notifications.Pushover,PushoverSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Pushover\PushoverSettings.cs,PushoverSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Retry).GreaterThanOrEqualTo(30).LessThanOrEqualTo(86400).When(c => (PushoverPriority)c.Priority == PushoverPriority.Emergency);
Magic Number,NzbDrone.Core.Notifications.Pushover,PushoverSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Pushover\PushoverSettings.cs,PushoverSettingsValidator,The following statement contains a magic number: RuleFor(c => c.Retry).GreaterThanOrEqualTo(0).LessThanOrEqualTo(86400).When(c => (PushoverPriority)c.Priority == PushoverPriority.Emergency);
Magic Number,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,CanHandle,The following statement contains a magic number: return version < new XbmcVersion(5);
Magic Number,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,Notify,The following statement contains a magic number: var notification = string.Format("Notification({0}'{1}'{2}'{3})"' title' message' settings.DisplayTime * 1000' "https://raw.github.com/Sonarr/Sonarr/develop/Logo/64.png");
Magic Number,NzbDrone.Core.Notifications.Xbmc,HttpApiProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\HttpApiProvider.cs,CheckForError,The following statement contains a magic number: if (errorIndex > -1)              {                  var errorMessage = response.Substring(errorIndex + 6);                  errorMessage = errorMessage.Substring(0' errorMessage.IndexOfAny(new char[] { '<'' ';' }));                    _logger.Debug("Error found in response: {0}"' errorMessage);                  return true;              }
Magic Number,NzbDrone.Core.Notifications.Xbmc,JsonApiProvider,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\JsonApiProvider.cs,CanHandle,The following statement contains a magic number: return version >= new XbmcVersion(5);
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcJsonApiProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcJsonApiProxy.cs,Notify,The following statement contains a magic number: parameters.Add("displaytime"' settings.DisplayTime * 1000);
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcJsonApiProxy,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcJsonApiProxy.cs,ProcessRequest,The following statement contains a magic number: request.AddBody(new { jsonrpc = "2.0"' method = method' id = 10' @params = parameters });
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcService.cs,GetJsonVersion,The following statement contains a magic number: return _xbmcVersionCache.Get(settings.Address' () =>              {                  var response = _proxy.GetJsonVersion(settings);                    _logger.Debug("Getting version from response: " + response);                  var result = Json.Deserialize<XbmcJsonResult<JObject>>(response);                    var versionObject = result.Result.Property("version");                    if (versionObject.Value.Type == JTokenType.Integer)                  {                      return new XbmcVersion((int)versionObject.Value);                  }                    if (versionObject.Value.Type == JTokenType.Object)                  {                      return Json.Deserialize<XbmcVersion>(versionObject.Value.ToString());                  }                    throw new InvalidCastException("Unknown Version structure!: " + versionObject);              }' TimeSpan.FromHours(12));
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcSettingsValidator,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcSettings.cs,XbmcSettingsValidator,The following statement contains a magic number: RuleFor(c => c.DisplayTime).GreaterThanOrEqualTo(2);
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcSettings.cs,XbmcSettings,The following statement contains a magic number: Port = 8080;
Magic Number,NzbDrone.Core.Notifications.Xbmc,XbmcSettings,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\XbmcSettings.cs,XbmcSettings,The following statement contains a magic number: DisplayTime = 5;
Magic Number,NzbDrone.Core.Notifications.Xbmc.Model,XbmcVersion,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\Model\XbmcVersion.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  hash = hash * 23 + Major.GetHashCode();                  hash = hash * 23 + Minor.GetHashCode();                  hash = hash * 23 + Patch.GetHashCode();                  return hash;              }
Magic Number,NzbDrone.Core.Notifications.Xbmc.Model,XbmcVersion,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\Model\XbmcVersion.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  hash = hash * 23 + Major.GetHashCode();                  hash = hash * 23 + Minor.GetHashCode();                  hash = hash * 23 + Patch.GetHashCode();                  return hash;              }
Magic Number,NzbDrone.Core.Notifications.Xbmc.Model,XbmcVersion,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\Model\XbmcVersion.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  hash = hash * 23 + Major.GetHashCode();                  hash = hash * 23 + Minor.GetHashCode();                  hash = hash * 23 + Patch.GetHashCode();                  return hash;              }
Magic Number,NzbDrone.Core.Notifications.Xbmc.Model,XbmcVersion,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Notifications\Xbmc\Model\XbmcVersion.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  hash = hash * 23 + Major.GetHashCode();                  hash = hash * 23 + Minor.GetHashCode();                  hash = hash * 23 + Patch.GetHashCode();                  return hash;              }
Magic Number,NzbDrone.Core.Parser.Model,RemoteEpisode,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Model\RemoteEpisode.cs,IsRecentEpisode,The following statement contains a magic number: return Episodes.Any(e => e.AirDateUtc >= DateTime.UtcNow.Date.AddDays(-14));
Magic Number,TinyTwitter,RequestBuilder,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\TinyTwitter.cs,GetTimestamp,The following statement contains a magic number: return ((int)(DateTime.UtcNow - new DateTime(1970' 1' 1)).TotalSeconds).ToString();
Magic Number,NzbDrone.Core.Tv,ShouldRefreshSeries,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\ShouldRefreshSeries.cs,ShouldRefresh,The following statement contains a magic number: if (series.LastInfoSync < DateTime.UtcNow.AddDays(-30))              {                  _logger.Trace("Series {0} last updated more than 30 days ago' should refresh."' series.Title);                  return true;              }
Magic Number,NzbDrone.Core.Tv,ShouldRefreshSeries,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\ShouldRefreshSeries.cs,ShouldRefresh,The following statement contains a magic number: if (series.LastInfoSync >= DateTime.UtcNow.AddHours(-6))              {                  _logger.Trace("Series {0} last updated less than 6 hours ago' should not be refreshed."' series.Title);                  return false;              }
Magic Number,NzbDrone.Core.Tv,ShouldRefreshSeries,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Tv\ShouldRefreshSeries.cs,ShouldRefresh,The following statement contains a magic number: if (lastEpisode != null && lastEpisode.AirDateUtc > DateTime.UtcNow.AddDays(-30))              {                  _logger.Trace("Last episode in {0} aired less than 30 days ago' should refresh."' series.Title);                  return true;              }
Magic Number,NzbDrone.Core.Validation,RuleBuilderExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidPort,The following statement contains a magic number: return ruleBuilder.SetValidator(new InclusiveBetweenValidator(1' 65535))                                .Must(x =>                                {                                    if (x <= 1024)                                    {                                        if (x == 80 || x == 443)                                        {                                            return true;                                        }                                          return false;                                    }                                      return true;                                });
Magic Number,NzbDrone.Core.Validation,RuleBuilderExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidPort,The following statement contains a magic number: return ruleBuilder.SetValidator(new InclusiveBetweenValidator(1' 65535))                                .Must(x =>                                {                                    if (x <= 1024)                                    {                                        if (x == 80 || x == 443)                                        {                                            return true;                                        }                                          return false;                                    }                                      return true;                                });
Magic Number,NzbDrone.Core.Validation,RuleBuilderExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidPort,The following statement contains a magic number: return ruleBuilder.SetValidator(new InclusiveBetweenValidator(1' 65535))                                .Must(x =>                                {                                    if (x <= 1024)                                    {                                        if (x == 80 || x == 443)                                        {                                            return true;                                        }                                          return false;                                    }                                      return true;                                });
Magic Number,NzbDrone.Core.Validation,RuleBuilderExtensions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Validation\RuleBuilderExtensions.cs,ValidPort,The following statement contains a magic number: return ruleBuilder.SetValidator(new InclusiveBetweenValidator(1' 65535))                                .Must(x =>                                {                                    if (x <= 1024)                                    {                                        if (x == 80 || x == 443)                                        {                                            return true;                                        }                                          return false;                                    }                                      return true;                                });
Missing Default,NzbDrone.Core.Download.Clients.DownloadStation,TorrentDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\TorrentDownloadStation.cs,GetStatus,The following switch statement is missing a default case: switch (torrent.Status)              {                  case DownloadStationTaskStatus.Waiting:                      return torrent.Size == 0 || GetRemainingSize(torrent) > 0 ? DownloadItemStatus.Queued : DownloadItemStatus.Completed;                  case DownloadStationTaskStatus.Paused:                      return DownloadItemStatus.Paused;                  case DownloadStationTaskStatus.Finished:                  case DownloadStationTaskStatus.Seeding:                      return DownloadItemStatus.Completed;                  case DownloadStationTaskStatus.Error:                      return DownloadItemStatus.Failed;              }
Missing Default,NzbDrone.Core.Download.Clients.DownloadStation,UsenetDownloadStation,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\DownloadStation\UsenetDownloadStation.cs,GetStatus,The following switch statement is missing a default case: switch (task.Status)              {                  case DownloadStationTaskStatus.Waiting:                      return task.Size == 0 || GetRemainingSize(task) > 0 ? DownloadItemStatus.Queued : DownloadItemStatus.Completed;                  case DownloadStationTaskStatus.Paused:                      return DownloadItemStatus.Paused;                  case DownloadStationTaskStatus.Finished:                  case DownloadStationTaskStatus.Seeding:                      return DownloadItemStatus.Completed;                  case DownloadStationTaskStatus.Error:                      return DownloadItemStatus.Failed;              }
Missing Default,NzbDrone.Core.Download.Clients.QBittorrent,QBittorrent,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Download\Clients\QBittorrent\QBittorrent.cs,SetInitialState,The following switch statement is missing a default case: switch ((QBittorrentState)Settings.InitialState)                  {                      case QBittorrentState.ForceStart:                          _proxy.SetForceStart(hash' true' Settings);                          break;                      case QBittorrentState.Start:                          _proxy.ResumeTorrent(hash' Settings);                          break;                      case QBittorrentState.Pause:                          _proxy.PauseTorrent(hash' Settings);                          break;                  }
Missing Default,NzbDrone.Core.Exceptions,StatusCodeToExceptions,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Exceptions\StatusCodeToExceptions.cs,VerifyStatusCode,The following switch statement is missing a default case: switch (statusCode)              {                  case HttpStatusCode.BadRequest:                      throw new BadRequestException(message);                    case HttpStatusCode.Unauthorized:                      throw new UnauthorizedAccessException(message);                    case HttpStatusCode.PaymentRequired:                      throw new DownstreamException(statusCode' message);                    case HttpStatusCode.InternalServerError:                      throw new DownstreamException(statusCode' message);              }
Missing Default,NzbDrone.Core.MediaFiles,UpdateEpisodeFileService,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\MediaFiles\UpdateEpisodeFileService.cs,ChangeFileDate,The following switch statement is missing a default case: switch (_configService.FileDate)              {                  case FileDateType.LocalAirDate:                      {                          var airDate = episodes.First().AirDate;                          var airTime = series.AirTime;                            if (airDate.IsNullOrWhiteSpace() || airTime.IsNullOrWhiteSpace())                          {                              return false;                          }                            return ChangeFileDateToLocalAirDate(episodeFilePath' airDate' airTime);                      }                    case FileDateType.UtcAirDate:                      {                          var airDateUtc = episodes.First().AirDateUtc;                            if (!airDateUtc.HasValue)                          {                              return false;                          }                            return ChangeFileDateToUtcAirDate(episodeFilePath' airDateUtc.Value);                      }              }
Missing Default,NzbDrone.Core.Extras.Metadata.Consumers.Wdtv,WdtvMetadata,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Extras\Metadata\Consumers\Wdtv\WdtvMetadata.cs,FindMetadataFile,The following switch statement is missing a default case: switch (Path.GetExtension(filename).ToLowerInvariant())                  {                      case ".xml":                          metadata.Type = MetadataType.EpisodeMetadata;                          return metadata;                      case ".metathumb":                          metadata.Type = MetadataType.EpisodeImage;                          return metadata;                  }
Missing Default,NzbDrone.Core.Parser.Model,TorrentInfo,C:\repos\Sonarr_Sonarr\src\NzbDrone.Core\Parser\Model\TorrentInfo.cs,ToString,The following switch statement is missing a default case: switch (format.ToUpperInvariant())              {                  case "L": // Long format                      stringBuilder.AppendLine("MagnetUrl: " + MagnetUrl ?? "Empty");                      stringBuilder.AppendLine("InfoHash: " + InfoHash ?? "Empty");                      stringBuilder.AppendLine("Seeders: " + Seeders ?? "Empty");                      stringBuilder.AppendLine("Peers: " + Peers ?? "Empty");                      break;              }
