Implementation smell,Namespace,Class,File,Method,Description
Long Method,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The method has 113 lines of code.
Long Method,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The method has 218 lines of code.
Long Parameter List,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesCPU,The method has 7 parameters. Parameters: callResult' putResult' stockPrice' optionStrike' optionYears' riskFree' volatility
Long Parameter List,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUKernel,The method has 7 parameters. Parameters: callResult' putResult' stockPrice' optionStrike' optionYears' riskFree' volatility
Long Parameter List,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUIterative,The method has 8 parameters. Parameters: callResult' putResult' stockPrice' optionStrike' optionYears' riskFree' volatility' iterations
Long Parameter List,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUSingleIteration,The method has 7 parameters. Parameters: callResult' putResult' stockPrice' optionStrike' optionYears' riskFree' volatility
Long Parameter List,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,NormsOfDifferenceVector,The method has 5 parameters. Parameters: reference' results' oneNorm' twoNorm' maxNorm
Long Identifier,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,,The length of the parameter m_addedCpuWorkerCompletedHandler is 32.
Long Identifier,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,,The length of the parameter m_addedGpuWorkerCompletedHandler is 32.
Long Identifier,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,,The length of the parameter numericUpDownGpuIterationCount is 30.
Long Identifier,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,,The length of the parameter numericUpDownCpuIterationCount is 30.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUIterative,The length of the statement  "            if (iterations < 1) { throw new ArgumentOutOfRangeException("iterations"' "The number of iterations cannot be less than one (1)."); } " is 133.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,backgroundWorkerCpu_DoWork,The length of the statement  "                BlackScholes.BlackScholesCPU(CallPrices' PutPrices' InputData.StockPrices' InputData.OptionStrikePrices' InputData.OptionTimeToExpiry' InputData.RiskFreeRate' InputData.Volatility); " is 181.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,backgroundWorkerCpu_DoWork,The length of the statement  "            // Set the worker's Result value to a new instance of BlackScholesWorkerOutputData' which simply combines the results into a single value " is 137.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,backgroundWorkerGpu_DoWork,The length of the statement  "            BlackScholes.BlackScholesGPUIterative(CallPrices' PutPrices' InputData.StockPrices' InputData.OptionStrikePrices' InputData.OptionTimeToExpiry' InputData.RiskFreeRate' InputData.Volatility' InputData.Iterations); " is 212.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,backgroundWorkerGpu_DoWork,The length of the statement  "            // Set the worker's Result value to a new instance of BlackScholesWorkerOutputData' which simply combines the results into a single value " is 137.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The length of the statement  "            // Use an anonymous method to handle the "RunWorkerCompleted" event of the CPU worker' so that it reports it's results' then starts the GPU worker " is 146.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The length of the statement  "                            textBoxOutput.AppendText(String.Format("Option Count: {0}"' (int)numericUpDownOptionCount.Value) + Environment.NewLine); " is 120.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The length of the statement  "                            double GibibytesTransferred = (5.0d * (double)numericUpDownOptionCount.Value * (double)sizeof(float) * 2.0d) / Math.Pow(2.0d' 30.0d);  // GiB transferred (per round-trip) " is 170.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The length of the statement  "                            textBoxOutput.AppendText(String.Format("Effective Host<->Device Memory Bandwidth (avg): {0} GiB/s"' GibibytesTransferred / (OutputDataGpu.CalculationTime.TotalMilliseconds / 1000.0d)) + Environment.NewLine);  // GiB transferred (round trip) per iteration / seconds per iteration " is 278.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The length of the statement  "                            textBoxOutput.AppendText(String.Format("GPU Speedup vs. CPU: ~{0}x"' (OutputDataCpu.CalculationTime.TotalMilliseconds / (int)numericUpDownCpuIterationCount.Value) / (OutputDataGpu.CalculationTime.TotalMilliseconds / (int)numericUpDownGpuIterationCount.Value)) + Environment.NewLine); " is 283.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The length of the statement  "                    // Perform the GPU-based calculations' creating a new instance of BlackScholesWorkerInputData which references the input-data arrays and passing it to the worker thread " is 168.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The length of the statement  "            // Perform the CPU-based calculations' creating a new instance of BlackScholesWorkerInputData which references the input-data arrays and passing it to the worker thread " is 168.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,NormsOfDifferenceVector,The length of the statement  "            else if (reference.Length != results.Length) { throw new ArgumentException("The result vector does not have the same length as the reference vector."' "results"); } " is 164.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The length of the statement  "            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 144.
Long Statement,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The length of the statement  "            this.groupBox2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 145.
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesCPU,The following statement contains a magic number: Parallel.For(0' callResult.Length' OptionIndex =>              {                  float s = stockPrice[OptionIndex];                  float x = optionStrike[OptionIndex];                  float t = optionYears[OptionIndex];                    // Calculate the square root of the time to option expiration' in years                  float SqrtT = (float)Math.Sqrt(t);                    // Calculate the Black-Scholes parameters                  float d1 = ((float)Math.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);                  float d2 = d1 - volatility * SqrtT;                    // Plug the parameters into the Cumulative Normal Distribution (CND)                  float K1 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d1));                  float CndD1 = RSQRT2PI * (float)Math.Exp(-0.5f * d1 * d1) * (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));                  if (d1 > 0) { CndD1 = 1.0f - CndD1; }                    float K2 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d2));                  float CndD2 = RSQRT2PI * (float)Math.Exp(-0.5f * d2 * d2) * (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));                  if (d2 > 0) { CndD2 = 1.0f - CndD2; }                    // Calculate the discount rate                  float ExpRT = (float)Math.Exp(-1.0f * riskFree * t);                    // Calculate the values of the call and put options                  callResult[OptionIndex] = s * CndD1 - x * ExpRT * CndD2;                  putResult[OptionIndex] = x * ExpRT * (1.0f - CndD2) - s * (1.0f - CndD1);              });
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesCPU,The following statement contains a magic number: Parallel.For(0' callResult.Length' OptionIndex =>              {                  float s = stockPrice[OptionIndex];                  float x = optionStrike[OptionIndex];                  float t = optionYears[OptionIndex];                    // Calculate the square root of the time to option expiration' in years                  float SqrtT = (float)Math.Sqrt(t);                    // Calculate the Black-Scholes parameters                  float d1 = ((float)Math.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);                  float d2 = d1 - volatility * SqrtT;                    // Plug the parameters into the Cumulative Normal Distribution (CND)                  float K1 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d1));                  float CndD1 = RSQRT2PI * (float)Math.Exp(-0.5f * d1 * d1) * (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));                  if (d1 > 0) { CndD1 = 1.0f - CndD1; }                    float K2 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d2));                  float CndD2 = RSQRT2PI * (float)Math.Exp(-0.5f * d2 * d2) * (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));                  if (d2 > 0) { CndD2 = 1.0f - CndD2; }                    // Calculate the discount rate                  float ExpRT = (float)Math.Exp(-1.0f * riskFree * t);                    // Calculate the values of the call and put options                  callResult[OptionIndex] = s * CndD1 - x * ExpRT * CndD2;                  putResult[OptionIndex] = x * ExpRT * (1.0f - CndD2) - s * (1.0f - CndD1);              });
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesCPU,The following statement contains a magic number: Parallel.For(0' callResult.Length' OptionIndex =>              {                  float s = stockPrice[OptionIndex];                  float x = optionStrike[OptionIndex];                  float t = optionYears[OptionIndex];                    // Calculate the square root of the time to option expiration' in years                  float SqrtT = (float)Math.Sqrt(t);                    // Calculate the Black-Scholes parameters                  float d1 = ((float)Math.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);                  float d2 = d1 - volatility * SqrtT;                    // Plug the parameters into the Cumulative Normal Distribution (CND)                  float K1 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d1));                  float CndD1 = RSQRT2PI * (float)Math.Exp(-0.5f * d1 * d1) * (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));                  if (d1 > 0) { CndD1 = 1.0f - CndD1; }                    float K2 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d2));                  float CndD2 = RSQRT2PI * (float)Math.Exp(-0.5f * d2 * d2) * (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));                  if (d2 > 0) { CndD2 = 1.0f - CndD2; }                    // Calculate the discount rate                  float ExpRT = (float)Math.Exp(-1.0f * riskFree * t);                    // Calculate the values of the call and put options                  callResult[OptionIndex] = s * CndD1 - x * ExpRT * CndD2;                  putResult[OptionIndex] = x * ExpRT * (1.0f - CndD2) - s * (1.0f - CndD1);              });
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesCPU,The following statement contains a magic number: Parallel.For(0' callResult.Length' OptionIndex =>              {                  float s = stockPrice[OptionIndex];                  float x = optionStrike[OptionIndex];                  float t = optionYears[OptionIndex];                    // Calculate the square root of the time to option expiration' in years                  float SqrtT = (float)Math.Sqrt(t);                    // Calculate the Black-Scholes parameters                  float d1 = ((float)Math.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);                  float d2 = d1 - volatility * SqrtT;                    // Plug the parameters into the Cumulative Normal Distribution (CND)                  float K1 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d1));                  float CndD1 = RSQRT2PI * (float)Math.Exp(-0.5f * d1 * d1) * (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));                  if (d1 > 0) { CndD1 = 1.0f - CndD1; }                    float K2 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d2));                  float CndD2 = RSQRT2PI * (float)Math.Exp(-0.5f * d2 * d2) * (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));                  if (d2 > 0) { CndD2 = 1.0f - CndD2; }                    // Calculate the discount rate                  float ExpRT = (float)Math.Exp(-1.0f * riskFree * t);                    // Calculate the values of the call and put options                  callResult[OptionIndex] = s * CndD1 - x * ExpRT * CndD2;                  putResult[OptionIndex] = x * ExpRT * (1.0f - CndD2) - s * (1.0f - CndD1);              });
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesCPU,The following statement contains a magic number: Parallel.For(0' callResult.Length' OptionIndex =>              {                  float s = stockPrice[OptionIndex];                  float x = optionStrike[OptionIndex];                  float t = optionYears[OptionIndex];                    // Calculate the square root of the time to option expiration' in years                  float SqrtT = (float)Math.Sqrt(t);                    // Calculate the Black-Scholes parameters                  float d1 = ((float)Math.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);                  float d2 = d1 - volatility * SqrtT;                    // Plug the parameters into the Cumulative Normal Distribution (CND)                  float K1 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d1));                  float CndD1 = RSQRT2PI * (float)Math.Exp(-0.5f * d1 * d1) * (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));                  if (d1 > 0) { CndD1 = 1.0f - CndD1; }                    float K2 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d2));                  float CndD2 = RSQRT2PI * (float)Math.Exp(-0.5f * d2 * d2) * (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));                  if (d2 > 0) { CndD2 = 1.0f - CndD2; }                    // Calculate the discount rate                  float ExpRT = (float)Math.Exp(-1.0f * riskFree * t);                    // Calculate the values of the call and put options                  callResult[OptionIndex] = s * CndD1 - x * ExpRT * CndD2;                  putResult[OptionIndex] = x * ExpRT * (1.0f - CndD2) - s * (1.0f - CndD1);              });
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUKernel,The following statement contains a magic number: float d1 = (DeviceMath.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUKernel,The following statement contains a magic number: float K1 = 1.0f / (1.0f + 0.2316419f * DeviceMath.Abs(d1));
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUKernel,The following statement contains a magic number: float CndD1 = RSQRT2PI * DeviceMath.Exp(-0.5f * d1 * d1) *                      (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUKernel,The following statement contains a magic number: float K2 = 1.0f / (1.0f + 0.2316419f * DeviceMath.Abs(d2));
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUKernel,The following statement contains a magic number: float CndD2 = RSQRT2PI * DeviceMath.Exp(-0.5f * d2 * d2) *                      (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUIterative,The following statement contains a magic number: Launcher.SetGridSize(480);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUIterative,The following statement contains a magic number: Launcher.SetBlockSize(128);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUSingleIteration,The following statement contains a magic number: Launcher.SetGridSize(480);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\BlackScholes.cs,BlackScholesGPUSingleIteration,The following statement contains a magic number: Launcher.SetBlockSize(128);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The following statement contains a magic number: StockPrices[i] = RandFloat(rand' 5.0f' 30.0f);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The following statement contains a magic number: StockPrices[i] = RandFloat(rand' 5.0f' 30.0f);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The following statement contains a magic number: OptionStrikePrices[i] = RandFloat(rand' 1.0f' 100.0f);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The following statement contains a magic number: OptionYears[i] = RandFloat(rand' 0.25f' 10.0f);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The following statement contains a magic number: OptionYears[i] = RandFloat(rand' 0.25f' 10.0f);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The following statement contains a magic number: backgroundWorkerCpu.RunWorkerCompleted += (cpuSender' cpuRunWorkerCompletedEventArgs) =>                  {                      // Preconditions                      if (cpuRunWorkerCompletedEventArgs == null) { throw new ArgumentNullException("cpuRunWorkerCompletedEventArgs"); }                        // Postconditions                      //                        // If an error occurred while calculating the results' display the error message in a MessageBox and stop calculating                      if (cpuRunWorkerCompletedEventArgs.Error != null)                      {                          MessageBox.Show(cpuRunWorkerCompletedEventArgs.Error.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                          buttonCalculate.Enabled = true;                          return;                      }                        // Get the output values from the CPU-based calculations                      BlackScholesWorkerOutputData OutputDataCpu = (BlackScholesWorkerOutputData)cpuRunWorkerCompletedEventArgs.Result;                        // Handle the "RunWorkerCompleted" event for the GPU worker' same as the CPU worker                      if (!m_addedGpuWorkerCompletedHandler)                      {                          m_addedGpuWorkerCompletedHandler = true;    // Set this flag to avoid adding the event handler multiple times                            backgroundWorkerGpu.RunWorkerCompleted += (gpuSender' gpuRunWorkerCompletedEventArgs) =>                          {                              // Preconditions                              if (gpuRunWorkerCompletedEventArgs == null) { throw new ArgumentNullException("gpuRunWorkerCompletedEventArgs"); }                                // Postconditions                              //                                // If an error occurred while calculating the results' display the error message in a MessageBox and stop calculating                              if (gpuRunWorkerCompletedEventArgs.Error != null)                              {                                  MessageBox.Show(gpuRunWorkerCompletedEventArgs.Error.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                                  buttonCalculate.Enabled = true;                                  return;                              }                                // Get the output values from the GPU-based calculations                              BlackScholesWorkerOutputData OutputDataGpu = (BlackScholesWorkerOutputData)gpuRunWorkerCompletedEventArgs.Result;                                // Print performance comparison data                              textBoxOutput.AppendText(String.Format("Option Count: {0}"' (int)numericUpDownOptionCount.Value) + Environment.NewLine);                              double GibibytesTransferred = (5.0d * (double)numericUpDownOptionCount.Value * (double)sizeof(float) * 2.0d) / Math.Pow(2.0d' 30.0d);  // GiB transferred (per round-trip)                              textBoxOutput.AppendText(String.Format("Effective Host<->Device Memory Bandwidth (avg): {0} GiB/s"' GibibytesTransferred / (OutputDataGpu.CalculationTime.TotalMilliseconds / 1000.0d)) + Environment.NewLine);  // GiB transferred (round trip) per iteration / seconds per iteration                              textBoxOutput.AppendText(String.Format("GPU Speedup vs. CPU: ~{0}x"' (OutputDataCpu.CalculationTime.TotalMilliseconds / (int)numericUpDownCpuIterationCount.Value) / (OutputDataGpu.CalculationTime.TotalMilliseconds / (int)numericUpDownGpuIterationCount.Value)) + Environment.NewLine);                              textBoxOutput.AppendText(Environment.NewLine);                                // Print message to console                              textBoxOutput.AppendText("Verifying calculations..." + Environment.NewLine);                                // Verify that GPU & CPU calculations match (their difference should be within a certain threshold)                              double OneNorm = 0d' TwoNorm = 0d' MaxNorm = 0d;                                // Call option verification                              textBoxOutput.AppendText("Call Option Price Data:" + Environment.NewLine);                              NormsOfDifferenceVector(OutputDataCpu.CallPrices' OutputDataGpu.CallPrices' out OneNorm' out TwoNorm' out MaxNorm);                                textBoxOutput.AppendText(String.Format("L1-Norm: {0}"' OneNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("L2-Norm: {0}"' TwoNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("Max-Norm: {0}"' MaxNorm) + Environment.NewLine);                                // Put option verification                              textBoxOutput.AppendText("Put Option Price Data:" + Environment.NewLine);                              NormsOfDifferenceVector(OutputDataCpu.PutPrices' OutputDataGpu.PutPrices' out OneNorm' out TwoNorm' out MaxNorm);                                textBoxOutput.AppendText(String.Format("L1 Norm: {0}"' OneNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("L2-Norm: {0}"' TwoNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("Max-Norm: {0}"' MaxNorm) + Environment.NewLine);                                // Enable the numeric controls again                              numericUpDownOptionCount.Enabled = true;                              numericUpDownGpuIterationCount.Enabled = true;                              numericUpDownCpuIterationCount.Enabled = true;                                // Enable the calculate button so the user can run the simulation again                              buttonCalculate.Enabled = true;                          };                      }                        // Perform the GPU-based calculations' creating a new instance of BlackScholesWorkerInputData which references the input-data arrays and passing it to the worker thread                      backgroundWorkerGpu.RunWorkerAsync(new BlackScholesWorkerInputData()                      {                          Iterations = (int)numericUpDownGpuIterationCount.Value'                          OptionStrikePrices = OptionStrikePrices'                          OptionTimeToExpiry = OptionYears'                          StockPrices = StockPrices                      });                  };
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The following statement contains a magic number: backgroundWorkerCpu.RunWorkerCompleted += (cpuSender' cpuRunWorkerCompletedEventArgs) =>                  {                      // Preconditions                      if (cpuRunWorkerCompletedEventArgs == null) { throw new ArgumentNullException("cpuRunWorkerCompletedEventArgs"); }                        // Postconditions                      //                        // If an error occurred while calculating the results' display the error message in a MessageBox and stop calculating                      if (cpuRunWorkerCompletedEventArgs.Error != null)                      {                          MessageBox.Show(cpuRunWorkerCompletedEventArgs.Error.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                          buttonCalculate.Enabled = true;                          return;                      }                        // Get the output values from the CPU-based calculations                      BlackScholesWorkerOutputData OutputDataCpu = (BlackScholesWorkerOutputData)cpuRunWorkerCompletedEventArgs.Result;                        // Handle the "RunWorkerCompleted" event for the GPU worker' same as the CPU worker                      if (!m_addedGpuWorkerCompletedHandler)                      {                          m_addedGpuWorkerCompletedHandler = true;    // Set this flag to avoid adding the event handler multiple times                            backgroundWorkerGpu.RunWorkerCompleted += (gpuSender' gpuRunWorkerCompletedEventArgs) =>                          {                              // Preconditions                              if (gpuRunWorkerCompletedEventArgs == null) { throw new ArgumentNullException("gpuRunWorkerCompletedEventArgs"); }                                // Postconditions                              //                                // If an error occurred while calculating the results' display the error message in a MessageBox and stop calculating                              if (gpuRunWorkerCompletedEventArgs.Error != null)                              {                                  MessageBox.Show(gpuRunWorkerCompletedEventArgs.Error.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                                  buttonCalculate.Enabled = true;                                  return;                              }                                // Get the output values from the GPU-based calculations                              BlackScholesWorkerOutputData OutputDataGpu = (BlackScholesWorkerOutputData)gpuRunWorkerCompletedEventArgs.Result;                                // Print performance comparison data                              textBoxOutput.AppendText(String.Format("Option Count: {0}"' (int)numericUpDownOptionCount.Value) + Environment.NewLine);                              double GibibytesTransferred = (5.0d * (double)numericUpDownOptionCount.Value * (double)sizeof(float) * 2.0d) / Math.Pow(2.0d' 30.0d);  // GiB transferred (per round-trip)                              textBoxOutput.AppendText(String.Format("Effective Host<->Device Memory Bandwidth (avg): {0} GiB/s"' GibibytesTransferred / (OutputDataGpu.CalculationTime.TotalMilliseconds / 1000.0d)) + Environment.NewLine);  // GiB transferred (round trip) per iteration / seconds per iteration                              textBoxOutput.AppendText(String.Format("GPU Speedup vs. CPU: ~{0}x"' (OutputDataCpu.CalculationTime.TotalMilliseconds / (int)numericUpDownCpuIterationCount.Value) / (OutputDataGpu.CalculationTime.TotalMilliseconds / (int)numericUpDownGpuIterationCount.Value)) + Environment.NewLine);                              textBoxOutput.AppendText(Environment.NewLine);                                // Print message to console                              textBoxOutput.AppendText("Verifying calculations..." + Environment.NewLine);                                // Verify that GPU & CPU calculations match (their difference should be within a certain threshold)                              double OneNorm = 0d' TwoNorm = 0d' MaxNorm = 0d;                                // Call option verification                              textBoxOutput.AppendText("Call Option Price Data:" + Environment.NewLine);                              NormsOfDifferenceVector(OutputDataCpu.CallPrices' OutputDataGpu.CallPrices' out OneNorm' out TwoNorm' out MaxNorm);                                textBoxOutput.AppendText(String.Format("L1-Norm: {0}"' OneNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("L2-Norm: {0}"' TwoNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("Max-Norm: {0}"' MaxNorm) + Environment.NewLine);                                // Put option verification                              textBoxOutput.AppendText("Put Option Price Data:" + Environment.NewLine);                              NormsOfDifferenceVector(OutputDataCpu.PutPrices' OutputDataGpu.PutPrices' out OneNorm' out TwoNorm' out MaxNorm);                                textBoxOutput.AppendText(String.Format("L1 Norm: {0}"' OneNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("L2-Norm: {0}"' TwoNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("Max-Norm: {0}"' MaxNorm) + Environment.NewLine);                                // Enable the numeric controls again                              numericUpDownOptionCount.Enabled = true;                              numericUpDownGpuIterationCount.Enabled = true;                              numericUpDownCpuIterationCount.Enabled = true;                                // Enable the calculate button so the user can run the simulation again                              buttonCalculate.Enabled = true;                          };                      }                        // Perform the GPU-based calculations' creating a new instance of BlackScholesWorkerInputData which references the input-data arrays and passing it to the worker thread                      backgroundWorkerGpu.RunWorkerAsync(new BlackScholesWorkerInputData()                      {                          Iterations = (int)numericUpDownGpuIterationCount.Value'                          OptionStrikePrices = OptionStrikePrices'                          OptionTimeToExpiry = OptionYears'                          StockPrices = StockPrices                      });                  };
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The following statement contains a magic number: backgroundWorkerCpu.RunWorkerCompleted += (cpuSender' cpuRunWorkerCompletedEventArgs) =>                  {                      // Preconditions                      if (cpuRunWorkerCompletedEventArgs == null) { throw new ArgumentNullException("cpuRunWorkerCompletedEventArgs"); }                        // Postconditions                      //                        // If an error occurred while calculating the results' display the error message in a MessageBox and stop calculating                      if (cpuRunWorkerCompletedEventArgs.Error != null)                      {                          MessageBox.Show(cpuRunWorkerCompletedEventArgs.Error.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                          buttonCalculate.Enabled = true;                          return;                      }                        // Get the output values from the CPU-based calculations                      BlackScholesWorkerOutputData OutputDataCpu = (BlackScholesWorkerOutputData)cpuRunWorkerCompletedEventArgs.Result;                        // Handle the "RunWorkerCompleted" event for the GPU worker' same as the CPU worker                      if (!m_addedGpuWorkerCompletedHandler)                      {                          m_addedGpuWorkerCompletedHandler = true;    // Set this flag to avoid adding the event handler multiple times                            backgroundWorkerGpu.RunWorkerCompleted += (gpuSender' gpuRunWorkerCompletedEventArgs) =>                          {                              // Preconditions                              if (gpuRunWorkerCompletedEventArgs == null) { throw new ArgumentNullException("gpuRunWorkerCompletedEventArgs"); }                                // Postconditions                              //                                // If an error occurred while calculating the results' display the error message in a MessageBox and stop calculating                              if (gpuRunWorkerCompletedEventArgs.Error != null)                              {                                  MessageBox.Show(gpuRunWorkerCompletedEventArgs.Error.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                                  buttonCalculate.Enabled = true;                                  return;                              }                                // Get the output values from the GPU-based calculations                              BlackScholesWorkerOutputData OutputDataGpu = (BlackScholesWorkerOutputData)gpuRunWorkerCompletedEventArgs.Result;                                // Print performance comparison data                              textBoxOutput.AppendText(String.Format("Option Count: {0}"' (int)numericUpDownOptionCount.Value) + Environment.NewLine);                              double GibibytesTransferred = (5.0d * (double)numericUpDownOptionCount.Value * (double)sizeof(float) * 2.0d) / Math.Pow(2.0d' 30.0d);  // GiB transferred (per round-trip)                              textBoxOutput.AppendText(String.Format("Effective Host<->Device Memory Bandwidth (avg): {0} GiB/s"' GibibytesTransferred / (OutputDataGpu.CalculationTime.TotalMilliseconds / 1000.0d)) + Environment.NewLine);  // GiB transferred (round trip) per iteration / seconds per iteration                              textBoxOutput.AppendText(String.Format("GPU Speedup vs. CPU: ~{0}x"' (OutputDataCpu.CalculationTime.TotalMilliseconds / (int)numericUpDownCpuIterationCount.Value) / (OutputDataGpu.CalculationTime.TotalMilliseconds / (int)numericUpDownGpuIterationCount.Value)) + Environment.NewLine);                              textBoxOutput.AppendText(Environment.NewLine);                                // Print message to console                              textBoxOutput.AppendText("Verifying calculations..." + Environment.NewLine);                                // Verify that GPU & CPU calculations match (their difference should be within a certain threshold)                              double OneNorm = 0d' TwoNorm = 0d' MaxNorm = 0d;                                // Call option verification                              textBoxOutput.AppendText("Call Option Price Data:" + Environment.NewLine);                              NormsOfDifferenceVector(OutputDataCpu.CallPrices' OutputDataGpu.CallPrices' out OneNorm' out TwoNorm' out MaxNorm);                                textBoxOutput.AppendText(String.Format("L1-Norm: {0}"' OneNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("L2-Norm: {0}"' TwoNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("Max-Norm: {0}"' MaxNorm) + Environment.NewLine);                                // Put option verification                              textBoxOutput.AppendText("Put Option Price Data:" + Environment.NewLine);                              NormsOfDifferenceVector(OutputDataCpu.PutPrices' OutputDataGpu.PutPrices' out OneNorm' out TwoNorm' out MaxNorm);                                textBoxOutput.AppendText(String.Format("L1 Norm: {0}"' OneNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("L2-Norm: {0}"' TwoNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("Max-Norm: {0}"' MaxNorm) + Environment.NewLine);                                // Enable the numeric controls again                              numericUpDownOptionCount.Enabled = true;                              numericUpDownGpuIterationCount.Enabled = true;                              numericUpDownCpuIterationCount.Enabled = true;                                // Enable the calculate button so the user can run the simulation again                              buttonCalculate.Enabled = true;                          };                      }                        // Perform the GPU-based calculations' creating a new instance of BlackScholesWorkerInputData which references the input-data arrays and passing it to the worker thread                      backgroundWorkerGpu.RunWorkerAsync(new BlackScholesWorkerInputData()                      {                          Iterations = (int)numericUpDownGpuIterationCount.Value'                          OptionStrikePrices = OptionStrikePrices'                          OptionTimeToExpiry = OptionYears'                          StockPrices = StockPrices                      });                  };
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The following statement contains a magic number: backgroundWorkerCpu.RunWorkerCompleted += (cpuSender' cpuRunWorkerCompletedEventArgs) =>                  {                      // Preconditions                      if (cpuRunWorkerCompletedEventArgs == null) { throw new ArgumentNullException("cpuRunWorkerCompletedEventArgs"); }                        // Postconditions                      //                        // If an error occurred while calculating the results' display the error message in a MessageBox and stop calculating                      if (cpuRunWorkerCompletedEventArgs.Error != null)                      {                          MessageBox.Show(cpuRunWorkerCompletedEventArgs.Error.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                          buttonCalculate.Enabled = true;                          return;                      }                        // Get the output values from the CPU-based calculations                      BlackScholesWorkerOutputData OutputDataCpu = (BlackScholesWorkerOutputData)cpuRunWorkerCompletedEventArgs.Result;                        // Handle the "RunWorkerCompleted" event for the GPU worker' same as the CPU worker                      if (!m_addedGpuWorkerCompletedHandler)                      {                          m_addedGpuWorkerCompletedHandler = true;    // Set this flag to avoid adding the event handler multiple times                            backgroundWorkerGpu.RunWorkerCompleted += (gpuSender' gpuRunWorkerCompletedEventArgs) =>                          {                              // Preconditions                              if (gpuRunWorkerCompletedEventArgs == null) { throw new ArgumentNullException("gpuRunWorkerCompletedEventArgs"); }                                // Postconditions                              //                                // If an error occurred while calculating the results' display the error message in a MessageBox and stop calculating                              if (gpuRunWorkerCompletedEventArgs.Error != null)                              {                                  MessageBox.Show(gpuRunWorkerCompletedEventArgs.Error.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                                  buttonCalculate.Enabled = true;                                  return;                              }                                // Get the output values from the GPU-based calculations                              BlackScholesWorkerOutputData OutputDataGpu = (BlackScholesWorkerOutputData)gpuRunWorkerCompletedEventArgs.Result;                                // Print performance comparison data                              textBoxOutput.AppendText(String.Format("Option Count: {0}"' (int)numericUpDownOptionCount.Value) + Environment.NewLine);                              double GibibytesTransferred = (5.0d * (double)numericUpDownOptionCount.Value * (double)sizeof(float) * 2.0d) / Math.Pow(2.0d' 30.0d);  // GiB transferred (per round-trip)                              textBoxOutput.AppendText(String.Format("Effective Host<->Device Memory Bandwidth (avg): {0} GiB/s"' GibibytesTransferred / (OutputDataGpu.CalculationTime.TotalMilliseconds / 1000.0d)) + Environment.NewLine);  // GiB transferred (round trip) per iteration / seconds per iteration                              textBoxOutput.AppendText(String.Format("GPU Speedup vs. CPU: ~{0}x"' (OutputDataCpu.CalculationTime.TotalMilliseconds / (int)numericUpDownCpuIterationCount.Value) / (OutputDataGpu.CalculationTime.TotalMilliseconds / (int)numericUpDownGpuIterationCount.Value)) + Environment.NewLine);                              textBoxOutput.AppendText(Environment.NewLine);                                // Print message to console                              textBoxOutput.AppendText("Verifying calculations..." + Environment.NewLine);                                // Verify that GPU & CPU calculations match (their difference should be within a certain threshold)                              double OneNorm = 0d' TwoNorm = 0d' MaxNorm = 0d;                                // Call option verification                              textBoxOutput.AppendText("Call Option Price Data:" + Environment.NewLine);                              NormsOfDifferenceVector(OutputDataCpu.CallPrices' OutputDataGpu.CallPrices' out OneNorm' out TwoNorm' out MaxNorm);                                textBoxOutput.AppendText(String.Format("L1-Norm: {0}"' OneNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("L2-Norm: {0}"' TwoNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("Max-Norm: {0}"' MaxNorm) + Environment.NewLine);                                // Put option verification                              textBoxOutput.AppendText("Put Option Price Data:" + Environment.NewLine);                              NormsOfDifferenceVector(OutputDataCpu.PutPrices' OutputDataGpu.PutPrices' out OneNorm' out TwoNorm' out MaxNorm);                                textBoxOutput.AppendText(String.Format("L1 Norm: {0}"' OneNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("L2-Norm: {0}"' TwoNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("Max-Norm: {0}"' MaxNorm) + Environment.NewLine);                                // Enable the numeric controls again                              numericUpDownOptionCount.Enabled = true;                              numericUpDownGpuIterationCount.Enabled = true;                              numericUpDownCpuIterationCount.Enabled = true;                                // Enable the calculate button so the user can run the simulation again                              buttonCalculate.Enabled = true;                          };                      }                        // Perform the GPU-based calculations' creating a new instance of BlackScholesWorkerInputData which references the input-data arrays and passing it to the worker thread                      backgroundWorkerGpu.RunWorkerAsync(new BlackScholesWorkerInputData()                      {                          Iterations = (int)numericUpDownGpuIterationCount.Value'                          OptionStrikePrices = OptionStrikePrices'                          OptionTimeToExpiry = OptionYears'                          StockPrices = StockPrices                      });                  };
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,buttonCalculate_Click,The following statement contains a magic number: backgroundWorkerCpu.RunWorkerCompleted += (cpuSender' cpuRunWorkerCompletedEventArgs) =>                  {                      // Preconditions                      if (cpuRunWorkerCompletedEventArgs == null) { throw new ArgumentNullException("cpuRunWorkerCompletedEventArgs"); }                        // Postconditions                      //                        // If an error occurred while calculating the results' display the error message in a MessageBox and stop calculating                      if (cpuRunWorkerCompletedEventArgs.Error != null)                      {                          MessageBox.Show(cpuRunWorkerCompletedEventArgs.Error.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                          buttonCalculate.Enabled = true;                          return;                      }                        // Get the output values from the CPU-based calculations                      BlackScholesWorkerOutputData OutputDataCpu = (BlackScholesWorkerOutputData)cpuRunWorkerCompletedEventArgs.Result;                        // Handle the "RunWorkerCompleted" event for the GPU worker' same as the CPU worker                      if (!m_addedGpuWorkerCompletedHandler)                      {                          m_addedGpuWorkerCompletedHandler = true;    // Set this flag to avoid adding the event handler multiple times                            backgroundWorkerGpu.RunWorkerCompleted += (gpuSender' gpuRunWorkerCompletedEventArgs) =>                          {                              // Preconditions                              if (gpuRunWorkerCompletedEventArgs == null) { throw new ArgumentNullException("gpuRunWorkerCompletedEventArgs"); }                                // Postconditions                              //                                // If an error occurred while calculating the results' display the error message in a MessageBox and stop calculating                              if (gpuRunWorkerCompletedEventArgs.Error != null)                              {                                  MessageBox.Show(gpuRunWorkerCompletedEventArgs.Error.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                                  buttonCalculate.Enabled = true;                                  return;                              }                                // Get the output values from the GPU-based calculations                              BlackScholesWorkerOutputData OutputDataGpu = (BlackScholesWorkerOutputData)gpuRunWorkerCompletedEventArgs.Result;                                // Print performance comparison data                              textBoxOutput.AppendText(String.Format("Option Count: {0}"' (int)numericUpDownOptionCount.Value) + Environment.NewLine);                              double GibibytesTransferred = (5.0d * (double)numericUpDownOptionCount.Value * (double)sizeof(float) * 2.0d) / Math.Pow(2.0d' 30.0d);  // GiB transferred (per round-trip)                              textBoxOutput.AppendText(String.Format("Effective Host<->Device Memory Bandwidth (avg): {0} GiB/s"' GibibytesTransferred / (OutputDataGpu.CalculationTime.TotalMilliseconds / 1000.0d)) + Environment.NewLine);  // GiB transferred (round trip) per iteration / seconds per iteration                              textBoxOutput.AppendText(String.Format("GPU Speedup vs. CPU: ~{0}x"' (OutputDataCpu.CalculationTime.TotalMilliseconds / (int)numericUpDownCpuIterationCount.Value) / (OutputDataGpu.CalculationTime.TotalMilliseconds / (int)numericUpDownGpuIterationCount.Value)) + Environment.NewLine);                              textBoxOutput.AppendText(Environment.NewLine);                                // Print message to console                              textBoxOutput.AppendText("Verifying calculations..." + Environment.NewLine);                                // Verify that GPU & CPU calculations match (their difference should be within a certain threshold)                              double OneNorm = 0d' TwoNorm = 0d' MaxNorm = 0d;                                // Call option verification                              textBoxOutput.AppendText("Call Option Price Data:" + Environment.NewLine);                              NormsOfDifferenceVector(OutputDataCpu.CallPrices' OutputDataGpu.CallPrices' out OneNorm' out TwoNorm' out MaxNorm);                                textBoxOutput.AppendText(String.Format("L1-Norm: {0}"' OneNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("L2-Norm: {0}"' TwoNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("Max-Norm: {0}"' MaxNorm) + Environment.NewLine);                                // Put option verification                              textBoxOutput.AppendText("Put Option Price Data:" + Environment.NewLine);                              NormsOfDifferenceVector(OutputDataCpu.PutPrices' OutputDataGpu.PutPrices' out OneNorm' out TwoNorm' out MaxNorm);                                textBoxOutput.AppendText(String.Format("L1 Norm: {0}"' OneNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("L2-Norm: {0}"' TwoNorm) + Environment.NewLine);                              textBoxOutput.AppendText(String.Format("Max-Norm: {0}"' MaxNorm) + Environment.NewLine);                                // Enable the numeric controls again                              numericUpDownOptionCount.Enabled = true;                              numericUpDownGpuIterationCount.Enabled = true;                              numericUpDownCpuIterationCount.Enabled = true;                                // Enable the calculate button so the user can run the simulation again                              buttonCalculate.Enabled = true;                          };                      }                        // Perform the GPU-based calculations' creating a new instance of BlackScholesWorkerInputData which references the input-data arrays and passing it to the worker thread                      backgroundWorkerGpu.RunWorkerAsync(new BlackScholesWorkerInputData()                      {                          Iterations = (int)numericUpDownGpuIterationCount.Value'                          OptionStrikePrices = OptionStrikePrices'                          OptionTimeToExpiry = OptionYears'                          StockPrices = StockPrices                      });                  };
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,NormsOfDifferenceVector,The following statement contains a magic number: SumOfSquaresOfDifferences += Math.Pow(Diff' 2.0d);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.buttonCalculate.Location = new System.Drawing.Point(12' 12);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.buttonCalculate.Location = new System.Drawing.Point(12' 12);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.buttonCalculate.Size = new System.Drawing.Size(150' 23);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.buttonCalculate.Size = new System.Drawing.Size(150' 23);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.textBoxOutput.Location = new System.Drawing.Point(3' 16);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.textBoxOutput.Location = new System.Drawing.Point(3' 16);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.textBoxOutput.Size = new System.Drawing.Size(278' 179);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.textBoxOutput.Size = new System.Drawing.Size(278' 179);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.textBoxOutput.TabIndex = 4;
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(12' 41);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(12' 41);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(150' 197);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(150' 197);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 2;
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCpuIterationCount.Location = new System.Drawing.Point(6' 110);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCpuIterationCount.Location = new System.Drawing.Point(6' 110);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCpuIterationCount.Size = new System.Drawing.Size(138' 20);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCpuIterationCount.Size = new System.Drawing.Size(138' 20);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCpuIterationCount.TabIndex = 3;
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 94);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 94);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(97' 13);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(97' 13);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 4;
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 55);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 55);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(98' 13);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(98' 13);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOptionCount.Location = new System.Drawing.Point(6' 32);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOptionCount.Location = new System.Drawing.Point(6' 32);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOptionCount.Maximum = new decimal(new int[] {              100000000'              0'              0'              0});
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOptionCount.Minimum = new decimal(new int[] {              1000000'              0'              0'              0});
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOptionCount.Size = new System.Drawing.Size(138' 20);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOptionCount.Size = new System.Drawing.Size(138' 20);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOptionCount.Value = new decimal(new int[] {              4000000'              0'              0'              0});
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownGpuIterationCount.Location = new System.Drawing.Point(6' 71);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownGpuIterationCount.Location = new System.Drawing.Point(6' 71);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownGpuIterationCount.Size = new System.Drawing.Size(138' 20);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownGpuIterationCount.Size = new System.Drawing.Size(138' 20);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownGpuIterationCount.TabIndex = 2;
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownGpuIterationCount.Value = new decimal(new int[] {              20'              0'              0'              0});
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 16);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 16);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(65' 13);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(65' 13);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(168' 12);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(168' 12);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(284' 198);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(284' 198);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.TabIndex = 3;
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.Location = new System.Drawing.Point(0' 300);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.Size = new System.Drawing.Size(464' 22);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.Size = new System.Drawing.Size(464' 22);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripProgressBar.Size = new System.Drawing.Size(100' 16);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripProgressBar.Size = new System.Drawing.Size(100' 16);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabelProgress.Size = new System.Drawing.Size(0' 17);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(464' 322);
Magic Number,TidePowerd.Example.BlackScholes.WinForms,Form1,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.WinForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(464' 322);
