Implementation smell,Namespace,Class,File,Method,Description
Long Method,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The method has 122 lines of code.
Long Parameter List,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesCPU,The method has 7 parameters. Parameters: callResult' putResult' stockPrice' optionStrike' optionYears' riskFree' volatility
Long Parameter List,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUKernel,The method has 7 parameters. Parameters: callResult' putResult' stockPrice' optionStrike' optionYears' riskFree' volatility
Long Parameter List,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUIterative,The method has 8 parameters. Parameters: callResult' putResult' stockPrice' optionStrike' optionYears' riskFree' volatility' iterations
Long Parameter List,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUSingleIteration,The method has 7 parameters. Parameters: callResult' putResult' stockPrice' optionStrike' optionYears' riskFree' volatility
Long Parameter List,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,NormsOfDifferenceVector,The method has 5 parameters. Parameters: reference' results' oneNorm' twoNorm' maxNorm
Long Identifier,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The length of the parameter ElapsedMillisecondsPerGPUIteration is 34.
Long Identifier,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The length of the parameter ElapsedMillisecondsPerCPUIteration is 34.
Long Statement,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUIterative,The length of the statement  "            if (iterations < 1) { throw new ArgumentOutOfRangeException("iterations"' "The number of iterations cannot be less than one (1)."); } " is 133.
Long Statement,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The length of the statement  "            // This normally occurs upon the first kernel method invocation after an accelerated assembly (i.e.' the current assembly) " is 122.
Long Statement,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The length of the statement  "            // they can be used. As this occurs only once' calling a single iteration of a kernel method will remove this overhead from " is 123.
Long Statement,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The length of the statement  "            Console.WriteLine("GPU Speedup vs. CPU: ~{0:0.0000}x"' ElapsedMillisecondsPerCPUIteration / ElapsedMillisecondsPerGPUIteration); " is 128.
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesCPU,The following statement contains a magic number: Parallel.For(0' callResult.Length' OptionIndex =>              {                  float s = stockPrice[OptionIndex];                  float x = optionStrike[OptionIndex];                  float t = optionYears[OptionIndex];                    // Calculate the square root of the time to option expiration' in years                  float SqrtT = (float)Math.Sqrt(t);                    // Calculate the Black-Scholes parameters                  float d1 = ((float)Math.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);                  float d2 = d1 - volatility * SqrtT;                    // Plug the parameters into the Cumulative Normal Distribution (CND)                  float K1 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d1));                  float CndD1 = RSQRT2PI * (float)Math.Exp(-0.5f * d1 * d1) * (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));                  if (d1 > 0) { CndD1 = 1.0f - CndD1; }                    float K2 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d2));                  float CndD2 = RSQRT2PI * (float)Math.Exp(-0.5f * d2 * d2) * (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));                  if (d2 > 0) { CndD2 = 1.0f - CndD2; }                    // Calculate the discount rate                  float ExpRT = (float)Math.Exp(-1.0f * riskFree * t);                    // Calculate the values of the call and put options                  callResult[OptionIndex] = s * CndD1 - x * ExpRT * CndD2;                  putResult[OptionIndex] = x * ExpRT * (1.0f - CndD2) - s * (1.0f - CndD1);              });
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesCPU,The following statement contains a magic number: Parallel.For(0' callResult.Length' OptionIndex =>              {                  float s = stockPrice[OptionIndex];                  float x = optionStrike[OptionIndex];                  float t = optionYears[OptionIndex];                    // Calculate the square root of the time to option expiration' in years                  float SqrtT = (float)Math.Sqrt(t);                    // Calculate the Black-Scholes parameters                  float d1 = ((float)Math.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);                  float d2 = d1 - volatility * SqrtT;                    // Plug the parameters into the Cumulative Normal Distribution (CND)                  float K1 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d1));                  float CndD1 = RSQRT2PI * (float)Math.Exp(-0.5f * d1 * d1) * (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));                  if (d1 > 0) { CndD1 = 1.0f - CndD1; }                    float K2 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d2));                  float CndD2 = RSQRT2PI * (float)Math.Exp(-0.5f * d2 * d2) * (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));                  if (d2 > 0) { CndD2 = 1.0f - CndD2; }                    // Calculate the discount rate                  float ExpRT = (float)Math.Exp(-1.0f * riskFree * t);                    // Calculate the values of the call and put options                  callResult[OptionIndex] = s * CndD1 - x * ExpRT * CndD2;                  putResult[OptionIndex] = x * ExpRT * (1.0f - CndD2) - s * (1.0f - CndD1);              });
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesCPU,The following statement contains a magic number: Parallel.For(0' callResult.Length' OptionIndex =>              {                  float s = stockPrice[OptionIndex];                  float x = optionStrike[OptionIndex];                  float t = optionYears[OptionIndex];                    // Calculate the square root of the time to option expiration' in years                  float SqrtT = (float)Math.Sqrt(t);                    // Calculate the Black-Scholes parameters                  float d1 = ((float)Math.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);                  float d2 = d1 - volatility * SqrtT;                    // Plug the parameters into the Cumulative Normal Distribution (CND)                  float K1 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d1));                  float CndD1 = RSQRT2PI * (float)Math.Exp(-0.5f * d1 * d1) * (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));                  if (d1 > 0) { CndD1 = 1.0f - CndD1; }                    float K2 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d2));                  float CndD2 = RSQRT2PI * (float)Math.Exp(-0.5f * d2 * d2) * (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));                  if (d2 > 0) { CndD2 = 1.0f - CndD2; }                    // Calculate the discount rate                  float ExpRT = (float)Math.Exp(-1.0f * riskFree * t);                    // Calculate the values of the call and put options                  callResult[OptionIndex] = s * CndD1 - x * ExpRT * CndD2;                  putResult[OptionIndex] = x * ExpRT * (1.0f - CndD2) - s * (1.0f - CndD1);              });
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesCPU,The following statement contains a magic number: Parallel.For(0' callResult.Length' OptionIndex =>              {                  float s = stockPrice[OptionIndex];                  float x = optionStrike[OptionIndex];                  float t = optionYears[OptionIndex];                    // Calculate the square root of the time to option expiration' in years                  float SqrtT = (float)Math.Sqrt(t);                    // Calculate the Black-Scholes parameters                  float d1 = ((float)Math.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);                  float d2 = d1 - volatility * SqrtT;                    // Plug the parameters into the Cumulative Normal Distribution (CND)                  float K1 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d1));                  float CndD1 = RSQRT2PI * (float)Math.Exp(-0.5f * d1 * d1) * (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));                  if (d1 > 0) { CndD1 = 1.0f - CndD1; }                    float K2 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d2));                  float CndD2 = RSQRT2PI * (float)Math.Exp(-0.5f * d2 * d2) * (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));                  if (d2 > 0) { CndD2 = 1.0f - CndD2; }                    // Calculate the discount rate                  float ExpRT = (float)Math.Exp(-1.0f * riskFree * t);                    // Calculate the values of the call and put options                  callResult[OptionIndex] = s * CndD1 - x * ExpRT * CndD2;                  putResult[OptionIndex] = x * ExpRT * (1.0f - CndD2) - s * (1.0f - CndD1);              });
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesCPU,The following statement contains a magic number: Parallel.For(0' callResult.Length' OptionIndex =>              {                  float s = stockPrice[OptionIndex];                  float x = optionStrike[OptionIndex];                  float t = optionYears[OptionIndex];                    // Calculate the square root of the time to option expiration' in years                  float SqrtT = (float)Math.Sqrt(t);                    // Calculate the Black-Scholes parameters                  float d1 = ((float)Math.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);                  float d2 = d1 - volatility * SqrtT;                    // Plug the parameters into the Cumulative Normal Distribution (CND)                  float K1 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d1));                  float CndD1 = RSQRT2PI * (float)Math.Exp(-0.5f * d1 * d1) * (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));                  if (d1 > 0) { CndD1 = 1.0f - CndD1; }                    float K2 = 1.0f / (1.0f + 0.2316419f * Math.Abs(d2));                  float CndD2 = RSQRT2PI * (float)Math.Exp(-0.5f * d2 * d2) * (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));                  if (d2 > 0) { CndD2 = 1.0f - CndD2; }                    // Calculate the discount rate                  float ExpRT = (float)Math.Exp(-1.0f * riskFree * t);                    // Calculate the values of the call and put options                  callResult[OptionIndex] = s * CndD1 - x * ExpRT * CndD2;                  putResult[OptionIndex] = x * ExpRT * (1.0f - CndD2) - s * (1.0f - CndD1);              });
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUKernel,The following statement contains a magic number: float d1 = (DeviceMath.Log(s / x) + (riskFree + 0.5f * volatility * volatility) * t) / (volatility * SqrtT);
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUKernel,The following statement contains a magic number: float K1 = 1.0f / (1.0f + 0.2316419f * DeviceMath.Abs(d1));
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUKernel,The following statement contains a magic number: float CndD1 = RSQRT2PI * DeviceMath.Exp(-0.5f * d1 * d1) *                      (K1 * (A1 + K1 * (A2 + K1 * (A3 + K1 * (A4 + K1 * A5)))));
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUKernel,The following statement contains a magic number: float K2 = 1.0f / (1.0f + 0.2316419f * DeviceMath.Abs(d2));
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUKernel,The following statement contains a magic number: float CndD2 = RSQRT2PI * DeviceMath.Exp(-0.5f * d2 * d2) *                      (K2 * (A1 + K2 * (A2 + K2 * (A3 + K2 * (A4 + K2 * A5)))));
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUIterative,The following statement contains a magic number: Launcher.SetGridSize(480);
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUIterative,The following statement contains a magic number: Launcher.SetBlockSize(128);
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUSingleIteration,The following statement contains a magic number: Launcher.SetGridSize(480);
Magic Number,TidePowerd.Example.BlackScholes.Cli,BlackScholes,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\BlackScholes.cs,BlackScholesGPUSingleIteration,The following statement contains a magic number: Launcher.SetBlockSize(128);
Magic Number,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The following statement contains a magic number: StockPrices[i] = RandFloat(rand' 5.0f' 30.0f);
Magic Number,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The following statement contains a magic number: StockPrices[i] = RandFloat(rand' 5.0f' 30.0f);
Magic Number,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The following statement contains a magic number: OptionStrikePrices[i] = RandFloat(rand' 1.0f' 100.0f);
Magic Number,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The following statement contains a magic number: OptionYears[i] = RandFloat(rand' 0.25f' 10.0f);
Magic Number,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The following statement contains a magic number: OptionYears[i] = RandFloat(rand' 0.25f' 10.0f);
Magic Number,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The following statement contains a magic number: double GibibytesTransferred = (5.0d * (double)NumOptions * (double)sizeof(float)) / Math.Pow(2.0d' 30.0d);
Magic Number,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The following statement contains a magic number: double GibibytesTransferred = (5.0d * (double)NumOptions * (double)sizeof(float)) / Math.Pow(2.0d' 30.0d);
Magic Number,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The following statement contains a magic number: double GibibytesTransferred = (5.0d * (double)NumOptions * (double)sizeof(float)) / Math.Pow(2.0d' 30.0d);
Magic Number,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,Main,The following statement contains a magic number: Console.WriteLine("Effective Host<->Device Memory Bandwidth (avg): {0:0.0000} GiB/s"'                  GibibytesTransferred / (ElapsedMillisecondsPerGPUIteration / 1000.0d));
Magic Number,TidePowerd.Example.BlackScholes.Cli,Program,D:\research\architectureSmells\repos1\tidepowerd_GPU.NET-Example-Projects\BlackScholes.Cli\Program.cs,NormsOfDifferenceVector,The following statement contains a magic number: SumOfSquaresOfDifferences += Math.Pow(Diff' 2.0d);
