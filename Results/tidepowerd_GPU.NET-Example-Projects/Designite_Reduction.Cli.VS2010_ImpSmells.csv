Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,TidePowerd.Example.Reduction.Cli,Program,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Program.cs,Main,The length of the parameter FirstReductionFromGlobalResult is 30.
Long Statement,TidePowerd.Example.Reduction.Cli,Program,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Program.cs,Main,The length of the statement  "            Console.Write("Generating random test data ({0} {1} elements)..."' NumElements' InputData.GetType().GetElementType().Name); " is 123.
Long Statement,TidePowerd.Example.Reduction.Cli,Program,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Program.cs,Main,The length of the statement  "            // Fill the input data with random values; these values must fall between zero (0) and the maximum number' which if multiplied by the array length' would still fit in an int32 (signed int) value " is 194.
Long Statement,TidePowerd.Example.Reduction.Cli,Program,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Program.cs,Main,The length of the statement  "            Console.WriteLine("done. (Value = {0}' Time = {1:F02} ms)"' InterleavedContiguousResult' Watch.Elapsed.TotalMilliseconds); " is 122.
Long Statement,TidePowerd.Example.Reduction.Cli,Program,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Program.cs,Main,The length of the statement  "            Console.WriteLine("done. (Value = {0}' Time = {1:F02} ms)"' SequentialAddressingResult' Watch.Elapsed.TotalMilliseconds); " is 121.
Long Statement,TidePowerd.Example.Reduction.Cli,Program,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Program.cs,Main,The length of the statement  "            Console.WriteLine("done. (Value = {0}' Time = {1:F02} ms)"' FirstReductionFromGlobalResult' Watch.Elapsed.TotalMilliseconds); " is 125.
Long Statement,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,CalculateBlockAndGridSizes,The length of the statement  "            if (kernelNumber < 0) { throw new ArgumentOutOfRangeException("kernelNumber"' "The kernel number cannot be negative."); } " is 121.
Long Statement,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,CalculateBlockAndGridSizes,The length of the statement  "            else if (kernelNumber > 3) { throw new ArgumentOutOfRangeException("kernelNumber"' "The kernel number cannot be greater than three (3)."); } " is 140.
Long Statement,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,CalculateBlockAndGridSizes,The length of the statement  "            else if (numElements < 1) { throw new ArgumentOutOfRangeException("numElements"' "The number of elements cannot be less than one (1)."); } " is 138.
Long Statement,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,CalculateBlockAndGridSizes,The length of the statement  "                numThreadsPerBlock = (numElements < MaxThreadsPerBlock * 2) ? NextPowerOfTwo((numElements + 1) / 2) : MaxThreadsPerBlock; " is 121.
Long Statement,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,InterleavedModulo,The length of the statement  "            // Declare variables to hold the current number of threads per block and number of blocks; re-used throughout the code below " is 124.
Long Statement,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,InterleavedContiguous,The length of the statement  "            // Declare variables to hold the current number of threads per block and number of blocks; re-used throughout the code below " is 124.
Long Statement,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,SequentialAddressing,The length of the statement  "            // Declare variables to hold the current number of threads per block and number of blocks; re-used throughout the code below " is 124.
Long Statement,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,FirstReductionFromGlobal,The length of the statement  "            // Declare variables to hold the current number of threads per block and number of blocks; re-used throughout the code below " is 124.
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,CalculateBlockAndGridSizes,The following statement contains a magic number: if (kernelNumber < 0) { throw new ArgumentOutOfRangeException("kernelNumber"' "The kernel number cannot be negative."); }              else if (kernelNumber > 3) { throw new ArgumentOutOfRangeException("kernelNumber"' "The kernel number cannot be greater than three (3)."); }              else if (numElements < 1) { throw new ArgumentOutOfRangeException("numElements"' "The number of elements cannot be less than one (1)."); }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,CalculateBlockAndGridSizes,The following statement contains a magic number: if (kernelNumber < 3)              {                  numThreadsPerBlock = (numElements < MaxThreadsPerBlock) ? NextPowerOfTwo(numElements) : MaxThreadsPerBlock;                  numBlocks = (numElements + numThreadsPerBlock - 1) / numThreadsPerBlock;              }              else              {                  numThreadsPerBlock = (numElements < MaxThreadsPerBlock * 2) ? NextPowerOfTwo((numElements + 1) / 2) : MaxThreadsPerBlock;                  numBlocks = (numElements + (numThreadsPerBlock * 2 - 1)) / (numThreadsPerBlock * 2);              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,CalculateBlockAndGridSizes,The following statement contains a magic number: if (kernelNumber < 3)              {                  numThreadsPerBlock = (numElements < MaxThreadsPerBlock) ? NextPowerOfTwo(numElements) : MaxThreadsPerBlock;                  numBlocks = (numElements + numThreadsPerBlock - 1) / numThreadsPerBlock;              }              else              {                  numThreadsPerBlock = (numElements < MaxThreadsPerBlock * 2) ? NextPowerOfTwo((numElements + 1) / 2) : MaxThreadsPerBlock;                  numBlocks = (numElements + (numThreadsPerBlock * 2 - 1)) / (numThreadsPerBlock * 2);              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,CalculateBlockAndGridSizes,The following statement contains a magic number: if (kernelNumber < 3)              {                  numThreadsPerBlock = (numElements < MaxThreadsPerBlock) ? NextPowerOfTwo(numElements) : MaxThreadsPerBlock;                  numBlocks = (numElements + numThreadsPerBlock - 1) / numThreadsPerBlock;              }              else              {                  numThreadsPerBlock = (numElements < MaxThreadsPerBlock * 2) ? NextPowerOfTwo((numElements + 1) / 2) : MaxThreadsPerBlock;                  numBlocks = (numElements + (numThreadsPerBlock * 2 - 1)) / (numThreadsPerBlock * 2);              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,CalculateBlockAndGridSizes,The following statement contains a magic number: if (kernelNumber < 3)              {                  numThreadsPerBlock = (numElements < MaxThreadsPerBlock) ? NextPowerOfTwo(numElements) : MaxThreadsPerBlock;                  numBlocks = (numElements + numThreadsPerBlock - 1) / numThreadsPerBlock;              }              else              {                  numThreadsPerBlock = (numElements < MaxThreadsPerBlock * 2) ? NextPowerOfTwo((numElements + 1) / 2) : MaxThreadsPerBlock;                  numBlocks = (numElements + (numThreadsPerBlock * 2 - 1)) / (numThreadsPerBlock * 2);              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,CalculateBlockAndGridSizes,The following statement contains a magic number: if (kernelNumber < 3)              {                  numThreadsPerBlock = (numElements < MaxThreadsPerBlock) ? NextPowerOfTwo(numElements) : MaxThreadsPerBlock;                  numBlocks = (numElements + numThreadsPerBlock - 1) / numThreadsPerBlock;              }              else              {                  numThreadsPerBlock = (numElements < MaxThreadsPerBlock * 2) ? NextPowerOfTwo((numElements + 1) / 2) : MaxThreadsPerBlock;                  numBlocks = (numElements + (numThreadsPerBlock * 2 - 1)) / (numThreadsPerBlock * 2);              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,NextPowerOfTwo,The following statement contains a magic number: Result |= Result >> 2;
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,NextPowerOfTwo,The following statement contains a magic number: Result |= Result >> 4;
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,NextPowerOfTwo,The following statement contains a magic number: Result |= Result >> 8;
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,NextPowerOfTwo,The following statement contains a magic number: Result |= Result >> 16;
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,InterleavedModuloKernel,The following statement contains a magic number: for (int s = 1; s < BlockDimension.X; s *= 2)              {                  // Modulo arithmetic is slow on the GPU!                  if ((ThreadId % (2 * s)) == 0)                  {                      IntermediateResults1[ThreadId] += IntermediateResults1[ThreadId + s];                  }                    // Need to synchronize threads to ensure that the results                  // from this step are calculated and stored back to shared memory                  // before proceeding to the next step.                  Kernel.SyncThreads();              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,InterleavedModuloKernel,The following statement contains a magic number: for (int s = 1; s < BlockDimension.X; s *= 2)              {                  // Modulo arithmetic is slow on the GPU!                  if ((ThreadId % (2 * s)) == 0)                  {                      IntermediateResults1[ThreadId] += IntermediateResults1[ThreadId + s];                  }                    // Need to synchronize threads to ensure that the results                  // from this step are calculated and stored back to shared memory                  // before proceeding to the next step.                  Kernel.SyncThreads();              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,InterleavedContiguousKernel,The following statement contains a magic number: for (int s = 1; s < BlockDimension.X; s *= 2)              {                  // Calculate the "right" element index?                  int Index = 2 * s * ThreadId;                    // Perform the current step of the reduction                  if (Index < BlockDimension.X)                  {                      IntermediateResults1[Index] += IntermediateResults1[Index + s];                  }                    // Need to synchronize threads to ensure that the results                  // from this step are calculated and stored back to shared memory                  // before proceeding to the next step.                  Kernel.SyncThreads();              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,InterleavedContiguousKernel,The following statement contains a magic number: for (int s = 1; s < BlockDimension.X; s *= 2)              {                  // Calculate the "right" element index?                  int Index = 2 * s * ThreadId;                    // Perform the current step of the reduction                  if (Index < BlockDimension.X)                  {                      IntermediateResults1[Index] += IntermediateResults1[Index + s];                  }                    // Need to synchronize threads to ensure that the results                  // from this step are calculated and stored back to shared memory                  // before proceeding to the next step.                  Kernel.SyncThreads();              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,SequentialAddressing,The following statement contains a magic number: CalculateBlockAndGridSizes(2' input.Length' out NumThreadsPerBlock' out NumBlocks);
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,SequentialAddressing,The following statement contains a magic number: while (NumBlocks > CpuThreshold)              {                  // Calculate the number of threads and blocks based on the current input size                  CalculateBlockAndGridSizes(2' NumBlocks' out NumThreadsPerBlock' out NumBlocks);                  Launcher.SetBlockSize(NumThreadsPerBlock);                  Launcher.SetGridSize(NumBlocks);                    // Replace the current "level's" input data with the output data from the previous "level"                  input = OutputData;                    // Create a new array to hold the output data for this "level"                  OutputData = new int[NumBlocks];                    // Call the reduction method to perform the current "level" of reduction                  Reduction.SequentialAddressingKernel(input' OutputData);              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,SequentialAddressingKernel,The following statement contains a magic number: for (int s = BlockDimension.X / 2; s > 0; s >>= 1)              {                  // Perform the current step of the reduction                  if (ThreadId < s)                  {                      IntermediateResults1[ThreadId] += IntermediateResults1[ThreadId + s];                  }                    // Need to synchronize threads to ensure that the results                  // from this step are calculated and stored back to shared memory                  // before proceeding to the next step.                  Kernel.SyncThreads();              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,FirstReductionFromGlobal,The following statement contains a magic number: CalculateBlockAndGridSizes(3' input.Length' out NumThreadsPerBlock' out NumBlocks);
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,FirstReductionFromGlobal,The following statement contains a magic number: while (NumBlocks > CpuThreshold)              {                  // Calculate the number of threads and blocks based on the current input size                  CalculateBlockAndGridSizes(3' NumBlocks' out NumThreadsPerBlock' out NumBlocks);                  Launcher.SetBlockSize(NumThreadsPerBlock);                  Launcher.SetGridSize(NumBlocks);                    // Replace the current "level's" input data with the output data from the previous "level"                  input = OutputData;                    // Create a new array to hold the output data for this "level"                  OutputData = new int[NumBlocks];                    // Call the reduction method to perform the current "level" of reduction                  Reduction.FirstReductionFromGlobalKernel(input' OutputData);              }
Magic Number,TidePowerd.Example.Reduction.Cli,Reduction,C:\repos\tidepowerd_GPU.NET-Example-Projects\Reduction.Cli\Reduction.cs,FirstReductionFromGlobalKernel,The following statement contains a magic number: for (int s = BlockDimension.X / 2; s > 0; s >>= 1)              {                  // Perform the current step of the reduction                  if (ThreadId < s)                  {                      IntermediateResults2[ThreadId] = MySum = MySum + IntermediateResults2[ThreadId + s];                      //IntermediateResults2[ThreadId] += IntermediateResults2[ThreadId + s];                  }                    // Need to synchronize threads to ensure that the results                  // from this step are calculated and stored back to shared memory                  // before proceeding to the next step.                  Kernel.SyncThreads();              }
