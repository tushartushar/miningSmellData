Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddGpu,The length of the statement  "            // Loop over the vectors 'a'' 'b'' and 'c'' multiplying the elements from 'a' and 'b'' adding the product to the element from 'c'' then storing the result in 'd'. " is 162.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddGpu,The length of the statement  "                // Within kernel methods' use the DeviceMath.MultiplyAdd(...) call instead of separate multiply/add steps whenever possible' " is 124.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddGpu,The length of the statement  "                // as this allows the GPU.NET compiler to emit the most-efficient (i.e.' fastest-executing) code for your specific device. " is 122.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddGpu,The length of the statement  "            // Loop over the vectors 'a'' 'b'' and 'c'' multiplying the elements from 'a' and 'b'' adding the product to the element from 'c'' then storing the result in 'd'. " is 162.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddGpu,The length of the statement  "                // Within kernel methods' use the DeviceMath.MultiplyAdd(...) call instead of separate multiply/add steps whenever possible' " is 124.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddGpu,The length of the statement  "                // as this allows the GPU.NET compiler to emit the most-efficient (i.e.' fastest-executing) code for your specific device. " is 122.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddGpu,The length of the statement  "            // Loop over the vectors 'a'' 'b'' and 'c'' multiplying the elements from 'a' and 'b'' adding the product to the element from 'c'' then storing the result in 'd'. " is 162.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddGpu,The length of the statement  "                // Within kernel methods' use the DeviceMath.MultiplyAdd(...) call instead of separate multiply/add steps whenever possible' " is 124.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddGpu,The length of the statement  "                // as this allows the GPU.NET compiler to emit the most-efficient (i.e.' fastest-executing) code for your specific device. " is 122.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddGpu,The length of the statement  "                // NOTE : This specific overload ensures the multiplication step doesn't overflow by casting the 'a' and 'b' values to long (int64) before multiplying them. " is 156.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddCpu,The length of the statement  "            // Loop over the vectors 'a'' 'b'' and 'c'; multiply each pair of elements from 'a' and 'b'' add the element from 'c' to the product' then store the result in 'd'. " is 163.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddCpu,The length of the statement  "            // Loop over the vectors 'a'' 'b'' and 'c'; multiply each pair of elements from 'a' and 'b'' add the element from 'c' to the product' then store the result in 'd'. " is 163.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddCpu,The length of the statement  "            // Loop over the vectors 'a'' 'b'' and 'c'; multiply each pair of elements from 'a' and 'b'' add the element from 'c' to the product' then store the result in 'd'. " is 163.
Long Statement,TidePowerd.Example.LinearAlgebra.Library,VectorOps,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorOps.cs,MultiplyAddCpu,The length of the statement  "                // Multiplying two integers could overflow' so we cast them to long *before* the multiplication so we'll get the full product. " is 126.
Magic Number,TidePowerd.Example.LinearAlgebra.Library,VectorNormExtensions,C:\repos\tidepowerd_GPU.NET-Example-Projects\LinearAlgebra.Library\VectorNormExtensions.cs,OneNorm,The following statement contains a magic number: var PartialResults = new double[128];
