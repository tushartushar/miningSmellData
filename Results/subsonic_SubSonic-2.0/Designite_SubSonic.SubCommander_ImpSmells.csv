Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,SetProvider,Cyclomatic complexity of the method is 9
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,Main,The length of the statement  "                        Utility.WriteTrace(String.Concat("Writing "' template.TemplateName' " as "' template.OutputPath.Substring(template.OutputPath.LastIndexOf("\\") + 1))); " is 151.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,ThrowHelp,The length of the statement  "            Console.WriteLine("/groupOutput - Allows you to group your generated code into subfolders.  Options are schema' type' schemaAndType."); " is 135.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,ThrowHelp,The length of the statement  "            Console.WriteLine("               'schema' refers to SQL database schema (i.e. dbo) and 'type' refers to Models/Controllers/Views"); " is 132.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,ThrowHelp,The length of the statement  "            Console.WriteLine("/fixDatabaseObjectCasing - fix the capitilization of object generated from database? true/false (default is true)"); " is 135.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,SetProvider,The length of the statement  "                        string activeTemplateDirectory = String.IsNullOrEmpty(argTemplateDirectory) ? section.TemplateDirectory : argTemplateDirectory; " is 127.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,SetProvider,The length of the statement  "                            throw new ConfigurationErrorsException(string.Format("ConnectionStrings section missing connection string with the name '{0}'"' connectionStringName)); " is 151.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,SetProvider,The length of the statement  "                            provider.SetDefaultConnectionString(subConfig.ConnectionStrings.ConnectionStrings[provider.ConnectionStringName].ConnectionString); " is 131.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,SetProvider,The length of the statement  "                            //provider.ConnectionString = subConfig.ConnectionStrings.ConnectionStrings[provider.ConnectionStringName].ConnectionString; " is 124.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,SetProvider,The length of the statement  "                        "Can't set the configuration for the providers. There is an error with your config setup (did you remember to configure SubSonic in your config file?). '{0}'"' " is 159.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,ScriptData,The length of the statement  "                string outFileName = string.Format("{0}_Data_{1}_{2}_{3}.sql"' provider.Name' DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day); " is 135.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,ScriptSchema,The length of the statement  "                        string.Format("{0}_{1}_{2}_{3}_{4}_Schema.sql"' DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' Environment.UserName' provider.Name); " is 142.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,GenerateEditor,The length of the statement  "                    Console.WriteLine("Please check the table name and that the you specified the right provider (you can set the provider by using /provider)"); " is 141.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,GenerateTables,The length of the statement  "                            " that's a serious amount of tables to generate. But we can handle it. You just will need to be patient and go get some coffee while we do this thang..."; " is 154.
Long Statement,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,GenerateODSControllers,The length of the statement  "                                " that's a serious amount of tables to generate. But we can handle it. You just will need to be patient and go get some coffee while we do this thang..."; " is 154.
Magic Number,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,GenerateTables,The following statement contains a magic number: if(DataService.Providers.Count == 0)                  Console.WriteLine("There's a problem with the providers - none were loaded and no exceptions where thrown.");              else              {                  //loop the providers' and if there's more than one' output to their own folder                  //for tidiness                  foreach(DataProvider provider in DataService.Providers)                  {                      //get the table list                      string[] tables = DataService.GetTableNames(provider.Name);                        int tableCount = 0;                        //adjust based on IsExcluded                      foreach(string tbl in tables)                      {                          if(IsInList(tbl) && !IsExcluded(tbl) && CodeService.ShouldGenerate(tbl' provider.Name))                              tableCount++;                      }                        string message = "Generating classes for " + provider.Name + " (" + tables.Length + " total)";                      if(tableCount > 200)                      {                          message +=                              " that's a serious amount of tables to generate. But we can handle it. You just will need to be patient and go get some coffee while we do this thang...";                      }                      else if(tableCount > 100)                          message += " that's a lot of tables. This could take a few minutes...";                      else if(tableCount > 50)                          message += " - moderate amount of tables... this could take 30 seconds or so...";                        Console.WriteLine(message);                      string baseDir = GetOutSubDir(provider);                                                                foreach(string tbl in tables)                      {                          if(IsInList(tbl) && !IsExcluded(tbl) && CodeService.ShouldGenerate(tbl' provider.Name))                          {                              TableSchema.Table tableSchema = DataService.GetSchema(tbl' provider.Name' TableType.Table);                              string className = tableSchema.ClassName;                              TurboTemplate tt = CodeService.BuildClassTemplate(tbl' language' provider);                                string additionalPath = GetAdditionalPath(tableSchema' GenerationType.Models);                              string outDir = Path.Combine(baseDir' additionalPath);                              EnsureDirectoryExists(outDir);                                tt.OutputPath = Path.Combine(outDir' className + language.FileExtension);                                                            turboCompiler.AddTemplate(tt);                          }                      }                  }                  Console.WriteLine("Finished");              }
Magic Number,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,GenerateTables,The following statement contains a magic number: if(DataService.Providers.Count == 0)                  Console.WriteLine("There's a problem with the providers - none were loaded and no exceptions where thrown.");              else              {                  //loop the providers' and if there's more than one' output to their own folder                  //for tidiness                  foreach(DataProvider provider in DataService.Providers)                  {                      //get the table list                      string[] tables = DataService.GetTableNames(provider.Name);                        int tableCount = 0;                        //adjust based on IsExcluded                      foreach(string tbl in tables)                      {                          if(IsInList(tbl) && !IsExcluded(tbl) && CodeService.ShouldGenerate(tbl' provider.Name))                              tableCount++;                      }                        string message = "Generating classes for " + provider.Name + " (" + tables.Length + " total)";                      if(tableCount > 200)                      {                          message +=                              " that's a serious amount of tables to generate. But we can handle it. You just will need to be patient and go get some coffee while we do this thang...";                      }                      else if(tableCount > 100)                          message += " that's a lot of tables. This could take a few minutes...";                      else if(tableCount > 50)                          message += " - moderate amount of tables... this could take 30 seconds or so...";                        Console.WriteLine(message);                      string baseDir = GetOutSubDir(provider);                                                                foreach(string tbl in tables)                      {                          if(IsInList(tbl) && !IsExcluded(tbl) && CodeService.ShouldGenerate(tbl' provider.Name))                          {                              TableSchema.Table tableSchema = DataService.GetSchema(tbl' provider.Name' TableType.Table);                              string className = tableSchema.ClassName;                              TurboTemplate tt = CodeService.BuildClassTemplate(tbl' language' provider);                                string additionalPath = GetAdditionalPath(tableSchema' GenerationType.Models);                              string outDir = Path.Combine(baseDir' additionalPath);                              EnsureDirectoryExists(outDir);                                tt.OutputPath = Path.Combine(outDir' className + language.FileExtension);                                                            turboCompiler.AddTemplate(tt);                          }                      }                  }                  Console.WriteLine("Finished");              }
Magic Number,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,GenerateTables,The following statement contains a magic number: if(DataService.Providers.Count == 0)                  Console.WriteLine("There's a problem with the providers - none were loaded and no exceptions where thrown.");              else              {                  //loop the providers' and if there's more than one' output to their own folder                  //for tidiness                  foreach(DataProvider provider in DataService.Providers)                  {                      //get the table list                      string[] tables = DataService.GetTableNames(provider.Name);                        int tableCount = 0;                        //adjust based on IsExcluded                      foreach(string tbl in tables)                      {                          if(IsInList(tbl) && !IsExcluded(tbl) && CodeService.ShouldGenerate(tbl' provider.Name))                              tableCount++;                      }                        string message = "Generating classes for " + provider.Name + " (" + tables.Length + " total)";                      if(tableCount > 200)                      {                          message +=                              " that's a serious amount of tables to generate. But we can handle it. You just will need to be patient and go get some coffee while we do this thang...";                      }                      else if(tableCount > 100)                          message += " that's a lot of tables. This could take a few minutes...";                      else if(tableCount > 50)                          message += " - moderate amount of tables... this could take 30 seconds or so...";                        Console.WriteLine(message);                      string baseDir = GetOutSubDir(provider);                                                                foreach(string tbl in tables)                      {                          if(IsInList(tbl) && !IsExcluded(tbl) && CodeService.ShouldGenerate(tbl' provider.Name))                          {                              TableSchema.Table tableSchema = DataService.GetSchema(tbl' provider.Name' TableType.Table);                              string className = tableSchema.ClassName;                              TurboTemplate tt = CodeService.BuildClassTemplate(tbl' language' provider);                                string additionalPath = GetAdditionalPath(tableSchema' GenerationType.Models);                              string outDir = Path.Combine(baseDir' additionalPath);                              EnsureDirectoryExists(outDir);                                tt.OutputPath = Path.Combine(outDir' className + language.FileExtension);                                                            turboCompiler.AddTemplate(tt);                          }                      }                  }                  Console.WriteLine("Finished");              }
Magic Number,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,GenerateODSControllers,The following statement contains a magic number: if(DataService.Providers.Count == 0)                  Console.WriteLine("There's a problem with the providers - none were loaded and no exceptions where thrown.");              else              {                  //loop the providers' and if there's more than one' output to their own folder                  //for tidiness                  foreach(DataProvider provider in DataService.Providers)                  {                      if(provider.TableBaseClass == "ActiveRecord")                      {                          //get the table list                          string[] tables = DataService.GetTableNames(provider.Name);                          string message = "Generating ODS Controllers for " + provider.Name + " (" + tables.Length + " total)";                            if(tables.Length > 200)                          {                              message +=                                  " that's a serious amount of tables to generate. But we can handle it. You just will need to be patient and go get some coffee while we do this thang...";                          }                          else if(tables.Length > 100)                              message += " that's a lot of tables. This could take a few minutes...";                          else if(tables.Length > 50)                              message += " - moderate amount of tables... this could take 30 seconds or so...";                            Console.WriteLine(message);                          string baseDir = GetOutSubDir(provider);                                                    if(!Directory.Exists(baseDir))                              Directory.CreateDirectory(baseDir);                                               foreach(string tbl in tables)                          {                              if(IsInList(tbl) && !IsExcluded(tbl) && CodeService.ShouldGenerate(tbl' provider.Name))                              {                                  TableSchema.Table tableSchema = DataService.GetSchema(tbl' provider.Name' TableType.Table);                                  string className = tableSchema.ClassName;                                  TurboTemplate tt = CodeService.BuildODSTemplate(tbl' language' provider);                                    string additionalPath = GetAdditionalPath(tableSchema' GenerationType.Controllers);                                  string outDir = Path.Combine(baseDir' additionalPath);                                  EnsureDirectoryExists(outDir);                                    if(tt != null)                                  {                                      tt.OutputPath = Path.Combine(outDir' className + "Controller" + language.FileExtension);                                      turboCompiler.AddTemplate(tt);                                  }                              }                          }                      }                  }                  Console.WriteLine("Finished");              }
Magic Number,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,GenerateODSControllers,The following statement contains a magic number: if(DataService.Providers.Count == 0)                  Console.WriteLine("There's a problem with the providers - none were loaded and no exceptions where thrown.");              else              {                  //loop the providers' and if there's more than one' output to their own folder                  //for tidiness                  foreach(DataProvider provider in DataService.Providers)                  {                      if(provider.TableBaseClass == "ActiveRecord")                      {                          //get the table list                          string[] tables = DataService.GetTableNames(provider.Name);                          string message = "Generating ODS Controllers for " + provider.Name + " (" + tables.Length + " total)";                            if(tables.Length > 200)                          {                              message +=                                  " that's a serious amount of tables to generate. But we can handle it. You just will need to be patient and go get some coffee while we do this thang...";                          }                          else if(tables.Length > 100)                              message += " that's a lot of tables. This could take a few minutes...";                          else if(tables.Length > 50)                              message += " - moderate amount of tables... this could take 30 seconds or so...";                            Console.WriteLine(message);                          string baseDir = GetOutSubDir(provider);                                                    if(!Directory.Exists(baseDir))                              Directory.CreateDirectory(baseDir);                                               foreach(string tbl in tables)                          {                              if(IsInList(tbl) && !IsExcluded(tbl) && CodeService.ShouldGenerate(tbl' provider.Name))                              {                                  TableSchema.Table tableSchema = DataService.GetSchema(tbl' provider.Name' TableType.Table);                                  string className = tableSchema.ClassName;                                  TurboTemplate tt = CodeService.BuildODSTemplate(tbl' language' provider);                                    string additionalPath = GetAdditionalPath(tableSchema' GenerationType.Controllers);                                  string outDir = Path.Combine(baseDir' additionalPath);                                  EnsureDirectoryExists(outDir);                                    if(tt != null)                                  {                                      tt.OutputPath = Path.Combine(outDir' className + "Controller" + language.FileExtension);                                      turboCompiler.AddTemplate(tt);                                  }                              }                          }                      }                  }                  Console.WriteLine("Finished");              }
Magic Number,SubSonic.SubCommander,Program,C:\repos\subsonic_SubSonic-2.0\SubCommander\Program.cs,GenerateODSControllers,The following statement contains a magic number: if(DataService.Providers.Count == 0)                  Console.WriteLine("There's a problem with the providers - none were loaded and no exceptions where thrown.");              else              {                  //loop the providers' and if there's more than one' output to their own folder                  //for tidiness                  foreach(DataProvider provider in DataService.Providers)                  {                      if(provider.TableBaseClass == "ActiveRecord")                      {                          //get the table list                          string[] tables = DataService.GetTableNames(provider.Name);                          string message = "Generating ODS Controllers for " + provider.Name + " (" + tables.Length + " total)";                            if(tables.Length > 200)                          {                              message +=                                  " that's a serious amount of tables to generate. But we can handle it. You just will need to be patient and go get some coffee while we do this thang...";                          }                          else if(tables.Length > 100)                              message += " that's a lot of tables. This could take a few minutes...";                          else if(tables.Length > 50)                              message += " - moderate amount of tables... this could take 30 seconds or so...";                            Console.WriteLine(message);                          string baseDir = GetOutSubDir(provider);                                                    if(!Directory.Exists(baseDir))                              Directory.CreateDirectory(baseDir);                                               foreach(string tbl in tables)                          {                              if(IsInList(tbl) && !IsExcluded(tbl) && CodeService.ShouldGenerate(tbl' provider.Name))                              {                                  TableSchema.Table tableSchema = DataService.GetSchema(tbl' provider.Name' TableType.Table);                                  string className = tableSchema.ClassName;                                  TurboTemplate tt = CodeService.BuildODSTemplate(tbl' language' provider);                                    string additionalPath = GetAdditionalPath(tableSchema' GenerationType.Controllers);                                  string outDir = Path.Combine(baseDir' additionalPath);                                  EnsureDirectoryExists(outDir);                                    if(tt != null)                                  {                                      tt.OutputPath = Path.Combine(outDir' className + "Controller" + language.FileExtension);                                      turboCompiler.AddTemplate(tt);                                  }                              }                          }                      }                  }                  Console.WriteLine("Finished");              }
