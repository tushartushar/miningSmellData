Implementation smell,Namespace,Class,File,Method,Description
Long Method,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The method has 121 lines of code.
Long Method,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,CreateChildControls,The method has 123 lines of code.
Long Method,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,GetEditControl,The method has 141 lines of code.
Long Method,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The method has 117 lines of code.
Long Method,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetTableSchema,The method has 180 lines of code.
Long Method,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetSelectSql,The method has 199 lines of code.
Long Method,SubSonic,MySqlInnoDBDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlInnoDBDataProvider.cs,GetTableSchema,The method has 163 lines of code.
Long Method,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,GetTableSchema,The method has 111 lines of code.
Long Method,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,BuildWhere,The method has 122 lines of code.
Long Method,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetTableSchema,The method has 185 lines of code.
Long Method,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetSelectSql,The method has 194 lines of code.
Long Method,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,ScriptData,The method has 126 lines of code.
Long Method,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,BuildConstraintSQL,The method has 132 lines of code.
Long Method,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The method has 254 lines of code.
Long Method,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,KeyWordCheck,The method has 170 lines of code.
Complex Method,SubSonic,ActiveHelper<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\ActiveHelper.cs,GetUpdateCommand,Cyclomatic complexity of the method is 11
Complex Method,SubSonic,ActiveRecord<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\ActiveRecord.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,ValidateColumnSettings,Cyclomatic complexity of the method is 8
Complex Method,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,LoadFromPost,Cyclomatic complexity of the method is 10
Complex Method,SubSonic,BuildProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\BuildProvider.cs,GenerateCode,Cyclomatic complexity of the method is 9
Complex Method,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,Cyclomatic complexity of the method is 21
Complex Method,SubSonic,DropDown,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\DropDown.cs,OnInit,Cyclomatic complexity of the method is 15
Complex Method,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,LoadColumnNames,Cyclomatic complexity of the method is 8
Complex Method,SubSonic,QuickTable,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\QuickTable.cs,LoadGrid,Cyclomatic complexity of the method is 11
Complex Method,SubSonic,QuickTable,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\QuickTable.cs,BuildRows,Cyclomatic complexity of the method is 9
Complex Method,SubSonic,RadioButtons,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\RadioButton.cs,OnInit,Cyclomatic complexity of the method is 11
Complex Method,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,CreateChildControls,Cyclomatic complexity of the method is 11
Complex Method,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,InsertRecord,Cyclomatic complexity of the method is 10
Complex Method,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,BindGrid,Cyclomatic complexity of the method is 17
Complex Method,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,AddParams,Cyclomatic complexity of the method is 9
Complex Method,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetSelectSql,Cyclomatic complexity of the method is 12
Complex Method,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetInsertSql,Cyclomatic complexity of the method is 8
Complex Method,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,ScriptData,Cyclomatic complexity of the method is 10
Complex Method,SubSonic,MySqlInnoDBDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlInnoDBDataProvider.cs,GetTableSchema,Cyclomatic complexity of the method is 20
Complex Method,SubSonic,OracleDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\OracleDataProvider.cs,GetSelectSql,Cyclomatic complexity of the method is 8
Complex Method,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,ScriptData,Cyclomatic complexity of the method is 10
Complex Method,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,BuildWhereSQLite,Cyclomatic complexity of the method is 12
Complex Method,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,GetTableSchema,Cyclomatic complexity of the method is 12
Complex Method,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,ScriptData,Cyclomatic complexity of the method is 12
Complex Method,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,AddWhereParameters,Cyclomatic complexity of the method is 10
Complex Method,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,GetUpdateSql,Cyclomatic complexity of the method is 13
Complex Method,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,BuildWhere,Cyclomatic complexity of the method is 18
Complex Method,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetTableSchema,Cyclomatic complexity of the method is 18
Complex Method,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetSelectSql,Cyclomatic complexity of the method is 24
Complex Method,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,ScriptData,Cyclomatic complexity of the method is 8
Complex Method,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,FindColumn,Cyclomatic complexity of the method is 8
Complex Method,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,BuildConstraintSQL,Cyclomatic complexity of the method is 10
Complex Method,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,ExecuteJoinedDataSet,Cyclomatic complexity of the method is 13
Complex Method,SubSonic,Join,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Join.cs,Join,Cyclomatic complexity of the method is 17
Complex Method,SubSonic,Query,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,ExecuteJoinedDataSet,Cyclomatic complexity of the method is 19
Complex Method,SubSonic.WebUtility,RESTHandler,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\RESTHandler.cs,GenerateReturnSet,Cyclomatic complexity of the method is 9
Complex Method,SubSonic.Parser,XmlToJSONParser,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\XmlToJSONParser.cs,XmlToJSONnode,Cyclomatic complexity of the method is 8
Complex Method,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,ReadableDiff,Cyclomatic complexity of the method is 8
Complex Method,SubSonic.Sugar,Web,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Web.cs,GenerateLoremIpsum,Cyclomatic complexity of the method is 16
Long Parameter List,SubSonic,CodeService,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CodeService.cs,PrepareTemplate,The method has 5 parameters. Parameters: templateName' templateType' settings' language' provider
Long Parameter List,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumSql,The method has 5 parameters. Parameters: idCol' descriptionCol' keyCol' tablename' sqlWhereClause
Long Parameter List,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumHeaderFooter,The method has 7 parameters. Parameters: tblName' EnumName' IdCol' DescriptionCol' EnumRowScript' idColIsString' isVb
Long Parameter List,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The method has 6 parameters. Parameters: provider' tbl' GenerateEnumDebugText' EnumSettings' EnumSettingsExclude' language
Long Parameter List,SubSonic,Migration,C:\repos\subsonic_SubSonic-2.0\SubSonic\Migrations\Migration.cs,AddColumn,The method has 5 parameters. Parameters: tableName' columnName' dbType' length' nullable
Long Parameter List,SubSonic,Migration,C:\repos\subsonic_SubSonic-2.0\SubSonic\Migrations\Migration.cs,AddColumn,The method has 6 parameters. Parameters: tableName' columnName' dbType' length' nullable' defaultValue
Long Parameter List,SubSonic,Migration,C:\repos\subsonic_SubSonic-2.0\SubSonic\Migrations\Migration.cs,AlterColumn,The method has 5 parameters. Parameters: tableName' columnName' dbType' length' nullable
Long Parameter List,SubSonic,Migration,C:\repos\subsonic_SubSonic-2.0\SubSonic\Migrations\Migration.cs,AlterColumn,The method has 6 parameters. Parameters: tableName' columnName' dbType' length' nullable' defaultValue
Long Parameter List,SubSonic,Table,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\TableSchema.cs,AddColumn,The method has 5 parameters. Parameters: columnName' dbType' length' nullable' defaultValue
Long Parameter List,SubSonic,TableColumnCollection,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\TableSchema.cs,Add,The method has 6 parameters. Parameters: tableSchema' name' dbType' isNullable' isPrimaryKey' isForeignKey
Long Parameter List,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,BuildConstraintSQL,The method has 5 parameters. Parameters: constraintOperator' sb' isFirst' expressionIsOpen' c
Long Parameter List,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,CreateJoin,The method has 5 parameters. Parameters: fromTable' fromColumn' toTable' toColumn' type
Long Parameter List,SubSonic,Constraint,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Constraint.cs,Constraint,The method has 5 parameters. Parameters: condition' constraintColumnName' constraintQualifiedColumnName' constraintConstructionFragment' sqlQuery
Long Parameter List,SubSonic,Query,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,WHERE,The method has 5 parameters. Parameters: tableName' parameterName' columnName' comp' paramValue
Long Parameter List,SubSonic,Query,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,WHERE,The method has 6 parameters. Parameters: tableName' parameterName' columnName' comp' paramValue' condition
Long Parameter List,SubSonic,Query,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,BETWEEN_AND,The method has 5 parameters. Parameters: tableName' columName' dateStart' dateEnd' condition
Long Parameter List,SubSonic,Query,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,AddWhere,The method has 5 parameters. Parameters: tableName' parameterName' columnName' comp' paramValue
Long Parameter List,SubSonic,Query,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,AddWhere,The method has 6 parameters. Parameters: tableName' parameterName' columnName' comp' paramValue' condition
Long Parameter List,SubSonic,Query,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,AddBetweenAnd,The method has 5 parameters. Parameters: tableName' columName' dateStart' dateEnd' condition
Long Parameter List,SubSonic,QueryCommand,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\QueryCommand.cs,AddParameter,The method has 7 parameters. Parameters: parameterName' parameterValue' maxSize' dbType' direction' scale' precision
Long Parameter List,SubSonic,QueryCommand,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\QueryCommand.cs,AddParameter,The method has 6 parameters. Parameters: parameterName' parameterValue' dataType' parameterDirection' scale' precision
Long Parameter List,SubSonic,QueryCommand,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\QueryCommand.cs,AddParameter,The method has 5 parameters. Parameters: parameterName' parameterValue' dataType' scale' precision
Long Parameter List,SubSonic,QueryCommand,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\QueryCommand.cs,AddOutputParameter,The method has 5 parameters. Parameters: parameterName' maxSize' dbType' scale' precision
Long Parameter List,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,LoadDropDown,The method has 5 parameters. Parameters: ddl' collection' textField' valueField' initialSelection
Long Parameter List,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,LoadListItems,The method has 5 parameters. Parameters: list' tblBind' tblVals' textField' valField
Long Parameter List,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,LoadListItems,The method has 6 parameters. Parameters: listCollection' dataReader' textField' valueField' selectedValue' closeReader
Long Identifier,SubSonic,TemplateName,C:\repos\subsonic_SubSonic-2.0\SubSonic\Constants.cs,,The length of the parameter GENERATED_SCAFFOLD_CODE_BEHIND is 30.
Long Identifier,SubSonic,ConfigurationPropertyName,C:\repos\subsonic_SubSonic-2.0\SubSonic\Constants.cs,,The length of the parameter EXTRACT_CLASS_NAME_FROM_SP_NAME is 31.
Long Identifier,SubSonic,ConfigurationPropertyName,C:\repos\subsonic_SubSonic-2.0\SubSonic\Constants.cs,,The length of the parameter GENERATE_RELATED_TABLES_AS_PROPERTIES is 37.
Long Identifier,SubSonic,ConfigurationPropertyName,C:\repos\subsonic_SubSonic-2.0\SubSonic\Constants.cs,,The length of the parameter SET_PROPERTY_DEFAULTS_FROM_DATABASE is 35.
Long Identifier,SubSonic,RegexPattern,C:\repos\subsonic_SubSonic-2.0\SubSonic\Constants.cs,,The length of the parameter EMBEDDED_CLASS_NAME_UNDERSCORE_MATCH is 36.
Long Identifier,SubSonic,RegexPattern,C:\repos\subsonic_SubSonic-2.0\SubSonic\Constants.cs,,The length of the parameter EMBEDDED_CLASS_NAME_UNDERSCORE_REPLACE is 38.
Long Identifier,SubSonic,ExtendedPropertyName,C:\repos\subsonic_SubSonic-2.0\SubSonic\Constants.cs,,The length of the parameter SSX_COLUMN_BINARY_FILE_EXTENSION is 32.
Long Identifier,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,,The length of the parameter _editTableItemCaptionCellCssClass is 33.
Long Identifier,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,,The length of the parameter ThrowExceptionOnDefaultIsExpression is 35.
Long Identifier,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,,The length of the parameter EXTENDED_PROPERTIES_COLUMNS_2000 is 32.
Long Identifier,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,,The length of the parameter EXTENDED_PROPERTIES_TABLES_2000 is 31.
Long Identifier,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,,The length of the parameter generateRelatedTablesAsProperties is 33.
Long Identifier,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,,The length of the parameter setPropertyDefaultsFromDatabase is 31.
Long Identifier,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,,The length of the parameter EXTENDED_PROPERTIES_COLUMNS_2000 is 32.
Long Identifier,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,,The length of the parameter EXTENDED_PROPERTIES_TABLES_2000 is 31.
Long Identifier,SubSonic,Constraint,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Constraint.cs,Constraint,The length of the parameter constraintConstructionFragment is 30.
Long Identifier,SubSonic,Constraint,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Constraint.cs,Constraint,The length of the parameter constraintConstructionFragment is 30.
Long Statement,SubSonic,PropertyComparer<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\PropertyComparer.cs,Compare,The length of the statement  "            return _direction == ListSortDirection.Ascending ? CompareAscending(xValue' yValue) : CompareDescending(xValue' yValue); " is 120.
Long Statement,SubSonic,PropertyComparer<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\PropertyComparer.cs,CompareAscending,The length of the statement  "                result = xValue.Equals(yValue) ? 0 : xValue.ToString().CompareTo(yValue.ToString()); // If values don't implement IComparer but are equivalent " is 142.
Long Statement,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,Inspect,The length of the statement  "                    sb.AppendFormat("<tr><td><span style=\"font-weight:bold\">{0}</span></td><td>{1}</td></tr>"' col.ColumnName' GetColumnValue<object>(col.ColumnName)); " is 149.
Long Statement,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,GetErrors,The length of the statement  "            // TODO: This does the *exact* same thing as the Errors property' why are there two of them?  If there is a good reason it should be documented. " is 144.
Long Statement,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,LoadFromPost,The length of the statement  "                            "Validation error - catch this and check the ExceptionList property to review the exceptions. You can change the output message as needed by accessing the ExceptionMessage properties of this object"); " is 200.
Long Statement,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,SetDefaults,The length of the statement  "                        QueryCommand cmdDefault = new QueryCommand(String.Concat(SqlFragment.SELECT' col.DefaultSetting)' col.Table.Provider.Name); " is 123.
Long Statement,SubSonic,CodeService,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CodeService.cs,RunTemplate,The length of the statement  "                string replaceHolder = String.Concat("#"' Enum.GetName(typeof(ReplacementVariable)' var.Variable).ToUpper(new CultureInfo("en"))' "#"); " is 135.
Long Statement,SubSonic,CodeService,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CodeService.cs,RunTemplate,The length of the statement  "                templateText = Utility.FastReplace(templateText' replaceHolder' var.ReplaceWith' StringComparison.InvariantCultureIgnoreCase); " is 126.
Long Statement,SubSonic,CodeService,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CodeService.cs,BuildODSTemplate,The length of the statement  "                return PrepareTemplate(String.Concat("ODS Controller - "' provider.Name' ": "' tableName)' TemplateType.ODSController' list' language' provider); " is 145.
Long Statement,SubSonic,CodeService,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CodeService.cs,BuildClassTemplate,The length of the statement  "                return PrepareTemplate(String.Concat("Class - "' provider.Name' ": "' tableName)' TemplateType.Class' list' language' provider); " is 128.
Long Statement,SubSonic,CodeService,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CodeService.cs,BuildViewTemplate,The length of the statement  "                return PrepareTemplate(String.Concat("View - "' provider.Name' ": "' tableName)' TemplateType.ReadOnly' list' language' provider); " is 130.
Long Statement,SubSonic,CodeService,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CodeService.cs,PrepareTemplate,The length of the statement  "                string replaceHolder = String.Concat("#"' Enum.GetName(typeof(ReplacementVariable)' var.Variable).ToUpper(new CultureInfo("en"))' "#"); " is 135.
Long Statement,SubSonic,CodeService,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CodeService.cs,PrepareTemplate,The length of the statement  "                templateText = Utility.FastReplace(templateText' replaceHolder' var.ReplaceWith' StringComparison.InvariantCultureIgnoreCase); " is 126.
Long Statement,SubSonic,CodeService,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CodeService.cs,GetTemplateText,The length of the statement  "                    Utility.WriteTrace(String.Concat("Template "' template' " NOT FOUND in directory "' templateDirectory' "; using embedded resource template instead...")); " is 153.
Long Statement,SubSonic,TurboCompiler,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CompileEngine.cs,AddTemplate,The length of the statement  "                    Utility.FastReplace(template.TemplateText' "#TEMPLATENUMBER#"' Templates.Count.ToString()' StringComparison.InvariantCultureIgnoreCase); " is 136.
Long Statement,SubSonic,TurboCompiler,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CompileEngine.cs,Run,The length of the statement  "                        const string errorMessage = "Error generating template code: This usually indicates an error in template itself' such as use of reserved words. Detail: "; " is 154.
Long Statement,SubSonic,TurboCompiler,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CompileEngine.cs,ScrubOutput,The length of the statement  "                // This is should be executed last. While this value will ultimately be removed' it can be inserted in a template to keep an earlier operation from executing. " is 158.
Long Statement,SubSonic,TurboCompiler,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CompileEngine.cs,ScrubOutput,The length of the statement  "                // For example: <System.ComponentModel.DataObject()> Public Class MyController would normally wrap to a second line due upstream processing' which would " is 152.
Long Statement,SubSonic,TurboCompiler,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CompileEngine.cs,ScrubOutput,The length of the statement  "                // result in VB code that won't compile. However' <System.ComponentModel.DataObject()> Public [MONKEY_WRENCH]Class MyController' would not. " is 139.
Long Statement,SubSonic,TurboCompiler,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\CompileEngine.cs,CallEntry,The length of the statement  "                    MethodInfo mi = type.GetMethod(Templates[i].EntryPoint' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static); " is 124.
Long Statement,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumSql,The length of the statement  "			return "SELECT " + idCol + "'" + descriptionCol + (keyCol == "" ? "" : "'" + keyCol) + " FROM " + tablename + " " + sqlWhereClause; " is 131.
Long Statement,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The length of the statement  "				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (matched ? "" : "not ") + "matched '" + regExFind + "'"; } " is 151.
Long Statement,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The length of the statement  "				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (excluded ? "" : "not ") + "excluded '" + enumSettingExlude.Trim() + "'"; } " is 168.
Long Statement,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The length of the statement  "						SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enumSetting could not be matched to ID" + (isMulti ? "' Key " : "") " is 129.
Long Statement,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The length of the statement  "								SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enum generation was specfied but the database table had no records\r\n"; " is 134.
Long Statement,SubSonic,TurboTemplate,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\Template.cs,ParseTemplate,The length of the statement  "                    writer.Write(String.Concat("\t\t\twriter.Write(@\""' templateInputText.Substring(lnLast' lnAt - lnLast).Replace("\""' "\"\"")' "\" );")); " is 137.
Long Statement,SubSonic,TurboTemplate,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\Template.cs,ParseTemplate,The length of the statement  "                    writer.Write(String.Concat("\t\t\twriter.Write(@\""' templateInputText.Substring(lnLast' templateInputText.Length - lnLast).Replace("\""' "\"\"")' "\" );")); " is 157.
Long Statement,SubSonic,TurboTemplate,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\Template.cs,LoadTextFromManifest,The length of the statement  "            Stream stream = asm.GetManifestResourceStream(String.Format("SubSonic.CodeGeneration.Templates.{0}"' templateFileName)); " is 120.
Long Statement,SubSonic,CalendarControl,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Calendar\CalendarControl.cs,OnPreRender,The length of the statement  "            string csslink = "<link href='" + Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Calendar.skin.theme.css") + "' rel='stylesheet' type='text/css' />"; " is 168.
Long Statement,SubSonic,CalendarControl,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Calendar\CalendarControl.cs,OnPreRender,The length of the statement  "            Page.ClientScript.RegisterClientScriptInclude("CalendarMain"' Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Calendar.calendar.js")); " is 152.
Long Statement,SubSonic,CalendarControl,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Calendar\CalendarControl.cs,OnPreRender,The length of the statement  "            Page.ClientScript.RegisterClientScriptInclude("CalendarSetup"' Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Calendar.calendar-setup.js")); " is 159.
Long Statement,SubSonic,CalendarControl,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Calendar\CalendarControl.cs,OnPreRender,The length of the statement  "                Page.ClientScript.RegisterClientScriptInclude("CalendarLanguage"' Page.ClientScript.GetWebResourceUrl(GetType()' langPrefix + DEFAULT_LANGUAGE + ".js")); " is 153.
Long Statement,SubSonic,CalendarControl,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Calendar\CalendarControl.cs,OnPreRender,The length of the statement  "                Page.ClientScript.RegisterClientScriptInclude("CalendarLanguage"' Page.ClientScript.GetWebResourceUrl(GetType()' langPrefix + Language + ".js")); " is 145.
Long Statement,SubSonic,ManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\ManyManyList.cs,CreateChildControls,The length of the statement  "            if(String.IsNullOrEmpty(primaryKeyValue) || String.IsNullOrEmpty(primaryTableName) || String.IsNullOrEmpty(mapTableName)) " is 121.
Long Statement,SubSonic,ManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\ManyManyList.cs,CreateChildControls,The length of the statement  "                    "Missing a setting. Please be sure to set the PrimaryKeyValue (e.g. 'ProductID'' PrimaryTableName (e.g. 'Products')' and MapTableName (e.g. Product_Category_Map)"); " is 164.
Long Statement,SubSonic,ManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\ManyManyList.cs,CreateChildControls,The length of the statement  "                    throw new Exception("Invalid ForeignTextField. Please be sure to set the value to a field name from " + foreignTableName); " is 122.
Long Statement,SubSonic,ManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\ManyManyList.cs,CreateChildControls,The length of the statement  "            QueryCommand cmd = new QueryCommand("SELECT " + fkPK + "'" + foreignTextColumn + " FROM " + foreignTableName + ";"' providerName); " is 130.
Long Statement,SubSonic,ManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\ManyManyList.cs,CreateChildControls,The length of the statement  "            cmd.CommandSql += "SELECT " + fkPK + " FROM " + mapTableName + " WHERE " + pkTable.PrimaryKey.ColumnName + " = " + idParam; " is 123.
Long Statement,SubSonic,ManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\ManyManyList.cs,Save,The length of the statement  "                    string iSql = "INSERT INTO " + mapTableName + " (" + fkPK + "' " + pk + ")" + " VALUES (" + fkParam + "'" + pkParam + ")"; " is 122.
Long Statement,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,BuildMappedElementCommand,The length of the statement  "                    String.Format("INNER JOIN {0} ON {0}.{1}={2}.{1} WHERE {2}.{3}={4} AND {5}"' ForeignTableName' ForeignValueColumnName' MapTableName' MapTableFkToPrimaryTable' " is 158.
Long Statement,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,BuildMappedElementCommand,The length of the statement  "            cmd.Parameters.Add(idParam' PrimaryKeyValue' DataService.GetSchema(PrimaryTableName' ProviderName).PrimaryKey.DataType); " is 120.
Long Statement,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,BuildForeignQueryCommand,The length of the statement  "                new QueryCommand(String.Format("SELECT {0}'{1} FROM {2} {3};"' ForeignValueColumnName' ForeignTextColumnName' ForeignTableName' userFilterAndSort)' ProviderName); " is 162.
Long Statement,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,CreateChildControls,The length of the statement  "            if(String.IsNullOrEmpty(PrimaryKeyValue) || String.IsNullOrEmpty(PrimaryTableName) || String.IsNullOrEmpty(ProviderName) || String.IsNullOrEmpty(MapTableName)) " is 159.
Long Statement,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,CreateChildControls,The length of the statement  "                    "Missing a setting. Please be sure to set the PrimaryKeyValue (e.g. 'ProductID'' PrimaryTableName (e.g. 'Products')' ProviderName (e.g. 'Northwind')' and MapTableName (e.g. Product_Category_Map)"); " is 197.
Long Statement,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,Save,The length of the statement  "            QueryCommand lookupCmd = new QueryCommand(String.Empty' ProviderName); // quick hack to re-use BuildMappedElementCommand " is 120.
Long Statement,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,Save,The length of the statement  "                    sql = String.Format("INSERT INTO {0} ({1}'{2}) VALUES ({3}'{4})"' MapTableName' MapTableFkToForeignTable' MapTableFkToPrimaryTable' fkParam' pkParam); " is 150.
Long Statement,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,Save,The length of the statement  "                    sql = String.Format("DELETE FROM {0} WHERE {1} = {2} AND {3} = {4}"' MapTableName' MapTableFkToPrimaryTable' pkParam' MapTableFkToForeignTable' fkParam); " is 153.
Long Statement,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,Save,The length of the statement  "                cmd.Parameters.Add(pkParam' PrimaryKeyValue' DataService.GetSchema(PrimaryTableName' ProviderName).PrimaryKey.DataType); " is 120.
Long Statement,SubSonic,QuickTable,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\QuickTable.cs,LoadGrid,The length of the statement  "                throw new ArgumentException("No tableName property set - please be sure to set the name of the table or view you'd like to see"' tableName); " is 140.
Long Statement,SubSonic,QuickTable,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\QuickTable.cs,CreateChildControls,The length of the statement  "            schema = DataService.GetSchema(tableName' ProviderName' TableType.Table) ?? DataService.GetSchema(tableName' ProviderName' TableType.View); " is 139.
Long Statement,SubSonic,QuickTable,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\QuickTable.cs,BuildHeader,The length of the statement  "                            throw new Exception("Invalid Custom Columns. If you want to pass in a custom colum' it should be in the form 'columnName:Replacement Name'"); " is 141.
Long Statement,SubSonic,QuickTable,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\QuickTable.cs,BuildRows,The length of the statement  "            string cellAttributeAltValue = String.IsNullOrEmpty(tableCellCSSClass) ? tableAlternatingStyle : tableAlternatingCSSClass; " is 122.
Long Statement,SubSonic,QuickTable,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\QuickTable.cs,BuildRows,The length of the statement  "                            link = "<a href=\"" + linkToPage.Replace("{0}"' dr[schema.PrimaryKey.ColumnName].ToString()) + "\">" + td.InnerHtml + "</a>"; " is 125.
Long Statement,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,DeleteRecord,The length of the statement  "                throw new SecurityException(String.Format("This row can not be deleted as it has {0} read-only fields"' listReadOnlyColumns.Count)); " is 132.
Long Statement,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,ShowMessage,The length of the statement  "                lblMessage.Text = String.Format("{0}<br/><span style=\"font-style:italic\">{1}</span>"' message' TableSchema.Provider.Now); " is 123.
Long Statement,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,GetEditControl,The length of the statement  "                if(cOut.GetType() == typeof(TextBox)) //Not Redundant! CalendarControl is TextBox == true; myCalendarControl.GetType() == typeof(TextBox) == false! " is 147.
Long Statement,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,BindGrid,The length of the statement  "                    if(!Utility.IsAuditField(dt.Columns[dtColIndex].ColumnName) && !listHiddenGridColumns.Contains(dt.Columns[dtColIndex].ColumnName.ToLower())) " is 140.
Long Statement,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,SaveManyToMany,The length of the statement  "                    SqlQuery qryDelete = new Delete().From(mapTable).Where(m2m.MapTableLocalTableKeyColumn).IsEqualTo(PrimaryKeyControlValue); " is 122.
Long Statement,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,CreateEditor,The length of the statement  "                                            "<div style='padding: 2px;'><div style='float:left'>Characters Remaining:&nbsp;</div><div id=\"counter{0}\" style=\"visibility:hidden\">{1}</div></div>"' " is 153.
Long Statement,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,AddManyToMany,The length of the statement  "                SqlQuery queryMappings = new Select(mapTable.Provider).From(mapTable).Where(mapTable.GetColumn(m2m.MapTableLocalTableKeyColumn)).IsEqualTo(PrimaryKeyValue); " is 156.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,AddParams,The length of the statement  "            // If this declaration is not done' the command object's parameters are simply assigned in order to SQL parameters as they are  " is 126.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,AddParams,The length of the statement  "            // encountered without regard to name.  Hence the ability to maintain the meaning of parameters through the parameter name and to  " is 129.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,AddParams,The length of the statement  "            // It is assumed that this declaration is done already for Stored Procedures' since we don't have the SQL at hand anyway. " is 121.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,AddParams,The length of the statement  "                        paramDeclaration += (paramDeclaration == String.Empty ? "" : "' ") + FormatParameterNameForSQL(param.ParameterName) + " " + ddlDataType; " is 136.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,AddParams,The length of the statement  "                    OleDbParameter sqlParam = new OleDbParameter(FormatParameterNameForSQL(param.ParameterName)' GetOleDBType(param.DataType)); " is 123.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,AddParams,The length of the statement  "                    //Debug.WriteLine(param.ParameterName + "' " + param.Size + "' " + param.DataType + "' " + sqlParam.Size + "' " + sqlParam.DbType); " is 131.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,AddParams,The length of the statement  "                s += i++.ToString() + ". " + prop.ParameterName + ": " + prop.DataType.ToString() + ": " + val.ToString() + Environment.NewLine; " is 128.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,AddParams,The length of the statement  "            //    s += i++.ToString() + ". " + prop.ParameterName + ": " + prop.OleDbType.ToString() + ": " + prop.Value.ToString() + Environment.NewLine; " is 142.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,CheckoutOutputParams,The length of the statement  "            //        if (param.Mode == ParameterDirection.InputOutput || param.Mode == ParameterDirection.Output || param.Mode == ParameterDirection.ReturnValue) " is 150.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,SetExtendedColumnProperties,The length of the statement  "                drColumnProps = dtExtProps.Select("TableName ='" + tblSchema.TableName + "' AND ColumnName = '" + col.ColumnName + "'"); " is 120.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetTableSchema,The length of the statement  "//                    Debug.WriteLine(drColumns[i]["COLUMN_NAME"] + ": flags = " + drColumns[i]["COLUMN_FLAGS"] + "   type = " + drColumns[i]["DATA_TYPE"]); " is 156.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetTableSchema,The length of the statement  "                                + " has an invalid default '" + tempDefaultSetting + "'.  Expressions containing functions cannot be specified as defaults"); " is 125.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetSPList,The length of the statement  "                                    if (GetSPParams(procName) != null && !dr[AccessSchemaVariable.PROCEDURE_DEF].ToString().TrimStart().StartsWith("PARAMETERS")) " is 125.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetPrimaryKeyTableNames,The length of the statement  "                list.Add(new string[] { dr[AccessSchemaVariable.FK_TABLE_NAME].ToString()' dr[AccessSchemaVariable.FK_COLUMN_NAME].ToString() }); " is 129.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetSelectSql,The length of the statement  "                            string fkAlias = "(SELECT [" + fkTable.Descriptor.ColumnName + "] FROM [" + col.ForeignKeyTableName + "] WHERE [" + col.ForeignKeyTableName + " is 141.
Long Statement,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetSelectSql,The length of the statement  "                                string columnReference = qry.Schema.Provider.QualifyColumnName(qry.Schema.SchemaName' qry.Schema.Name' colPrimaryTable.ColumnName); " is 131.
Long Statement,SubSonic,ELib3DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\ELib3DataProvider.cs,GetReader,The length of the statement  "            DbCommand cmd = qry.CommandType == CommandType.Text ? db.GetSqlStringCommand(qry.CommandSql) : db.GetStoredProcCommand(qry.CommandSql); " is 135.
Long Statement,SubSonic,ELib3DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\ELib3DataProvider.cs,GetDataSetCommand,The length of the statement  "            DbCommand cmd = qry.CommandType == CommandType.Text ? db.GetSqlStringCommand(qry.CommandSql) : db.GetStoredProcCommand(qry.CommandSql); " is 135.
Long Statement,SubSonic,ELib3DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\ELib3DataProvider.cs,ExecuteScalar,The length of the statement  "            DbCommand cmd = qry.CommandType == CommandType.Text ? db.GetSqlStringCommand(qry.CommandSql) : db.GetStoredProcCommand(qry.CommandSql); " is 135.
Long Statement,SubSonic,ELib3DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\ELib3DataProvider.cs,ExecuteQuery,The length of the statement  "            DbCommand cmd = qry.CommandType == CommandType.Text ? db.GetSqlStringCommand(qry.CommandSql) : db.GetStoredProcCommand(qry.CommandSql); " is 135.
Long Statement,SubSonic,ELib3DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\ELib3DataProvider.cs,ExecuteTransaction,The length of the statement  "                        cmd = qry.CommandType == CommandType.Text ? db.GetSqlStringCommand(qry.CommandSql) : db.GetStoredProcCommand(qry.CommandSql); " is 125.
Long Statement,SubSonic,ELib3DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\ELib3DataProvider.cs,GetDbCommand,The length of the statement  "            DbCommand cmd = qry.CommandType == CommandType.StoredProcedure ? db.GetStoredProcCommand(qry.CommandSql) : db.GetSqlStringCommand(qry.CommandSql); " is 146.
Long Statement,SubSonic,MySqlInnoDBDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlInnoDBDataProvider.cs,GetForeignKeyTableName,The length of the statement  "                    "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE COLUMN_NAME = ?ColumnName AND CONSTRAINT_NAME = 'PRIMARY' AND TABLE_SCHEMA = ?DatabaseName"; " is 158.
Long Statement,SubSonic,MySqlInnoDBDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlInnoDBDataProvider.cs,GetForeignKeyTableName,The length of the statement  "                    "SELECT REFERENCED_TABLE_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE COLUMN_NAME = ?ColumnName AND TABLE_NAME = ?TableName AND TABLE_SCHEMA = ?DatabaseName"; " is 165.
Long Statement,SubSonic,MySqlInnoDBDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlInnoDBDataProvider.cs,GetTableSchema,The length of the statement  "                    DataRow[] drMap = dsManyToManyMap.Tables[Name].Select("FK_Table = '" + mapTable + "' AND PK_Table <> '" + tableName + "'"); " is 123.
Long Statement,SubSonic,OracleDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\OracleDataProvider.cs,CheckoutOutputParams,The length of the statement  "                    if (param.Mode == ParameterDirection.InputOutput || param.Mode == ParameterDirection.Output || param.Mode == ParameterDirection.ReturnValue) " is 140.
Long Statement,SubSonic,OracleDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\OracleDataProvider.cs,GetSelectSql,The length of the statement  "                    "WITH pagedtable AS (SELECT {0}' ROW_NUMBER () OVER ({1}) AS rowindex FROM {2}.{3} {4}) SELECT {5}' rowindex FROM pagedtable WHERE rowindex >= {6} AND rowindex < {7} ORDER BY rowindex"; " is 185.
Long Statement,SubSonic,OracleDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\OracleDataProvider.cs,GetSelectSql,The length of the statement  "                query = string.Format(cteFormat' columns' order'table.SchemaName' table.Name' where' columns.Replace(table.Name + "."' String.Empty)' start' end); " is 146.
Long Statement,SubSonic,OracleDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\OracleDataProvider.cs,GetInsertSql,The length of the statement  "            Boolean retrieveID = (qry.Schema.PrimaryKeys.Length == 1 && qry.Schema.PrimaryKey.DataType == DbType.Decimal && !this.containsBinaryField(qry.Schema)); " is 151.
Long Statement,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetTableSchema,The length of the statement  "                column.IsForeignKey = (fks.Select(string.Format("TABLE_NAME = '{0}' AND FKEY_FROM_COLUMN = '{1}'"' tableName' column.ColumnName)).Length > 0); " is 142.
Long Statement,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetForeignKeyTableName,The length of the statement  "            DataRow[] pksCols = fks.Select(string.Format("TABLE_NAME = '{0}' AND FKEY_FROM_COLUMN = '{1}'"' tableName' fkColumnName)); " is 122.
Long Statement,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetTableNameByPrimaryKey,The length of the statement  "            DataRow[] tables = indexes.Select(string.Format("PRIMARY_KEY = True AND INDEX_NAME = '{0}'"' index[0][INDEX_NAME_INDEX])); " is 122.
Long Statement,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,BuildWhereSQLite,The length of the statement  "                whereOperator = isFirstPass ? SqlFragment.WHERE : " " + Enum.GetName(typeof(Where.WhereCondition)' wWhere.Condition) + " "; " is 123.
Long Statement,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,BuildWhereSQLite,The length of the statement  "                    whereOperator = isFirstPass ? SqlFragment.WHERE : " " + Enum.GetName(typeof(Where.WhereCondition)' between.Condition) + " "; " is 124.
Long Statement,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,GetReader,The length of the statement  "                rdr = automaticConnectionScope.IsUsingSharedConnection ? cmd.ExecuteReader() : cmd.ExecuteReader(CommandBehavior.CloseConnection); " is 130.
Long Statement,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,SetExtendedTableProperties,The length of the statement  "                    drTableProps = dsExtendedProperties.Tables[Name].Select("TABLE_NAME ='" + tblSchema.TableName + "' AND COLUMN_NAME IS NULL"); " is 125.
Long Statement,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,SetExtendedTableProperties,The length of the statement  "                        tblSchema.ExtendedProperties.Add(new TableSchema.ExtendedProperty(drTableProps[i]["EXTENDED_NAME"].ToString()' drTableProps[i]["EXTENDED_VALUE"].ToString())); " is 158.
Long Statement,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,SetExtendedColumnProperties,The length of the statement  "                    drColumnProps = dsExtendedProperties.Tables[Name].Select("TABLE_NAME ='" + tableSchema.TableName + "' AND COLUMN_NAME = '" + tableColumn.ColumnName + "'"); " is 155.
Long Statement,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,GetTableNameList,The length of the statement  "                QueryCommand cmd = new QueryCommand("select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_TYPE = 'TABLE'"' Name); " is 121.
Long Statement,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,GetForeignKeyTableName,The length of the statement  "            QueryCommand cmd = new QueryCommand("/* GetForeignKeyTableName(" + fkColumnName + "'" + tableName + ") */ " + GET_FOREIGN_KEY_SQL' Name); " is 137.
Long Statement,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,GetUpdateSql,The length of the statement  "                cols.Append(Utility.MakeParameterAssignment(ReservedColumnName.MODIFIED_ON' ReservedColumnName.MODIFIED_ON' query.Provider)); " is 125.
Long Statement,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,GetUpdateSql,The length of the statement  "                cols.Append(Utility.MakeParameterAssignment(ReservedColumnName.MODIFIED_BY' ReservedColumnName.MODIFIED_BY' query.Provider)); " is 125.
Long Statement,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,BuildWhere,The length of the statement  "                    whereOperator = isFirstPass ? SqlFragment.WHERE : String.Concat(" "' Enum.GetName(typeof(Where.WhereCondition)' wWhere.Condition)' " "); " is 136.
Long Statement,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,BuildWhere,The length of the statement  "                    whereOperator = isFirstPass ? SqlFragment.WHERE : String.Concat(" "' Enum.GetName(typeof(Where.WhereCondition)' between.Condition)' " "); " is 137.
Long Statement,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,Initialize,The length of the statement  "            ApplyConfig(config' ref generateRelatedTablesAsProperties' ConfigurationPropertyName.GENERATE_RELATED_TABLES_AS_PROPERTIES); " is 124.
Long Statement,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,Initialize,The length of the statement  "            ApplyConfig(config' ref setPropertyDefaultsFromDatabase' ConfigurationPropertyName.SET_PROPERTY_DEFAULTS_FROM_DATABASE); " is 120.
Long Statement,SubSonic,DataService,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataService.cs,LoadProviders,The length of the statement  "                            section = ConfigSectionSettings ?? (SubSonicSection)ConfigurationManager.GetSection(ConfigurationSectionName.SUB_SONIC_SERVICE); " is 128.
Long Statement,SubSonic,DataService,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataService.cs,LoadProviders,The length of the statement  "                                throw new ProviderException("No providers could be located in the SubSonicService section of the application config file."); " is 124.
Long Statement,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,CheckoutOutputParams,The length of the statement  "                    if(param.Mode == ParameterDirection.InputOutput || param.Mode == ParameterDirection.Output || param.Mode == ParameterDirection.ReturnValue) " is 139.
Long Statement,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,GetTableSchema,The length of the statement  "                                sSize = sType.Substring(sType.IndexOf("(")' sType.Length - sType.IndexOf("(")).Replace(")"' String.Empty).Replace("("' String.Empty); " is 133.
Long Statement,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,GetTableNameList,The length of the statement  "                        cmd.CommandText = "select table_name from information_schema.tables where table_schema = ?databaseName and table_type <> 'VIEW'"; " is 129.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,AddParams,The length of the statement  "                    SqlParameter sqlParam = new SqlParameter(param.ParameterName' Utility.GetSqlDBType(param.DataType)) {Direction = param.Mode}; " is 125.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,CheckoutOutputParams,The length of the statement  "                    if(param.Mode == ParameterDirection.InputOutput || param.Mode == ParameterDirection.Output || param.Mode == ParameterDirection.ReturnValue) " is 139.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetReader,The length of the statement  "                rdr = automaticConnectionScope.IsUsingSharedConnection ? cmd.ExecuteReader() : cmd.ExecuteReader(CommandBehavior.CloseConnection); " is 130.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetSingleRecordReader,The length of the statement  "            return automaticConnectionScope.IsUsingSharedConnection ? cmd.ExecuteReader() : cmd.ExecuteReader(CommandBehavior.CloseConnection | CommandBehavior.SingleRow); " is 159.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,SetExtendedTableProperties,The length of the statement  "                    drTableProps = dsExtendedProperties.Tables[Name].Select(String.Format("TABLE_NAME ='{0}' AND COLUMN_NAME IS NULL"' tblSchema.TableName)); " is 137.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,SetExtendedTableProperties,The length of the statement  "                    drTableProps = dsExtendedProperties.Tables[Name].Select(String.Format("TABLE_NAME ='{0}' AND COLUMN_NAME IS NULL"' tblSchema.TableName)); " is 137.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,SetExtendedTableProperties,The length of the statement  "                    drTableProps = dsExtendedProperties.Tables[Name].Select(String.Format("TABLE_NAME ='{0}' AND COLUMN_NAME IS NULL"' tblSchema.TableName)); " is 137.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,SetExtendedTableProperties,The length of the statement  "                        tblSchema.ExtendedProperties.Add(new TableSchema.ExtendedProperty(drTableProps[i]["EXTENDED_NAME"].ToString()' drTableProps[i]["EXTENDED_VALUE"].ToString())); " is 158.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,SetExtendedColumnProperties,The length of the statement  "                        dsExtendedProperties.Tables[Name].Select(String.Format("TABLE_NAME ='{0}' AND COLUMN_NAME = '{1}'"' tableSchema.TableName' tableColumn.ColumnName)); " is 148.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,SetExtendedColumnProperties,The length of the statement  "                            tableColumn.ExtendedProperties.Add(new TableSchema.ExtendedProperty(extendedPropertyName' drColumnProps[j]["EXTENDED_VALUE"].ToString())); " is 138.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetTableSchema,The length of the statement  "            DataRow[] drColumns = dsColumns.Tables[Name].Select(String.Format("TableName ='{0}'"' tableName)' "OrdinalPosition ASC"); " is 121.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetTableSchema,The length of the statement  "                    column.DefaultSetting = defaultSetting.ToLower().IndexOf("newsequentialid()") > -1 ? SqlSchemaVariable.DEFAULT : defaultSetting; " is 128.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetTableSchema,The length of the statement  "                    DataRow[] drMap = dsManyToManyMap.Tables[Name].Select(String.Format("FK_Table = '{0}' AND PK_Table <> '{1}'"' mapTable' tableName)); " is 132.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetSPList,The length of the statement  "            //QueryCommand cmd = new QueryCommand("/* GetSPList() */ select name from sysobjects where xtype = 'P' AND name not like 'sp_%'"' Name); " is 136.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetPrimaryKeyTableNames,The length of the statement  "            QueryCommand cmd = new QueryCommand(String.Concat("/* GetPrimaryKeyTableNames("' tableName' ") */ "' GET_PRIMARY_KEY_SQL)' Name); " is 129.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetPrimaryKeyTables,The length of the statement  "            QueryCommand cmd = new QueryCommand(String.Concat("/* GetPrimaryKeyTables("' tableName' ") */ "' GET_PRIMARY_KEY_SQL)' Name); " is 125.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetForeignKeyTableName,The length of the statement  "            QueryCommand cmd = new QueryCommand(String.Concat("/* GetForeignKeyTableName("' fkColumnName' "'"' tableName' ") */ "' GET_FOREIGN_KEY_SQL)' Name); " is 147.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetForeignKeyTableName,The length of the statement  "            QueryCommand cmd = new QueryCommand(String.Concat("/* GetForeignKeyTableName("' fkColumnName' ") */ "' GET_TABLE_SQL)' Name); " is 125.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetForeignKeyTables,The length of the statement  "            QueryCommand cmd = new QueryCommand(String.Concat("/* GetForeignKeyTables("' tableName' ") */ "' FOREIGN_TABLE_LIST)' Name); " is 124.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetTableNameByPrimaryKey,The length of the statement  "            QueryCommand cmd = new QueryCommand(String.Concat("/* GetTableNameByPrimaryKey("' pkName' ") */ "' TABLE_BY_PK)' providerName); " is 127.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetSelectSql,The length of the statement  "                string select = String.Concat("/* GetSelectSql("' table.Name' ") */ "' SqlFragment.SELECT' distinct' SqlFragment.TOP' qry.Top' " "); " is 132.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetSelectSql,The length of the statement  "                            string fkAlias = String.Format("(SELECT [{0}] FROM [{1}] WHERE [{1}].[{2}]=[{3}].[{4}]) as {4}"' fkTable.Descriptor.ColumnName' col.ForeignKeyTableName' " is 152.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetSelectSql,The length of the statement  "                    if ((table.PrimaryKey != null && table.PrimaryKeys.Length==1) && (!qry.IsDistinct || columns.Contains(table.PrimaryKey.ColumnName))) " is 132.
Long Statement,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetInsertSql,The length of the statement  "            string insertSQL = String.Concat("/* GetInsertSql("' table.Name' ") */ "' SqlFragment.INSERT_INTO' table.QualifiedName); " is 120.
Long Statement,SubSonic,Inflector,C:\repos\subsonic_SubSonic-2.0\SubSonic\Inflector.cs,AddIrregularRule,The length of the statement  "            AddPluralRule(String.Concat("("' singular[0]' ")"' singular.Substring(1)' "$")' String.Concat("$1"' plural.Substring(1))); " is 122.
Long Statement,SubSonic,Inflector,C:\repos\subsonic_SubSonic-2.0\SubSonic\Inflector.cs,AddIrregularRule,The length of the statement  "            AddSingularRule(String.Concat("("' plural[0]' ")"' plural.Substring(1)' "$")' String.Concat("$1"' singular.Substring(1))); " is 122.
Long Statement,SubSonic,Inflector,C:\repos\subsonic_SubSonic-2.0\SubSonic\Inflector.cs,AddUnderscores,The length of the statement  "            return Regex.Replace(Regex.Replace(Regex.Replace(pascalCasedWord' @"([A-Z]+)([A-Z][a-z])"' "$1_$2")' @"([a-z\d])([A-Z])"' "$1_$2")' @"[-\s]"' "_").ToLower(); " is 157.
Long Statement,SubSonic,AbstractTableSchema,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\TableSchema.cs,ApplyExtendedProperties,The length of the statement  "                ExtendedProperty epClassName = ExtendedProperty.GetExtendedProperty(ExtendedProperties' ExtendedPropertyName.SSX_TABLE_CLASS_NAME_SINGULAR); " is 140.
Long Statement,SubSonic,AbstractTableSchema,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\TableSchema.cs,ApplyExtendedProperties,The length of the statement  "                ExtendedProperty epClassNamePlural = ExtendedProperty.GetExtendedProperty(ExtendedProperties' ExtendedPropertyName.SSX_TABLE_CLASS_NAME_PLURAL); " is 144.
Long Statement,SubSonic,AbstractTableSchema,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\TableSchema.cs,ApplyExtendedProperties,The length of the statement  "                ExtendedProperty epDisplayName = ExtendedProperty.GetExtendedProperty(ExtendedProperties' ExtendedPropertyName.SSX_TABLE_DISPLAY_NAME); " is 135.
Long Statement,SubSonic,TableColumn,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\TableSchema.cs,ApplyExtendedProperties,The length of the statement  "                ExtendedProperty epPropertyName = ExtendedProperty.GetExtendedProperty(ExtendedProperties' ExtendedPropertyName.SSX_COLUMN_PROPERTY_NAME); " is 138.
Long Statement,SubSonic,TableColumn,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\TableSchema.cs,ApplyExtendedProperties,The length of the statement  "                ExtendedProperty epDisplayName = ExtendedProperty.GetExtendedProperty(ExtendedProperties' ExtendedPropertyName.SSX_COLUMN_DISPLAY_NAME); " is 136.
Long Statement,SubSonic,InlineQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\InlineQuery.cs,LoadCommandParams,The length of the statement  "                    "The parameter count doesn't match up with the values entered - this could be our fault with our parser; please check the list to make sure the count adds up' and if it does' please add some spacing around the parameters in the list"); " is 235.
Long Statement,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,BuildConstraintSQL,The length of the statement  "                        columnName = Utility.FastReplace(c.ConstructionFragment' col.ColumnName' col.QualifiedName' StringComparison.InvariantCultureIgnoreCase); " is 137.
Long Statement,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,BuildConstraintSQL,The length of the statement  "					c.ParameterName = Utility.AddStringToQualifiedName(query.Provider.FormatParameterNameForSQL(rawColumnName)' constraintIndexStr); " is 128.
Long Statement,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,GenerateWhere,The length of the statement  "            List<Constraint> nonAggregateConstraints = query.Constraints.FindAll(delegate(Constraint cs) { return !cs.IsAggregate; }); " is 122.
Long Statement,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,GetCountSelect,The length of the statement  "                getCountSelect = String.Concat(String.Concat(query.SQLCommand' Aggregate.Count("*"' "CountOfRecords"))' GenerateFromList()' GenerateJoins()' " is 140.
Long Statement,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,BuildPagedSelectStatement,The length of the statement  "            string sql = string.Format(PAGING_SQL' idColumn' String.Concat(fromLine' joins' wheres)' String.Concat(tweakedWheres' orderby' havings)' " is 136.
Long Statement,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,BuildForeignKeyStatement,The length of the statement  "            string sql = string.Format(sqlFormat' manyTable.Table.QualifiedName' fkName' manyTable.ColumnName' oneTable.Table.QualifiedName' oneTable.ColumnName); " is 150.
Long Statement,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,GenerateColumns,The length of the statement  "                createSql.AppendFormat("\r\n  {0}{1}'"' tableSchema.Provider.FormatIdentifier(col.ColumnName)' GenerateColumnAttributes(col)); " is 126.
Long Statement,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,GenerateColumnAttributes,The length of the statement  "                    sb.Append(" CONSTRAINT DF_" + column.Table.Name + "_" + column.ColumnName + " DEFAULT (" + column.DefaultSetting + ")"); " is 120.
Long Statement,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,GenerateAggregateSelect,The length of the statement  "                return String.Format("{0}({1}) AS '{2}'"' Aggregate.GetFunctionType(aggregate).ToUpperInvariant()' aggregate.ColumnName' aggregate.Alias); " is 138.
Long Statement,SubSonic,Insert,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Insert.cs,Init,The length of the statement  "                throw new SqlQueryException("Can't find the table schema - please specify the provider if there is more than one' or check the spelling"); " is 138.
Long Statement,SubSonic,Insert,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Insert.cs,AddValues,The length of the statement  "                throw new SqlQueryException("The Select list and value list don't match - they need to match exactly if you're creating an INSERT VALUES query"); " is 145.
Long Statement,SubSonic,Insert,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Insert.cs,Execute,The length of the statement  "            QueryCommand cmd = provider != null ? new QueryCommand(sql' provider.Name) : new QueryCommand(sql' DataService.Provider.Name); " is 126.
Long Statement,SubSonic,OracleGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\OracleGenerator.cs,GenerateAggregateSelect,The length of the statement  "                return String.Format("{0}({1}) AS \"{2}\""' Aggregate.GetFunctionType(aggregate).ToUpper()' aggregate.ColumnName' aggregate.Alias); " is 131.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,Where,The length of the statement  "            Constraint c = new Constraint(ConstraintType.Where'  aggregate.ColumnName' aggregate.ColumnName' aggregate.WithoutAlias()' this) " is 128.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,Or,The length of the statement  "            Constraint c = new Constraint(ConstraintType.Or' aggregate.ColumnName' aggregate.ColumnName' aggregate.WithoutAlias()' this) " is 124.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,And,The length of the statement  "            Constraint c = new Constraint(ConstraintType.And' aggregate.ColumnName' aggregate.ColumnName' aggregate.WithoutAlias()' this) " is 125.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,GenerateException,The length of the statement  "                message = "You're trying to connect to a database in your App_Data directory' and your SQL Server installation does not support User Instances."; " is 145.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,GenerateException,The length of the statement  "                    "The joins on your query are not ordered properly - make sure you're not repeating a table in the first (or 'from') position on a join that's also specified in FROM. Also - a JOIN can't have two of the same table in the 'from' first position. Check the SQL output to see how to order this properly"; " is 299.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,SetConstraintParams,The length of the statement  "                { // bferrier Do not bind a varible for IsNull  as the test of Is NULL is already added and unbound variables in some DB's throws an error " is 138.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,CreateJoin,The length of the statement  "                throw new InvalidOperationException("You must specify at least one FROM table so we know what to join on - use From()"); " is 120.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,CreateJoin,The length of the statement  "            //    throw new Exception("Can't find join columns for these tables - you might need to be explicit here' spcecifying the columns to join on instead"); " is 151.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,ExecuteXML,The length of the statement  "            xml = xml.Replace("<NewDataSet>"' String.Concat("<"' resultSetName' ">")).Replace("</NewDataSet>"' String.Concat("</"' resultSetName' ">")); " is 140.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,ExecuteXML,The length of the statement  "                xml = xml.Replace("<Table>"' String.Concat("<"' itemName' ">")).Replace("</Table>"' String.Concat("</"' itemName' ">")); " is 120.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,BuildTypedResult,The length of the statement  "                    cachedProps[i] = iType.GetProperty(rdr.GetName(i)' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase); " is 122.
Long Statement,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,GetConstraintDbType,The length of the statement  "            if(!String.IsNullOrEmpty(ProviderName) && !String.IsNullOrEmpty(providerTable) && !String.IsNullOrEmpty(providerColumn)) " is 120.
Long Statement,SubSonic,Constraint,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Constraint.cs,In,The length of the statement  "                throw new SqlQueryException("You must specify exactly one column to return for the IN to be valid. Use Select(\"column\") to do this"); " is 135.
Long Statement,SubSonic,Constraint,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Constraint.cs,NotIn,The length of the statement  "                throw new SqlQueryException("You must specify exactly one column to return for the NOT IN to be valid. Use Select(\"column\") to do this"); " is 139.
Long Statement,SubSonic,Update,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Update.cs,Init,The length of the statement  "                throw new SqlQueryException("Can't find the table schema - please specify the provider if there is more than one' or check the spelling"); " is 138.
Long Statement,SubSonic,QueryCommand,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\QueryCommand.cs,AddParameter,The length of the statement  "                                           ParameterName = CommandType == CommandType.StoredProcedure ? parameterName : Provider.FormatParameterNameForSQL(parameterName)' " is 127.
Long Statement,SubSonic,QueryCommand,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\QueryCommand.cs,AddParameter,The length of the statement  "            AddParameter(parameterName' parameterValue' QueryParameter.DefaultSize' dataType' parameterDirection' scale' precision); " is 120.
Long Statement,SubSonic,QueryCommand,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\QueryCommand.cs,AddParameter,The length of the statement  "            AddParameter(parameterName' parameterValue' QueryParameter.DefaultSize' dataType' QueryParameter.DefaultParameterDirection' null' null); " is 136.
Long Statement,SubSonic,QueryCommand,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\QueryCommand.cs,AddParameter,The length of the statement  "            AddParameter(parameterName' parameterValue' QueryParameter.DefaultSize' dataType' QueryParameter.DefaultParameterDirection' scale' precision); " is 142.
Long Statement,SubSonic,QueryCommand,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\QueryCommand.cs,AddReturnParameter,The length of the statement  "                AddParameter(String.Concat(Provider.GetParameterPrefix()' "RETURN_VALUE")' null' DbType.Int32' ParameterDirection.ReturnValue); " is 127.
Long Statement,SubSonic.WebUtility,RESTHandler,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\RESTHandler.cs,FormatOutput,The length of the statement  "                result = result.Replace("<NewDataSet>"' String.Concat("<"' tableName' ">")).Replace("</NewDataSet>"' String.Concat("</"' tableName' ">")); " is 138.
Long Statement,SubSonic.WebUtility,RESTHandler,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\RESTHandler.cs,FormatOutput,The length of the statement  "                result = result.Replace("<Table>"' String.Concat("<"' itemName' ">")).Replace("</Table>"' String.Concat("</"' itemName' ">")); " is 126.
Long Statement,SubSonic.Sugar,Web,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Web.cs,GenerateLoremIpsum,The length of the statement  "            if(String.IsNullOrEmpty(method) || method.ToLower() == "p" || (method.ToLower() != "p" && method.ToLower() != "c" && method.ToLower() != "w")) " is 142.
Long Statement,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,DataTableToHtmlTable,The length of the statement  "                sb.AppendFormat("<table style=\"width: {0}\" cellpadding=\"4\" cellspacing=\"0\"><thead style=\"background-color: #dcdcdc\">"' tableWidth); " is 139.
Long Statement,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The length of the statement  "                if(schema.Columns[0].IsPrimaryKey && schema.Columns[0].IsForeignKey && schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) " is 136.
Long Statement,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The length of the statement  "                    if(IsMatch(schema.Columns[0].ColumnName' relatedTableColumn) || IsMatch(schema.Columns[1].ColumnName' relatedTableColumn)) " is 122.
Long Statement,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The length of the statement  "                if((schema.Columns[0].IsPrimaryKey && !schema.Columns[0].IsForeignKey) && (schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) && " is 143.
Long Statement,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The length of the statement  "                    if(IsMatch(schema.Columns[1].ColumnName' relatedTableColumn) || IsMatch(schema.Columns[2].ColumnName' relatedTableColumn)) " is 122.
Long Statement,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The length of the statement  "            if(schema.Columns.Count == 2 && schema.Columns[0].IsPrimaryKey && schema.Columns[0].IsForeignKey && schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) " is 165.
Long Statement,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,GetDefaultSetting,The length of the statement  "            if(IsMatch(column.ColumnName' ReservedColumnName.CREATED_ON) || IsMatch(column.ColumnName' ReservedColumnName.MODIFIED_ON)) " is 123.
Long Statement,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,RegexTransform,The length of the statement  "                    rx = provider.RegexIgnoreCase ? new Regex(provider.RegexMatchExpression' RegexOptions.IgnoreCase) : new Regex(provider.RegexMatchExpression); " is 141.
Complex Conditional,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The conditional expression  "DescriptionCol == "" && !col.IsPrimaryKey && !col.IsForeignKey   						&& col.DataType == System.Data.DbType.String"  is complex.
Complex Conditional,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The conditional expression  "!idColFound || !descColFound || (isMulti && !multiKeyColFound)"  is complex.
Complex Conditional,SubSonic,LavaBlastManyManyList,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\LavaBlastManyManyList.cs,CreateChildControls,The conditional expression  "String.IsNullOrEmpty(PrimaryKeyValue) || String.IsNullOrEmpty(PrimaryTableName) || String.IsNullOrEmpty(ProviderName) || String.IsNullOrEmpty(MapTableName)"  is complex.
Complex Conditional,SubSonic,QuickTable,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\QuickTable.cs,LoadGrid,The conditional expression  "col != null && col.MaxLength < 2048 && col.DataType != DbType.Binary && col.DataType != DbType.Byte"  is complex.
Complex Conditional,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,SetExtendedColumnProperties,The conditional expression  "UseExtendedProperties && (Utility.IsSql2005(this) || Utility.IsSql2008(this) || Utility.IsSql2014(this))"  is complex.
Complex Conditional,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetSelectSql,The conditional expression  "(table.PrimaryKey != null && table.PrimaryKeys.Length==1) && (!qry.IsDistinct || columns.Contains(table.PrimaryKey.ColumnName))"  is complex.
Complex Conditional,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,ExecuteJoinedDataSet,The conditional expression  "i == 0 && tblCol.IsForeignKey && !String.IsNullOrEmpty(tblCol.ForeignKeyTableName) && Utility.IsMappingTable(table)"  is complex.
Complex Conditional,SubSonic,OrderBy,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,SquareBracket,The conditional expression  "!String.IsNullOrEmpty(columnName) && !columnName.StartsWith("[")              && !columnName.EndsWith("]") && !columnName.Contains(".")"  is complex.
Complex Conditional,SubSonic,Query,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,ExecuteJoinedDataSet,The conditional expression  "i == 0 && tblCol.IsForeignKey && !String.IsNullOrEmpty(tblCol.ForeignKeyTableName) && Utility.IsMappingTable(table)"  is complex.
Complex Conditional,SubSonic,Query,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,ExecuteJoinedDataSet,The conditional expression  "wheres.Count > 0 || betweens.Count > 0 || inList != null || notInList != null"  is complex.
Complex Conditional,SubSonic.Sugar,Web,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Web.cs,GenerateLoremIpsum,The conditional expression  "String.IsNullOrEmpty(method) || method.ToLower() == "p" || (method.ToLower() != "p" && method.ToLower() != "c" && method.ToLower() != "w")"  is complex.
Complex Conditional,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The conditional expression  "schema.Columns[0].IsPrimaryKey && schema.Columns[0].IsForeignKey && schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey"  is complex.
Complex Conditional,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The conditional expression  "(schema.Columns[0].IsPrimaryKey && !schema.Columns[0].IsForeignKey) && (schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) &&                     (schema.Columns[2].IsPrimaryKey && schema.Columns[2].IsForeignKey)"  is complex.
Complex Conditional,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The conditional expression  "schema.Columns.Count == 2 && schema.Columns[0].IsPrimaryKey && schema.Columns[0].IsForeignKey && schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey"  is complex.
Complex Conditional,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The conditional expression  "schema.Columns.Count == 3 &&                 (schema.Columns[0].IsPrimaryKey && !schema.Columns[0].IsForeignKey) &&                 (schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) &&                 (schema.Columns[2].IsPrimaryKey && schema.Columns[2].IsForeignKey)"  is complex.
Virtual Method Call from Constructor,SubSonic,Join,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Join.cs,Join,The constructor "Join" calls a virtual method "GetTableSchema".
Virtual Method Call from Constructor,SubSonic,Join,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Join.cs,Join,The constructor "Join" calls a virtual method "GetTableSchema".
Virtual Method Call from Constructor,SubSonic,AutomaticConnectionScope,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Connection.cs,AutomaticConnectionScope,The constructor "AutomaticConnectionScope" calls a virtual method "CreateConnection".
Empty Catch Block,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,SetColumnValue,The method has an empty catch block.
Empty Catch Block,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,CopyTo,The method has an empty catch block.
Empty Catch Block,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,CopyFrom,The method has an empty catch block.
Empty Catch Block,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,Load,The method has an empty catch block.
Empty Catch Block,SubSonic,RecordBase<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\RecordBase.cs,Load,The method has an empty catch block.
Empty Catch Block,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetSPParams,The method has an empty catch block.
Empty Catch Block,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,GetTableSchema,The method has an empty catch block.
Empty Catch Block,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,GetSPParams,The method has an empty catch block.
Empty Catch Block,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,GetDatabaseVersion,The method has an empty catch block.
Magic Number,SubSonic,ReadOnlyRecord<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\ReadOnlyRecord.cs,Find,The following statement contains a magic number: foreach(TableSchema.TableColumn col in BaseSchema.Columns)              {                  string columnName = col.ColumnName;                  object columnValue = item.GetColumnValue<object>(columnName);                  if(!Utility.IsAuditField(columnName))                  {                      object defaultValue = String.Empty;                      switch(col.DataType)                      {                          case DbType.Boolean:                              defaultValue = false;                              break;                          case DbType.Currency:                          case DbType.Decimal:                          case DbType.Int16:                          case DbType.Double:                          case DbType.Int32:                              defaultValue = 0;                              break;                          case DbType.Date:                          case DbType.DateTime:                              defaultValue = new DateTime(1900' 1' 1);                              break;                          case DbType.Guid:                              defaultValue = Guid.Empty;                              break;                      }                        if(columnValue != null)                      {                          if(!columnValue.Equals(defaultValue))                              q.AddWhere(columnName' columnValue);                      }                  }              }
Magic Number,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The following statement contains a magic number: for (int k = 0; k < EnumSettings.Length; k++) {  				string enumSetting = EnumSettings[k];  				string enumSettingExlude = "";  				if (EnumSettingsExclude.Length > k) { enumSettingExlude = EnumSettingsExclude[k]; }    				string[] settings = enumSetting.Split(new char[] { ':' });  				string regExFind = "";  				if (settings.Length > 0) { regExFind = settings[0].Trim(); }    				bool matched = regExFind.Length > 0  					&& Regex.IsMatch(tbl.Name' regExFind' RegexOptions.IgnoreCase);  				bool excluded = enumSettingExlude.Trim() != ""  					&& Regex.IsMatch(tbl.Name' enumSettingExlude.Trim()' RegexOptions.IgnoreCase);    				bool found = matched && !excluded;  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (matched ? "" : "not ") + "matched '" + regExFind + "'"; }  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (excluded ? "" : "not ") + "excluded '" + enumSettingExlude.Trim() + "'"; }    				if (found) {  					string SqlScript = "";  					//if (GenerateEnumDebugText) { SqlScript += "\r\n\t\t// tbl: " + tbl.Name + "\r\n\t\t// match: " + enumSetting; }    					// Get Enum Details  					string EnumName = "";  					string IdCol = "";  					string DescriptionCol = "";  					string multiKeyCol = "";  					string SqlWhereClause = "";  					bool idColIsString = false;  					bool isMulti = false;    					bool idColFound = false;  					bool descColFound = false;  					bool multiKeyColFound = false;    					if (settings.Length > 1) { EnumName = settings[1].Trim(); }  					if (EnumName.StartsWith(MultiMarker' StringComparison.InvariantCultureIgnoreCase)) {  						isMulti = true;  						multiKeyCol = EnumName.Substring(MultiMarker.Length);  					}  					if (settings.Length > 2) { IdCol = settings[2].Trim(); }  					if (settings.Length > 3) { DescriptionCol = settings[3].Trim(); }  					if (settings.Length > 4) { SqlWhereClause = settings[4].Trim(); }    					// check the cols do actually exist if specified  					foreach (var col in tbl.Columns) {  						if (IdCol == "" && col.IsPrimaryKey) { IdCol = col.ColumnName; }  						if (DescriptionCol == "" && !col.IsPrimaryKey && !col.IsForeignKey   						&& col.DataType == System.Data.DbType.String) { DescriptionCol = col.ColumnName; }    						if (IdCol == col.ColumnName) { idColFound = true; idColIsString = (col.DataType == System.Data.DbType.String); }  						if (DescriptionCol == col.ColumnName) { descColFound = true; }    						if (isMulti && multiKeyCol == col.ColumnName) { multiKeyColFound = true; }  					}    					if (EnumName == "") { EnumName = GetEnumName(tbl.ClassName' idColIsString); }    					// generate the script or a warning message  					if (!idColFound || !descColFound || (isMulti && !multiKeyColFound)) {  						SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enumSetting could not be matched to ID" + (isMulti ? "' Key " : "")  						+ " and Description columns. Setting=" + enumSetting + "\r\n";  					}  					else {  						//pull the tables in a reader  						int rowCount = 0;  						List<string> enumValList = new List<string>();  						string enumMemberScript = "";  						string lastKeyVal = "";  						string sql = GetEnumSql(IdCol' DescriptionCol' multiKeyCol' tbl.Name' SqlWhereClause);  						try {  							using (IDataReader rdr = provider.GetReader(new QueryCommand(sql))) {  								while (rdr.Read()) {  									string enumMemberName = CleanUp(rdr[DescriptionCol].ToString());  									if (enumValList.Contains(enumMemberName)) {  										int uniqueVal = 0;  										string tempMemberName = enumMemberName;  										while (enumValList.Contains(tempMemberName)) {  											tempMemberName = enumMemberName + (++uniqueVal).ToString();  										}  										enumMemberName = tempMemberName;  									}    									string enumMemberValue = rdr[IdCol].ToString();  									string enumKeyVal = (isMulti ? CleanUp(rdr[multiKeyCol].ToString()) : "");    									if (rowCount != 0 && lastKeyVal != enumKeyVal) {  										// we are doing a multi read' use the key val to generate an enum for each block of key values  										string tempEnumName = GetEnumName(lastKeyVal' idColIsString);  										SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  										enumMemberScript = "";  									}    									if (IsVb) {  										if (idColIsString) {  											enumMemberScript += "\t\t\tPublic Const " + enumMemberName + " As String = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									} else {  										if (idColIsString) {  											enumMemberScript += "\t\t\tpublic const string " + enumMemberName + " = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += (enumMemberScript == "" ? "" : "'\r\n");  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									}    									enumValList.Add(enumMemberName);  									lastKeyVal = enumKeyVal;  									rowCount++;  								}  							}  							if (rowCount == 0) {  								SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enum generation was specfied but the database table had no records\r\n";  							}  							else {  								string tempEnumName = (isMulti ? GetEnumName(lastKeyVal' idColIsString) : EnumName);  								SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  							}  						}  						catch (Exception ex) {  							SqlScript += "\r\n\t\t" + commentmarker + " SQL fetch error in SQL \"" + sql + "\" : " + ex.Message;  						}    					}  					rtn += SqlScript;  				}  			}
Magic Number,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The following statement contains a magic number: for (int k = 0; k < EnumSettings.Length; k++) {  				string enumSetting = EnumSettings[k];  				string enumSettingExlude = "";  				if (EnumSettingsExclude.Length > k) { enumSettingExlude = EnumSettingsExclude[k]; }    				string[] settings = enumSetting.Split(new char[] { ':' });  				string regExFind = "";  				if (settings.Length > 0) { regExFind = settings[0].Trim(); }    				bool matched = regExFind.Length > 0  					&& Regex.IsMatch(tbl.Name' regExFind' RegexOptions.IgnoreCase);  				bool excluded = enumSettingExlude.Trim() != ""  					&& Regex.IsMatch(tbl.Name' enumSettingExlude.Trim()' RegexOptions.IgnoreCase);    				bool found = matched && !excluded;  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (matched ? "" : "not ") + "matched '" + regExFind + "'"; }  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (excluded ? "" : "not ") + "excluded '" + enumSettingExlude.Trim() + "'"; }    				if (found) {  					string SqlScript = "";  					//if (GenerateEnumDebugText) { SqlScript += "\r\n\t\t// tbl: " + tbl.Name + "\r\n\t\t// match: " + enumSetting; }    					// Get Enum Details  					string EnumName = "";  					string IdCol = "";  					string DescriptionCol = "";  					string multiKeyCol = "";  					string SqlWhereClause = "";  					bool idColIsString = false;  					bool isMulti = false;    					bool idColFound = false;  					bool descColFound = false;  					bool multiKeyColFound = false;    					if (settings.Length > 1) { EnumName = settings[1].Trim(); }  					if (EnumName.StartsWith(MultiMarker' StringComparison.InvariantCultureIgnoreCase)) {  						isMulti = true;  						multiKeyCol = EnumName.Substring(MultiMarker.Length);  					}  					if (settings.Length > 2) { IdCol = settings[2].Trim(); }  					if (settings.Length > 3) { DescriptionCol = settings[3].Trim(); }  					if (settings.Length > 4) { SqlWhereClause = settings[4].Trim(); }    					// check the cols do actually exist if specified  					foreach (var col in tbl.Columns) {  						if (IdCol == "" && col.IsPrimaryKey) { IdCol = col.ColumnName; }  						if (DescriptionCol == "" && !col.IsPrimaryKey && !col.IsForeignKey   						&& col.DataType == System.Data.DbType.String) { DescriptionCol = col.ColumnName; }    						if (IdCol == col.ColumnName) { idColFound = true; idColIsString = (col.DataType == System.Data.DbType.String); }  						if (DescriptionCol == col.ColumnName) { descColFound = true; }    						if (isMulti && multiKeyCol == col.ColumnName) { multiKeyColFound = true; }  					}    					if (EnumName == "") { EnumName = GetEnumName(tbl.ClassName' idColIsString); }    					// generate the script or a warning message  					if (!idColFound || !descColFound || (isMulti && !multiKeyColFound)) {  						SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enumSetting could not be matched to ID" + (isMulti ? "' Key " : "")  						+ " and Description columns. Setting=" + enumSetting + "\r\n";  					}  					else {  						//pull the tables in a reader  						int rowCount = 0;  						List<string> enumValList = new List<string>();  						string enumMemberScript = "";  						string lastKeyVal = "";  						string sql = GetEnumSql(IdCol' DescriptionCol' multiKeyCol' tbl.Name' SqlWhereClause);  						try {  							using (IDataReader rdr = provider.GetReader(new QueryCommand(sql))) {  								while (rdr.Read()) {  									string enumMemberName = CleanUp(rdr[DescriptionCol].ToString());  									if (enumValList.Contains(enumMemberName)) {  										int uniqueVal = 0;  										string tempMemberName = enumMemberName;  										while (enumValList.Contains(tempMemberName)) {  											tempMemberName = enumMemberName + (++uniqueVal).ToString();  										}  										enumMemberName = tempMemberName;  									}    									string enumMemberValue = rdr[IdCol].ToString();  									string enumKeyVal = (isMulti ? CleanUp(rdr[multiKeyCol].ToString()) : "");    									if (rowCount != 0 && lastKeyVal != enumKeyVal) {  										// we are doing a multi read' use the key val to generate an enum for each block of key values  										string tempEnumName = GetEnumName(lastKeyVal' idColIsString);  										SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  										enumMemberScript = "";  									}    									if (IsVb) {  										if (idColIsString) {  											enumMemberScript += "\t\t\tPublic Const " + enumMemberName + " As String = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									} else {  										if (idColIsString) {  											enumMemberScript += "\t\t\tpublic const string " + enumMemberName + " = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += (enumMemberScript == "" ? "" : "'\r\n");  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									}    									enumValList.Add(enumMemberName);  									lastKeyVal = enumKeyVal;  									rowCount++;  								}  							}  							if (rowCount == 0) {  								SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enum generation was specfied but the database table had no records\r\n";  							}  							else {  								string tempEnumName = (isMulti ? GetEnumName(lastKeyVal' idColIsString) : EnumName);  								SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  							}  						}  						catch (Exception ex) {  							SqlScript += "\r\n\t\t" + commentmarker + " SQL fetch error in SQL \"" + sql + "\" : " + ex.Message;  						}    					}  					rtn += SqlScript;  				}  			}
Magic Number,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The following statement contains a magic number: for (int k = 0; k < EnumSettings.Length; k++) {  				string enumSetting = EnumSettings[k];  				string enumSettingExlude = "";  				if (EnumSettingsExclude.Length > k) { enumSettingExlude = EnumSettingsExclude[k]; }    				string[] settings = enumSetting.Split(new char[] { ':' });  				string regExFind = "";  				if (settings.Length > 0) { regExFind = settings[0].Trim(); }    				bool matched = regExFind.Length > 0  					&& Regex.IsMatch(tbl.Name' regExFind' RegexOptions.IgnoreCase);  				bool excluded = enumSettingExlude.Trim() != ""  					&& Regex.IsMatch(tbl.Name' enumSettingExlude.Trim()' RegexOptions.IgnoreCase);    				bool found = matched && !excluded;  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (matched ? "" : "not ") + "matched '" + regExFind + "'"; }  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (excluded ? "" : "not ") + "excluded '" + enumSettingExlude.Trim() + "'"; }    				if (found) {  					string SqlScript = "";  					//if (GenerateEnumDebugText) { SqlScript += "\r\n\t\t// tbl: " + tbl.Name + "\r\n\t\t// match: " + enumSetting; }    					// Get Enum Details  					string EnumName = "";  					string IdCol = "";  					string DescriptionCol = "";  					string multiKeyCol = "";  					string SqlWhereClause = "";  					bool idColIsString = false;  					bool isMulti = false;    					bool idColFound = false;  					bool descColFound = false;  					bool multiKeyColFound = false;    					if (settings.Length > 1) { EnumName = settings[1].Trim(); }  					if (EnumName.StartsWith(MultiMarker' StringComparison.InvariantCultureIgnoreCase)) {  						isMulti = true;  						multiKeyCol = EnumName.Substring(MultiMarker.Length);  					}  					if (settings.Length > 2) { IdCol = settings[2].Trim(); }  					if (settings.Length > 3) { DescriptionCol = settings[3].Trim(); }  					if (settings.Length > 4) { SqlWhereClause = settings[4].Trim(); }    					// check the cols do actually exist if specified  					foreach (var col in tbl.Columns) {  						if (IdCol == "" && col.IsPrimaryKey) { IdCol = col.ColumnName; }  						if (DescriptionCol == "" && !col.IsPrimaryKey && !col.IsForeignKey   						&& col.DataType == System.Data.DbType.String) { DescriptionCol = col.ColumnName; }    						if (IdCol == col.ColumnName) { idColFound = true; idColIsString = (col.DataType == System.Data.DbType.String); }  						if (DescriptionCol == col.ColumnName) { descColFound = true; }    						if (isMulti && multiKeyCol == col.ColumnName) { multiKeyColFound = true; }  					}    					if (EnumName == "") { EnumName = GetEnumName(tbl.ClassName' idColIsString); }    					// generate the script or a warning message  					if (!idColFound || !descColFound || (isMulti && !multiKeyColFound)) {  						SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enumSetting could not be matched to ID" + (isMulti ? "' Key " : "")  						+ " and Description columns. Setting=" + enumSetting + "\r\n";  					}  					else {  						//pull the tables in a reader  						int rowCount = 0;  						List<string> enumValList = new List<string>();  						string enumMemberScript = "";  						string lastKeyVal = "";  						string sql = GetEnumSql(IdCol' DescriptionCol' multiKeyCol' tbl.Name' SqlWhereClause);  						try {  							using (IDataReader rdr = provider.GetReader(new QueryCommand(sql))) {  								while (rdr.Read()) {  									string enumMemberName = CleanUp(rdr[DescriptionCol].ToString());  									if (enumValList.Contains(enumMemberName)) {  										int uniqueVal = 0;  										string tempMemberName = enumMemberName;  										while (enumValList.Contains(tempMemberName)) {  											tempMemberName = enumMemberName + (++uniqueVal).ToString();  										}  										enumMemberName = tempMemberName;  									}    									string enumMemberValue = rdr[IdCol].ToString();  									string enumKeyVal = (isMulti ? CleanUp(rdr[multiKeyCol].ToString()) : "");    									if (rowCount != 0 && lastKeyVal != enumKeyVal) {  										// we are doing a multi read' use the key val to generate an enum for each block of key values  										string tempEnumName = GetEnumName(lastKeyVal' idColIsString);  										SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  										enumMemberScript = "";  									}    									if (IsVb) {  										if (idColIsString) {  											enumMemberScript += "\t\t\tPublic Const " + enumMemberName + " As String = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									} else {  										if (idColIsString) {  											enumMemberScript += "\t\t\tpublic const string " + enumMemberName + " = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += (enumMemberScript == "" ? "" : "'\r\n");  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									}    									enumValList.Add(enumMemberName);  									lastKeyVal = enumKeyVal;  									rowCount++;  								}  							}  							if (rowCount == 0) {  								SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enum generation was specfied but the database table had no records\r\n";  							}  							else {  								string tempEnumName = (isMulti ? GetEnumName(lastKeyVal' idColIsString) : EnumName);  								SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  							}  						}  						catch (Exception ex) {  							SqlScript += "\r\n\t\t" + commentmarker + " SQL fetch error in SQL \"" + sql + "\" : " + ex.Message;  						}    					}  					rtn += SqlScript;  				}  			}
Magic Number,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The following statement contains a magic number: for (int k = 0; k < EnumSettings.Length; k++) {  				string enumSetting = EnumSettings[k];  				string enumSettingExlude = "";  				if (EnumSettingsExclude.Length > k) { enumSettingExlude = EnumSettingsExclude[k]; }    				string[] settings = enumSetting.Split(new char[] { ':' });  				string regExFind = "";  				if (settings.Length > 0) { regExFind = settings[0].Trim(); }    				bool matched = regExFind.Length > 0  					&& Regex.IsMatch(tbl.Name' regExFind' RegexOptions.IgnoreCase);  				bool excluded = enumSettingExlude.Trim() != ""  					&& Regex.IsMatch(tbl.Name' enumSettingExlude.Trim()' RegexOptions.IgnoreCase);    				bool found = matched && !excluded;  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (matched ? "" : "not ") + "matched '" + regExFind + "'"; }  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (excluded ? "" : "not ") + "excluded '" + enumSettingExlude.Trim() + "'"; }    				if (found) {  					string SqlScript = "";  					//if (GenerateEnumDebugText) { SqlScript += "\r\n\t\t// tbl: " + tbl.Name + "\r\n\t\t// match: " + enumSetting; }    					// Get Enum Details  					string EnumName = "";  					string IdCol = "";  					string DescriptionCol = "";  					string multiKeyCol = "";  					string SqlWhereClause = "";  					bool idColIsString = false;  					bool isMulti = false;    					bool idColFound = false;  					bool descColFound = false;  					bool multiKeyColFound = false;    					if (settings.Length > 1) { EnumName = settings[1].Trim(); }  					if (EnumName.StartsWith(MultiMarker' StringComparison.InvariantCultureIgnoreCase)) {  						isMulti = true;  						multiKeyCol = EnumName.Substring(MultiMarker.Length);  					}  					if (settings.Length > 2) { IdCol = settings[2].Trim(); }  					if (settings.Length > 3) { DescriptionCol = settings[3].Trim(); }  					if (settings.Length > 4) { SqlWhereClause = settings[4].Trim(); }    					// check the cols do actually exist if specified  					foreach (var col in tbl.Columns) {  						if (IdCol == "" && col.IsPrimaryKey) { IdCol = col.ColumnName; }  						if (DescriptionCol == "" && !col.IsPrimaryKey && !col.IsForeignKey   						&& col.DataType == System.Data.DbType.String) { DescriptionCol = col.ColumnName; }    						if (IdCol == col.ColumnName) { idColFound = true; idColIsString = (col.DataType == System.Data.DbType.String); }  						if (DescriptionCol == col.ColumnName) { descColFound = true; }    						if (isMulti && multiKeyCol == col.ColumnName) { multiKeyColFound = true; }  					}    					if (EnumName == "") { EnumName = GetEnumName(tbl.ClassName' idColIsString); }    					// generate the script or a warning message  					if (!idColFound || !descColFound || (isMulti && !multiKeyColFound)) {  						SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enumSetting could not be matched to ID" + (isMulti ? "' Key " : "")  						+ " and Description columns. Setting=" + enumSetting + "\r\n";  					}  					else {  						//pull the tables in a reader  						int rowCount = 0;  						List<string> enumValList = new List<string>();  						string enumMemberScript = "";  						string lastKeyVal = "";  						string sql = GetEnumSql(IdCol' DescriptionCol' multiKeyCol' tbl.Name' SqlWhereClause);  						try {  							using (IDataReader rdr = provider.GetReader(new QueryCommand(sql))) {  								while (rdr.Read()) {  									string enumMemberName = CleanUp(rdr[DescriptionCol].ToString());  									if (enumValList.Contains(enumMemberName)) {  										int uniqueVal = 0;  										string tempMemberName = enumMemberName;  										while (enumValList.Contains(tempMemberName)) {  											tempMemberName = enumMemberName + (++uniqueVal).ToString();  										}  										enumMemberName = tempMemberName;  									}    									string enumMemberValue = rdr[IdCol].ToString();  									string enumKeyVal = (isMulti ? CleanUp(rdr[multiKeyCol].ToString()) : "");    									if (rowCount != 0 && lastKeyVal != enumKeyVal) {  										// we are doing a multi read' use the key val to generate an enum for each block of key values  										string tempEnumName = GetEnumName(lastKeyVal' idColIsString);  										SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  										enumMemberScript = "";  									}    									if (IsVb) {  										if (idColIsString) {  											enumMemberScript += "\t\t\tPublic Const " + enumMemberName + " As String = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									} else {  										if (idColIsString) {  											enumMemberScript += "\t\t\tpublic const string " + enumMemberName + " = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += (enumMemberScript == "" ? "" : "'\r\n");  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									}    									enumValList.Add(enumMemberName);  									lastKeyVal = enumKeyVal;  									rowCount++;  								}  							}  							if (rowCount == 0) {  								SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enum generation was specfied but the database table had no records\r\n";  							}  							else {  								string tempEnumName = (isMulti ? GetEnumName(lastKeyVal' idColIsString) : EnumName);  								SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  							}  						}  						catch (Exception ex) {  							SqlScript += "\r\n\t\t" + commentmarker + " SQL fetch error in SQL \"" + sql + "\" : " + ex.Message;  						}    					}  					rtn += SqlScript;  				}  			}
Magic Number,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The following statement contains a magic number: for (int k = 0; k < EnumSettings.Length; k++) {  				string enumSetting = EnumSettings[k];  				string enumSettingExlude = "";  				if (EnumSettingsExclude.Length > k) { enumSettingExlude = EnumSettingsExclude[k]; }    				string[] settings = enumSetting.Split(new char[] { ':' });  				string regExFind = "";  				if (settings.Length > 0) { regExFind = settings[0].Trim(); }    				bool matched = regExFind.Length > 0  					&& Regex.IsMatch(tbl.Name' regExFind' RegexOptions.IgnoreCase);  				bool excluded = enumSettingExlude.Trim() != ""  					&& Regex.IsMatch(tbl.Name' enumSettingExlude.Trim()' RegexOptions.IgnoreCase);    				bool found = matched && !excluded;  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (matched ? "" : "not ") + "matched '" + regExFind + "'"; }  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (excluded ? "" : "not ") + "excluded '" + enumSettingExlude.Trim() + "'"; }    				if (found) {  					string SqlScript = "";  					//if (GenerateEnumDebugText) { SqlScript += "\r\n\t\t// tbl: " + tbl.Name + "\r\n\t\t// match: " + enumSetting; }    					// Get Enum Details  					string EnumName = "";  					string IdCol = "";  					string DescriptionCol = "";  					string multiKeyCol = "";  					string SqlWhereClause = "";  					bool idColIsString = false;  					bool isMulti = false;    					bool idColFound = false;  					bool descColFound = false;  					bool multiKeyColFound = false;    					if (settings.Length > 1) { EnumName = settings[1].Trim(); }  					if (EnumName.StartsWith(MultiMarker' StringComparison.InvariantCultureIgnoreCase)) {  						isMulti = true;  						multiKeyCol = EnumName.Substring(MultiMarker.Length);  					}  					if (settings.Length > 2) { IdCol = settings[2].Trim(); }  					if (settings.Length > 3) { DescriptionCol = settings[3].Trim(); }  					if (settings.Length > 4) { SqlWhereClause = settings[4].Trim(); }    					// check the cols do actually exist if specified  					foreach (var col in tbl.Columns) {  						if (IdCol == "" && col.IsPrimaryKey) { IdCol = col.ColumnName; }  						if (DescriptionCol == "" && !col.IsPrimaryKey && !col.IsForeignKey   						&& col.DataType == System.Data.DbType.String) { DescriptionCol = col.ColumnName; }    						if (IdCol == col.ColumnName) { idColFound = true; idColIsString = (col.DataType == System.Data.DbType.String); }  						if (DescriptionCol == col.ColumnName) { descColFound = true; }    						if (isMulti && multiKeyCol == col.ColumnName) { multiKeyColFound = true; }  					}    					if (EnumName == "") { EnumName = GetEnumName(tbl.ClassName' idColIsString); }    					// generate the script or a warning message  					if (!idColFound || !descColFound || (isMulti && !multiKeyColFound)) {  						SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enumSetting could not be matched to ID" + (isMulti ? "' Key " : "")  						+ " and Description columns. Setting=" + enumSetting + "\r\n";  					}  					else {  						//pull the tables in a reader  						int rowCount = 0;  						List<string> enumValList = new List<string>();  						string enumMemberScript = "";  						string lastKeyVal = "";  						string sql = GetEnumSql(IdCol' DescriptionCol' multiKeyCol' tbl.Name' SqlWhereClause);  						try {  							using (IDataReader rdr = provider.GetReader(new QueryCommand(sql))) {  								while (rdr.Read()) {  									string enumMemberName = CleanUp(rdr[DescriptionCol].ToString());  									if (enumValList.Contains(enumMemberName)) {  										int uniqueVal = 0;  										string tempMemberName = enumMemberName;  										while (enumValList.Contains(tempMemberName)) {  											tempMemberName = enumMemberName + (++uniqueVal).ToString();  										}  										enumMemberName = tempMemberName;  									}    									string enumMemberValue = rdr[IdCol].ToString();  									string enumKeyVal = (isMulti ? CleanUp(rdr[multiKeyCol].ToString()) : "");    									if (rowCount != 0 && lastKeyVal != enumKeyVal) {  										// we are doing a multi read' use the key val to generate an enum for each block of key values  										string tempEnumName = GetEnumName(lastKeyVal' idColIsString);  										SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  										enumMemberScript = "";  									}    									if (IsVb) {  										if (idColIsString) {  											enumMemberScript += "\t\t\tPublic Const " + enumMemberName + " As String = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									} else {  										if (idColIsString) {  											enumMemberScript += "\t\t\tpublic const string " + enumMemberName + " = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += (enumMemberScript == "" ? "" : "'\r\n");  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									}    									enumValList.Add(enumMemberName);  									lastKeyVal = enumKeyVal;  									rowCount++;  								}  							}  							if (rowCount == 0) {  								SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enum generation was specfied but the database table had no records\r\n";  							}  							else {  								string tempEnumName = (isMulti ? GetEnumName(lastKeyVal' idColIsString) : EnumName);  								SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  							}  						}  						catch (Exception ex) {  							SqlScript += "\r\n\t\t" + commentmarker + " SQL fetch error in SQL \"" + sql + "\" : " + ex.Message;  						}    					}  					rtn += SqlScript;  				}  			}
Magic Number,SubSonic,EnumTemplateHelper,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\EnumTemplateHelper.cs,GetEnumScript,The following statement contains a magic number: for (int k = 0; k < EnumSettings.Length; k++) {  				string enumSetting = EnumSettings[k];  				string enumSettingExlude = "";  				if (EnumSettingsExclude.Length > k) { enumSettingExlude = EnumSettingsExclude[k]; }    				string[] settings = enumSetting.Split(new char[] { ':' });  				string regExFind = "";  				if (settings.Length > 0) { regExFind = settings[0].Trim(); }    				bool matched = regExFind.Length > 0  					&& Regex.IsMatch(tbl.Name' regExFind' RegexOptions.IgnoreCase);  				bool excluded = enumSettingExlude.Trim() != ""  					&& Regex.IsMatch(tbl.Name' enumSettingExlude.Trim()' RegexOptions.IgnoreCase);    				bool found = matched && !excluded;  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (matched ? "" : "not ") + "matched '" + regExFind + "'"; }  				if (GenerateEnumDebugText) { rtn += "\r\n\t\t" + commentmarker + " " + k.ToString() + ": " + (excluded ? "" : "not ") + "excluded '" + enumSettingExlude.Trim() + "'"; }    				if (found) {  					string SqlScript = "";  					//if (GenerateEnumDebugText) { SqlScript += "\r\n\t\t// tbl: " + tbl.Name + "\r\n\t\t// match: " + enumSetting; }    					// Get Enum Details  					string EnumName = "";  					string IdCol = "";  					string DescriptionCol = "";  					string multiKeyCol = "";  					string SqlWhereClause = "";  					bool idColIsString = false;  					bool isMulti = false;    					bool idColFound = false;  					bool descColFound = false;  					bool multiKeyColFound = false;    					if (settings.Length > 1) { EnumName = settings[1].Trim(); }  					if (EnumName.StartsWith(MultiMarker' StringComparison.InvariantCultureIgnoreCase)) {  						isMulti = true;  						multiKeyCol = EnumName.Substring(MultiMarker.Length);  					}  					if (settings.Length > 2) { IdCol = settings[2].Trim(); }  					if (settings.Length > 3) { DescriptionCol = settings[3].Trim(); }  					if (settings.Length > 4) { SqlWhereClause = settings[4].Trim(); }    					// check the cols do actually exist if specified  					foreach (var col in tbl.Columns) {  						if (IdCol == "" && col.IsPrimaryKey) { IdCol = col.ColumnName; }  						if (DescriptionCol == "" && !col.IsPrimaryKey && !col.IsForeignKey   						&& col.DataType == System.Data.DbType.String) { DescriptionCol = col.ColumnName; }    						if (IdCol == col.ColumnName) { idColFound = true; idColIsString = (col.DataType == System.Data.DbType.String); }  						if (DescriptionCol == col.ColumnName) { descColFound = true; }    						if (isMulti && multiKeyCol == col.ColumnName) { multiKeyColFound = true; }  					}    					if (EnumName == "") { EnumName = GetEnumName(tbl.ClassName' idColIsString); }    					// generate the script or a warning message  					if (!idColFound || !descColFound || (isMulti && !multiKeyColFound)) {  						SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enumSetting could not be matched to ID" + (isMulti ? "' Key " : "")  						+ " and Description columns. Setting=" + enumSetting + "\r\n";  					}  					else {  						//pull the tables in a reader  						int rowCount = 0;  						List<string> enumValList = new List<string>();  						string enumMemberScript = "";  						string lastKeyVal = "";  						string sql = GetEnumSql(IdCol' DescriptionCol' multiKeyCol' tbl.Name' SqlWhereClause);  						try {  							using (IDataReader rdr = provider.GetReader(new QueryCommand(sql))) {  								while (rdr.Read()) {  									string enumMemberName = CleanUp(rdr[DescriptionCol].ToString());  									if (enumValList.Contains(enumMemberName)) {  										int uniqueVal = 0;  										string tempMemberName = enumMemberName;  										while (enumValList.Contains(tempMemberName)) {  											tempMemberName = enumMemberName + (++uniqueVal).ToString();  										}  										enumMemberName = tempMemberName;  									}    									string enumMemberValue = rdr[IdCol].ToString();  									string enumKeyVal = (isMulti ? CleanUp(rdr[multiKeyCol].ToString()) : "");    									if (rowCount != 0 && lastKeyVal != enumKeyVal) {  										// we are doing a multi read' use the key val to generate an enum for each block of key values  										string tempEnumName = GetEnumName(lastKeyVal' idColIsString);  										SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  										enumMemberScript = "";  									}    									if (IsVb) {  										if (idColIsString) {  											enumMemberScript += "\t\t\tPublic Const " + enumMemberName + " As String = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									} else {  										if (idColIsString) {  											enumMemberScript += "\t\t\tpublic const string " + enumMemberName + " = \"" + enumMemberValue + "\";\r\n";  										}  										else {  											enumMemberScript += (enumMemberScript == "" ? "" : "'\r\n");  											enumMemberScript += "\t\t\t" + enumMemberName + " = " + enumMemberValue;  										}  									}    									enumValList.Add(enumMemberName);  									lastKeyVal = enumKeyVal;  									rowCount++;  								}  							}  							if (rowCount == 0) {  								SqlScript += "\r\n\t\t" + commentmarker + " " + tbl.Name + ": enum generation was specfied but the database table had no records\r\n";  							}  							else {  								string tempEnumName = (isMulti ? GetEnumName(lastKeyVal' idColIsString) : EnumName);  								SqlScript += GetEnumHeaderFooter(tbl.Name' tempEnumName' IdCol' DescriptionCol' enumMemberScript' idColIsString' IsVb);  							}  						}  						catch (Exception ex) {  							SqlScript += "\r\n\t\t" + commentmarker + " SQL fetch error in SQL \"" + sql + "\" : " + ex.Message;  						}    					}  					rtn += SqlScript;  				}  			}
Magic Number,SubSonic,TurboTemplate,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\Template.cs,CleanCodeTags,The following statement contains a magic number: x = x.Substring(2' x.Length - 4);
Magic Number,SubSonic,TurboTemplate,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\Template.cs,CleanCodeTags,The following statement contains a magic number: x = x.Substring(2' x.Length - 4);
Magic Number,SubSonic,TurboTemplate,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\Template.cs,ParseTemplate,The following statement contains a magic number: while(lnAt > -1)              {                  if(lnAt > -1)                      writer.Write(String.Concat("\t\t\twriter.Write(@\""' templateInputText.Substring(lnLast' lnAt - lnLast).Replace("\""' "\"\"")' "\" );"));                    int lnAt2 = templateInputText.IndexOf("%>"' lnAt);                  if(lnAt2 < 0)                      break;                    writer.Write(templateInputText.Substring(lnAt' lnAt2 - lnAt + 2));                    lnLast = lnAt2 + 2;                  lnAt = templateInputText.IndexOf("<%"' lnLast);                  if(lnAt < 0)                      writer.Write(String.Concat("\t\t\twriter.Write(@\""' templateInputText.Substring(lnLast' templateInputText.Length - lnLast).Replace("\""' "\"\"")' "\" );"));              }
Magic Number,SubSonic,TurboTemplate,C:\repos\subsonic_SubSonic-2.0\SubSonic\CodeGeneration\Template.cs,ParseTemplate,The following statement contains a magic number: while(lnAt > -1)              {                  if(lnAt > -1)                      writer.Write(String.Concat("\t\t\twriter.Write(@\""' templateInputText.Substring(lnLast' lnAt - lnLast).Replace("\""' "\"\"")' "\" );"));                    int lnAt2 = templateInputText.IndexOf("%>"' lnAt);                  if(lnAt2 < 0)                      break;                    writer.Write(templateInputText.Substring(lnAt' lnAt2 - lnAt + 2));                    lnLast = lnAt2 + 2;                  lnAt = templateInputText.IndexOf("<%"' lnLast);                  if(lnAt < 0)                      writer.Write(String.Concat("\t\t\twriter.Write(@\""' templateInputText.Substring(lnLast' templateInputText.Length - lnLast).Replace("\""' "\"\"")' "\" );"));              }
Magic Number,SubSonic,QuickTable,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\QuickTable.cs,LoadGrid,The following statement contains a magic number: if(!String.IsNullOrEmpty(sortBy))              {                  TableSchema.TableColumn col = provider.GetTableSchema(tableName' TableType.Table).GetColumn(sortBy);                  if(col != null && col.MaxLength < 2048 && col.DataType != DbType.Binary && col.DataType != DbType.Byte)                  {                      if(String.IsNullOrEmpty(sortDirection) || sortDirection.Trim() == SqlFragment.ASC.Trim())                          q.OrderAsc(sortBy);                      else                          q.OrderDesc(sortBy);                  }              }
Magic Number,SubSonic,QuickTable,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\QuickTable.cs,CreateChildControls,The following statement contains a magic number: tbl.CellPadding = 3;
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,OnPreRender,The following statement contains a magic number: if(UseEmbeddedStyles)              {                  grid.CssClass = ScaffoldCss.GRID;                  grid.CellPadding = 3;                  grid.GridLines = GridLines.Both;                  grid.BorderColor = Color.FromArgb(220' 220' 220);                  grid.FooterStyle.BackColor = Color.FromArgb(204' 204' 204);                  grid.RowStyle.BackColor = Color.FromArgb(238' 238' 238);                  grid.AlternatingRowStyle.BackColor = Color.FromArgb(255' 255' 255);                  grid.PagerStyle.BackColor = Color.FromArgb(153' 153' 153);                  grid.HeaderStyle.BackColor = Color.FromArgb(220' 220' 220);                  grid.HeaderStyle.Font.Bold = true;                  const string includeTemplate = "<link rel='stylesheet' text='text/css' href='{0}' />";                  string includeLocation = Page.ClientScript.GetWebResourceUrl(GetType()' "SubSonic.Controls.Resources.Scaffold.css");                  Page.Header.Controls.Add(new LiteralControl(String.Format(includeTemplate' includeLocation)));              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,GetEditControl,The following statement contains a magic number: if(tableColumn.IsPrimaryKey && FindControl(PK_ID + tableColumn.ColumnName) == null)              {                  //don't want to edit an auto-increment                  if(tableColumn.AutoIncrement || tableColumn.DataType == DbType.Guid)                      cOut = new Label();                  else                      cOut = new TextBox();                    cOut.ID = PK_ID + tableColumn.ColumnName;              }              else              {                  bool buildForeignKey = false;                  if(tableColumn.IsForeignKey)                  {                      DropDownList ddl = new DropDownList();                      ApplyCssClass(ddl' DropDownCssClass);                      string fkTableName = tableColumn.ForeignKeyTableName;                        if(!String.IsNullOrEmpty(fkTableName))                      {                          buildForeignKey = true;                          TableSchema.Table tbl = DataService.GetSchema(fkTableName' ProviderName' TableType.Table);                          TableSchema.TableColumn displayCol = Utility.GetDisplayTableColumn(tbl);                            bool isSortable = Utility.GetEffectiveMaxLength(displayCol) < 250;                            if(tableColumn.IsNullable)                          {                              ListItem liNull = new ListItem("(Not Specified)"' String.Empty);                              ddl.Items.Add(liNull);                          }                            SqlQuery qry = new Select(tbl.Provider' tbl.Columns[0].ColumnName' displayCol.ColumnName).From(tbl);                            if(isSortable)                              qry.OrderAsc(displayCol.ColumnName);                            using(IDataReader rdr = qry.ExecuteReader())                          {                              while(rdr.Read())                              {                                  ListItem item = new ListItem(rdr[1].ToString()' rdr[0].ToString());                                  ddl.Items.Add(item);                              }                              rdr.Close();                          }                          cOut = ddl;                      }                  }                  if(!buildForeignKey)                  {                      switch(tableColumn.DataType)                      {                          case DbType.Guid:                          case DbType.AnsiString:                          case DbType.String:                          case DbType.StringFixedLength:                          case DbType.Xml:                          case DbType.Object:                          case DbType.AnsiStringFixedLength:                              if(Utility.MatchesOne(colName' ReservedColumnName.CREATED_BY' ReservedColumnName.MODIFIED_BY))                                  cOut = new Label();                              else                              {                                  TextBox t = new TextBox();                                  if(Utility.GetEffectiveMaxLength(tableColumn) > 250)                                  {                                      t.TextMode = TextBoxMode.MultiLine;                                      t.Columns = 60;                                      t.Rows = 4;                                  }                                  else                                  {                                      t.Width = Unit.Pixel(250);                                      if(colName.EndsWith("guid"' StringComparison.InvariantCultureIgnoreCase))                                      {                                          t.Text = Guid.NewGuid().ToString();                                          t.Enabled = false;                                      }                                  }                                  cOut = t;                              }                              break;                            case DbType.Binary:                              //do nothing                              break;                          case DbType.Boolean:                              CheckBox chk = new CheckBox();                              ApplyCssClass(chk' CheckBoxCssClass);                              if(Utility.IsMatch(colName' ReservedColumnName.IS_ACTIVE))                                  chk.Checked = true;                                if(Utility.MatchesOne(colName' ReservedColumnName.DELETED' ReservedColumnName.IS_DELETED))                                  chk.Checked = false;                                cOut = chk;                              break;                            case DbType.Date:                          case DbType.Time:                          case DbType.DateTime:                              if(Utility.MatchesOne(colName' ReservedColumnName.MODIFIED_ON' ReservedColumnName.CREATED_ON))                                  cOut = new Label();                              else                                  cOut = new CalendarControl();                              break;                            case DbType.Int16:                          case DbType.Int32:                          case DbType.UInt16:                          case DbType.Int64:                          case DbType.UInt32:                          case DbType.UInt64:                          case DbType.VarNumeric:                          case DbType.Single:                          case DbType.Currency:                          case DbType.Decimal:                          case DbType.Double:                          case DbType.Byte:                              TextBox tt = new TextBox {Width = Unit.Pixel(50)};                              //if (!this.isNew)                              //tt.Text = this.GetColumnValue(col.ColumnName).ToString();                              cOut = tt;                              break;                          default:                              cOut = new TextBox();                              break;                      }                  }                    if(cOut != null)                      cOut.ID = tableColumn.ColumnName;              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,GetEditControl,The following statement contains a magic number: if(tableColumn.IsPrimaryKey && FindControl(PK_ID + tableColumn.ColumnName) == null)              {                  //don't want to edit an auto-increment                  if(tableColumn.AutoIncrement || tableColumn.DataType == DbType.Guid)                      cOut = new Label();                  else                      cOut = new TextBox();                    cOut.ID = PK_ID + tableColumn.ColumnName;              }              else              {                  bool buildForeignKey = false;                  if(tableColumn.IsForeignKey)                  {                      DropDownList ddl = new DropDownList();                      ApplyCssClass(ddl' DropDownCssClass);                      string fkTableName = tableColumn.ForeignKeyTableName;                        if(!String.IsNullOrEmpty(fkTableName))                      {                          buildForeignKey = true;                          TableSchema.Table tbl = DataService.GetSchema(fkTableName' ProviderName' TableType.Table);                          TableSchema.TableColumn displayCol = Utility.GetDisplayTableColumn(tbl);                            bool isSortable = Utility.GetEffectiveMaxLength(displayCol) < 250;                            if(tableColumn.IsNullable)                          {                              ListItem liNull = new ListItem("(Not Specified)"' String.Empty);                              ddl.Items.Add(liNull);                          }                            SqlQuery qry = new Select(tbl.Provider' tbl.Columns[0].ColumnName' displayCol.ColumnName).From(tbl);                            if(isSortable)                              qry.OrderAsc(displayCol.ColumnName);                            using(IDataReader rdr = qry.ExecuteReader())                          {                              while(rdr.Read())                              {                                  ListItem item = new ListItem(rdr[1].ToString()' rdr[0].ToString());                                  ddl.Items.Add(item);                              }                              rdr.Close();                          }                          cOut = ddl;                      }                  }                  if(!buildForeignKey)                  {                      switch(tableColumn.DataType)                      {                          case DbType.Guid:                          case DbType.AnsiString:                          case DbType.String:                          case DbType.StringFixedLength:                          case DbType.Xml:                          case DbType.Object:                          case DbType.AnsiStringFixedLength:                              if(Utility.MatchesOne(colName' ReservedColumnName.CREATED_BY' ReservedColumnName.MODIFIED_BY))                                  cOut = new Label();                              else                              {                                  TextBox t = new TextBox();                                  if(Utility.GetEffectiveMaxLength(tableColumn) > 250)                                  {                                      t.TextMode = TextBoxMode.MultiLine;                                      t.Columns = 60;                                      t.Rows = 4;                                  }                                  else                                  {                                      t.Width = Unit.Pixel(250);                                      if(colName.EndsWith("guid"' StringComparison.InvariantCultureIgnoreCase))                                      {                                          t.Text = Guid.NewGuid().ToString();                                          t.Enabled = false;                                      }                                  }                                  cOut = t;                              }                              break;                            case DbType.Binary:                              //do nothing                              break;                          case DbType.Boolean:                              CheckBox chk = new CheckBox();                              ApplyCssClass(chk' CheckBoxCssClass);                              if(Utility.IsMatch(colName' ReservedColumnName.IS_ACTIVE))                                  chk.Checked = true;                                if(Utility.MatchesOne(colName' ReservedColumnName.DELETED' ReservedColumnName.IS_DELETED))                                  chk.Checked = false;                                cOut = chk;                              break;                            case DbType.Date:                          case DbType.Time:                          case DbType.DateTime:                              if(Utility.MatchesOne(colName' ReservedColumnName.MODIFIED_ON' ReservedColumnName.CREATED_ON))                                  cOut = new Label();                              else                                  cOut = new CalendarControl();                              break;                            case DbType.Int16:                          case DbType.Int32:                          case DbType.UInt16:                          case DbType.Int64:                          case DbType.UInt32:                          case DbType.UInt64:                          case DbType.VarNumeric:                          case DbType.Single:                          case DbType.Currency:                          case DbType.Decimal:                          case DbType.Double:                          case DbType.Byte:                              TextBox tt = new TextBox {Width = Unit.Pixel(50)};                              //if (!this.isNew)                              //tt.Text = this.GetColumnValue(col.ColumnName).ToString();                              cOut = tt;                              break;                          default:                              cOut = new TextBox();                              break;                      }                  }                    if(cOut != null)                      cOut.ID = tableColumn.ColumnName;              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,GetEditControl,The following statement contains a magic number: if(tableColumn.IsPrimaryKey && FindControl(PK_ID + tableColumn.ColumnName) == null)              {                  //don't want to edit an auto-increment                  if(tableColumn.AutoIncrement || tableColumn.DataType == DbType.Guid)                      cOut = new Label();                  else                      cOut = new TextBox();                    cOut.ID = PK_ID + tableColumn.ColumnName;              }              else              {                  bool buildForeignKey = false;                  if(tableColumn.IsForeignKey)                  {                      DropDownList ddl = new DropDownList();                      ApplyCssClass(ddl' DropDownCssClass);                      string fkTableName = tableColumn.ForeignKeyTableName;                        if(!String.IsNullOrEmpty(fkTableName))                      {                          buildForeignKey = true;                          TableSchema.Table tbl = DataService.GetSchema(fkTableName' ProviderName' TableType.Table);                          TableSchema.TableColumn displayCol = Utility.GetDisplayTableColumn(tbl);                            bool isSortable = Utility.GetEffectiveMaxLength(displayCol) < 250;                            if(tableColumn.IsNullable)                          {                              ListItem liNull = new ListItem("(Not Specified)"' String.Empty);                              ddl.Items.Add(liNull);                          }                            SqlQuery qry = new Select(tbl.Provider' tbl.Columns[0].ColumnName' displayCol.ColumnName).From(tbl);                            if(isSortable)                              qry.OrderAsc(displayCol.ColumnName);                            using(IDataReader rdr = qry.ExecuteReader())                          {                              while(rdr.Read())                              {                                  ListItem item = new ListItem(rdr[1].ToString()' rdr[0].ToString());                                  ddl.Items.Add(item);                              }                              rdr.Close();                          }                          cOut = ddl;                      }                  }                  if(!buildForeignKey)                  {                      switch(tableColumn.DataType)                      {                          case DbType.Guid:                          case DbType.AnsiString:                          case DbType.String:                          case DbType.StringFixedLength:                          case DbType.Xml:                          case DbType.Object:                          case DbType.AnsiStringFixedLength:                              if(Utility.MatchesOne(colName' ReservedColumnName.CREATED_BY' ReservedColumnName.MODIFIED_BY))                                  cOut = new Label();                              else                              {                                  TextBox t = new TextBox();                                  if(Utility.GetEffectiveMaxLength(tableColumn) > 250)                                  {                                      t.TextMode = TextBoxMode.MultiLine;                                      t.Columns = 60;                                      t.Rows = 4;                                  }                                  else                                  {                                      t.Width = Unit.Pixel(250);                                      if(colName.EndsWith("guid"' StringComparison.InvariantCultureIgnoreCase))                                      {                                          t.Text = Guid.NewGuid().ToString();                                          t.Enabled = false;                                      }                                  }                                  cOut = t;                              }                              break;                            case DbType.Binary:                              //do nothing                              break;                          case DbType.Boolean:                              CheckBox chk = new CheckBox();                              ApplyCssClass(chk' CheckBoxCssClass);                              if(Utility.IsMatch(colName' ReservedColumnName.IS_ACTIVE))                                  chk.Checked = true;                                if(Utility.MatchesOne(colName' ReservedColumnName.DELETED' ReservedColumnName.IS_DELETED))                                  chk.Checked = false;                                cOut = chk;                              break;                            case DbType.Date:                          case DbType.Time:                          case DbType.DateTime:                              if(Utility.MatchesOne(colName' ReservedColumnName.MODIFIED_ON' ReservedColumnName.CREATED_ON))                                  cOut = new Label();                              else                                  cOut = new CalendarControl();                              break;                            case DbType.Int16:                          case DbType.Int32:                          case DbType.UInt16:                          case DbType.Int64:                          case DbType.UInt32:                          case DbType.UInt64:                          case DbType.VarNumeric:                          case DbType.Single:                          case DbType.Currency:                          case DbType.Decimal:                          case DbType.Double:                          case DbType.Byte:                              TextBox tt = new TextBox {Width = Unit.Pixel(50)};                              //if (!this.isNew)                              //tt.Text = this.GetColumnValue(col.ColumnName).ToString();                              cOut = tt;                              break;                          default:                              cOut = new TextBox();                              break;                      }                  }                    if(cOut != null)                      cOut.ID = tableColumn.ColumnName;              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,GetEditControl,The following statement contains a magic number: if(tableColumn.IsPrimaryKey && FindControl(PK_ID + tableColumn.ColumnName) == null)              {                  //don't want to edit an auto-increment                  if(tableColumn.AutoIncrement || tableColumn.DataType == DbType.Guid)                      cOut = new Label();                  else                      cOut = new TextBox();                    cOut.ID = PK_ID + tableColumn.ColumnName;              }              else              {                  bool buildForeignKey = false;                  if(tableColumn.IsForeignKey)                  {                      DropDownList ddl = new DropDownList();                      ApplyCssClass(ddl' DropDownCssClass);                      string fkTableName = tableColumn.ForeignKeyTableName;                        if(!String.IsNullOrEmpty(fkTableName))                      {                          buildForeignKey = true;                          TableSchema.Table tbl = DataService.GetSchema(fkTableName' ProviderName' TableType.Table);                          TableSchema.TableColumn displayCol = Utility.GetDisplayTableColumn(tbl);                            bool isSortable = Utility.GetEffectiveMaxLength(displayCol) < 250;                            if(tableColumn.IsNullable)                          {                              ListItem liNull = new ListItem("(Not Specified)"' String.Empty);                              ddl.Items.Add(liNull);                          }                            SqlQuery qry = new Select(tbl.Provider' tbl.Columns[0].ColumnName' displayCol.ColumnName).From(tbl);                            if(isSortable)                              qry.OrderAsc(displayCol.ColumnName);                            using(IDataReader rdr = qry.ExecuteReader())                          {                              while(rdr.Read())                              {                                  ListItem item = new ListItem(rdr[1].ToString()' rdr[0].ToString());                                  ddl.Items.Add(item);                              }                              rdr.Close();                          }                          cOut = ddl;                      }                  }                  if(!buildForeignKey)                  {                      switch(tableColumn.DataType)                      {                          case DbType.Guid:                          case DbType.AnsiString:                          case DbType.String:                          case DbType.StringFixedLength:                          case DbType.Xml:                          case DbType.Object:                          case DbType.AnsiStringFixedLength:                              if(Utility.MatchesOne(colName' ReservedColumnName.CREATED_BY' ReservedColumnName.MODIFIED_BY))                                  cOut = new Label();                              else                              {                                  TextBox t = new TextBox();                                  if(Utility.GetEffectiveMaxLength(tableColumn) > 250)                                  {                                      t.TextMode = TextBoxMode.MultiLine;                                      t.Columns = 60;                                      t.Rows = 4;                                  }                                  else                                  {                                      t.Width = Unit.Pixel(250);                                      if(colName.EndsWith("guid"' StringComparison.InvariantCultureIgnoreCase))                                      {                                          t.Text = Guid.NewGuid().ToString();                                          t.Enabled = false;                                      }                                  }                                  cOut = t;                              }                              break;                            case DbType.Binary:                              //do nothing                              break;                          case DbType.Boolean:                              CheckBox chk = new CheckBox();                              ApplyCssClass(chk' CheckBoxCssClass);                              if(Utility.IsMatch(colName' ReservedColumnName.IS_ACTIVE))                                  chk.Checked = true;                                if(Utility.MatchesOne(colName' ReservedColumnName.DELETED' ReservedColumnName.IS_DELETED))                                  chk.Checked = false;                                cOut = chk;                              break;                            case DbType.Date:                          case DbType.Time:                          case DbType.DateTime:                              if(Utility.MatchesOne(colName' ReservedColumnName.MODIFIED_ON' ReservedColumnName.CREATED_ON))                                  cOut = new Label();                              else                                  cOut = new CalendarControl();                              break;                            case DbType.Int16:                          case DbType.Int32:                          case DbType.UInt16:                          case DbType.Int64:                          case DbType.UInt32:                          case DbType.UInt64:                          case DbType.VarNumeric:                          case DbType.Single:                          case DbType.Currency:                          case DbType.Decimal:                          case DbType.Double:                          case DbType.Byte:                              TextBox tt = new TextBox {Width = Unit.Pixel(50)};                              //if (!this.isNew)                              //tt.Text = this.GetColumnValue(col.ColumnName).ToString();                              cOut = tt;                              break;                          default:                              cOut = new TextBox();                              break;                      }                  }                    if(cOut != null)                      cOut.ID = tableColumn.ColumnName;              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,GetEditControl,The following statement contains a magic number: if(tableColumn.IsPrimaryKey && FindControl(PK_ID + tableColumn.ColumnName) == null)              {                  //don't want to edit an auto-increment                  if(tableColumn.AutoIncrement || tableColumn.DataType == DbType.Guid)                      cOut = new Label();                  else                      cOut = new TextBox();                    cOut.ID = PK_ID + tableColumn.ColumnName;              }              else              {                  bool buildForeignKey = false;                  if(tableColumn.IsForeignKey)                  {                      DropDownList ddl = new DropDownList();                      ApplyCssClass(ddl' DropDownCssClass);                      string fkTableName = tableColumn.ForeignKeyTableName;                        if(!String.IsNullOrEmpty(fkTableName))                      {                          buildForeignKey = true;                          TableSchema.Table tbl = DataService.GetSchema(fkTableName' ProviderName' TableType.Table);                          TableSchema.TableColumn displayCol = Utility.GetDisplayTableColumn(tbl);                            bool isSortable = Utility.GetEffectiveMaxLength(displayCol) < 250;                            if(tableColumn.IsNullable)                          {                              ListItem liNull = new ListItem("(Not Specified)"' String.Empty);                              ddl.Items.Add(liNull);                          }                            SqlQuery qry = new Select(tbl.Provider' tbl.Columns[0].ColumnName' displayCol.ColumnName).From(tbl);                            if(isSortable)                              qry.OrderAsc(displayCol.ColumnName);                            using(IDataReader rdr = qry.ExecuteReader())                          {                              while(rdr.Read())                              {                                  ListItem item = new ListItem(rdr[1].ToString()' rdr[0].ToString());                                  ddl.Items.Add(item);                              }                              rdr.Close();                          }                          cOut = ddl;                      }                  }                  if(!buildForeignKey)                  {                      switch(tableColumn.DataType)                      {                          case DbType.Guid:                          case DbType.AnsiString:                          case DbType.String:                          case DbType.StringFixedLength:                          case DbType.Xml:                          case DbType.Object:                          case DbType.AnsiStringFixedLength:                              if(Utility.MatchesOne(colName' ReservedColumnName.CREATED_BY' ReservedColumnName.MODIFIED_BY))                                  cOut = new Label();                              else                              {                                  TextBox t = new TextBox();                                  if(Utility.GetEffectiveMaxLength(tableColumn) > 250)                                  {                                      t.TextMode = TextBoxMode.MultiLine;                                      t.Columns = 60;                                      t.Rows = 4;                                  }                                  else                                  {                                      t.Width = Unit.Pixel(250);                                      if(colName.EndsWith("guid"' StringComparison.InvariantCultureIgnoreCase))                                      {                                          t.Text = Guid.NewGuid().ToString();                                          t.Enabled = false;                                      }                                  }                                  cOut = t;                              }                              break;                            case DbType.Binary:                              //do nothing                              break;                          case DbType.Boolean:                              CheckBox chk = new CheckBox();                              ApplyCssClass(chk' CheckBoxCssClass);                              if(Utility.IsMatch(colName' ReservedColumnName.IS_ACTIVE))                                  chk.Checked = true;                                if(Utility.MatchesOne(colName' ReservedColumnName.DELETED' ReservedColumnName.IS_DELETED))                                  chk.Checked = false;                                cOut = chk;                              break;                            case DbType.Date:                          case DbType.Time:                          case DbType.DateTime:                              if(Utility.MatchesOne(colName' ReservedColumnName.MODIFIED_ON' ReservedColumnName.CREATED_ON))                                  cOut = new Label();                              else                                  cOut = new CalendarControl();                              break;                            case DbType.Int16:                          case DbType.Int32:                          case DbType.UInt16:                          case DbType.Int64:                          case DbType.UInt32:                          case DbType.UInt64:                          case DbType.VarNumeric:                          case DbType.Single:                          case DbType.Currency:                          case DbType.Decimal:                          case DbType.Double:                          case DbType.Byte:                              TextBox tt = new TextBox {Width = Unit.Pixel(50)};                              //if (!this.isNew)                              //tt.Text = this.GetColumnValue(col.ColumnName).ToString();                              cOut = tt;                              break;                          default:                              cOut = new TextBox();                              break;                      }                  }                    if(cOut != null)                      cOut.ID = tableColumn.ColumnName;              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,GetEditControl,The following statement contains a magic number: if(tableColumn.IsPrimaryKey && FindControl(PK_ID + tableColumn.ColumnName) == null)              {                  //don't want to edit an auto-increment                  if(tableColumn.AutoIncrement || tableColumn.DataType == DbType.Guid)                      cOut = new Label();                  else                      cOut = new TextBox();                    cOut.ID = PK_ID + tableColumn.ColumnName;              }              else              {                  bool buildForeignKey = false;                  if(tableColumn.IsForeignKey)                  {                      DropDownList ddl = new DropDownList();                      ApplyCssClass(ddl' DropDownCssClass);                      string fkTableName = tableColumn.ForeignKeyTableName;                        if(!String.IsNullOrEmpty(fkTableName))                      {                          buildForeignKey = true;                          TableSchema.Table tbl = DataService.GetSchema(fkTableName' ProviderName' TableType.Table);                          TableSchema.TableColumn displayCol = Utility.GetDisplayTableColumn(tbl);                            bool isSortable = Utility.GetEffectiveMaxLength(displayCol) < 250;                            if(tableColumn.IsNullable)                          {                              ListItem liNull = new ListItem("(Not Specified)"' String.Empty);                              ddl.Items.Add(liNull);                          }                            SqlQuery qry = new Select(tbl.Provider' tbl.Columns[0].ColumnName' displayCol.ColumnName).From(tbl);                            if(isSortable)                              qry.OrderAsc(displayCol.ColumnName);                            using(IDataReader rdr = qry.ExecuteReader())                          {                              while(rdr.Read())                              {                                  ListItem item = new ListItem(rdr[1].ToString()' rdr[0].ToString());                                  ddl.Items.Add(item);                              }                              rdr.Close();                          }                          cOut = ddl;                      }                  }                  if(!buildForeignKey)                  {                      switch(tableColumn.DataType)                      {                          case DbType.Guid:                          case DbType.AnsiString:                          case DbType.String:                          case DbType.StringFixedLength:                          case DbType.Xml:                          case DbType.Object:                          case DbType.AnsiStringFixedLength:                              if(Utility.MatchesOne(colName' ReservedColumnName.CREATED_BY' ReservedColumnName.MODIFIED_BY))                                  cOut = new Label();                              else                              {                                  TextBox t = new TextBox();                                  if(Utility.GetEffectiveMaxLength(tableColumn) > 250)                                  {                                      t.TextMode = TextBoxMode.MultiLine;                                      t.Columns = 60;                                      t.Rows = 4;                                  }                                  else                                  {                                      t.Width = Unit.Pixel(250);                                      if(colName.EndsWith("guid"' StringComparison.InvariantCultureIgnoreCase))                                      {                                          t.Text = Guid.NewGuid().ToString();                                          t.Enabled = false;                                      }                                  }                                  cOut = t;                              }                              break;                            case DbType.Binary:                              //do nothing                              break;                          case DbType.Boolean:                              CheckBox chk = new CheckBox();                              ApplyCssClass(chk' CheckBoxCssClass);                              if(Utility.IsMatch(colName' ReservedColumnName.IS_ACTIVE))                                  chk.Checked = true;                                if(Utility.MatchesOne(colName' ReservedColumnName.DELETED' ReservedColumnName.IS_DELETED))                                  chk.Checked = false;                                cOut = chk;                              break;                            case DbType.Date:                          case DbType.Time:                          case DbType.DateTime:                              if(Utility.MatchesOne(colName' ReservedColumnName.MODIFIED_ON' ReservedColumnName.CREATED_ON))                                  cOut = new Label();                              else                                  cOut = new CalendarControl();                              break;                            case DbType.Int16:                          case DbType.Int32:                          case DbType.UInt16:                          case DbType.Int64:                          case DbType.UInt32:                          case DbType.UInt64:                          case DbType.VarNumeric:                          case DbType.Single:                          case DbType.Currency:                          case DbType.Decimal:                          case DbType.Double:                          case DbType.Byte:                              TextBox tt = new TextBox {Width = Unit.Pixel(50)};                              //if (!this.isNew)                              //tt.Text = this.GetColumnValue(col.ColumnName).ToString();                              cOut = tt;                              break;                          default:                              cOut = new TextBox();                              break;                      }                  }                    if(cOut != null)                      cOut.ID = tableColumn.ColumnName;              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,BindGrid,The following statement contains a magic number: if(TableSchema != null && TableSchema.PrimaryKey != null)              {                  SqlQuery query = new Select(TableSchema.Provider).From(TableSchema);                    if(!String.IsNullOrEmpty(_whereExpression))                      query.WhereExpression(_whereExpression);                    if(_whereCollection != null)                      SqlQueryBridge.AddLegacyWhereCollection(query' _whereCollection);                    string sortColumn = null;                  if(!String.IsNullOrEmpty(orderBy))                      sortColumn = orderBy;                  else if(ViewState[ORDER_BY] != null)                      sortColumn = (string)ViewState[ORDER_BY];                    int colIndex = -1;                    if(!String.IsNullOrEmpty(sortColumn))                  {                      ViewState.Add(ORDER_BY' sortColumn);                      TableSchema.TableColumn col = TableSchema.GetColumn(sortColumn);                      if(col == null)                      {                          for(int i = 0; i < TableSchema.Columns.Count; i++)                          {                              TableSchema.TableColumn fkCol = TableSchema.Columns[i];                              if(fkCol.IsForeignKey && !String.IsNullOrEmpty(fkCol.ForeignKeyTableName))                              {                                  TableSchema.Table fkTbl = DataService.GetSchema(fkCol.ForeignKeyTableName' ProviderName' TableType.Table);                                  if(fkTbl != null)                                  {                                      col = Utility.GetDisplayTableColumn(fkTbl);                                      colIndex = i;                                      break;                                  }                              }                          }                      }                      if(col != null && col.MaxLength < 2048)                      {                          string sortAlias = colIndex > -1 ? SqlFragment.JOIN_PREFIX + colIndex : col.ColumnName;                          if(ViewState[SORT_DIRECTION] == null || ((string)ViewState[SORT_DIRECTION]) == SqlFragment.ASC)                          {                              query.OrderAsc(sortAlias);                              //query.OrderBy = colIndex > -1 ? OrderBy.Asc(col' SqlFragment.JOIN_PREFIX + colIndex) : OrderBy.Asc(col);                              ViewState[SORT_DIRECTION] = SqlFragment.ASC;                          }                          else                          {                              query.OrderDesc(sortAlias);                              //query.OrderBy = colIndex > -1 ? OrderBy.Desc(col' SqlFragment.JOIN_PREFIX + colIndex) : OrderBy.Desc(col);                              ViewState[SORT_DIRECTION] = SqlFragment.DESC;                          }                      }                  }                    DataTable dt = query.ExecuteJoinedDataSet().Tables[0];                  grid.DataSource = dt;                  grid.AutoGenerateColumns = false;                  grid.Columns.Clear();                    int columnOffset = 0;                  string dataKey = TableSchema.PrimaryKey.ColumnName;                  if(Utility.IsMappingTable(TableSchema) && dt.Columns.Count > TableSchema.Columns.Count)                  {                      columnOffset = 1;                      dataKey = dt.Columns[0].ColumnName;                  }                    grid.DataKeyNames = new[] {dataKey};                    CommandField link = new CommandField                                          {                                              ShowEditButton = true'                                               EditText = "Edit"                                          };                    grid.Columns.Insert(0' link);                    for(int i = 0; i < TableSchema.Columns.Count; i++)                  {                      int dtColIndex = i + columnOffset;                        BoundField field = new BoundField                                             {                                                 DataField = dt.Columns[dtColIndex].ColumnName'                                                  SortExpression = dt.Columns[dtColIndex].ColumnName' HtmlEncode = false                                             };                      //field.SortExpression = Utility.QualifyColumnName(schema.Name' dt.Columns[i].ColumnName' schema.Provider);                      TableSchema.TableColumn col = TableSchema.Columns[i];                      if(col.IsForeignKey)                      {                          TableSchema.Table fkSchema = col.ForeignKeyTableName == null                                                           ? DataService.GetForeignKeyTable(col' TableSchema)                                                           : DataService.GetSchema(col.ForeignKeyTableName' ProviderName' TableType.Table);                            if(fkSchema != null)                              field.HeaderText = fkSchema.DisplayName;                      }                      else                          field.HeaderText = col.DisplayName;                        if(!Utility.IsAuditField(dt.Columns[dtColIndex].ColumnName) && !listHiddenGridColumns.Contains(dt.Columns[dtColIndex].ColumnName.ToLower()))                          grid.Columns.Add(field);                  }                    grid.DataBind();              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,CreateEditor,The following statement contains a magic number: if(Utility.IsMappingTable(TableSchema))              {                  tbl = CreateManyMapper();                  destination.Controls.Add(tbl);              }              else              {                  destination.Controls.Add(tbl);                  tbl.Width = "600px";                    if(ShowScaffoldCaption)                      AddRow(tbl' String.Format("<h2>{0} Editor</h2>"' TableSchema.DisplayName)' 2);                    foreach(TableSchema.TableColumn col in TableSchema.Columns)                  {                      Control ctrl = GetEditControl(col);                      if(ctrl != null)                      {                          string label = col.DisplayName;                          AddRow(tbl' label' ctrl);                          if(listHiddenEditorColumns.Contains(col.ColumnName.ToLower()))                              ctrl.Parent.Parent.Visible = false;                          if(ctrl.GetType() == typeof(TextBox))                          {                              TextBox tbx = (TextBox)ctrl;                              if(tbx.TextMode == TextBoxMode.MultiLine)                              {                                  int maxLength = Utility.GetEffectiveMaxLength(col);                                  string remainingLength = (maxLength - tbx.Text.Length).ToString();                                  //string maxLength = efftectiveMaxLength.ToString();                                    string jsAttribute = String.Format("return imposeMaxLength(event' this' {0}' {1});"' maxLength' tbl.Rows.Count);                                  tbx.Attributes.Add("onkeyup"' jsAttribute);                                  tbx.Attributes.Add("onChange"' jsAttribute);                                  LiteralControl lc =                                      new LiteralControl(                                          String.Format(                                              "<div style='padding: 2px;'><div style='float:left'>Characters Remaining:&nbsp;</div><div id=\"counter{0}\" style=\"visibility:hidden\">{1}</div></div>"'                                              tbl.Rows.Count' remainingLength));                                  tbx.Parent.Controls.Add(lc);                              }                          }                      }                  }                  if(isEdit)                      AddManyToMany(tbl);              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,CreateManyMapper,The following statement contains a magic number: if(ShowScaffoldCaption)                  AddRow(tbl' String.Format("<h2>{0} Map</h2>"' TableSchema.DisplayName)' 2);
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,AddManyToMany,The following statement contains a magic number: foreach(TableSchema.ManyToManyRelationship m2m in ManyToManyCollection)              {                  TableSchema.Table mapTable = DataService.GetSchema(m2m.MapTableName' ProviderName);                  TableSchema.Table foreignTable = DataService.GetSchema(m2m.ForeignTableName' ProviderName);                    CheckBoxList chk = new CheckBoxList {ID = mapTable.ClassName};                  AddRow(htmlTable' mapTable.DisplayName' chk);                  chk.Items.Clear();                  chk.RepeatColumns = 2;                    bool isSortable = Utility.GetEffectiveMaxLength(foreignTable.Columns[1]) < 256;                    SqlQuery query = new Select(foreignTable.Provider).From(foreignTable);                    if(isSortable)                      query.OrderAsc(foreignTable.Columns[1].ColumnName);                    using(IDataReader rdrAllMappings = query.ExecuteReader())                  {                      while(rdrAllMappings.Read())                          chk.Items.Add(new ListItem(rdrAllMappings[1].ToString()' rdrAllMappings[0].ToString().ToLower()));                      rdrAllMappings.Close();                  }                    List<string> activeIds = new List<string>();                  SqlQuery queryMappings = new Select(mapTable.Provider).From(mapTable).Where(mapTable.GetColumn(m2m.MapTableLocalTableKeyColumn)).IsEqualTo(PrimaryKeyValue);                  using(IDataReader rdrActiveMappings = queryMappings.ExecuteReader())                  {                      while(rdrActiveMappings.Read())                          activeIds.Add(rdrActiveMappings[m2m.MapTableForeignTableKeyColumn].ToString().ToLower());                      rdrActiveMappings.Close();                  }                  foreach(string id in activeIds)                  {                      ListItem li = chk.Items.FindByValue(id);                      if(li != null)                          li.Selected = true;                  }              }
Magic Number,SubSonic,Scaffold,C:\repos\subsonic_SubSonic-2.0\SubSonic\Controls\Scaffold.cs,AddManyToMany,The following statement contains a magic number: foreach(TableSchema.ManyToManyRelationship m2m in ManyToManyCollection)              {                  TableSchema.Table mapTable = DataService.GetSchema(m2m.MapTableName' ProviderName);                  TableSchema.Table foreignTable = DataService.GetSchema(m2m.ForeignTableName' ProviderName);                    CheckBoxList chk = new CheckBoxList {ID = mapTable.ClassName};                  AddRow(htmlTable' mapTable.DisplayName' chk);                  chk.Items.Clear();                  chk.RepeatColumns = 2;                    bool isSortable = Utility.GetEffectiveMaxLength(foreignTable.Columns[1]) < 256;                    SqlQuery query = new Select(foreignTable.Provider).From(foreignTable);                    if(isSortable)                      query.OrderAsc(foreignTable.Columns[1].ColumnName);                    using(IDataReader rdrAllMappings = query.ExecuteReader())                  {                      while(rdrAllMappings.Read())                          chk.Items.Add(new ListItem(rdrAllMappings[1].ToString()' rdrAllMappings[0].ToString().ToLower()));                      rdrAllMappings.Close();                  }                    List<string> activeIds = new List<string>();                  SqlQuery queryMappings = new Select(mapTable.Provider).From(mapTable).Where(mapTable.GetColumn(m2m.MapTableLocalTableKeyColumn)).IsEqualTo(PrimaryKeyValue);                  using(IDataReader rdrActiveMappings = queryMappings.ExecuteReader())                  {                      while(rdrActiveMappings.Read())                          activeIds.Add(rdrActiveMappings[m2m.MapTableForeignTableKeyColumn].ToString().ToLower());                      rdrActiveMappings.Close();                  }                  foreach(string id in activeIds)                  {                      ListItem li = chk.Items.FindByValue(id);                      if(li != null)                          li.Selected = true;                  }              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetDbType,The following statement contains a magic number: switch (Int32.Parse(adoxDataTypeNumericAsString))              {                  case (0): // "Empty"                       return DbType.String;                  case (2): // "SmallInt"                       return DbType.Int16;                  case (3): // "Integer"                       return DbType.Int32;                  case (4): // "Real"                       return DbType.Single;                  case (5): // "Double"                       return DbType.Double;                  case (6): // "Currency"                       return DbType.Currency;                  case (7): // "Date"                       return DbType.DateTime;                  case (8): // "BSTR"                       return DbType.String;                  case (9): // "IDispatch"                       return DbType.String;                  case (10): // "Error Code"                       return DbType.Int32;                  case (11): // "Boolean"                       return DbType.Boolean;                  case (12): // "Variant"                       return DbType.String;                  case (13): // "IUnknown"                       return DbType.String;                  case (14): // "Decimal"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (16): // "TinyInt"                       return DbType.Int16;                  case (17): // "Unsigned TinyInt (BYTE)"                       return DbType.Byte;                  case (18): // "Unsigned Small Int (WORD)"                       return DbType.Int16;                  case (19): // "Unsigned Int (DWORD)"                       return DbType.Int32;                  case (20): // "BigInt"                       return DbType.Int64;                  case (21): // "Unsigned Big Int"                       return DbType.Int64;                  case (64): // "FileTime"                       return DbType.DateTime;                  case (72): // "Unique Identifier (GUID)"                       return DbType.Guid;                  case (128): // "Binary"                       return DbType.Binary;                  case (129): // "Char"                       return DbType.Byte;                  case (130): // "nChar"                       return DbType.String;                  case (131): // "Numeric"   					return DbType.Double; // ** Decimal type not supported in DAO **                  case (132): // "User Defined (UDT)"                       return DbType.DateTime;                  case (133): // "DBDate"                       return DbType.DateTime;                  case (134): // "DBTime"                       return DbType.DateTime;                  case (135): // "SmallDateTime"                       return DbType.DateTime;                  case (136): // "Chapter"                       return DbType.String;                  case (138): // "Automation (PropVariant)"                       return DbType.Object;                  case (139): // "VarNumeric"                       return DbType.VarNumeric;                  case (200): // "VarChar"                       return DbType.String;                  case (201): // "Text"                       return DbType.String;                  case (202): // "nVarChar"                       return DbType.String;                  case (203): // "nText"                       return DbType.String;                  case (204): // "VarBinary"                       return DbType.Binary;                  case (205): // "Image"                       return DbType.Binary;                  default:                      return DbType.String;                }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,FixAccessColumnDefault,The following statement contains a magic number: if (Regex.IsMatch(s' @""".*"""))  {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"="".*""")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"#.*#")) {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"=#.*#")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"=[0-9\.]+")) {                  return s.Substring(2);              }              else if (s == "=Date()" || s == "=Time()" || s == "=Now()") {                  return s.Substring(2);              }              else if (s == "Date()" || s == "Time()" || s == "Now()") {                  return s;              }              else if (Regex.IsMatch(s' @"=.+\(.*"))  {                  return "";              }              else if (Regex.IsMatch(s' @".+\(.*"))   {                  return "";              }              else {                  return s;              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,FixAccessColumnDefault,The following statement contains a magic number: if (Regex.IsMatch(s' @""".*"""))  {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"="".*""")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"#.*#")) {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"=#.*#")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"=[0-9\.]+")) {                  return s.Substring(2);              }              else if (s == "=Date()" || s == "=Time()" || s == "=Now()") {                  return s.Substring(2);              }              else if (s == "Date()" || s == "Time()" || s == "Now()") {                  return s;              }              else if (Regex.IsMatch(s' @"=.+\(.*"))  {                  return "";              }              else if (Regex.IsMatch(s' @".+\(.*"))   {                  return "";              }              else {                  return s;              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,FixAccessColumnDefault,The following statement contains a magic number: if (Regex.IsMatch(s' @""".*"""))  {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"="".*""")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"#.*#")) {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"=#.*#")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"=[0-9\.]+")) {                  return s.Substring(2);              }              else if (s == "=Date()" || s == "=Time()" || s == "=Now()") {                  return s.Substring(2);              }              else if (s == "Date()" || s == "Time()" || s == "Now()") {                  return s;              }              else if (Regex.IsMatch(s' @"=.+\(.*"))  {                  return "";              }              else if (Regex.IsMatch(s' @".+\(.*"))   {                  return "";              }              else {                  return s;              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,FixAccessColumnDefault,The following statement contains a magic number: if (Regex.IsMatch(s' @""".*"""))  {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"="".*""")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"#.*#")) {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"=#.*#")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"=[0-9\.]+")) {                  return s.Substring(2);              }              else if (s == "=Date()" || s == "=Time()" || s == "=Now()") {                  return s.Substring(2);              }              else if (s == "Date()" || s == "Time()" || s == "Now()") {                  return s;              }              else if (Regex.IsMatch(s' @"=.+\(.*"))  {                  return "";              }              else if (Regex.IsMatch(s' @".+\(.*"))   {                  return "";              }              else {                  return s;              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,FixAccessColumnDefault,The following statement contains a magic number: if (Regex.IsMatch(s' @""".*"""))  {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"="".*""")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"#.*#")) {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"=#.*#")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"=[0-9\.]+")) {                  return s.Substring(2);              }              else if (s == "=Date()" || s == "=Time()" || s == "=Now()") {                  return s.Substring(2);              }              else if (s == "Date()" || s == "Time()" || s == "Now()") {                  return s;              }              else if (Regex.IsMatch(s' @"=.+\(.*"))  {                  return "";              }              else if (Regex.IsMatch(s' @".+\(.*"))   {                  return "";              }              else {                  return s;              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,FixAccessColumnDefault,The following statement contains a magic number: if (Regex.IsMatch(s' @""".*"""))  {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"="".*""")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"#.*#")) {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"=#.*#")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"=[0-9\.]+")) {                  return s.Substring(2);              }              else if (s == "=Date()" || s == "=Time()" || s == "=Now()") {                  return s.Substring(2);              }              else if (s == "Date()" || s == "Time()" || s == "Now()") {                  return s;              }              else if (Regex.IsMatch(s' @"=.+\(.*"))  {                  return "";              }              else if (Regex.IsMatch(s' @".+\(.*"))   {                  return "";              }              else {                  return s;              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,FixAccessColumnDefault,The following statement contains a magic number: if (Regex.IsMatch(s' @""".*"""))  {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"="".*""")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"#.*#")) {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"=#.*#")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"=[0-9\.]+")) {                  return s.Substring(2);              }              else if (s == "=Date()" || s == "=Time()" || s == "=Now()") {                  return s.Substring(2);              }              else if (s == "Date()" || s == "Time()" || s == "Now()") {                  return s;              }              else if (Regex.IsMatch(s' @"=.+\(.*"))  {                  return "";              }              else if (Regex.IsMatch(s' @".+\(.*"))   {                  return "";              }              else {                  return s;              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,FixAccessColumnDefault,The following statement contains a magic number: if (Regex.IsMatch(s' @""".*"""))  {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"="".*""")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"#.*#")) {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"=#.*#")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"=[0-9\.]+")) {                  return s.Substring(2);              }              else if (s == "=Date()" || s == "=Time()" || s == "=Now()") {                  return s.Substring(2);              }              else if (s == "Date()" || s == "Time()" || s == "Now()") {                  return s;              }              else if (Regex.IsMatch(s' @"=.+\(.*"))  {                  return "";              }              else if (Regex.IsMatch(s' @".+\(.*"))   {                  return "";              }              else {                  return s;              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,FixAccessColumnDefault,The following statement contains a magic number: if (Regex.IsMatch(s' @""".*"""))  {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"="".*""")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"#.*#")) {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"=#.*#")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"=[0-9\.]+")) {                  return s.Substring(2);              }              else if (s == "=Date()" || s == "=Time()" || s == "=Now()") {                  return s.Substring(2);              }              else if (s == "Date()" || s == "Time()" || s == "Now()") {                  return s;              }              else if (Regex.IsMatch(s' @"=.+\(.*"))  {                  return "";              }              else if (Regex.IsMatch(s' @".+\(.*"))   {                  return "";              }              else {                  return s;              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,FixAccessColumnDefault,The following statement contains a magic number: if (Regex.IsMatch(s' @""".*"""))  {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"="".*""")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"#.*#")) {                  return s.Substring(2' s.Length - 2);              }              else if (Regex.IsMatch(s' @"=#.*#")) {                  return s.Substring(3' s.Length - 3);              }              else if (Regex.IsMatch(s' @"=[0-9\.]+")) {                  return s.Substring(2);              }              else if (s == "=Date()" || s == "=Time()" || s == "=Now()") {                  return s.Substring(2);              }              else if (s == "Date()" || s == "Time()" || s == "Now()") {                  return s;              }              else if (Regex.IsMatch(s' @"=.+\(.*"))  {                  return "";              }              else if (Regex.IsMatch(s' @".+\(.*"))   {                  return "";              }              else {                  return s;              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,GetSelectSql,The following statement contains a magic number: if(qry.columns == null || qry.columns.Count == 0)              {                  TableSchema.Table table = qry.Schema;                  string distinct = qry.IsDistinct ? SqlFragment.DISTINCT : String.Empty;                    //different rules for how to do TOP                  string select = SqlFragment.SELECT + distinct + SqlFragment.TOP + qry.Top + " ";                    StringBuilder order = new StringBuilder();                  StringBuilder reverseOrder = new StringBuilder();                  StringBuilder tempQuery = new StringBuilder();                  StringBuilder query = new StringBuilder();                  string columns;                    //append on the selectList' which is a property that can be set                  //and is "*" by default                    if(qry.SelectList != null && qry.SelectList.Trim().Length >= 2) {                      columns = qry.SelectList;                  }                  else  {                      columns = GetQualifiedSelect(table);                  }                    //Added by Rob to account for FK lookups                  //TODO: Remove this hack and rebuild this query tool!                  //:):):)                  if (qry.AliasForeignKeys)                  {                      List<TableSchema.TableColumn> AddedColumns = new List<TableSchema.TableColumn>();                      // don't add table owner for JET SQL                      string fullQFormat = "[{0}].[{1}]";                      foreach (TableSchema.TableColumn col in qry.Schema.Columns)                      {                          if (col.IsForeignKey)                          {                              TableSchema.Table fkTable = DataService.GetForeignKeyTable(col' col.Table);                                //replace the ID in the columns list with a nested SELECT                              string fkAlias = "(SELECT [" + fkTable.Descriptor.ColumnName + "] FROM [" + col.ForeignKeyTableName + "] WHERE [" + col.ForeignKeyTableName +                                  "].[" + fkTable.PrimaryKey.ColumnName + "]=[" + col.Table.Name + "].[" + col.ColumnName + "]) as " + col.ColumnName;                                string lookFor = string.Format(fullQFormat' col.Table.Name' col.ColumnName);                                columns = columns.Replace(lookFor' fkAlias);                                //add columns to the core schema to account for this                              //AddedColumns.Add(fkTable.Columns[1]);                          }                      }                    }                                    string where = BuildWhere(qry);                    //Finally' do the orderby                  if(qry.OrderByCollection.Count > 0)                  {                      for(int j = 0; j < qry.OrderByCollection.Count; j++)                      {                          string orderString = qry.OrderByCollection[j].OrderString;                          string reverseOrderString = qry.OrderByCollection[j].OrderStringReversed;                          if(!String.IsNullOrEmpty(orderString))  {                              order.Append(orderString);                              reverseOrder.Append(reverseOrderString);                              if(j + 1 != qry.OrderByCollection.Count)  {                                  order.Append("' ");                                  reverseOrder.Append("' ");                              }                          }                      }                  }                  else                  {                      if(table.PrimaryKey != null) {                          order.Append(OrderBy.Asc(table.PrimaryKey.ColumnName).OrderString);                          reverseOrder.Append(OrderBy.Asc(table.PrimaryKey.ColumnName).OrderStringReversed);                      }                  }  				if (order.Length > 0) {  					order.Insert(0' SqlFragment.ORDER_BY);  					reverseOrder.Insert(0' SqlFragment.ORDER_BY);  				}                    tempQuery.Append(select);                  tempQuery.Append(columns);                  tempQuery.Append(SqlFragment.FROM);                  tempQuery.Append(qry.Provider.QualifyTableName(table.SchemaName' table.Name));                  tempQuery.Append(where);  				tempQuery.Append(order);                     if (qry.PageIndex < 0) {                      query.Append(tempQuery);                      query.Append(";");                  }                   else {                      // Paging is 1-based (NOT 0-based)                      if (qry.PageIndex == 1)                      {                          query.Append(string.Format(                              PAGING_SQL_FIRST_PAGE'                              qry.PageSize'                              tempQuery));                          query.Append(";");                      }                      else                      {                          query.Append(string.Format(                              PAGING_SQL_OTHER_PAGES'                              qry.PageSize'                              qry.PageSize * (qry.PageIndex)'                              order'                              reverseOrder'                              tempQuery));                          query.Append(";");                      }                  }                    return query.ToString();              }              else              // No query column' generate from schema automatically              {                  StringBuilder strJoin = new StringBuilder();                  StringBuilder strSelect = new StringBuilder(SqlFragment.SELECT);                  string strFrom = SqlFragment.FROM + qry.Provider.QualifyTableName(qry.Schema.SchemaName' qry.Schema.TableName);                  List<TableSchema.Table> uniqueTables = new List<TableSchema.Table>();                  foreach (TableSchema.TableColumn col in qry.columns)                  {                      if (!uniqueTables.Contains(col.Table))                          uniqueTables.Add(col.Table);                  }                    StringBuilder sourceDef = new StringBuilder(SqlFragment.FROM);                  for (int i = 0; i < uniqueTables.Count; i++)                  {                      sourceDef.Append(qry.Provider.QualifyTableName(uniqueTables[i].SchemaName' uniqueTables[i].TableName));                      sourceDef.Append(" j");                      sourceDef.Append(uniqueTables[i].ClassName);                        if (i + 1 < uniqueTables.Count)                          sourceDef.Append("' ");                  }                  sourceDef.AppendLine();                    for (int i = 0; i < qry.columns.Count; i++)                  {                      string joinType = SqlFragment.INNER_JOIN;                      StringBuilder col = new StringBuilder();                      TableSchema.TableColumn tblCol = qry.columns[i];                        if (qry.columns[i].IsNullable)                          joinType = SqlFragment.LEFT_JOIN;                      if (qry.columns[i].Table == qry.Schema)                          col.Append(qry.columns[i].ColumnName);                      else                      {                          foreach (TableSchema.TableColumn colPrimaryTable in qry.Schema.Columns)                          {                              if (colPrimaryTable.IsForeignKey && !String.IsNullOrEmpty(colPrimaryTable.ForeignKeyTableName) &&                                 colPrimaryTable.ForeignKeyTableName == tblCol.Table.Name)                              {                                  string strJoinPrefix = SqlFragment.JOIN_PREFIX + i;                                  //TableSchema.Table fkTable = DataService.GetForeignKeyTable(table.Columns[i]' table);                                  TableSchema.Table fkTable = tblCol.Table;                                  string dataCol = tblCol.ColumnName;                                  string selectCol = qry.Schema.Provider.QualifyColumnName(""' strJoinPrefix' dataCol);                                  col = new StringBuilder(selectCol);                                  strJoin.Append(joinType);                                  strJoin.Append(qry.Schema.Provider.FormatIdentifier(fkTable.Name));                                  strJoin.Append(SqlFragment.SPACE);                                  strJoin.Append(strJoinPrefix);                                  strJoin.Append(SqlFragment.ON);                                  string columnReference = qry.Schema.Provider.QualifyColumnName(qry.Schema.SchemaName' qry.Schema.Name' colPrimaryTable.ColumnName);                                  strJoin.Append(columnReference);                                  strJoin.Append(SqlFragment.EQUAL_TO);                                  string joinReference = qry.Schema.Provider.QualifyColumnName(""' strJoinPrefix' fkTable.PrimaryKey.ColumnName);                                  strJoin.Append(joinReference);                                  if (qry.OrderByCollection.Count > 0)                                  {                                      foreach (OrderBy ob in qry.OrderByCollection)                                          ob.OrderString = ob.OrderString.Replace(columnReference' selectCol);                                  }                                  break;                              }                          }                      }                        if (i + 1 != qry.columns.Count)                          col.Append("' ");                        strSelect.Append(col);                  }                    StringBuilder strSQL = new StringBuilder();                  strSQL.Append(strSelect);                  strSQL.Append(strFrom);                  strSQL.Append(strJoin);                    if (qry.wheres.Count > 0)                  {                      string strWhere = BuildWhere(qry);                      strSQL.Append(strWhere);                  }                    if (qry.OrderByCollection.Count > 0)                  {                      for (int j = 0; j < qry.OrderByCollection.Count; j++)                      {                          string orderString = qry.OrderByCollection[j].OrderString;                          if (!String.IsNullOrEmpty(orderString))                          {                              strSQL.Append(orderString);                              if (j + 1 != qry.OrderByCollection.Count)                                  strSQL.Append("' ");                          }                      }                  }                  return strSQL.ToString();              }
Magic Number,SubSonic,AccessDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\AccessDataProvider.cs,SetColumnAttributes,The following statement contains a magic number: if (col.IsPrimaryKey)              {                  sb.Append(" NOT NULL PRIMARY KEY ");              }              else              {                  if (col.MaxLength > 0 && col.MaxLength < 8000)                      sb.Append("(" + col.MaxLength + ")");                    if (!col.IsNullable)                      sb.Append(" NOT NULL ");                  else                      sb.Append(" NULL ");                    if (!String.IsNullOrEmpty(col.DefaultSetting))                      sb.Append(" CONSTRAINT DF_" + col.Table.Name + "_" + col.ColumnName + " DEFAULT (" + col.DefaultSetting + ")");              }
Magic Number,SubSonic,OracleDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\OracleDataProvider.cs,GetSelectSql,The following statement contains a magic number: if(!String.IsNullOrEmpty(qry.SelectList) && qry.SelectList.Trim().Length >= 2)                  columns = qry.SelectList;              else                  columns = GetQualifiedSelect(table);
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetTableSchema,The following statement contains a magic number: foreach(DataRow row in dtcols.Select(string.Format("TABLE_NAME = '{0}'"' tableName)))              {                  TableSchema.TableColumn column = new TableSchema.TableColumn(table);                  column.ColumnName = row["COLUMN_NAME"].ToString();                    column.IsPrimaryKey = Convert.ToBoolean(row["PRIMARY_KEY"]);                  column.IsForeignKey = (fks.Select(string.Format("TABLE_NAME = '{0}' AND FKEY_FROM_COLUMN = '{1}'"' tableName' column.ColumnName)).Length > 0);                  column.DataType = GetDbType(row["DATA_TYPE"].ToString());                    if(column.DataType == DbType.Guid || column.DataType == DbType.DateTime)                      column.MaxLength = (column.DataType == DbType.Guid) ? 64 : 48;                  else                      column.MaxLength = Convert.ToInt32(row["CHARACTER_MAXIMUM_LENGTH"]);                    column.AutoIncrement = Convert.ToBoolean(row["PRIMARY_KEY"]) && GetDbType(row["DATA_TYPE"].ToString()) == DbType.Int64;                  column.IsNullable = Convert.ToBoolean(row["IS_NULLABLE"]);                  column.IsReadOnly = false;                  table.Columns.Add(column);              }
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetTableSchema,The following statement contains a magic number: foreach(DataRow row in dtcols.Select(string.Format("TABLE_NAME = '{0}'"' tableName)))              {                  TableSchema.TableColumn column = new TableSchema.TableColumn(table);                  column.ColumnName = row["COLUMN_NAME"].ToString();                    column.IsPrimaryKey = Convert.ToBoolean(row["PRIMARY_KEY"]);                  column.IsForeignKey = (fks.Select(string.Format("TABLE_NAME = '{0}' AND FKEY_FROM_COLUMN = '{1}'"' tableName' column.ColumnName)).Length > 0);                  column.DataType = GetDbType(row["DATA_TYPE"].ToString());                    if(column.DataType == DbType.Guid || column.DataType == DbType.DateTime)                      column.MaxLength = (column.DataType == DbType.Guid) ? 64 : 48;                  else                      column.MaxLength = Convert.ToInt32(row["CHARACTER_MAXIMUM_LENGTH"]);                    column.AutoIncrement = Convert.ToBoolean(row["PRIMARY_KEY"]) && GetDbType(row["DATA_TYPE"].ToString()) == DbType.Int64;                  column.IsNullable = Convert.ToBoolean(row["IS_NULLABLE"]);                  column.IsReadOnly = false;                  table.Columns.Add(column);              }
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetType,The following statement contains a magic number: const int DATATYPE_INDEX = 5;
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetPrimaryKeyTableNames,The following statement contains a magic number: const int TABLE_NAME_INDEX = 5;
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetPrimaryKeyTableNames,The following statement contains a magic number: const int FKEY_FROM_COLUMN_INDEX = 9;
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetForeignKeyTableName,The following statement contains a magic number: const int FKEY_TO_TABLE_INDEX = 13;
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetForeignKeyTableName,The following statement contains a magic number: const int TABLE_NAME_INDEX = 2;
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetForeignKeyTables,The following statement contains a magic number: const int FKEY_TO_TABLE_INDEX = 13;
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetTableNameByPrimaryKey,The following statement contains a magic number: const int INDEX_NAME_INDEX = 8;
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetTableNameByPrimaryKey,The following statement contains a magic number: const int TABLE_NAME_INDEX = 2;
Magic Number,SubSonic,SQLiteDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SQLiteDataProvider.cs,GetLimit,The following statement contains a magic number: if(qry.PageIndex == -1)              {                  // By default MySQL will return 100% of the results                  // there is no need to apply a limit so we will                  // return an empty string.                  if(qry.Top == "100 PERCENT" || String.IsNullOrEmpty(qry.Top))                      return limit;                    // If the Top property of the query contains either                  // a % character or the word percent we need to do                  // some extra work                  if(qry.Top.Contains("%") || qry.Top.ToLower().Contains("percent"))                  {                      // strip everything but the numeric portion of                      // the top property.                      limit = qry.Top.ToLower().Replace("%"' String.Empty).Replace("percent"' String.Empty).Trim();                        // we will try/catch just incase something fails                      // fails a conversion.  This gives us an easy out                      try                      {                          // Convert the percetage to a decimal                          decimal percentTop = Convert.ToDecimal(limit) / 100;                            // Get the total count of records to                          // be returned.                          int count = GetRecordCount(qry);                            // Using the new decimal and the amount                          // of records to be returned calculate                          // what percentage of the records are                          // to be returned                          limit = " LIMIT " + Convert.ToString((int)(count * percentTop));                      }                      catch                      {                          // If something fails in the try lets                          // just return an empty string and                          // move on.                          limit = String.Empty;                      }                  }                      // The top parameter only contains an integer.                      // Wrap the integer in the limit string and return.                  else                      limit = " LIMIT " + qry.Top;              }                  // Paging in MySQL is actually quite simple.                   // Using limit we will set the starting record                   // to PageIndex * PageSize and the amount of                   // records returned to PageSize.              else              {                  int start = (qry.PageIndex - 1) * qry.PageSize;                  limit = string.Format(" LIMIT {0}'{1} "' start' qry.PageSize);              }
Magic Number,SubSonic,SqlCEProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlCEProvider.cs,GetSelectSql,The following statement contains a magic number: if(qry.SelectList != null && qry.SelectList.Trim().Length >= 2)                  columns = qry.SelectList;              else                  columns = GetQualifiedSelect(table);
Magic Number,SubSonic,DataService,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataService.cs,GetOrderedTableNames,The following statement contains a magic number: for(int i = 0; i < tbls.Length; i++)              {                  if(tbls[i].PrimaryKeys.Length < 2 && !addedTables.Contains(tbls[i].TableName))                      addedTables.Add(tbls[i].TableName);              }
Magic Number,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,SetParameter,The following statement contains a magic number: ParameterDirection direction = (ParameterDirection)Enum.Parse(typeof(ParameterDirection)' dataReader[2].ToString());
Magic Number,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,GetSPParams,The following statement contains a magic number: if(cmd.Parameters.Count > 0)              {                  foreach(MySqlParameter param in cmd.Parameters)                  {                      DataRow row = parametersDataTable.NewRow();                      row[0] = param.ParameterName;                      row[1] = param.MySqlDbType.ToString();                      row[2] = param.Direction.ToString();                        parametersDataTable.Rows.Add(row);                  }                  //parametersDataTable.AcceptChanges();              }
Magic Number,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,GetTableNameList,The following statement contains a magic number: using(AutomaticConnectionScope conn = new AutomaticConnectionScope(this))              {                  using(MySqlCommand cmd = new MySqlCommand(sql))                  {                      //get information about both the table and it's columns                      cmd.Connection = (MySqlConnection)conn.Connection;                        if(SupportsInformationSchema(GetDatabaseVersion(Name)))                          cmd.CommandText = "select table_name from information_schema.tables where table_schema = ?databaseName and table_type <> 'VIEW'";                        cmd.Parameters.Add("?databaseName"' MySqlDbType.VarChar' 64).Value = conn.Connection.Database;                        using(IDataReader rdr = cmd.ExecuteReader(CommandBehavior.CloseConnection))                      {                          bool isFirst = true;                            while(rdr.Read())                          {                              if(!isFirst)                                  sList.Append('|');                                isFirst = false;                              sList.Append(rdr[0]);                          }                          rdr.Close();                      }                  }              }
Magic Number,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,SupportsInformationSchema,The following statement contains a magic number: return majorVersion > 4;
Magic Number,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,GetLimit,The following statement contains a magic number: if(qry.PageIndex == -1)              {                  // By default MySQL will return 100% of the results                  // there is no need to apply a limit so we will                  // return an empty string.                  if(qry.Top == "100 PERCENT" || String.IsNullOrEmpty(qry.Top))                      return limit;                    // If the Top property of the query contains either                  // a % character or the word percent we need to do                  // some extra work                  if(qry.Top.Contains("%") || qry.Top.ToLower().Contains("percent"))                  {                      // strip everything but the numeric portion of                      // the top property.                      limit = qry.Top.ToLower().Replace("%"' String.Empty).Replace("percent"' String.Empty).Trim();                        // we will try/catch just incase something fails                      // fails a conversion.  This gives us an easy out                      try                      {                          // Convert the percetage to a decimal                          decimal percentTop = Convert.ToDecimal(limit) / 100;                            // Get the total count of records to                          // be returned.                          int count = GetRecordCount(qry);                            // Using the new decimal and the amount                          // of records to be returned calculate                          // what percentage of the records are                          // to be returned                          limit = " LIMIT " + Convert.ToString((int)(count * percentTop));                      }                      catch                      {                          // If something fails in the try lets                          // just return an empty string and                          // move on.                          limit = String.Empty;                      }                  }                      // The top parameter only contains an integer.                      // Wrap the integer in the limit string and return.                  else                      limit = " LIMIT " + qry.Top;              }                  // Paging in MySQL is actually quite simple.                   // Using limit we will set the starting record                   // to PageIndex * PageSize and the amount of                   // records returned to PageSize.              else              {                  int start = (qry.PageIndex - 1) * qry.PageSize;                  limit = string.Format(" LIMIT {0}'{1} "' start' qry.PageSize);              }
Magic Number,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,GetSelectSql,The following statement contains a magic number: if(qry.Columns == null || qry.Columns.Count == 0)              {                  TableSchema.Table table = qry.Schema;                  string distinct = qry.IsDistinct ? SqlFragment.DISTINCT : String.Empty;                    //different rules for how to do TOP                  string select = String.Concat("/* GetSelectSql("' table.Name' ") */ "' SqlFragment.SELECT' distinct' SqlFragment.TOP' qry.Top' " ");                    StringBuilder order = new StringBuilder();                  StringBuilder query = new StringBuilder();                  string columns;                    //append on the selectList' which is a property that can be set                  //and is "*" by default                    if(qry.SelectList != null && qry.SelectList.Trim().Length >= 2)                      columns = qry.SelectList;                  else                      columns = GetQualifiedSelect(table);                    //Added by Rob to account for FK lookups                  //TODO: Remove this hack and rebuild this query tool!                  //:):):)                  if(qry.AliasForeignKeys)                  {                      List<TableSchema.TableColumn> AddedColumns = new List<TableSchema.TableColumn>();                      const string fullQFormat = "[{0}].[{1}].[{2}]";                      foreach(TableSchema.TableColumn col in qry.Schema.Columns)                      {                          if(col.IsForeignKey)                          {                              TableSchema.Table fkTable = DataService.GetForeignKeyTable(col' col.Table);                                //replace the ID in the columns list with a nested SELECT                              string fkAlias = String.Format("(SELECT [{0}] FROM [{1}] WHERE [{1}].[{2}]=[{3}].[{4}]) as {4}"' fkTable.Descriptor.ColumnName' col.ForeignKeyTableName'                                  fkTable.PrimaryKey.ColumnName' col.Table.Name' col.ColumnName);                               string lookFor = String.Format(fullQFormat' col.Table.SchemaName' col.Table.Name' col.ColumnName);                                columns = columns.Replace(lookFor' fkAlias);                                //add columns to the core schema to account for this                              //AddedColumns.Add(fkTable.Columns[1]);                          }                      }                  }                    string where = BuildWhere(qry);                    //Finally' do the orderby                    if(qry.OrderByCollection.Count > 0)                  {                      order.Append(SqlFragment.ORDER_BY);                      for(int j = 0; j < qry.OrderByCollection.Count; j++)                      {                          string orderString = qry.OrderByCollection[j].OrderString;                          if(!String.IsNullOrEmpty(orderString))                          {                              order.Append(orderString);                              if(j + 1 != qry.OrderByCollection.Count)                                  order.Append("' ");                          }                      }                  }                  else                  {                      if ((table.PrimaryKey != null && table.PrimaryKeys.Length==1) && (!qry.IsDistinct || columns.Contains(table.PrimaryKey.ColumnName)))                          order.Append(SqlFragment.ORDER_BY + OrderBy.Asc(table.PrimaryKey.ColumnName).OrderString);                  }                    if(qry.PageIndex < 0)                  {                      query.Append(select);                      query.Append(columns);                      query.Append(SqlFragment.FROM);                      query.Append(table.QualifiedName);                      query.Append(where);                      query.Append(order);                      query.Append(";");                  }                  else                  {                      if(table.PrimaryKey != null)                      {                          string pkType = String.Empty;                          if(Utility.IsString(table.PrimaryKey))                              pkType = String.Concat("("' table.PrimaryKey.MaxLength' ")");                            query.Append(string.Format(                              PAGING_SQL'                              table.PrimaryKey.ColumnName'                              table.QualifiedName'                              columns'                              where'                              order'                              qry.PageIndex'                              qry.PageSize'                              Utility.GetSqlDBType(table.PrimaryKey.DataType)'                              pkType));                          query.Append(";");                      }                      else                      {                          //pretend it's a view                          query.Append(string.Format(                              PAGING_VIEW_SQL'                              qry.Provider.QualifyColumnName(""' table.SchemaName' table.Name)'                              GetQualifiedSelect(table)'                              where'                              order'                              qry.PageIndex'                              qry.PageSize));                          query.Append(";");                      }                  }                    return query.ToString();              }
Magic Number,SubSonic,SqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\SqlDataProvider.cs,ScriptData,The following statement contains a magic number: StringBuilder result = new StringBuilder(1024' Int32.MaxValue);
Magic Number,SubSonic,Inflector,C:\repos\subsonic_SubSonic-2.0\SubSonic\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if(Utility.IsStringNumeric(number))              {                  int n = int.Parse(number);                  int nMod100 = n % 100;                    if(nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch(n % 10)                  {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,SubSonic,Inflector,C:\repos\subsonic_SubSonic-2.0\SubSonic\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if(Utility.IsStringNumeric(number))              {                  int n = int.Parse(number);                  int nMod100 = n % 100;                    if(nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch(n % 10)                  {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,SubSonic,Inflector,C:\repos\subsonic_SubSonic-2.0\SubSonic\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if(Utility.IsStringNumeric(number))              {                  int n = int.Parse(number);                  int nMod100 = n % 100;                    if(nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch(n % 10)                  {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,SubSonic,Inflector,C:\repos\subsonic_SubSonic-2.0\SubSonic\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if(Utility.IsStringNumeric(number))              {                  int n = int.Parse(number);                  int nMod100 = n % 100;                    if(nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch(n % 10)                  {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,SubSonic,Inflector,C:\repos\subsonic_SubSonic-2.0\SubSonic\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if(Utility.IsStringNumeric(number))              {                  int n = int.Parse(number);                  int nMod100 = n % 100;                    if(nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch(n % 10)                  {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,SubSonic,Inflector,C:\repos\subsonic_SubSonic-2.0\SubSonic\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if(Utility.IsStringNumeric(number))              {                  int n = int.Parse(number);                  int nMod100 = n % 100;                    if(nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch(n % 10)                  {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,SubSonic,Migration,C:\repos\subsonic_SubSonic-2.0\SubSonic\Migrations\Migration.cs,AddColumn,The following statement contains a magic number: if(dbType == DbType.String)                  length = 64;
Magic Number,SubSonic,Migration,C:\repos\subsonic_SubSonic-2.0\SubSonic\Migrations\Migration.cs,AlterColumn,The following statement contains a magic number: if(dbType == DbType.String)                  length = 64;
Magic Number,SubSonic,Table,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\TableSchema.cs,AddLongText,The following statement contains a magic number: const int length = 9000;
Magic Number,SubSonic,Table,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\TableSchema.cs,AddColumn,The following statement contains a magic number: AddColumn(columnName' DbType.String' 64' true' String.Empty);
Magic Number,SubSonic,Table,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\TableSchema.cs,AddColumn,The following statement contains a magic number: if(dbType == DbType.String)                      //For you Phil :)                      length = 64;
Magic Number,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,GenerateColumnAttributes,The following statement contains a magic number: if(column.DataType == DbType.String && column.MaxLength >= 4000)              {                  //use nvarchar MAX                   //TODO - this won't work for SQL 2000                  //need to tell the diff somehow                  sb.Append(" nvarchar(MAX)");              }              else                  sb.Append(" " + GetNativeType(column.DataType));
Magic Number,SubSonic,ANSISqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\ANSISqlGenerator.cs,GenerateColumnAttributes,The following statement contains a magic number: if(column.IsPrimaryKey)              {                    if (column.MaxLength > 0)                      sb.AppendFormat("({0}) "' column.MaxLength);                    sb.Append(" NOT NULL PRIMARY KEY");                  if(column.IsNumeric)                      sb.Append(" IDENTITY(1'1)");              }              else              {                  //thanks to robbam for this                  if (column.DataType == DbType.Decimal)                      sb.Append("(" + column.NumberPrecision + "'" + column.NumberScale + ")");                  else if (column.MaxLength > 0 && column.MaxLength < 8000)                      sb.Append("(" + column.MaxLength + ")");                                    if(!column.IsNullable)                      sb.Append(" NOT NULL");                  else                      sb.Append(" NULL");                    if(!String.IsNullOrEmpty(column.DefaultSetting))                      sb.Append(" CONSTRAINT DF_" + column.Table.Name + "_" + column.ColumnName + " DEFAULT (" + column.DefaultSetting + ")");              }
Magic Number,SubSonic,MySqlGenerator,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlGenerators\MySqlGenerator.cs,GenerateColumnAttributes,The following statement contains a magic number: if(column.DataType == DbType.DateTime && column.DefaultSetting == "getdate()")              {                  //there is no way to have two fields with a NOW or CURRENT_TIMESTAMP setting                  //so need to rely on the code to help here                  sb.Append(" datetime ");              }              else              {                  sb.Append(" " + GetNativeType(column.DataType));                    if(column.IsPrimaryKey)                  {                      sb.Append(" NOT NULL");                      if(column.IsNumeric)                          sb.Append(" AUTO_INCREMENT");                  }                  else                  {                      if(column.MaxLength > 0 && column.MaxLength < 8000)                          sb.Append("(" + column.MaxLength + ")");                        if(!column.IsNullable)                          sb.Append(" NOT NULL");                      else                          sb.Append(" NULL");                        if(!String.IsNullOrEmpty(column.DefaultSetting))                          sb.Append(" DEFAULT " + column.DefaultSetting + " ");                  }              }
Magic Number,SubSonic,SqlQuery,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\SqlQuery.cs,ExecuteJoinedDataSet,The following statement contains a magic number: if(FromTables.Count > 0)              {                  TableSchema.Table table = FromTables[0];                  StringBuilder strSelect = new StringBuilder(SqlFragment.SELECT);                  string strFrom = table.QualifiedName;                  StringBuilder strJoin = new StringBuilder();                  for(int i = 0; i < table.Columns.Count; i++)                  {                      string joinType = SqlFragment.INNER_JOIN;                      StringBuilder col;                      TableSchema.TableColumn tblCol = table.Columns[i];                      if(tblCol.IsNullable)                          joinType = SqlFragment.LEFT_JOIN;                        if(i == 0 && tblCol.IsForeignKey && !String.IsNullOrEmpty(tblCol.ForeignKeyTableName) && Utility.IsMappingTable(table))                      {                          col = new StringBuilder(table.Provider.QualifyColumnName(table.SchemaName' table.Name' tblCol.ColumnName));                          col.Append(SqlFragment.AS);                          col.Append(String.Concat("PK"' tblCol.ColumnName));                          if(i + 1 != table.Columns.Count)                              col.Append("' ");                            strSelect.Append(col);                      }                        if(tblCol.IsForeignKey && !tblCol.IsPrimaryKey && !String.IsNullOrEmpty(tblCol.ForeignKeyTableName))                      {                          string strJoinPrefix = String.Concat(SqlFragment.JOIN_PREFIX' i);                          TableSchema.Table fkTable = DataService.GetSchema(tblCol.ForeignKeyTableName' ProviderName' TableType.Table);                          TableSchema.TableColumn displayCol = Utility.GetDisplayTableColumn(fkTable);                            bool isSortable = Utility.GetEffectiveMaxLength(displayCol) < 256;                          string dataCol = displayCol.ColumnName;                          string selectCol = table.Provider.QualifyColumnName(""' strJoinPrefix' dataCol);                          col = new StringBuilder(selectCol);  						if (tblCol.Table.Provider.DatabaseRequiresBracketedJoins) { strFrom = "(" + strFrom; }                          strJoin.Append(joinType);                          strJoin.Append(fkTable.Provider.QualifyTableName(fkTable.SchemaName' fkTable.TableName));                          strJoin.Append(SqlFragment.SPACE);                          strJoin.Append(strJoinPrefix);                          strJoin.Append(SqlFragment.ON);                          string columnReference = tblCol.QualifiedName;                          strJoin.Append(columnReference);                          strJoin.Append(SqlFragment.EQUAL_TO);                          string joinReference =  table.Provider.QualifyColumnName(""' strJoinPrefix' fkTable.PrimaryKey.ColumnName);                          strJoin.Append(joinReference);  						if (tblCol.Table.Provider.DatabaseRequiresBracketedJoins) { strJoin.Append(")"); }  						if (isSortable && OrderBys.Count > 0)                          {                              //for(int o = 0; o < OrderBys.Count; o++)                              //    OrderBys[o] = OrderBys[o].Replace(columnReference' selectCol);                              foreach (OrderBySQ ob in OrderBys)                                  if (Utility.StripSquareBrackets(ob.ColumnNameOrExpression) == columnReference) ob.ColumnNameOrExpression = selectCol;                          }                                          }                      else                          col = new StringBuilder(table.Provider.QualifyColumnName(""' table.Name' tblCol.ColumnName));                      col.Append(SqlFragment.AS);                      col.Append(tblCol.Table.Provider.FormatIdentifier(tblCol.ColumnName));                        if(i + 1 != table.Columns.Count)                          col.Append("' ");                        strSelect.Append(col);                  }                    StringBuilder strSQL = new StringBuilder();                  strSQL.Append(strSelect);  				strSQL.Append(SqlFragment.FROM + strFrom);                  strSQL.Append(strJoin);                    ISqlGenerator generator = GetGenerator();                  strSQL.Append(generator.GenerateWhere());                  strSQL.Append(generator.GenerateOrderBy());                    QueryCommand qry = new QueryCommand(strSQL.ToString()' table.Provider.Name);    				SetConstraintParams(qry);                  //foreach(Where where in wheres)                  //    qry.AddParameter(where.ParameterName' where.ParameterValue' where.DbType);                    //foreach(BetweenAnd between in betweens)                  //{                  //    qry.AddParameter(between.StartParameterName' between.StartDate' DbType.DateTime);                  //    qry.AddParameter(between.EndParameterName' between.EndDate' DbType.DateTime);                  //}                    return DataService.GetDataSet<T>(qry);              }
Magic Number,SubSonic,Query,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sql Tools\Query.cs,ExecuteJoinedDataSet,The following statement contains a magic number: for(int i = 0; i < table.Columns.Count; i++)              {                  string joinType = SqlFragment.INNER_JOIN;                  StringBuilder col;                  TableSchema.TableColumn tblCol = table.Columns[i];                  if(tblCol.IsNullable)                      joinType = SqlFragment.LEFT_JOIN;                    if(i == 0 && tblCol.IsForeignKey && !String.IsNullOrEmpty(tblCol.ForeignKeyTableName) && Utility.IsMappingTable(table))                  {                      col = new StringBuilder(table.Provider.QualifyColumnName(table.SchemaName' table.Name' tblCol.ColumnName));                      col.Append(SqlFragment.AS);                      col.Append(String.Concat("PK"' tblCol.ColumnName));                      if(i + 1 != table.Columns.Count)                          col.Append("' ");                        strSelect.Append(col);                  }                    if(tblCol.IsForeignKey && !tblCol.IsPrimaryKey && !String.IsNullOrEmpty(tblCol.ForeignKeyTableName))                  {                      joinCount++;                       string fkTableAlias = String.Concat(SqlFragment.JOIN_PREFIX' i);                      TableSchema.Table fkTable = DataService.GetSchema(tblCol.ForeignKeyTableName' ProviderName' TableType.Table);                      TableSchema.TableColumn displayCol = Utility.GetDisplayTableColumn(fkTable);                        bool isSortable = Utility.GetEffectiveMaxLength(displayCol) < 256;                      string dataCol = displayCol.ColumnName;                      string selectCol = table.Provider.QualifyColumnName(""' fkTableAlias' dataCol);                      col = new StringBuilder(selectCol);                      strJoin.Append(joinType);                      strJoin.Append(fkTable.Provider.QualifyTableName(fkTable.SchemaName' fkTable.TableName));                      strJoin.Append(SqlFragment.AS);                      strJoin.Append(fkTableAlias);                      strJoin.Append(SqlFragment.ON);                      string columnReference = tblCol.QualifiedName;                      strJoin.Append(columnReference);                      strJoin.Append(SqlFragment.EQUAL_TO);                      string joinReference = table.Provider.QualifyColumnName(""' fkTableAlias' fkTable.PrimaryKey.ColumnName);                      strJoin.Append(joinReference);                      if (table.Provider.DatabaseRequiresBracketedJoins) strJoin.Append(")");                      if(isSortable && OrderByCollection.Count > 0) {  						foreach (OrderBy ob in OrderByCollection) {  							if (ob.OrderColumnName.ToLower() == tblCol.QualifiedName.ToLower()  								|| ob.OrderColumnName.ToLower() == table.Provider.FormatIdentifier(tblCol.ColumnName).ToLower()  								|| ob.OrderColumnName.ToLower() == tblCol.ColumnName.ToLower()  							) { ob.OrderColumnName = selectCol;	}  						}                      }                  }                  else                      col = new StringBuilder(table.Provider.QualifyColumnName(table.SchemaName' table.Name' tblCol.ColumnName));                  col.Append(SqlFragment.AS);                  col.Append(tblCol.Table.Provider.FormatIdentifier(tblCol.ColumnName));                    if(i + 1 != table.Columns.Count)                      col.Append("' ");                    strSelect.Append(col);              }
Magic Number,SubSonic.WebUtility,RESTfullUrl,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\RESTfullUrl.cs,ParseUrl,The following statement contains a magic number: int tableSPIndex = bits.Length - 2;
Magic Number,SubSonic.Parser,XmlToJSONParser,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\XmlToJSONParser.cs,XmlToJSONnode,The following statement contains a magic number: foreach(string childname in childNodeNames.Keys)              {                  ArrayList alChild = (ArrayList)childNodeNames[childname];                  if(alChild.Count == 1)                      OutputNode(childname' alChild[0]' sbJSON' true);                  else                  {                      sbJSON.Append(childname + ": [ ");                      foreach(object Child in alChild)                          OutputNode(childname' Child' sbJSON' false);                      sbJSON.Remove(sbJSON.Length - 2' 2);                      sbJSON.Append(" ]' ");                  }              }
Magic Number,SubSonic.Parser,XmlToJSONParser,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\XmlToJSONParser.cs,XmlToJSONnode,The following statement contains a magic number: foreach(string childname in childNodeNames.Keys)              {                  ArrayList alChild = (ArrayList)childNodeNames[childname];                  if(alChild.Count == 1)                      OutputNode(childname' alChild[0]' sbJSON' true);                  else                  {                      sbJSON.Append(childname + ": [ ");                      foreach(object Child in alChild)                          OutputNode(childname' Child' sbJSON' false);                      sbJSON.Remove(sbJSON.Length - 2' 2);                      sbJSON.Append(" ]' ");                  }              }
Magic Number,SubSonic.Parser,XmlToJSONParser,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\XmlToJSONParser.cs,XmlToJSONnode,The following statement contains a magic number: sbJSON.Remove(sbJSON.Length - 2' 2);
Magic Number,SubSonic.Parser,XmlToJSONParser,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\XmlToJSONParser.cs,XmlToJSONnode,The following statement contains a magic number: sbJSON.Remove(sbJSON.Length - 2' 2);
Magic Number,SubSonic.Parser,XmlToJSONParser,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\XmlToJSONParser.cs,SafeJSON,The following statement contains a magic number: StringBuilder sb = new StringBuilder(len + 4);
Magic Number,SubSonic.Parser,XmlToJSONParser,C:\repos\subsonic_SubSonic-2.0\SubSonic\HttpHandlers\XmlToJSONParser.cs,SafeJSON,The following statement contains a magic number: for(i = 0; i < len; i += 1)              {                  char c = s[i];                  if((c == '\\') || (c == '"') || (c == '>'))                  {                      sb.Append('\\');                      sb.Append(c);                  }                  else if(c == '\b')                      sb.Append("\\b");                  else if(c == '\t')                      sb.Append("\\t");                  else if(c == '\n')                      sb.Append("\\n");                  else if(c == '\f')                      sb.Append("\\f");                  else if(c == '\r')                      sb.Append("\\r");                  else                  {                      if(c < ' ')                      {                          //t = "000" + Integer.toHexString(c);                          string tmp = new string(c' 1);                          t = "000" + int.Parse(tmp' NumberStyles.HexNumber);                          sb.Append("\\u" + t.Substring(t.Length - 4));                      }                      else                          sb.Append(c);                  }              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,ReadableDiff,The following statement contains a magic number: if(seconds < 0)              {                  minutes--;                  seconds += 60;              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,ReadableDiff,The following statement contains a magic number: if(minutes < 0)              {                  hours--;                  minutes += 60;              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,ReadableDiff,The following statement contains a magic number: if(hours < 0)              {                  days--;                  hours += 24;              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,ReadableDiff,The following statement contains a magic number: if(days < 0)              {                  months--;                  int previousMonth = (endTime.Month == 1) ? 12 : endTime.Month - 1;                  int year = (previousMonth == 12) ? endTime.Year - 1 : endTime.Year;                  days += DateTime.DaysInMonth(year' previousMonth);              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,ReadableDiff,The following statement contains a magic number: if(days < 0)              {                  months--;                  int previousMonth = (endTime.Month == 1) ? 12 : endTime.Month - 1;                  int year = (previousMonth == 12) ? endTime.Year - 1 : endTime.Year;                  days += DateTime.DaysInMonth(year' previousMonth);              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,ReadableDiff,The following statement contains a magic number: if(months < 0)              {                  years--;                  months += 12;              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,TimeDiff,The following statement contains a magic number: if(seconds < 0)              {                  minutes--;                  seconds += 60;              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,TimeDiff,The following statement contains a magic number: if(minutes < 0)              {                  hours--;                  minutes += 60;              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,TimeDiff,The following statement contains a magic number: if(hours < 0)              {                  days--;                  hours += 24;              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,TimeDiff,The following statement contains a magic number: if(days < 0)              {                  months--;                  int previousMonth = (endTime.Month == 1) ? 12 : endTime.Month - 1;                  int year = (previousMonth == 12) ? endTime.Year - 1 : endTime.Year;                  days += DateTime.DaysInMonth(year' previousMonth);              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,TimeDiff,The following statement contains a magic number: if(days < 0)              {                  months--;                  int previousMonth = (endTime.Month == 1) ? 12 : endTime.Month - 1;                  int year = (previousMonth == 12) ? endTime.Year - 1 : endTime.Year;                  days += DateTime.DaysInMonth(year' previousMonth);              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,TimeDiff,The following statement contains a magic number: if(months < 0)              {                  years--;                  months += 12;              }
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,GetDateDayWithSuffix,The following statement contains a magic number: if(dayNumber == 1 || dayNumber == 21 || dayNumber == 31)                  suffix = "st";              else if(dayNumber == 2 || dayNumber == 22)                  suffix = "nd";              else if(dayNumber == 3 || dayNumber == 23)                  suffix = "rd";
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,GetDateDayWithSuffix,The following statement contains a magic number: if(dayNumber == 1 || dayNumber == 21 || dayNumber == 31)                  suffix = "st";              else if(dayNumber == 2 || dayNumber == 22)                  suffix = "nd";              else if(dayNumber == 3 || dayNumber == 23)                  suffix = "rd";
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,GetDateDayWithSuffix,The following statement contains a magic number: if(dayNumber == 1 || dayNumber == 21 || dayNumber == 31)                  suffix = "st";              else if(dayNumber == 2 || dayNumber == 22)                  suffix = "nd";              else if(dayNumber == 3 || dayNumber == 23)                  suffix = "rd";
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,GetDateDayWithSuffix,The following statement contains a magic number: if(dayNumber == 1 || dayNumber == 21 || dayNumber == 31)                  suffix = "st";              else if(dayNumber == 2 || dayNumber == 22)                  suffix = "nd";              else if(dayNumber == 3 || dayNumber == 23)                  suffix = "rd";
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,GetDateDayWithSuffix,The following statement contains a magic number: if(dayNumber == 1 || dayNumber == 21 || dayNumber == 31)                  suffix = "st";              else if(dayNumber == 2 || dayNumber == 22)                  suffix = "nd";              else if(dayNumber == 3 || dayNumber == 23)                  suffix = "rd";
Magic Number,SubSonic.Sugar,Dates,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Dates.cs,GetDateDayWithSuffix,The following statement contains a magic number: if(dayNumber == 1 || dayNumber == 21 || dayNumber == 31)                  suffix = "st";              else if(dayNumber == 2 || dayNumber == 22)                  suffix = "nd";              else if(dayNumber == 3 || dayNumber == 23)                  suffix = "rd";
Magic Number,SubSonic.Sugar,Files,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\File.cs,FromByteCount,The following statement contains a magic number: const decimal megabyte = kilobyte * 1024;
Magic Number,SubSonic.Sugar,Files,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\File.cs,FromByteCount,The following statement contains a magic number: const decimal gigabyte = megabyte * 1024;
Magic Number,SubSonic.Sugar,Numbers,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Numbers.cs,Random,The following statement contains a magic number: byte[] random = new Byte[4];
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,TextToEntity,The following statement contains a magic number: return textString.Replace(AsciiToUnicode(38)' "&amp;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(160' "&nbsp;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(161' "&iexcl;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(162' "&cent;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(163' "&pound;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(164' "&curren;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(165' "&yen;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(166' "&brvbar;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(167' "&sect;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(168' "&uml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(169' "&copy;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(170' "&ordf;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(171' "&laquo;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(172' "&not;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(173' "&shy;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(174' "&reg;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(175' "&macr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(176' "&deg;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(177' "&plusmn;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(178' "&sup2;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(179' "&sup3;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(180' "&acute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(181' "&micro;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(182' "&para;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(183' "&middot;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(184' "&cedil;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(185' "&sup1;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(186' "&ordm;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(187' "&raquo;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(188' "&frac14;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(189' "&frac12;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(190' "&frac34;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(191' "&iquest;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(192' "&Agrave;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(193' "&Aacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(194' "&Acirc;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(195' "&Atilde;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(196' "&Auml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(197' "&Aring;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(198' "&AElig;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(199' "&Ccedil;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(200' "&Egrave;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(201' "&Eacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(202' "&Ecirc;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(203' "&Euml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(204' "&Igrave;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(205' "&Iacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(206' "&Icirc;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(207' "&Iuml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(208' "&ETH;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(209' "&Ntilde;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(210' "&Ograve;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(211' "&Oacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(212' "&Ocirc;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(213' "&Otilde;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(214' "&Ouml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(215' "&times;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(216' "&Oslash;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(217' "&Ugrave;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(218' "&Uacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(219' "&Ucirc;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(220' "&Uuml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(221' "&Yacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(222' "&THORN;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(223' "&szlig;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(224' "&agrave;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(225' "&aacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(226' "&acirc;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(227' "&atilde;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(228' "&auml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(229' "&aring;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(230' "&aelig;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(231' "&ccedil;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(232' "&egrave;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(233' "&eacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(234' "&ecirc;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(235' "&euml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(236' "&igrave;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(237' "&iacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(238' "&icirc;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(239' "&iuml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(240' "&eth;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(241' "&ntilde;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(242' "&ograve;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(243' "&oacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(244' "&ocirc;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(245' "&otilde;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(246' "&ouml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(247' "&divide;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(248' "&oslash;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(249' "&ugrave;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(250' "&uacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(251' "&ucirc;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(252' "&uuml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(253' "&yacute;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(254' "&thorn;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(255' "&yuml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(402' "&fnof;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(913' "&Alpha;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(914' "&Beta;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(915' "&Gamma;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(916' "&Delta;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(917' "&Epsilon;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(918' "&Zeta;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(919' "&Eta;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(920' "&Theta;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(921' "&Iota;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(922' "&Kappa;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(923' "&Lambda;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(924' "&Mu;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(925' "&Nu;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(926' "&Xi;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(927' "&Omicron;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(928' "&Pi;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(929' "&Rho;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(931' "&Sigma;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(932' "&Tau;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(933' "&Upsilon;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(934' "&Phi;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(935' "&Chi;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(936' "&Psi;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(937' "&Omega;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(945' "&alpha;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(946' "&beta;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(947' "&gamma;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(948' "&delta;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(949' "&epsilon;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(950' "&zeta;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(951' "&eta;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(952' "&theta;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(953' "&iota;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(954' "&kappa;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(955' "&lambda;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(956' "&mu;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(957' "&nu;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(958' "&xi;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(959' "&omicron;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(960' "&pi;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(961' "&rho;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(962' "&sigmaf;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(963' "&sigma;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(964' "&tau;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(965' "&upsilon;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(966' "&phi;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(967' "&chi;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(968' "&psi;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(969' "&omega;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(977' "&thetasym;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(978' "&upsih;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(982' "&piv;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8226' "&bull;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8230' "&hellip;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8242' "&prime;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8243' "&Prime;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8254' "&oline;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8260' "&frasl;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8472' "&weierp;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8465' "&image;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8476' "&real;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8482' "&trade;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8501' "&alefsym;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8592' "&larr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8593' "&uarr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8594' "&rarr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8595' "&darr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8596' "&harr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8629' "&crarr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8656' "&lArr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8657' "&uArr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8658' "&rArr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8659' "&dArr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8660' "&hArr;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8704' "&forall;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8706' "&part;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8707' "&exist;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8709' "&empty;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8711' "&nabla;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8712' "&isin;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8713' "&notin;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8715' "&ni;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8719' "&prod;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8721' "&sum;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8722' "&minus;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8727' "&lowast;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8730' "&radic;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8733' "&prop;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8734' "&infin;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8736' "&ang;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8743' "&and;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8744' "&or;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8745' "&cap;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8746' "&cup;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8747' "&int;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8756' "&there4;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8764' "&sim;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8773' "&cong;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8776' "&asymp;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8800' "&ne;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8801' "&equiv;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8804' "&le;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8805' "&ge;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8834' "&sub;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8835' "&sup;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8836' "&nsub;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8838' "&sube;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8839' "&supe;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8853' "&oplus;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8855' "&otimes;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8869' "&perp;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8901' "&sdot;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8968' "&lceil;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8969' "&rceil;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8970' "&lfloor;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8971' "&rfloor;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(9001' "&lang;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(9002' "&rang;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(9674' "&loz;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(9824' "&spades;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(9827' "&clubs;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(9829' "&hearts;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(9830' "&diams;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(34' "&quot;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(60' "&lt;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(62' "&gt;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(338' "&OElig;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(339' "&oelig;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(352' "&Scaron;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(353' "&scaron;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(376' "&Yuml;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(710' "&circ;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(732' "&tilde;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8194' "&ensp;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8195' "&emsp;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8201' "&thinsp;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8204' "&zwnj;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8205' "&zwj;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8206' "&lrm;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8207' "&rlm;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8211' "&ndash;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8212' "&mdash;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8216' "&lsquo;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8217' "&rsquo;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8218' "&sbquo;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8220' "&ldquo;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8221' "&rdquo;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8222' "&bdquo;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8224' "&dagger;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8225' "&Dagger;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8240' "&permil;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8249' "&lsaquo;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8250' "&rsaquo;");
Magic Number,SubSonic.Sugar,Strings,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Strings.cs,FillEntities,The following statement contains a magic number: _entityTable.Add(8364' "&euro;");
Magic Number,SubSonic.Sugar,Validation,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Validation.cs,IsUSState,The following statement contains a magic number: if(stateName.Length > 2)                  return (!String.IsNullOrEmpty(Strings.USStateNameToAbbrev(stateName)));
Magic Number,SubSonic.Sugar,Validation,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Validation.cs,IsValidLuhn,The following statement contains a magic number: for(int i = digits.Length - 1; i >= 0; i--)              {                  if(alt)                  {                      digits[i] *= 2;                      if(digits[i] > 9)                          digits[i] -= 9; // equivalent to adding the value of digits                  }                  sum += digits[i];                  alt = !alt;              }
Magic Number,SubSonic.Sugar,Validation,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Validation.cs,IsValidLuhn,The following statement contains a magic number: for(int i = digits.Length - 1; i >= 0; i--)              {                  if(alt)                  {                      digits[i] *= 2;                      if(digits[i] > 9)                          digits[i] -= 9; // equivalent to adding the value of digits                  }                  sum += digits[i];                  alt = !alt;              }
Magic Number,SubSonic.Sugar,Validation,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Validation.cs,IsValidLuhn,The following statement contains a magic number: for(int i = digits.Length - 1; i >= 0; i--)              {                  if(alt)                  {                      digits[i] *= 2;                      if(digits[i] > 9)                          digits[i] -= 9; // equivalent to adding the value of digits                  }                  sum += digits[i];                  alt = !alt;              }
Magic Number,SubSonic.Sugar,Validation,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Validation.cs,IsValidLuhn,The following statement contains a magic number: return sum % 10 == 0;
Magic Number,SubSonic.Sugar,Web,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Web.cs,CreateSpamFreeEmailLink,The following statement contains a magic number: if(!String.IsNullOrEmpty(emailText))              {                  string[] parts = emailText.Split(new char[] {'@'});                  if(parts.Length == 2)                  {                      StringBuilder sb = new StringBuilder();                      sb.Append("<script type='text/javascript'>");                      sb.Append("var m = '" + parts[0] + "';");                      sb.Append("var a = '" + parts[1] + "';");                      sb.Append("var l = '" + emailText + "';");                      sb.Append("document.write('<a href=\"mailto:' + m + '@' + a + '\">' + l + '</a>');");                      sb.Append("</script>");                      return sb.ToString();                  }              }
Magic Number,SubSonic.Sugar,Web,C:\repos\subsonic_SubSonic-2.0\SubSonic\Sugar\Web.cs,GenerateLoremIpsum,The following statement contains a magic number: if(method.ToLower() == "p" && count > 1000)                  throw new ArgumentOutOfRangeException("count"' "Sorry' lorem ipsum control only allows 1000 or less paragraphs.");
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,ByteArrayToString,The following statement contains a magic number: StringBuilder sOutput = new StringBuilder(arrInput.Length * 2);
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The following statement contains a magic number: if(schema.Columns.Count == 2)              {                  if(schema.Columns[0].IsPrimaryKey && schema.Columns[0].IsForeignKey && schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey)                  {                      if(IsMatch(schema.Columns[0].ColumnName' relatedTableColumn) || IsMatch(schema.Columns[1].ColumnName' relatedTableColumn))                          return true;                  }              }
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The following statement contains a magic number: if(schema.Columns.Count == 3)              {                  if((schema.Columns[0].IsPrimaryKey && !schema.Columns[0].IsForeignKey) && (schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) &&                     (schema.Columns[2].IsPrimaryKey && schema.Columns[2].IsForeignKey))                  {                      if(IsMatch(schema.Columns[1].ColumnName' relatedTableColumn) || IsMatch(schema.Columns[2].ColumnName' relatedTableColumn))                          return true;                  }              }
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The following statement contains a magic number: if(schema.Columns.Count == 3)              {                  if((schema.Columns[0].IsPrimaryKey && !schema.Columns[0].IsForeignKey) && (schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) &&                     (schema.Columns[2].IsPrimaryKey && schema.Columns[2].IsForeignKey))                  {                      if(IsMatch(schema.Columns[1].ColumnName' relatedTableColumn) || IsMatch(schema.Columns[2].ColumnName' relatedTableColumn))                          return true;                  }              }
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The following statement contains a magic number: if(schema.Columns.Count == 3)              {                  if((schema.Columns[0].IsPrimaryKey && !schema.Columns[0].IsForeignKey) && (schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) &&                     (schema.Columns[2].IsPrimaryKey && schema.Columns[2].IsForeignKey))                  {                      if(IsMatch(schema.Columns[1].ColumnName' relatedTableColumn) || IsMatch(schema.Columns[2].ColumnName' relatedTableColumn))                          return true;                  }              }
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The following statement contains a magic number: if(schema.Columns.Count == 3)              {                  if((schema.Columns[0].IsPrimaryKey && !schema.Columns[0].IsForeignKey) && (schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) &&                     (schema.Columns[2].IsPrimaryKey && schema.Columns[2].IsForeignKey))                  {                      if(IsMatch(schema.Columns[1].ColumnName' relatedTableColumn) || IsMatch(schema.Columns[2].ColumnName' relatedTableColumn))                          return true;                  }              }
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The following statement contains a magic number: if(schema.Columns.Count == 2 && schema.Columns[0].IsPrimaryKey && schema.Columns[0].IsForeignKey && schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey)                  return true;
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The following statement contains a magic number: if(schema.Columns.Count == 3 &&                 (schema.Columns[0].IsPrimaryKey && !schema.Columns[0].IsForeignKey) &&                 (schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) &&                 (schema.Columns[2].IsPrimaryKey && schema.Columns[2].IsForeignKey))                  return true;
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The following statement contains a magic number: if(schema.Columns.Count == 3 &&                 (schema.Columns[0].IsPrimaryKey && !schema.Columns[0].IsForeignKey) &&                 (schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) &&                 (schema.Columns[2].IsPrimaryKey && schema.Columns[2].IsForeignKey))                  return true;
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,IsMappingTable,The following statement contains a magic number: if(schema.Columns.Count == 3 &&                 (schema.Columns[0].IsPrimaryKey && !schema.Columns[0].IsForeignKey) &&                 (schema.Columns[1].IsPrimaryKey && schema.Columns[1].IsForeignKey) &&                 (schema.Columns[2].IsPrimaryKey && schema.Columns[2].IsForeignKey))                  return true;
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,GetDefaultSetting,The following statement contains a magic number: switch(column.DataType)              {                  case DbType.Xml:                  case DbType.String:                  case DbType.AnsiString:                  case DbType.StringFixedLength:                  case DbType.AnsiStringFixedLength:                      return String.Empty;                  case DbType.Date:                  case DbType.DateTime:                      return new DateTime(1900' 01' 01);                  case DbType.Boolean:                      return false;                  case DbType.Guid:                      return Guid.Empty;                  default:                      return 0;              }
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,GetRandomString,The following statement contains a magic number: builder.Append(RandomString(4' false));
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,GetRandomString,The following statement contains a magic number: builder.Append(RandomInt(1000' 9999));
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,GetRandomString,The following statement contains a magic number: builder.Append(RandomInt(1000' 9999));
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,GetRandomString,The following statement contains a magic number: builder.Append(RandomString(2' false));
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,RandomString,The following statement contains a magic number: for(int i = 0; i < size; i++)              {                  char ch = Convert.ToChar(Convert.ToInt32(26 * random.NextDouble() + 65));                  builder.Append(ch);              }
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,RandomString,The following statement contains a magic number: for(int i = 0; i < size; i++)              {                  char ch = Convert.ToChar(Convert.ToInt32(26 * random.NextDouble() + 65));                  builder.Append(ch);              }
Magic Number,SubSonic.Utilities,Utility,C:\repos\subsonic_SubSonic-2.0\SubSonic\Utility.cs,RegexTransform,The following statement contains a magic number: if(provider.UseRegexReplace)              {                  Regex rx;                    if(!String.IsNullOrEmpty(provider.RegexMatchExpression))                  {                      rx = provider.RegexIgnoreCase ? new Regex(provider.RegexMatchExpression' RegexOptions.IgnoreCase) : new Regex(provider.RegexMatchExpression);                      inputText = rx.Replace(inputText' provider.RegexReplaceExpression);                  }                    if(!String.IsNullOrEmpty(provider.RegexDictionaryReplace) && !String.IsNullOrEmpty(inputText))                  {                      string regexString = Regex.Replace(provider.RegexDictionaryReplace' "[\r\n\t]"' String.Empty);                        string[] pairs = Regex.Split(regexString' ";");                      foreach(string pair in pairs)                      {                          string[] keys = Regex.Split(pair' "'");                          if(keys.Length == 2)                          {                              rx = provider.RegexIgnoreCase ? new Regex(keys[0]' RegexOptions.IgnoreCase) : new Regex(keys[0]);                              inputText = rx.Replace(inputText' keys[1]);                          }                      }                  }              }
Missing Default,SubSonic,ReadOnlyRecord<T>,C:\repos\subsonic_SubSonic-2.0\SubSonic\ActiveRecord\ReadOnlyRecord.cs,Find,The following switch statement is missing a default case: switch(col.DataType)                      {                          case DbType.Boolean:                              defaultValue = false;                              break;                          case DbType.Currency:                          case DbType.Decimal:                          case DbType.Int16:                          case DbType.Double:                          case DbType.Int32:                              defaultValue = 0;                              break;                          case DbType.Date:                          case DbType.DateTime:                              defaultValue = new DateTime(1900' 1' 1);                              break;                          case DbType.Guid:                              defaultValue = Guid.Empty;                              break;                      }
Missing Default,SubSonic,DataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\DataProvider.cs,GetSql,The following switch statement is missing a default case: switch(qry.QueryType)              {                  case QueryType.Select:                      result = GetSelectSql(qry);                      break;                  case QueryType.Update:                      result = GetUpdateSql(qry);                      break;                  case QueryType.Insert:                      result = GetInsertSql(qry);                      break;                  case QueryType.Delete:                      result = GetDeleteSql(qry);                      break;              }
Missing Default,SubSonic,MySqlDataProvider,C:\repos\subsonic_SubSonic-2.0\SubSonic\DataProviders\MySqlDataProvider.cs,AddParams,The following switch statement is missing a default case: switch(param.Mode)                          {                              case ParameterDirection.InputOutput:                                  sqlParam.Direction = ParameterDirection.InputOutput;                                  break;                              case ParameterDirection.Output:                                  sqlParam.Direction = ParameterDirection.Output;                                  break;                              case ParameterDirection.ReturnValue:                                  sqlParam.Direction = ParameterDirection.ReturnValue;                                  break;                              case ParameterDirection.Input:                                  sqlParam.Direction = ParameterDirection.Input;                                  break;                          }
Missing Default,SubSonic,Migration,C:\repos\subsonic_SubSonic-2.0\SubSonic\Migrations\Migration.cs,BuildSqlStatement,The following switch statement is missing a default case: switch(direction)                  {                      case MigrationDirection.Up:                          Up();                          break;                      case MigrationDirection.Down:                          Down();                          break;                  }
Missing Default,SubSonic,OrderBySQ,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\OrderBy.cs,GetOrderDirectionValue,The following switch statement is missing a default case: switch (o) {                  case OrderDirection.ASC:                      result = SqlFragment.ASC;                      break;                  case OrderDirection.DESC:                      result = SqlFragment.DESC;                      break;              }
Missing Default,SubSonic,Join,C:\repos\subsonic_SubSonic-2.0\SubSonic\SqlQuery\Join.cs,GetJoinTypeValue,The following switch statement is missing a default case: switch(j)              {                  case JoinType.Outer:                      result = SqlFragment.OUTER_JOIN;                      break;                  case JoinType.LeftInner:                      result = SqlFragment.LEFT_INNER_JOIN;                      break;                  case JoinType.LeftOuter:                      result = SqlFragment.LEFT_OUTER_JOIN;                      break;                  case JoinType.RightInner:                      result = SqlFragment.RIGHT_INNER_JOIN;                      break;                  case JoinType.RightOuter:                      result = SqlFragment.RIGHT_OUTER_JOIN;                      break;                  case JoinType.Cross:                      result = SqlFragment.CROSS_JOIN;                      break;                  case JoinType.NotEqual:                      result = SqlFragment.UNEQUAL_JOIN;                      break;              }
