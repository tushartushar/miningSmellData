Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,MenuCompleteImpl,The method has 268 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,InteractiveHistorySearchLoop,The method has 104 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SetDefaultEmacsBindings,The method has 115 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetDisplayGrouping,The method has 195 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SetDefaultViBindings,The method has 240 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SetOptionsInternal,The method has 126 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetKeyHandlers,The method has 113 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadKey,The method has 101 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadLine,The method has 137 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GenerateRender,The method has 178 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CalculateWhereAndWhatToRender,The method has 124 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReallyRender,The method has 162 lines of code.
Long Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CaptureScreenImpl,The method has 103 lines of code.
Long Method,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The method has 167 lines of code.
Long Method,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,KeyInfoAsString,The method has 137 lines of code.
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SelfInsert,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetUnambiguousPrefix,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CompleteImpl,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetCompletions,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,MenuCompleteImpl,Cyclomatic complexity of the method is 37
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetAddToHistoryOption,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,HistoryRecall,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,HistorySearch,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,UpdateHistoryDuringInteractiveSearch,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,InteractiveHistorySearchLoop,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetDisplayGrouping,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,AlternateBackground,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,MoveToLine,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GotoBrace,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SetOptionsInternal,Cyclomatic complexity of the method is 30
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetKeyHandlers,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadOneOrMoreKeys,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadKey,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,InputLoop,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,DelayedOneTimeInitialize,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,DigitArgument,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetPrompt,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViChord,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViDigitArgumentInChord,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GenerateRender,Cyclomatic complexity of the method is 25
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CalculateWhereAndWhatToRender,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReallyRender,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetTokenColor,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ConvertOffsetToPoint,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ConvertLineAndColumnToOffset,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViReplaceUntilEsc,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CaptureScreenImpl,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,FindNestedToken,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,FindPreviousWordFromWord,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViFindNextWordEnd,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessControlKey,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessSequencePart,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,Cyclomatic complexity of the method is 35
Complex Method,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,AsEscapeSequence,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.PowerShell,Menu,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Completion.cs,DrawMenu,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.PowerShell,Menu,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Completion.cs,UpdateMenuSelection,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetOneKey,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,MapKeyChar,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.PowerShell,KeyHandler,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\KeyBindings.cs,GetGroupingDescription,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,KeyInfoAsString,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.PowerShell,ScreenCapture,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ScreenCapture.cs,DumpScreenToClipboard,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.PowerShell,ViRegister,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ViRegister.cs,PasteAfter,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,MaybeAddToHistory,The method has 5 parameters. Parameters: result' edits' undoEditIndex' fromDifferentSession' fromInitialRead
Long Parameter List,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SetKeyHandlerInternal,The method has 5 parameters. Parameters: keys' handler' briefDescription' longDescription' scriptBlock
Long Parameter List,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,Replace,The method has 5 parameters. Parameters: start' length' replacement' instigator' instigatorArg
Long Parameter List,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,ToUnicode,The method has 6 parameters. Parameters: uVirtKey' uScanCode' lpKeyState' chars' charMaxCount' flags
Long Parameter List,Microsoft.PowerShell,ScreenCapture,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ScreenCapture.cs,WriteConsoleOutput,The method has 5 parameters. Parameters: consoleOutput' buffer' bufferSize' bufferCoord' writeRegion
Long Parameter List,Microsoft.PowerShell,ScreenCapture,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ScreenCapture.cs,ReadConsoleOutput,The method has 5 parameters. Parameters: consoleOutput' buffer' bufferSize' bufferCoord' readRegion
Long Identifier,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReallyRender,The length of the parameter physicalLinesStartingFromTheRewrittenLogicalLine is 48.
Long Identifier,Microsoft.PowerShell,PSConsoleReadLineOptions,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,,The length of the parameter DefaultHistorySearchCursorMovesToEnd is 36.
Long Identifier,Microsoft.PowerShell,PSConsoleReadLineOptions,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,,The length of the parameter DefaultHistorySearchCaseSensitive is 33.
Long Identifier,Microsoft.PowerShell,SetPSReadLineOption,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,,The length of the parameter _commandValidationHandlerSpecified is 34.
Long Identifier,Microsoft.PowerShell,SetPSReadLineOption,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,,The length of the parameter _historySearchCursorMovesToEnd is 30.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetReplacementTextForDirectory,The length of the statement  "                    replacementText = replacementText.Substring(0' len - 1) + System.IO.Path.DirectorySeparatorChar + replacementText[len - 1]; " is 123.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,FindUserCompletionTextPosition,The length of the statement  "            return match.ResultType == CompletionResultType.Variable && userCompletionText.Length > 1 && match.CompletionText[1] == '{' " is 123.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,PossibleCompletionsImpl,The length of the statement  "                if (!PromptYesOrNo(string.Format(CultureInfo.CurrentCulture' PSReadLineResources.DisplayAllPossibilities' completions.CompletionMatches.Count))) " is 144.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SetKeyHandlerInternal,The length of the statement  "                    secondDispatchTable[PSKeyInfo.FromConsoleKeyInfo(chord[1])] = MakeKeyHandler(handler' briefDescription' longDescription' scriptBlock); " is 134.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadLine,The length of the statement  "                    var ourVersion = typeof(PSConsoleReadLine).Assembly.GetCustomAttributes<AssemblyInformationalVersionAttribute>().First().InformationalVersion; " is 142.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,DelayedOneTimeInitialize,The length of the statement  "            _singleton._requestKeyWaitHandles = new WaitHandle[] {_singleton._keyReadWaitHandle' _singleton._closingWaitHandle' _defaultCancellationToken.WaitHandle' _singleton._forceEventWaitHandle}; " is 188.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,Chord,The length of the statement  "            if (_singleton._chordDispatchTable.TryGetValue(PSKeyInfo.FromConsoleKeyInfo(key.Value)' out var secondKeyDispatchTable)) " is 120.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViDeleteToChar,The length of the statement  "            ViCharacterSearcher.SearchDelete(keyChar' arg' backoff: false' instigator: (_key' _arg) => ViDeleteToChar(keyChar' _key' _arg)); " is 128.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViDeleteToCharBack,The length of the statement  "            ViCharacterSearcher.SearchBackwardDelete(keyChar' arg' backoff: false' instigator: (_key' _arg) => ViDeleteToCharBack(keyChar' _key' _arg)); " is 140.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViDeleteToBeforeChar,The length of the statement  "            ViCharacterSearcher.SearchDelete(keyChar' arg' backoff: true' instigator: (_key' _arg) => ViDeleteToBeforeChar(keyChar' _key' _arg)); " is 133.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViDeleteToBeforeCharBack,The length of the statement  "            ViCharacterSearcher.SearchBackwardDelete(keyChar' arg' backoff: true' instigator: (_key' _arg) => ViDeleteToBeforeCharBack(keyChar' _key' _arg)); " is 145.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,InvertCase,The length of the statement  "                    char newChar = Char.IsUpper(c) ? Char.ToLower(c' CultureInfo.CurrentCulture) : char.ToUpper(c' CultureInfo.CurrentCulture); " is 123.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViChord,The length of the statement  "            if (_singleton._chordDispatchTable.TryGetValue(PSKeyInfo.FromConsoleKeyInfo(key.Value)' out var secondKeyDispatchTable)) " is 120.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,RenderErrorPrompt,The length of the statement  "                //   2. prompt string gets longer (e.g. by 'cd' into nested folders)' which causes the line to be wrapped to the next line; " is 123.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CalculateWhereAndWhatToRender,The length of the statement  "                        //   1. the whole logical line had already been scrolled up-off the buffer. This could happen when you backward delete characters " is 129.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CalculateWhereAndWhatToRender,The length of the statement  "                        //   2. the logical line spans on multiple physical lines and the top a few physical lines had already been scrolled off the buffer. " is 132.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CalculateWhereAndWhatToRender,The length of the statement  "                        //      This could happen when you edit on the top a few physical lines in the buffer' which belong to a longer logical line. " is 125.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CalculateWhereAndWhatToRender,The length of the statement  "                            // By doing this' we are essentially adding a few pseudo physical lines (the physical lines that belong to the logical line but " is 127.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReallyRender,The length of the statement  "                    "number of physical lines starting from the first changed logical line should be no more than the buffer height plus the pseudo lines we added."); " is 146.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetTokenColor,The length of the statement  "            if (token.Kind != TokenKind.Generic && (token.TokenFlags & (TokenFlags.BinaryOperator | TokenFlags.UnaryOperator | TokenFlags.AssignmentOperator)) != 0) " is 152.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReplaceCharInPlace,The length of the statement  "                _singleton.SaveEditItem(EditItemDelete.Create(_singleton._buffer[_singleton._current].ToString()' _singleton._current)); " is 120.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViReplaceToChar,The length of the statement  "            if (ViCharacterSearcher.SearchDelete(keyChar' arg' backoff: false' instigator: (_key' _arg) => ViReplaceToChar(keyChar' _key' _arg))) " is 133.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViReplaceToCharBack,The length of the statement  "            if (ViCharacterSearcher.SearchBackwardDelete(keyChar' arg' backoff: false' instigator: (_key' _arg) => ViReplaceToCharBack(keyChar' _key' _arg))) " is 145.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViReplaceToBeforeChar,The length of the statement  "            if (ViCharacterSearcher.SearchDelete(keyChar' arg' backoff: true' instigator: (_key' _arg) => ViReplaceToBeforeChar(keyChar' _key' _arg))) " is 138.
Long Statement,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViReplaceToBeforeCharBack,The length of the statement  "            if (ViCharacterSearcher.SearchBackwardDelete(keyChar' arg' backoff: true' instigator: (_key' _arg) => ViReplaceToBeforeCharBack(keyChar' _key' _arg))) " is 150.
Long Statement,Microsoft.PowerShell,PSConsoleReadLineOptions,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,SetColor,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.CurrentUICulture' PSReadLineResources.InvalidColorProperty' property)); " is 125.
Long Statement,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,AsEscapeSequence,The length of the statement  "            throw new ArgumentException(string.Format(CultureInfo.CurrentUICulture' PSReadLineResources.InvalidColorValue' o.ToString())); " is 126.
Long Statement,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,TryGetCharFromConsoleKey,The length of the statement  "                //     Two or more characters were written to the buffer specified by pwszBuff. The most common cause for this is that a dead-key character  " is 139.
Long Statement,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,TryGetCharFromConsoleKey,The length of the statement  "                //     (accent or diacritic) stored in the keyboard layout could not be combined with the specified virtual key to form a single character." " is 140.
Long Statement,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,KeyInfoAsString,The length of the statement  "                case ConsoleKey.BrowserBack: case ConsoleKey.BrowserForward: case ConsoleKey.BrowserRefresh: case ConsoleKey.BrowserStop: " is 121.
Long Statement,Microsoft.PowerShell,ScreenCapture,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ScreenCapture.cs,GetColorTable,The length of the statement  "                return GetRTFColorFromColorRef(csbe.Black) + GetRTFColorFromColorRef(csbe.DarkBlue) + GetRTFColorFromColorRef(csbe.DarkGreen) + GetRTFColorFromColorRef(csbe.DarkCyan) + GetRTFColorFromColorRef(csbe.DarkRed) + GetRTFColorFromColorRef(csbe.DarkMagenta) + GetRTFColorFromColorRef(csbe.DarkYellow) + GetRTFColorFromColorRef(csbe.Gray) + GetRTFColorFromColorRef(csbe.DarkGray) + GetRTFColorFromColorRef(csbe.Blue) + GetRTFColorFromColorRef(csbe.Green) + GetRTFColorFromColorRef(csbe.Cyan) + GetRTFColorFromColorRef(csbe.Red) + GetRTFColorFromColorRef(csbe.Magenta) + GetRTFColorFromColorRef(csbe.Yellow) + GetRTFColorFromColorRef(csbe.White); " is 637.
Long Statement,Microsoft.PowerShell,EditItemInsertChar,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\UndoRedo.cs,Undo,The length of the statement  "                Debug.Assert(_singleton._buffer[_insertStartPosition] == _insertedCharacter' "Character to undo is not what it should be"); " is 123.
Complex Conditional,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,UnresolvedCommandCouldSucceed,The conditional expression  "candidateCommand.Equals("Import-Module"' StringComparison.OrdinalIgnoreCase)                      || candidateCommand.Equals("ipmo"' StringComparison.OrdinalIgnoreCase)                      || candidateCommand.Equals("Invoke-Expression"' StringComparison.OrdinalIgnoreCase)                      || candidateCommand.Equals("iex"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,MenuCompleteImpl,The conditional expression  "_dispatchTable.TryGetValue(nextKey' out var handler) &&                              (                                  handler.Action == CopyOrCancelLine ||                                  handler.Action == Cut ||                                  handler.Action == DeleteChar ||                                  handler.Action == Paste                              )"  is complex.
Complex Conditional,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,RenderErrorPrompt,The conditional expression  "_initialY < 0                  || _options.PromptText == null                  || _options.PromptText.Length == 0                  || String.IsNullOrEmpty(_options.PromptText[0])"  is complex.
Complex Conditional,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CaptureScreenImpl,The conditional expression  "k == Keys.K || k == Keys.ucK || k == Keys.UpArrow || k == Keys.ShiftUpArrow"  is complex.
Complex Conditional,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CaptureScreenImpl,The conditional expression  "k == Keys.J || k == Keys.ucJ || k == Keys.DownArrow || k == Keys.ShiftDownArrow"  is complex.
Complex Conditional,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,GetSeqChar,The conditional expression  "ch == '\x1b' || ch == '\x09' || ch == '\x0a' || ch >= '\x7f'"  is complex.
Complex Conditional,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,AsEscapeSequence,The conditional expression  "s.Length == 6 &&                              int.TryParse(s' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo' out int rgb) &&                              rgb >= 0 && rgb <= 0x00ffffff"  is complex.
Complex Conditional,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The conditional expression  "(sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T')"  is complex.
Complex Conditional,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The conditional expression  "sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L')"  is complex.
Complex Conditional,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The conditional expression  "sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L')"  is complex.
Complex Conditional,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The conditional expression  "sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T')"  is complex.
Empty Catch Block,Microsoft.PowerShell.Internal,Clipboard,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Clipboard.cs,GetTextImpl,The method has an empty catch block.
Empty Catch Block,Microsoft.PowerShell.Internal,Clipboard,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Clipboard.cs,SetSingleClipboardData,The method has an empty catch block.
Empty Catch Block,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetCompletions,The method has an empty catch block.
Empty Catch Block,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadLine,The method has an empty catch block.
Empty Catch Block,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadLine,The method has an empty catch block.
Empty Catch Block,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,PSConsoleReadLine,The method has an empty catch block.
Empty Catch Block,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,DelayedOneTimeInitialize,The method has an empty catch block.
Empty Catch Block,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetPrompt,The method has an empty catch block.
Magic Number,Microsoft.PowerShell.Internal,Clipboard,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Clipboard.cs,StartProcess,The following statement contains a magic number: process.WaitForExit(250);
Magic Number,Microsoft.PowerShell.Internal,Clipboard,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Clipboard.cs,ExecuteOnStaThread,The following statement contains a magic number: const int retryCount = 5;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,IsQuoted,The following statement contains a magic number: var first = (s.Length > 4 && s.StartsWith("& ")) ? s[2] : s[0];
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,IsQuoted,The following statement contains a magic number: var first = (s.Length > 4 && s.StartsWith("& ")) ? s[2] : s[0];
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,IsQuoted,The following statement contains a magic number: s.Length >= 2
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetUnquotedText,The following statement contains a magic number: int startindex = s.StartsWith("& ") ? 3 : 1;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetUnquotedText,The following statement contains a magic number: return s[0] + s.Substring(2' s.Length - 3);
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetUnquotedText,The following statement contains a magic number: return s[0] + s.Substring(2' s.Length - 3);
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ShortenLongCompletions,The following statement contains a magic number: int splitPos = 10;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ShortenLongCompletions,The following statement contains a magic number: return s.Substring(0' maxLength - splitPos - 3) + "..." + s.Substring(s.Length - splitPos' splitPos);
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CreateCompletionMenu,The following statement contains a magic number: var colWidth = Math.Min(matches.Max(c => c.ListItemText.Length) + 2' bufferWidth);
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,MenuCompleteImpl,The following statement contains a magic number: var menuStack = new Stack<Menu>(10);
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReportHistoryFileError,The following statement contains a magic number: historyErrorReportedCount == 2
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReportHistoryFileError,The following statement contains a magic number: historyErrorReportedCount == 2
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,WriteHistoryRange,The following statement contains a magic number: WithHistoryFileMutexDo(100' () =>              {                  if (!MaybeReadHistoryFile())                      return;                    bool retry = true;                  retry_after_creating_directory:                  try                  {                      using (var file = fileOpener(Options.HistorySavePath))                      {                          for (var i = start; i <= end; i++)                          {                              HistoryItem item = _history[i];                              item._saved = true;                                // Actually' skip writing sensitive items to file.                              if (item._sensitive) { continue; }                                var line = item.CommandLine.Replace("\n"' "`\n");                              file.WriteLine(line);                          }                      }                      var fileInfo = new FileInfo(Options.HistorySavePath);                      _historyFileLastSavedSize = fileInfo.Length;                  }                  catch (DirectoryNotFoundException)                  {                      // Try making the directory' but just once                      if (retry)                      {                          retry = false;                          Directory.CreateDirectory(Path.GetDirectoryName(Options.HistorySavePath));                          goto retry_after_creating_directory;                      }                  }              });
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,MaybeReadHistoryFile,The following statement contains a magic number: return WithHistoryFileMutexDo(1000' () =>                  {                      var fileInfo = new FileInfo(Options.HistorySavePath);                      if (fileInfo.Exists && fileInfo.Length != _historyFileLastSavedSize)                      {                          var historyLines = new List<string>();                          using (var fs = new FileStream(Options.HistorySavePath' FileMode.Open))                          using (var sr = new StreamReader(fs))                          {                              fs.Seek(_historyFileLastSavedSize' SeekOrigin.Begin);                                while (!sr.EndOfStream)                              {                                  historyLines.Add(sr.ReadLine());                              }                          }                          UpdateHistoryFromFile(historyLines' fromDifferentSession: true' fromInitialRead: false);                            _historyFileLastSavedSize = fileInfo.Length;                      }                  });
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadHistoryFile,The following statement contains a magic number: WithHistoryFileMutexDo(1000' () =>              {                  if (!File.Exists(Options.HistorySavePath))                  {                      return;                  }                    var historyLines = File.ReadAllLines(Options.HistorySavePath);                  UpdateHistoryFromFile(historyLines' fromDifferentSession: false' fromInitialRead: true);                  var fileInfo = new FileInfo(Options.HistorySavePath);                  _historyFileLastSavedSize = fileInfo.Length;              });
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,InteractiveHistorySearchLoop,The following statement contains a magic number: var toMatch = new StringBuilder(64);
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ShowKeyBindings,The following statement contains a magic number: var maxDescriptionLength = console.WindowWidth - keyWidth - funcWidth - 2;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ShowKeyBindings,The following statement contains a magic number: description = description.Substring(0' maxDescriptionLength - 4) + "...";
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SetDefaultViBindings,The following statement contains a magic number: _normalCursorSize = 10;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SetDefaultViBindings,The following statement contains a magic number: (_normalCursorSize < 1) || (_normalCursorSize > 100)
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetKeyHandlers,The following statement contains a magic number: parameters.Length != 2 ||                          parameters[0].ParameterType != typeof (ConsoleKeyInfo?) ||                          parameters[1].ParameterType != typeof (object)
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadOneOrMoreKeys,The following statement contains a magic number: _readkeyStopwatch.ElapsedMilliseconds > 2
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadKey,The following statement contains a magic number: handleId = WaitHandle.WaitAny(_singleton._requestKeyWaitHandles' 300);
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ReadLine,The following statement contains a magic number: _singleton._requestKeyWaitHandles[2] = _singleton._cancelReadCancellationToken.WaitHandle;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,PSConsoleReadLine,The following statement contains a magic number: _buffer = new StringBuilder(8 * 1024);
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,PSConsoleReadLine,The following statement contains a magic number: _buffer = new StringBuilder(8 * 1024);
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,PSConsoleReadLine,The following statement contains a magic number: _statusBuffer = new StringBuilder(256);
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViIndicateCommandMode,The following statement contains a magic number: _console.CursorSize = _normalCursorSize < 50 ? 100 : 25;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViIndicateCommandMode,The following statement contains a magic number: _console.CursorSize = _normalCursorSize < 50 ? 100 : 25;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ViIndicateCommandMode,The following statement contains a magic number: _console.CursorSize = _normalCursorSize < 50 ? 100 : 25;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SwapCharacters,The following statement contains a magic number: _singleton._current <= 0 || bufferLength < 2 || _singleton._current > cursorRightLimit
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SwapCharacters,The following statement contains a magic number: _singleton.SaveEditItem(EditItemDelete.Create(_singleton._buffer.ToString(cursor - 1' 2)' cursor - 1));
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,Render,The following statement contains a magic number: _queuedKeys.Count > 10 && (_lastRenderTime.ElapsedMilliseconds < 50)
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,Render,The following statement contains a magic number: _queuedKeys.Count > 10 && (_lastRenderTime.ElapsedMilliseconds < 50)
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ForceRender,The following statement contains a magic number: excessBuffers > 5
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,RenderErrorPrompt,The following statement contains a magic number: string promptText =                  (renderData.errorPrompt && _options.PromptText.Length == 2)                      ? _options.PromptText[1]                      : _options.PromptText[0];
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,LengthInBufferCells,The following statement contains a magic number: i += 2;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,LengthInBufferCells,The following statement contains a magic number: return Char.IsControl(c) ? 2 : 1;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,LengthInBufferCells,The following statement contains a magic number: c < 256
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,ScrollDisplayToCursor,The following statement contains a magic number: newTop = console.CursorTop - console.WindowHeight + 10;
Magic Number,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,CaptureScreenImpl,The following statement contains a magic number: const int margin = 5;
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,WindowsAnsiCharMap,The following statement contains a magic number: this._pendingKeys = new List<ConsoleKeyInfo>(6);
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessSequencePart,The following statement contains a magic number: _addKeyIndex == 2
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessSequencePart,The following statement contains a magic number: ch = GetSeqChar(2);
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracket1Sequence,The following statement contains a magic number: _addKeyIndex == 3
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracket1Sequence,The following statement contains a magic number: GetSeqChar(3) != ';'
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracket1Sequence,The following statement contains a magic number: _addKeyIndex == 4
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracket1Sequence,The following statement contains a magic number: var ch = GetSeqChar(4);
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracket1Sequence,The following statement contains a magic number: _addKeyIndex == 5
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracket1Sequence,The following statement contains a magic number: ch = GetSeqChar(5);
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: _addKeyIndex == 3
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: int n = (int)GetSeqChar(2) - (int)'0';
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: int chIndex = 3;
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: n = n * 10 + ((int)ch - (int)'0');
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,WindowsAnsiCharMap,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\CharMap.cs,ProcessBracketNTildeSequence,The following statement contains a magic number: switch (n)              {              // This is normally ^[[H' but tmux emits ^[[1~.              case 1:                  key = ConsoleKey.Home;                  break;              case 2:                  key = ConsoleKey.Insert;                  break;              case 3:                  key = ConsoleKey.Delete;                  break;              // This is normally ^[[F' but tmux emits ^[[4~.              case 4:                  key = ConsoleKey.End;                  break;              case 5:                  key = ConsoleKey.PageUp;                  break;              case 6:                  key = ConsoleKey.PageDown;                  break;              // 11-14 are emitted by winpty' but Windows uses ^[[OP' etc.              case 11:                  key = ConsoleKey.F1;                  break;              case 12:                  key = ConsoleKey.F2;                  break;              case 13:                  key = ConsoleKey.F3;                  break;              case 14:                  key = ConsoleKey.F4;                  break;              case 15:                  key = ConsoleKey.F5;                  break;              case 17:                  key = ConsoleKey.F6;                  break;              case 18:                  key = ConsoleKey.F7;                  break;              case 19:                  key = ConsoleKey.F8;                  break;              case 20:                  key = ConsoleKey.F9;                  break;              case 21:                  key = ConsoleKey.F10;                  break;              case 23:                  key = ConsoleKey.F11;                  break;              case 24:                  key = ConsoleKey.F12;                  break;              // tmux emits these for Shift+F1-Shift+F8. I don't have F13 and higher              // on my keyboard but presumably that's what these codes are for.              // ConsoleKey defines up to F24' I can't get a code higher than 34              // and don't want to guess because some codes are randomly skipped.              case 25:                  key = ConsoleKey.F13;                  break;              case 26:                  key = ConsoleKey.F14;                  break;              case 28:                  key = ConsoleKey.F15;                  break;              case 29:                  key = ConsoleKey.F16;                  break;              case 31:                  key = ConsoleKey.F17;                  break;              case 32:                  key = ConsoleKey.F18;                  break;              case 33:                  key = ConsoleKey.F19;                  break;              case 34:                  key = ConsoleKey.F20;                  break;              default:                  return false;              }
Magic Number,Microsoft.PowerShell,SetPSReadLineKeyHandlerCommand,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,CreateDynamicParametersResult,The following statement contains a magic number: var bindableFunctions = (typeof(PSConsoleReadLine).GetMethods(BindingFlags.Public | BindingFlags.Static))                  .Where(method =>                      {                          var parameters = method.GetParameters();                          return parameters.Length == 2                                 && parameters[0].ParameterType == typeof(ConsoleKeyInfo?)                                 && parameters[1].ParameterType == typeof(object);                      })                  .Select(method => method.Name)                  .OrderBy(name => name);
Magic Number,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,AsEscapeSequence,The following statement contains a magic number: switch (o)              {                  case ConsoleColor c:                      return MapColorToEscapeSequence(c' isBackground);                    case string s:                      if (s.Length > 0)                      {                          // String can be converted to ConsoleColor' so it is a ConsoleColor                          if (ConsoleColors.TryGetValue(s' out ConsoleColor c))                              return MapColorToEscapeSequence(c' isBackground);                            // Escape sequence - assume it's fine as is                          if (s[0] == '\x1b')                              return s;                            // RGB format with possible '#'                          if (s[0] == '#')                              s = s.Substring(1);                            if (s.Length == 6 &&                              int.TryParse(s' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo' out int rgb) &&                              rgb >= 0 && rgb <= 0x00ffffff)                          {                              if (rgb < 256)                              {                                  return "\x1b[" + (isBackground ? "4" : "3") + "8;5;" + rgb + "m";                              }                                var r = (rgb >> 16) & 0xff;                              var g = (rgb >> 8) & 0xff;                              var b = rgb & 0xff;                                return "\x1b[" + (isBackground ? "4" : "3") + "8;2;" + r + ";" + g + ";" + b + "m";                          }                      }                      break;              }
Magic Number,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,AsEscapeSequence,The following statement contains a magic number: switch (o)              {                  case ConsoleColor c:                      return MapColorToEscapeSequence(c' isBackground);                    case string s:                      if (s.Length > 0)                      {                          // String can be converted to ConsoleColor' so it is a ConsoleColor                          if (ConsoleColors.TryGetValue(s' out ConsoleColor c))                              return MapColorToEscapeSequence(c' isBackground);                            // Escape sequence - assume it's fine as is                          if (s[0] == '\x1b')                              return s;                            // RGB format with possible '#'                          if (s[0] == '#')                              s = s.Substring(1);                            if (s.Length == 6 &&                              int.TryParse(s' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo' out int rgb) &&                              rgb >= 0 && rgb <= 0x00ffffff)                          {                              if (rgb < 256)                              {                                  return "\x1b[" + (isBackground ? "4" : "3") + "8;5;" + rgb + "m";                              }                                var r = (rgb >> 16) & 0xff;                              var g = (rgb >> 8) & 0xff;                              var b = rgb & 0xff;                                return "\x1b[" + (isBackground ? "4" : "3") + "8;2;" + r + ";" + g + ";" + b + "m";                          }                      }                      break;              }
Magic Number,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,AsEscapeSequence,The following statement contains a magic number: switch (o)              {                  case ConsoleColor c:                      return MapColorToEscapeSequence(c' isBackground);                    case string s:                      if (s.Length > 0)                      {                          // String can be converted to ConsoleColor' so it is a ConsoleColor                          if (ConsoleColors.TryGetValue(s' out ConsoleColor c))                              return MapColorToEscapeSequence(c' isBackground);                            // Escape sequence - assume it's fine as is                          if (s[0] == '\x1b')                              return s;                            // RGB format with possible '#'                          if (s[0] == '#')                              s = s.Substring(1);                            if (s.Length == 6 &&                              int.TryParse(s' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo' out int rgb) &&                              rgb >= 0 && rgb <= 0x00ffffff)                          {                              if (rgb < 256)                              {                                  return "\x1b[" + (isBackground ? "4" : "3") + "8;5;" + rgb + "m";                              }                                var r = (rgb >> 16) & 0xff;                              var g = (rgb >> 8) & 0xff;                              var b = rgb & 0xff;                                return "\x1b[" + (isBackground ? "4" : "3") + "8;2;" + r + ";" + g + ";" + b + "m";                          }                      }                      break;              }
Magic Number,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,AsEscapeSequence,The following statement contains a magic number: switch (o)              {                  case ConsoleColor c:                      return MapColorToEscapeSequence(c' isBackground);                    case string s:                      if (s.Length > 0)                      {                          // String can be converted to ConsoleColor' so it is a ConsoleColor                          if (ConsoleColors.TryGetValue(s' out ConsoleColor c))                              return MapColorToEscapeSequence(c' isBackground);                            // Escape sequence - assume it's fine as is                          if (s[0] == '\x1b')                              return s;                            // RGB format with possible '#'                          if (s[0] == '#')                              s = s.Substring(1);                            if (s.Length == 6 &&                              int.TryParse(s' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo' out int rgb) &&                              rgb >= 0 && rgb <= 0x00ffffff)                          {                              if (rgb < 256)                              {                                  return "\x1b[" + (isBackground ? "4" : "3") + "8;5;" + rgb + "m";                              }                                var r = (rgb >> 16) & 0xff;                              var g = (rgb >> 8) & 0xff;                              var b = rgb & 0xff;                                return "\x1b[" + (isBackground ? "4" : "3") + "8;2;" + r + ";" + g + ";" + b + "m";                          }                      }                      break;              }
Magic Number,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,AsEscapeSequence,The following statement contains a magic number: return s.Substring(2).TrimEnd(new[] {'m'});
Magic Number,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,FormatEscape,The following statement contains a magic number: var replacement = (typeof(PSObject).Assembly.GetName().Version.Major < 6)                  ? "$([char]0x1b)"                  : "`e";
Magic Number,Microsoft.PowerShell,Menu,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Completion.cs,UpdateMenuSelection,The following statement contains a magic number: var toolTipLines = 2;
Magic Number,Microsoft.PowerShell,Menu,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Completion.cs,UpdateMenuSelection,The following statement contains a magic number: MoveCursorDown(2);
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,GetModifier,The following statement contains a magic number: switch (sequence[start])              {                  case 's':                  case 'S':                      if ((sequence.Length - start >= 5) &&                          (sequence[start + 1] == 'h' || sequence[start + 1] == 'H') &&                          (sequence[start + 2] == 'i' || sequence[start + 2] == 'I') &&                          (sequence[start + 3] == 'f' || sequence[start + 3] == 'F') &&                          (sequence[start + 4] == 't' || sequence[start + 4] == 'T'))                      {                          start += 5;                          return ConsoleModifiers.Shift;                      }                      goto default;                    case 'c':                  case 'C':                      if (sequence.Length - start >= 7 &&                          (sequence[start + 1] == 'o' || sequence[start + 1] == 'O') &&                          (sequence[start + 2] == 'n' || sequence[start + 2] == 'N') &&                          (sequence[start + 3] == 't' || sequence[start + 3] == 'T') &&                          (sequence[start + 4] == 'r' || sequence[start + 4] == 'R') &&                          (sequence[start + 5] == 'o' || sequence[start + 5] == 'O') &&                          (sequence[start + 6] == 'l' || sequence[start + 6] == 'L'))                      {                          start += 7;                          return ConsoleModifiers.Control;                      }                      else if (sequence.Length - start >= 4 &&                               (sequence[start + 1] == 't' || sequence[start + 1] == 'T') &&                               (sequence[start + 2] == 'r' || sequence[start + 2] == 'R') &&                               (sequence[start + 3] == 'l' || sequence[start + 3] == 'L'))                      {                          start += 4;                          return ConsoleModifiers.Control;                      }                      goto default;                    case 'a':                  case 'A':                      if (sequence.Length - start >= 3 &&                          (sequence[start + 1] == 'l' || sequence[start + 1] == 'L') &&                          (sequence[start + 2] == 't' || sequence[start + 2] == 'T'))                      {                          start += 3;                          return ConsoleModifiers.Alt;                      }                      goto default;                    default:                      return 0;              }
Magic Number,Microsoft.PowerShell,FNV1a32Hash,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\History.cs,ComputeHash,The following statement contains a magic number: highByte = (uint)(ch >> 8);
Magic Number,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,TryGetCharFromConsoleKey,The following statement contains a magic number: flags |= (1 << 2);
Magic Number,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,TryGetCharFromConsoleKey,The following statement contains a magic number: osVersion.Major == 10 && osVersion.Build >= 14393 || osVersion.MajorRevision > 10
Magic Number,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,TryGetCharFromConsoleKey,The following statement contains a magic number: osVersion.Major == 10 && osVersion.Build >= 14393 || osVersion.MajorRevision > 10
Magic Number,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,TryGetCharFromConsoleKey,The following statement contains a magic number: osVersion.Major == 10 && osVersion.Build >= 14393 || osVersion.MajorRevision > 10
Magic Number,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,KeyInfoAsString,The following statement contains a magic number: switch (c)              {                  case ' ':                      s = "Spacebar";                      break;                  case '\x1b':                      s = "Escape";                      break;                  case '\x1c':                      s = "\\";                      isShift = false;                      break;                  case '\x1d':                      s = "]";                      isShift = false;                      break;                  case '\x1f':                      s = "_";                      isShift = false;                      break;                  case '\x7f':                      s = "Backspace";                      break;                    // 'Ctrl+h' is represented as (keychar: 0x08' key: 0' mods: Control). In the case of 'Ctrl+h''                  // we don't want the keychar to be interpreted as 'Backspace'.                  case '\x08' when !isCtrl:                      s = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? "Backspace" : "Ctrl+Backspace";                      break;                    case '\0':                      // This could be a dead key for a particular keyboard layout in Windows console.                      // The dead key is not an issue when there is tty involved' so on non-Windows' `isDeadKey` is always false.                      //                      // When we believe it's a dead key' we use '\0' so it can be properly ignored during rendering.                      // Otherwise' we use `@` in case `key.KeyChar = '\0'`. This is ugly but familiar.                      s = isDeadKey ? c.ToString() : "@";                      break;                    case char _ when (c >= 1 && c <= 26):                      s = ((char)((isShift ? 'A' : 'a') + c - 1)).ToString();                      isShift = false;                      break;                    default:                      s = c.ToString();                      isShift = false;                      break;              }
Magic Number,Microsoft.PowerShell,ScreenCapture,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ScreenCapture.cs,InvertLines,The following statement contains a magic number: buffer[i].ForegroundColor = (ConsoleColor)((int)buffer[i].ForegroundColor ^ 7);
Magic Number,Microsoft.PowerShell,ScreenCapture,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ScreenCapture.cs,InvertLines,The following statement contains a magic number: buffer[i].BackgroundColor = (ConsoleColor)((int)buffer[i].BackgroundColor ^ 7);
Magic Number,Microsoft.PowerShell,CHAR_INFO,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ScreenCapture.cs,CHAR_INFO,The following statement contains a magic number: Attributes = (ushort)(((int)background << 4) | (int)foreground);
Missing Default,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,UnresolvedCommandCouldSucceed,The following switch statement is missing a default case: switch (commandName[0])                  {                  // The following are debugger commands that should be accepted if we're debugging                  // because the console host will interpret these commands directly.                  case 's': case 'v': case 'o': case 'c': case 'q': case 'k': case 'l':                  case 'S': case 'V': case 'O': case 'C': case 'Q': case 'K': case 'L':                  case '?': case 'h': case 'H':                      // Ideally we would check $PSDebugContext' but it is set at function                      // scope' and because we're in a module' we can't find that variable                      // (arguably a PowerShell issue.)                      // NestedPromptLevel is good enough though - it's rare to be in a nested.                      var nestedPromptLevel = _engineIntrinsics.SessionState.PSVariable.GetValue("NestedPromptLevel");                      if (nestedPromptLevel is int)                      {                          return ((int)nestedPromptLevel) > 0;                      }                      break;                  }
Missing Default,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,SetDefaultBindings,The following switch statement is missing a default case: switch (editMode)              {                  case EditMode.Emacs:                      SetDefaultEmacsBindings();                      break;                  case EditMode.Vi:                      SetDefaultViBindings();                      break;                  case EditMode.Windows:                      SetDefaultWindowsBindings();                      break;              }
Missing Default,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,GetTokenColor,The following switch statement is missing a default case: switch (token.Kind)              {              case TokenKind.Comment:                  return _options._commentColor;                case TokenKind.Parameter:              case TokenKind.Generic when token is StringLiteralToken slt && slt.Text.StartsWith("--"):                  return _options._parameterColor;                case TokenKind.Variable:              case TokenKind.SplattedVariable:                  return _options._variableColor;                case TokenKind.StringExpandable:              case TokenKind.StringLiteral:              case TokenKind.HereStringExpandable:              case TokenKind.HereStringLiteral:                  return _options._stringColor;                case TokenKind.Number:                  return _options._numberColor;              }
Missing Default,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,Ding,The following switch statement is missing a default case: switch (Options.BellStyle)              {              case BellStyle.None:                  break;              case BellStyle.Audible:                  if (Options.DingDuration > 0)                  {                      if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))                      {                          Console.Beep(Options.DingTone' Options.DingDuration);                      }                      else                      {                          Console.Beep();                      }                  }                  break;              case BellStyle.Visual:                  // TODO: flash prompt? command line?                  break;              }
Missing Default,Microsoft.PowerShell,PSConsoleReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\BasicEditing.cs,FindNestedToken,The following switch statement is missing a default case: switch (mode)              {              case FindTokenMode.CurrentOrNext:                  if (token == null && (i + 1) < tokens.Count)                  {                      token = tokens[i + 1];                  }                  break;              case FindTokenMode.Next:                  if (!foundNestedToken)                  {                      // If there is no next token' return null (happens with nested                      // tokens where there is no EOF/EOS token).                      token = ((i + 1) < tokens.Count) ? tokens[i + 1] : null;                  }                  break;              case FindTokenMode.Previous:                  if (token == null)                  {                      if (i >= 0)                      {                          token = tokens[i];                      }                  }                  else if (offset == token.Extent.StartOffset)                  {                      token = i > 0 ? tokens[i - 1] : null;                  }                  break;              }
Missing Default,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,IsValidColor,The following switch statement is missing a default case: switch (o)              {                  case ConsoleColor c:                      return true;                    case string s:                      if (s.Length > 0)                      {                          // String can be converted to ConsoleColor' so is it a ConsoleColor?                          if (ConsoleColors.ContainsKey(s))                              return true;                            // Escape sequence - assume it's fine as is                          if (s[0] == '\x1b')                              return true;                            // RGB format with possible '#'                          if (s[0] == '#')                              s = s.Substring(1);                            if (int.TryParse(s' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo' out int rgb) &&                              rgb >= 0 && rgb <= 0x00ffffff)                              return true;                      }                      break;              }
Missing Default,Microsoft.PowerShell,VTColorUtils,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Cmdlets.cs,AsEscapeSequence,The following switch statement is missing a default case: switch (o)              {                  case ConsoleColor c:                      return MapColorToEscapeSequence(c' isBackground);                    case string s:                      if (s.Length > 0)                      {                          // String can be converted to ConsoleColor' so it is a ConsoleColor                          if (ConsoleColors.TryGetValue(s' out ConsoleColor c))                              return MapColorToEscapeSequence(c' isBackground);                            // Escape sequence - assume it's fine as is                          if (s[0] == '\x1b')                              return s;                            // RGB format with possible '#'                          if (s[0] == '#')                              s = s.Substring(1);                            if (s.Length == 6 &&                              int.TryParse(s' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo' out int rgb) &&                              rgb >= 0 && rgb <= 0x00ffffff)                          {                              if (rgb < 256)                              {                                  return "\x1b[" + (isBackground ? "4" : "3") + "8;5;" + rgb + "m";                              }                                var r = (rgb >> 16) & 0xff;                              var g = (rgb >> 8) & 0xff;                              var b = rgb & 0xff;                                return "\x1b[" + (isBackground ? "4" : "3") + "8;2;" + r + ";" + g + ";" + b + "m";                          }                      }                      break;              }
Missing Default,Microsoft.PowerShell,ConsoleKeyChordConverter,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\ConsoleKeyChordConverter.cs,MapKeyChar,The following switch statement is missing a default case: switch (keyChar)                      {                          case var _ when (keyChar >= 'a' && keyChar <= 'z'):                              keyChar = (char)(keyChar - 'a' + 1);                              break;                          case var _ when (keyChar >= 'A' && keyChar <= ']'):                              keyChar = (char)(keyChar - 'A' + 1);                              break;                          case '_':                              keyChar = '\x1f';                              if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {                                  mods |= ConsoleModifiers.Shift;                              }                              break;                          case '^':                              keyChar = '\x1e';                              if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {                                  mods |= ConsoleModifiers.Shift;                              }                              break;                      }
Missing Default,Microsoft.PowerShell,PSKeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\PSReadLine\Keys.cs,KeyInfoAsString,The following switch statement is missing a default case: switch (consoleKey)              {                  // Keys we definitely bind or might bind.                  case ConsoleKey.PageUp: case ConsoleKey.PageDown:                  case ConsoleKey.LeftArrow: case ConsoleKey.UpArrow: case ConsoleKey.RightArrow: case ConsoleKey.DownArrow:                  case ConsoleKey.F1: case ConsoleKey.F2: case ConsoleKey.F3: case ConsoleKey.F4:                  case ConsoleKey.F5: case ConsoleKey.F6: case ConsoleKey.F7: case ConsoleKey.F8:                  case ConsoleKey.F9: case ConsoleKey.F10: case ConsoleKey.F11: case ConsoleKey.F12:                  case ConsoleKey.F13: case ConsoleKey.F14: case ConsoleKey.F15: case ConsoleKey.F16:                  case ConsoleKey.F17: case ConsoleKey.F18: case ConsoleKey.F19: case ConsoleKey.F20:                  case ConsoleKey.F21: case ConsoleKey.F22: case ConsoleKey.F23: case ConsoleKey.F24:                  case ConsoleKey.Backspace:                  case ConsoleKey.Tab:                  case ConsoleKey.Enter:                  case ConsoleKey.Escape:                  case ConsoleKey.End:                  case ConsoleKey.Home:                  case ConsoleKey.Insert:                  case ConsoleKey.Delete:                    // Keys we want to ignore (and handling here will help to ignore)                  case ConsoleKey.BrowserBack: case ConsoleKey.BrowserForward: case ConsoleKey.BrowserRefresh: case ConsoleKey.BrowserStop:                  case ConsoleKey.BrowserSearch: case ConsoleKey.BrowserFavorites: case ConsoleKey.BrowserHome:                  case ConsoleKey.VolumeMute: case ConsoleKey.VolumeDown: case ConsoleKey.VolumeUp:                  case ConsoleKey.MediaNext: case ConsoleKey.MediaPrevious: case ConsoleKey.MediaStop: case ConsoleKey.MediaPlay:                  case ConsoleKey.LaunchMail: case ConsoleKey.LaunchMediaSelect: case ConsoleKey.LaunchApp1: case ConsoleKey.LaunchApp2:                  case ConsoleKey.LeftWindows: case ConsoleKey.RightWindows: case ConsoleKey.Applications:                  case ConsoleKey.PrintScreen:                    // Keys I'm not familiar with' presumably we'd want to ignore.                  case ConsoleKey.Clear: case ConsoleKey.Pause: case ConsoleKey.Select: case ConsoleKey.Print:                  case ConsoleKey.Execute: case ConsoleKey.Help: case ConsoleKey.Sleep: case ConsoleKey.Process:                  case ConsoleKey.Packet: case ConsoleKey.Attention: case ConsoleKey.CrSel: case ConsoleKey.ExSel:                  case ConsoleKey.EraseEndOfFile: case ConsoleKey.Play: case ConsoleKey.Zoom: case ConsoleKey.NoName:                  case ConsoleKey.Pa1:                        if (isShift) { AppendPart("Shift"); }                      if (isCtrl) { AppendPart("Ctrl"); }                      if (isAlt) { AppendPart("Alt"); }                      AppendPart(consoleKey.ToString());                      return sb.ToString();              }
