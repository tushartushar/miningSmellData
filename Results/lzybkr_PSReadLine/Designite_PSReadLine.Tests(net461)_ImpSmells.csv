Implementation smell,Namespace,Class,File,Method,Description
Long Method,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The method has 117 lines of code.
Long Method,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The method has 185 lines of code.
Long Method,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SensitiveHistoryOptionalBehavior,The method has 120 lines of code.
Long Method,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SensitiveHistoryOptionalBehaviorWithScriptBlock,The method has 130 lines of code.
Long Method,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The method has 223 lines of code.
Long Method,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The method has 236 lines of code.
Long Method,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,Render,The method has 127 lines of code.
Complex Method,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,Cyclomatic complexity of the method is 14
Complex Method,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CreateCharInfoBuffer,Cyclomatic complexity of the method is 9
Complex Method,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,Keys,Cyclomatic complexity of the method is 9
Complex Method,Test,KeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\KeyboardLayouts.cs,CharAsPropertyName,Cyclomatic complexity of the method is 45
Complex Method,Test,TestConsole,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MockConsole.cs,Write,Cyclomatic complexity of the method is 10
Long Parameter List,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,Test,The method has 5 parameters. Parameters: expectedResult' items' resetCursor' prompt' mustDing
Long Identifier,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SensitiveHistoryOptionalBehavior,The length of the parameter newAddToHistoryHandler_ReturnBool is 33.
Long Identifier,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SensitiveHistoryOptionalBehavior,The length of the parameter newAddToHistoryHandler_ReturnEnum is 33.
Long Identifier,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SensitiveHistoryOptionalBehavior,The length of the parameter newAddToHistoryHandler_ReturnOther is 34.
Long Identifier,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SensitiveHistoryOptionalBehaviorWithScriptBlock,The length of the parameter newAddToHistoryHandler_ReturnBool is 33.
Long Identifier,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SensitiveHistoryOptionalBehaviorWithScriptBlock,The length of the parameter newAddToHistoryHandler_ReturnEnum is 33.
Long Identifier,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SensitiveHistoryOptionalBehaviorWithScriptBlock,The length of the parameter newAddToHistoryHandler_ReturnOther is 34.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineHomeBugFixed,The length of the statement  "            Test("1234\n9ABC"' Keys("1234"' _.Shift_Enter' "9ABC"' _.UpArrow' _.LeftArrow' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0)))); " is 134.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The length of the statement  "                'c'' _.Percent' "45678"' _.Escape' CheckThat(() => AssertLineIs("0123456789ab"))' CheckThat(() => AssertCursorLeftIs(8))' " is 121.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The length of the statement  "                completions.Add(new CompletionResult("something really long"' "item1"' CompletionResultType.Command' "useful description goes here")); " is 134.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The length of the statement  "                completions.Add(new CompletionResult("'a b" + Path.DirectorySeparatorChar + "'"' "a b" + Path.DirectorySeparatorChar + "'"' CompletionResultType.ProviderContainer' "a b" + Path.DirectorySeparatorChar + "'")); " is 208.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The length of the statement  "                completions.Add(new CompletionResult("\"a b" + Path.DirectorySeparatorChar + "\""' "\"a b" + Path.DirectorySeparatorChar + "\""' CompletionResultType.ProviderContainer' "\"a b" + Path.DirectorySeparatorChar + "\"")); " is 216.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The length of the statement  "            string wrappedLine_1 = new string('8'' _console.BufferWidth - continutationPromptLength + wrappedLength_1); // Take 2 physical lines " is 132.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The length of the statement  "            string wrappedLine_2 = new string('6'' _console.BufferWidth - continutationPromptLength + wrappedLength_2); // Take 2 physical lines " is 132.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,GotoBrace,The length of the statement  "            Test("$a[11]"' Keys("$a[11]"' _.Home' _.RightArrow' _.RightArrow' _.Ctrl_RBracket' CheckThat(() => AssertCursorLeftIs(5)))); " is 124.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,Render,The length of the statement  "            // This tests for priority to highlight a command regardless of token kind and nested tokens potential to bleed the parent token color to the next token " is 152.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,Render,The length of the statement  "            // Additional test for priority to highlight a command regardless of token kind and nested tokens potential to bleed the parent token color to the next token " is 157.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,TestSetup,The length of the statement  "                    { "Emphasis"'                 MakeCombinedColor(PSConsoleReadLineOptions.DefaultEmphasisColor' _console.BackgroundColor) }' " is 123.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankLine,The length of the statement  "                "p"' CheckThat(() => AssertLineIs("012 456\n012 456"))' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 0))' " is 122.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankBeginningOfLine,The length of the statement  "                "P"' CheckThat(() => AssertLineIs("\"\nHello\n Worl World!\n\""))' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 4))' " is 133.
Long Statement,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankEndOfLine,The length of the statement  "                "y$P"' CheckThat(() => AssertLineIs("\"\nHello\nWorld!orld!\n\""))' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 5))' " is 134.
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CancelLine,The following statement contains a magic number: var line1 = new string('a'' width - 2);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CancelLine,The following statement contains a magic number: Test(""' Keys(line2' _.Ctrl_C'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' line2'                      Tuple.Create(ConsoleColor.Red' _console.BackgroundColor)' "^C"))'                  InputAcceptedNow));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CancelLine,The following statement contains a magic number: Test(""' Keys(line3' _.Ctrl_C'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' line3'                      Tuple.Create(ConsoleColor.Red' _console.BackgroundColor)' "^C"))'                  InputAcceptedNow));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DeleteCharOrExit,The following statement contains a magic number: Test("exit"' Keys("foo"' _.Home' Enumerable.Repeat(_.Ctrl_d' 4)' InputAcceptedNow));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SwapCharacters,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' CheckThat(() => AssertLineIs("abcd"))'                  _.Ctrl_a' _.Ctrl_t' CheckThat(() => AssertLineIs("abcd"))'                  _.Ctrl_f' Enumerable.Repeat(_.Ctrl_t' 3)' CheckThat(() => AssertLineIs("bcda"))'                  _.Ctrl_t' CheckThat(() => AssertLineIs("bcad"))'                  Enumerable.Repeat(_.Ctrl_Underbar' 4)                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SwapCharacters,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' CheckThat(() => AssertLineIs("abcd"))'                  _.Ctrl_a' _.Ctrl_t' CheckThat(() => AssertLineIs("abcd"))'                  _.Ctrl_f' Enumerable.Repeat(_.Ctrl_t' 3)' CheckThat(() => AssertLineIs("bcda"))'                  _.Ctrl_t' CheckThat(() => AssertLineIs("bcad"))'                  Enumerable.Repeat(_.Ctrl_Underbar' 4)                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InsertLineAbove,The following statement contains a magic number: Test("9ABC\n1234\n5678"' Keys("1234"' _.Shift_Enter' "5678"'                                            _.UpArrow' _.LeftArrow' _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                                            _.Ctrl_Enter' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                                            "9ABC"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InsertLineBelow,The following statement contains a magic number: Test("1234\n5678\n9ABC"' Keys("1234"' _.Shift_Enter' "5678"'                                            _.Ctrl_Shift_Enter' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                                            "9ABC"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InsertLineBelow,The following statement contains a magic number: Test("1234\n5678\n9ABC"' Keys("1234"' _.Shift_Enter' "5678"'                                            _.LeftArrow' _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                                            _.Ctrl_Shift_Enter' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                                            "9ABC"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InsertLineBelow,The following statement contains a magic number: Test("1234\n9ABC\n5678"' Keys("1234"' _.Shift_Enter' "5678"'                                            _.UpArrow' _.LeftArrow' _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                                            _.Ctrl_Shift_Enter' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                                            "9ABC"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InsertLineBelow,The following statement contains a magic number: Test("1234\n5678\n\n9ABC"' Keys("1234"' _.Shift_Enter' "5678"'                                            _.Ctrl_Shift_Enter' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                                            _.Ctrl_Shift_Enter' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                                            "9ABC"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InsertLineBelow,The following statement contains a magic number: Test("1234\n5678\n\n9ABC"' Keys("1234"' _.Shift_Enter' "5678"'                                            _.Ctrl_Shift_Enter' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                                            _.Ctrl_Shift_Enter' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                                            "9ABC"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovement,The following statement contains a magic number: Test("0123f"' Keys(                  "fgedcba"'                  _.Escape'                  "0cla"' _.Escape' CheckThat(() => AssertCursorLeftIs(0))' CheckThat(() => AssertLineIs("agedcba"))'                  "llchb"' _.Escape' CheckThat(() => AssertCursorLeftIs(1))' CheckThat(() => AssertLineIs("abedcba"))'                  "lc"' _.Spacebar' "c"' _.Escape' CheckThat(() => AssertCursorLeftIs(2))' CheckThat(() => AssertLineIs("abcdcba"))'                  "lc"' _.Dollar' "def"' _.Escape' CheckThat(() => AssertLineIs("abcdef"))' CheckThat(() => AssertCursorLeftIs(5))'                  "c00123"' _.Escape' CheckThat(() => AssertCursorLeftIs(3))' CheckThat(() => AssertLineIs("0123f"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovement,The following statement contains a magic number: Test("0123f"' Keys(                  "fgedcba"'                  _.Escape'                  "0cla"' _.Escape' CheckThat(() => AssertCursorLeftIs(0))' CheckThat(() => AssertLineIs("agedcba"))'                  "llchb"' _.Escape' CheckThat(() => AssertCursorLeftIs(1))' CheckThat(() => AssertLineIs("abedcba"))'                  "lc"' _.Spacebar' "c"' _.Escape' CheckThat(() => AssertCursorLeftIs(2))' CheckThat(() => AssertLineIs("abcdcba"))'                  "lc"' _.Dollar' "def"' _.Escape' CheckThat(() => AssertLineIs("abcdef"))' CheckThat(() => AssertCursorLeftIs(5))'                  "c00123"' _.Escape' CheckThat(() => AssertCursorLeftIs(3))' CheckThat(() => AssertLineIs("0123f"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovement,The following statement contains a magic number: Test("0123f"' Keys(                  "fgedcba"'                  _.Escape'                  "0cla"' _.Escape' CheckThat(() => AssertCursorLeftIs(0))' CheckThat(() => AssertLineIs("agedcba"))'                  "llchb"' _.Escape' CheckThat(() => AssertCursorLeftIs(1))' CheckThat(() => AssertLineIs("abedcba"))'                  "lc"' _.Spacebar' "c"' _.Escape' CheckThat(() => AssertCursorLeftIs(2))' CheckThat(() => AssertLineIs("abcdcba"))'                  "lc"' _.Dollar' "def"' _.Escape' CheckThat(() => AssertLineIs("abcdef"))' CheckThat(() => AssertCursorLeftIs(5))'                  "c00123"' _.Escape' CheckThat(() => AssertCursorLeftIs(3))' CheckThat(() => AssertLineIs("0123f"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDefect623,The following statement contains a magic number: Test("012 4568"' Keys(                  "012 4567"' _.Escape' CheckThat(() => AssertCursorLeftIs(7))'                  "s8"' _.Escape' CheckThat(() => AssertCursorLeftIs(7))' CheckThat(() => AssertLineIs("012 4568"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDefect623,The following statement contains a magic number: Test("012 4568"' Keys(                  "012 4567"' _.Escape' CheckThat(() => AssertCursorLeftIs(7))'                  "s8"' _.Escape' CheckThat(() => AssertCursorLeftIs(7))' CheckThat(() => AssertLineIs("012 4568"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDefect623,The following statement contains a magic number: Test("asdf bzdf"' Keys(                  "asdf asdf"' _.Escape' "0wcfs"' CheckThat(() => AssertCursorLeftIs(5))'                  "bz"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,Defect796,The following statement contains a magic number: Test("\"\n\n\""' Keys(                  _.DQuote' _.Enter' _.Escape' CheckThat(() => AssertCursorTopIs(1))'                  'o'' CheckThat(() => AssertCursorTopIs(2))'                  _.DQuote                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "0123(567)9ab"' _.Escape' "hhh"' CheckThat(() => AssertCursorLeftIs(8))'                  'c'' _.Percent' "45678"' _.Escape' CheckThat(() => AssertLineIs("0123456789ab"))' CheckThat(() => AssertCursorLeftIs(8))'                  'u'' CheckThat(() => AssertLineIs("0123(567)9ab"))' CheckThat(() => AssertCursorLeftIs(9))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "0123(567)9ab"' _.Escape' "hhh"' CheckThat(() => AssertCursorLeftIs(8))'                  'c'' _.Percent' "45678"' _.Escape' CheckThat(() => AssertLineIs("0123456789ab"))' CheckThat(() => AssertCursorLeftIs(8))'                  'u'' CheckThat(() => AssertLineIs("0123(567)9ab"))' CheckThat(() => AssertCursorLeftIs(9))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "0123(567)9ab"' _.Escape' "hhh"' CheckThat(() => AssertCursorLeftIs(8))'                  'c'' _.Percent' "45678"' _.Escape' CheckThat(() => AssertLineIs("0123456789ab"))' CheckThat(() => AssertCursorLeftIs(8))'                  'u'' CheckThat(() => AssertLineIs("0123(567)9ab"))' CheckThat(() => AssertCursorLeftIs(9))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "0123456789a"' _.Escape' "hhh"' CheckThat(() => AssertCursorLeftIs(7))'                  'c'' _.Dollar' "_ABCD"' _.Escape' CheckThat(() => AssertLineIs("0123456_ABCD"))'                  'u'' CheckThat(() => AssertLineIs("0123456789a"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  " 123456789a"' _.Escape' "hhh"' CheckThat(() => AssertCursorLeftIs(7))'                  'c'' _.Uphat' "ABCD"' _.Escape' CheckThat(() => AssertLineIs(" ABCD789a"))'                  'u'' CheckThat(() => AssertLineIs(" 123456789a"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "0123456789a"' _.Escape' "hhh"' CheckThat(() => AssertCursorLeftIs(7))'                  "c0"' "ABCD"' _.Escape' CheckThat(() => AssertLineIs("ABCD789a"))'                  'u'' CheckThat(() => AssertLineIs("0123456789a"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "abc def ghi"' _.Escape' "bb"' CheckThat(() => AssertCursorLeftIs(4))'                  "cwxxx"' _.Escape' CheckThat(() => AssertLineIs("abc xxx ghi"))'                  'u'' CheckThat(() => AssertLineIs("abc def ghi"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "abc def ghi"' _.Escape' "bb"' CheckThat(() => AssertCursorLeftIs(4))'                  "2cwxxx"' _.Escape' CheckThat(() => AssertLineIs("abc xxx"))'                  'u'' CheckThat(() => AssertLineIs("abc def ghi"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "abc def ghi"' _.Escape' "bb"' CheckThat(() => AssertCursorLeftIs(4))'                  "cWxxx"' _.Escape' CheckThat(() => AssertLineIs("abc xxx ghi"))'                  'u'' CheckThat(() => AssertLineIs("abc def ghi"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "abc def ghi"' _.Escape' "bb"' CheckThat(() => AssertCursorLeftIs(4))'                  "cexxx"' _.Escape' CheckThat(() => AssertLineIs("abc xxx ghi"))'                  'u'' _.Escape' CheckThat(() => AssertLineIs("abc def ghi"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "abc def ghi"' _.Escape' "bb"' CheckThat(() => AssertCursorLeftIs(4))'                  "2cexxx"' _.Escape' CheckThat(() => AssertLineIs("abc xxx"))'                  'u'' _.Escape' CheckThat(() => AssertLineIs("abc def ghi"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "abc def ghi"' _.Escape' "bb"' CheckThat(() => AssertCursorLeftIs(4))'                  "cExxx"' _.Escape' CheckThat(() => AssertLineIs("abc xxx ghi"))'                  'u'' _.Escape' CheckThat(() => AssertLineIs("abc def ghi"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "abc def ghi"' _.Escape' "hhhh"' CheckThat(() => AssertCursorLeftIs(6))'                  "cbxxx"' _.Escape' CheckThat(() => AssertLineIs("abc xxxf ghi"))'                  'u'' _.Escape' CheckThat(() => AssertLineIs("abc def ghi"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "abc def ghi"' _.Escape' "hhhh"' CheckThat(() => AssertCursorLeftIs(6))'                  "2cbxxx"' _.Escape' CheckThat(() => AssertLineIs("xxxf ghi"))'                  'u'' _.Escape' CheckThat(() => AssertLineIs("abc def ghi"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeMovementUndo,The following statement contains a magic number: Test(""' Keys(                  "abc def ghi"' _.Escape' "hhhh"' CheckThat(() => AssertCursorLeftIs(6))'                  "cBxxx"' _.Escape' CheckThat(() => AssertLineIs("abc xxxf ghi"))'                  'u'' _.Escape' CheckThat(() => AssertLineIs("abc def ghi"))'                  'U'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "0123456789"' _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "x"' CheckThat(() => AssertLineIs("012345678"))' CheckThat(() => AssertCursorLeftIs(8))'                  "X"' CheckThat(() => AssertLineIs("01234568"))' CheckThat(() => AssertCursorLeftIs(7))'                  _.Backspace' CheckThat(() => AssertLineIs("01234568"))' CheckThat(() => AssertCursorLeftIs(6))'                  _.Delete' CheckThat(() => AssertLineIs("0123458"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0x"' CheckThat(() => AssertLineIs("123458"))' CheckThat(() => AssertCursorLeftIs(0))'                  _.Delete' CheckThat(() => AssertLineIs("23458"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2x"' CheckThat(() => AssertLineIs("458"))' CheckThat(() => AssertCursorLeftIs(0))'                  "ll2X"' CheckThat(() => AssertLineIs("8"))' CheckThat(() => AssertCursorLeftIs(0))'                  "x"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "0123456789"' _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "x"' CheckThat(() => AssertLineIs("012345678"))' CheckThat(() => AssertCursorLeftIs(8))'                  "X"' CheckThat(() => AssertLineIs("01234568"))' CheckThat(() => AssertCursorLeftIs(7))'                  _.Backspace' CheckThat(() => AssertLineIs("01234568"))' CheckThat(() => AssertCursorLeftIs(6))'                  _.Delete' CheckThat(() => AssertLineIs("0123458"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0x"' CheckThat(() => AssertLineIs("123458"))' CheckThat(() => AssertCursorLeftIs(0))'                  _.Delete' CheckThat(() => AssertLineIs("23458"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2x"' CheckThat(() => AssertLineIs("458"))' CheckThat(() => AssertCursorLeftIs(0))'                  "ll2X"' CheckThat(() => AssertLineIs("8"))' CheckThat(() => AssertCursorLeftIs(0))'                  "x"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "0123456789"' _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "x"' CheckThat(() => AssertLineIs("012345678"))' CheckThat(() => AssertCursorLeftIs(8))'                  "X"' CheckThat(() => AssertLineIs("01234568"))' CheckThat(() => AssertCursorLeftIs(7))'                  _.Backspace' CheckThat(() => AssertLineIs("01234568"))' CheckThat(() => AssertCursorLeftIs(6))'                  _.Delete' CheckThat(() => AssertLineIs("0123458"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0x"' CheckThat(() => AssertLineIs("123458"))' CheckThat(() => AssertCursorLeftIs(0))'                  _.Delete' CheckThat(() => AssertLineIs("23458"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2x"' CheckThat(() => AssertLineIs("458"))' CheckThat(() => AssertCursorLeftIs(0))'                  "ll2X"' CheckThat(() => AssertLineIs("8"))' CheckThat(() => AssertCursorLeftIs(0))'                  "x"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "0123456789"' _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "x"' CheckThat(() => AssertLineIs("012345678"))' CheckThat(() => AssertCursorLeftIs(8))'                  "X"' CheckThat(() => AssertLineIs("01234568"))' CheckThat(() => AssertCursorLeftIs(7))'                  _.Backspace' CheckThat(() => AssertLineIs("01234568"))' CheckThat(() => AssertCursorLeftIs(6))'                  _.Delete' CheckThat(() => AssertLineIs("0123458"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0x"' CheckThat(() => AssertLineIs("123458"))' CheckThat(() => AssertCursorLeftIs(0))'                  _.Delete' CheckThat(() => AssertLineIs("23458"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2x"' CheckThat(() => AssertLineIs("458"))' CheckThat(() => AssertCursorLeftIs(0))'                  "ll2X"' CheckThat(() => AssertLineIs("8"))' CheckThat(() => AssertCursorLeftIs(0))'                  "x"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "0123456789"' _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "x"' CheckThat(() => AssertLineIs("012345678"))' CheckThat(() => AssertCursorLeftIs(8))'                  "X"' CheckThat(() => AssertLineIs("01234568"))' CheckThat(() => AssertCursorLeftIs(7))'                  _.Backspace' CheckThat(() => AssertLineIs("01234568"))' CheckThat(() => AssertCursorLeftIs(6))'                  _.Delete' CheckThat(() => AssertLineIs("0123458"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0x"' CheckThat(() => AssertLineIs("123458"))' CheckThat(() => AssertCursorLeftIs(0))'                  _.Delete' CheckThat(() => AssertLineIs("23458"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2x"' CheckThat(() => AssertLineIs("458"))' CheckThat(() => AssertCursorLeftIs(0))'                  "ll2X"' CheckThat(() => AssertLineIs("8"))' CheckThat(() => AssertCursorLeftIs(0))'                  "x"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012345678901234567890"' _.Escape' CheckThat(() => AssertCursorLeftIs(20))'                  "dh"' CheckThat(() => AssertLineIs("01234567890123456780"))' CheckThat(() => AssertCursorLeftIs(19))'                  "dl"' CheckThat(() => AssertLineIs("0123456789012345678"))' CheckThat(() => AssertCursorLeftIs(18))'                  'd'' _.Spacebar' CheckThat(() => AssertLineIs("012345678901234567"))' CheckThat(() => AssertCursorLeftIs(17))'                  "2dh"' CheckThat(() => AssertLineIs("0123456789012347"))' CheckThat(() => AssertCursorLeftIs(15))'                  "h2dl"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(13))'                  "0dh"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dl"' CheckThat(() => AssertLineIs("1234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2dl"' CheckThat(() => AssertLineIs("34567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "8ld"' _.Dollar' CheckThat(() => AssertLineIs("34567890"))' CheckThat(() => AssertCursorLeftIs(7))'                  "3hD"' CheckThat(() => AssertLineIs("3456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "hd0"' CheckThat(() => AssertLineIs("56"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012345678901234567890"' _.Escape' CheckThat(() => AssertCursorLeftIs(20))'                  "dh"' CheckThat(() => AssertLineIs("01234567890123456780"))' CheckThat(() => AssertCursorLeftIs(19))'                  "dl"' CheckThat(() => AssertLineIs("0123456789012345678"))' CheckThat(() => AssertCursorLeftIs(18))'                  'd'' _.Spacebar' CheckThat(() => AssertLineIs("012345678901234567"))' CheckThat(() => AssertCursorLeftIs(17))'                  "2dh"' CheckThat(() => AssertLineIs("0123456789012347"))' CheckThat(() => AssertCursorLeftIs(15))'                  "h2dl"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(13))'                  "0dh"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dl"' CheckThat(() => AssertLineIs("1234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2dl"' CheckThat(() => AssertLineIs("34567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "8ld"' _.Dollar' CheckThat(() => AssertLineIs("34567890"))' CheckThat(() => AssertCursorLeftIs(7))'                  "3hD"' CheckThat(() => AssertLineIs("3456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "hd0"' CheckThat(() => AssertLineIs("56"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012345678901234567890"' _.Escape' CheckThat(() => AssertCursorLeftIs(20))'                  "dh"' CheckThat(() => AssertLineIs("01234567890123456780"))' CheckThat(() => AssertCursorLeftIs(19))'                  "dl"' CheckThat(() => AssertLineIs("0123456789012345678"))' CheckThat(() => AssertCursorLeftIs(18))'                  'd'' _.Spacebar' CheckThat(() => AssertLineIs("012345678901234567"))' CheckThat(() => AssertCursorLeftIs(17))'                  "2dh"' CheckThat(() => AssertLineIs("0123456789012347"))' CheckThat(() => AssertCursorLeftIs(15))'                  "h2dl"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(13))'                  "0dh"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dl"' CheckThat(() => AssertLineIs("1234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2dl"' CheckThat(() => AssertLineIs("34567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "8ld"' _.Dollar' CheckThat(() => AssertLineIs("34567890"))' CheckThat(() => AssertCursorLeftIs(7))'                  "3hD"' CheckThat(() => AssertLineIs("3456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "hd0"' CheckThat(() => AssertLineIs("56"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012345678901234567890"' _.Escape' CheckThat(() => AssertCursorLeftIs(20))'                  "dh"' CheckThat(() => AssertLineIs("01234567890123456780"))' CheckThat(() => AssertCursorLeftIs(19))'                  "dl"' CheckThat(() => AssertLineIs("0123456789012345678"))' CheckThat(() => AssertCursorLeftIs(18))'                  'd'' _.Spacebar' CheckThat(() => AssertLineIs("012345678901234567"))' CheckThat(() => AssertCursorLeftIs(17))'                  "2dh"' CheckThat(() => AssertLineIs("0123456789012347"))' CheckThat(() => AssertCursorLeftIs(15))'                  "h2dl"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(13))'                  "0dh"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dl"' CheckThat(() => AssertLineIs("1234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2dl"' CheckThat(() => AssertLineIs("34567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "8ld"' _.Dollar' CheckThat(() => AssertLineIs("34567890"))' CheckThat(() => AssertCursorLeftIs(7))'                  "3hD"' CheckThat(() => AssertLineIs("3456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "hd0"' CheckThat(() => AssertLineIs("56"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012345678901234567890"' _.Escape' CheckThat(() => AssertCursorLeftIs(20))'                  "dh"' CheckThat(() => AssertLineIs("01234567890123456780"))' CheckThat(() => AssertCursorLeftIs(19))'                  "dl"' CheckThat(() => AssertLineIs("0123456789012345678"))' CheckThat(() => AssertCursorLeftIs(18))'                  'd'' _.Spacebar' CheckThat(() => AssertLineIs("012345678901234567"))' CheckThat(() => AssertCursorLeftIs(17))'                  "2dh"' CheckThat(() => AssertLineIs("0123456789012347"))' CheckThat(() => AssertCursorLeftIs(15))'                  "h2dl"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(13))'                  "0dh"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dl"' CheckThat(() => AssertLineIs("1234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2dl"' CheckThat(() => AssertLineIs("34567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "8ld"' _.Dollar' CheckThat(() => AssertLineIs("34567890"))' CheckThat(() => AssertCursorLeftIs(7))'                  "3hD"' CheckThat(() => AssertLineIs("3456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "hd0"' CheckThat(() => AssertLineIs("56"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012345678901234567890"' _.Escape' CheckThat(() => AssertCursorLeftIs(20))'                  "dh"' CheckThat(() => AssertLineIs("01234567890123456780"))' CheckThat(() => AssertCursorLeftIs(19))'                  "dl"' CheckThat(() => AssertLineIs("0123456789012345678"))' CheckThat(() => AssertCursorLeftIs(18))'                  'd'' _.Spacebar' CheckThat(() => AssertLineIs("012345678901234567"))' CheckThat(() => AssertCursorLeftIs(17))'                  "2dh"' CheckThat(() => AssertLineIs("0123456789012347"))' CheckThat(() => AssertCursorLeftIs(15))'                  "h2dl"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(13))'                  "0dh"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dl"' CheckThat(() => AssertLineIs("1234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2dl"' CheckThat(() => AssertLineIs("34567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "8ld"' _.Dollar' CheckThat(() => AssertLineIs("34567890"))' CheckThat(() => AssertCursorLeftIs(7))'                  "3hD"' CheckThat(() => AssertLineIs("3456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "hd0"' CheckThat(() => AssertLineIs("56"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012345678901234567890"' _.Escape' CheckThat(() => AssertCursorLeftIs(20))'                  "dh"' CheckThat(() => AssertLineIs("01234567890123456780"))' CheckThat(() => AssertCursorLeftIs(19))'                  "dl"' CheckThat(() => AssertLineIs("0123456789012345678"))' CheckThat(() => AssertCursorLeftIs(18))'                  'd'' _.Spacebar' CheckThat(() => AssertLineIs("012345678901234567"))' CheckThat(() => AssertCursorLeftIs(17))'                  "2dh"' CheckThat(() => AssertLineIs("0123456789012347"))' CheckThat(() => AssertCursorLeftIs(15))'                  "h2dl"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(13))'                  "0dh"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dl"' CheckThat(() => AssertLineIs("1234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2dl"' CheckThat(() => AssertLineIs("34567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "8ld"' _.Dollar' CheckThat(() => AssertLineIs("34567890"))' CheckThat(() => AssertCursorLeftIs(7))'                  "3hD"' CheckThat(() => AssertLineIs("3456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "hd0"' CheckThat(() => AssertLineIs("56"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012345678901234567890"' _.Escape' CheckThat(() => AssertCursorLeftIs(20))'                  "dh"' CheckThat(() => AssertLineIs("01234567890123456780"))' CheckThat(() => AssertCursorLeftIs(19))'                  "dl"' CheckThat(() => AssertLineIs("0123456789012345678"))' CheckThat(() => AssertCursorLeftIs(18))'                  'd'' _.Spacebar' CheckThat(() => AssertLineIs("012345678901234567"))' CheckThat(() => AssertCursorLeftIs(17))'                  "2dh"' CheckThat(() => AssertLineIs("0123456789012347"))' CheckThat(() => AssertCursorLeftIs(15))'                  "h2dl"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(13))'                  "0dh"' CheckThat(() => AssertLineIs("01234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dl"' CheckThat(() => AssertLineIs("1234567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "2dl"' CheckThat(() => AssertLineIs("34567890123"))' CheckThat(() => AssertCursorLeftIs(0))'                  "8ld"' _.Dollar' CheckThat(() => AssertLineIs("34567890"))' CheckThat(() => AssertCursorLeftIs(7))'                  "3hD"' CheckThat(() => AssertLineIs("3456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "hd0"' CheckThat(() => AssertLineIs("56"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbdw"' CheckThat(() => AssertLineIs("012 890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "edb"' CheckThat(() => AssertLineIs("012 0"))' CheckThat(() => AssertCursorLeftIs(4))'                  "bdw"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  'd'' _.Dollar' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbdw"' CheckThat(() => AssertLineIs("012 890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "edb"' CheckThat(() => AssertLineIs("012 0"))' CheckThat(() => AssertCursorLeftIs(4))'                  "bdw"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  'd'' _.Dollar' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbdw"' CheckThat(() => AssertLineIs("012 890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "edb"' CheckThat(() => AssertLineIs("012 0"))' CheckThat(() => AssertCursorLeftIs(4))'                  "bdw"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  'd'' _.Dollar' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbdW"' CheckThat(() => AssertLineIs("012 890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "edB"' CheckThat(() => AssertLineIs("012 0"))' CheckThat(() => AssertCursorLeftIs(4))'                  "bdW"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  'd'' _.Dollar' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbdW"' CheckThat(() => AssertLineIs("012 890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "edB"' CheckThat(() => AssertLineIs("012 0"))' CheckThat(() => AssertCursorLeftIs(4))'                  "bdW"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  'd'' _.Dollar' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbdW"' CheckThat(() => AssertLineIs("012 890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "edB"' CheckThat(() => AssertLineIs("012 0"))' CheckThat(() => AssertCursorLeftIs(4))'                  "bdW"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  'd'' _.Dollar' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "02dw"' CheckThat(() => AssertLineIs("890"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dw"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "02dW"' CheckThat(() => AssertLineIs("890"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dW"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "2db"' CheckThat(() => AssertLineIs("012 0"))' CheckThat(() => AssertCursorLeftIs(4))'                  "db"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "2db"' CheckThat(() => AssertLineIs("012 0"))' CheckThat(() => AssertCursorLeftIs(4))'                  "db"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "2dB"' CheckThat(() => AssertLineIs("012 0"))' CheckThat(() => AssertCursorLeftIs(4))'                  "dB"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(""' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "2dB"' CheckThat(() => AssertLineIs("012 0"))' CheckThat(() => AssertCursorLeftIs(4))'                  "dB"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbde"' CheckThat(() => AssertLineIs("012  890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "de"' CheckThat(() => AssertLineIs("012 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'u'' CheckThat(() => AssertLineIs("012 "))'                  'u'' CheckThat(() => AssertLineIs("012  890"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbde"' CheckThat(() => AssertLineIs("012  890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "de"' CheckThat(() => AssertLineIs("012 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'u'' CheckThat(() => AssertLineIs("012 "))'                  'u'' CheckThat(() => AssertLineIs("012  890"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbde"' CheckThat(() => AssertLineIs("012  890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "de"' CheckThat(() => AssertLineIs("012 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'u'' CheckThat(() => AssertLineIs("012 "))'                  'u'' CheckThat(() => AssertLineIs("012  890"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "02de"' CheckThat(() => AssertLineIs(" 890"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u03de"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  "u04de"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbdE"' CheckThat(() => AssertLineIs("012  890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "dE"' CheckThat(() => AssertLineIs("012 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'u'' CheckThat(() => AssertLineIs("012 "))'                  'u'' CheckThat(() => AssertLineIs("012  890"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbdE"' CheckThat(() => AssertLineIs("012  890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "dE"' CheckThat(() => AssertLineIs("012 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'u'' CheckThat(() => AssertLineIs("012 "))'                  'u'' CheckThat(() => AssertLineIs("012  890"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"' _.Escape' CheckThat(() => AssertLineIs("012 456 890"))' CheckThat(() => AssertCursorLeftIs(10))'                  "bbdE"' CheckThat(() => AssertLineIs("012  890"))' CheckThat(() => AssertCursorLeftIs(4))'                  "dE"' CheckThat(() => AssertLineIs("012 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'u'' CheckThat(() => AssertLineIs("012 "))'                  'u'' CheckThat(() => AssertLineIs("012  890"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("012 456 89a"' Keys(                  "012 456 89a"' _.Escape' CheckThat(() => AssertLineIs("012 456 89a"))' CheckThat(() => AssertCursorLeftIs(10))'                  "d0"' CheckThat(() => AssertLineIs("a"))' CheckThat(() => AssertCursorLeftIs(0))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test(" 12 456 89a"' Keys(                  " 12 456 89a"' _.Escape' CheckThat(() => AssertLineIs(" 12 456 89a"))' CheckThat(() => AssertCursorLeftIs(10))'                  "d"' _.Uphat' CheckThat(() => AssertLineIs(" a"))' CheckThat(() => AssertCursorLeftIs(1))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("Ins delete"' Keys(                  "Ins delete1"' CheckThat(() => AssertLineIs("Ins delete1"))' CheckThat(() => AssertCursorLeftIs(11))'                  _.LeftArrow' CheckThat(() => AssertLineIs("Ins delete1"))' CheckThat(() => AssertCursorLeftIs(10))'                  _.Delete' CheckThat(() => AssertLineIs("Ins delete"))' CheckThat(() => AssertCursorLeftIs(10))'                  _.Delete' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("Ins delete"' Keys(                  "Ins delete1"' CheckThat(() => AssertLineIs("Ins delete1"))' CheckThat(() => AssertCursorLeftIs(11))'                  _.LeftArrow' CheckThat(() => AssertLineIs("Ins delete1"))' CheckThat(() => AssertCursorLeftIs(10))'                  _.Delete' CheckThat(() => AssertLineIs("Ins delete"))' CheckThat(() => AssertCursorLeftIs(10))'                  _.Delete' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("Ins delete"' Keys(                  "Ins delete1"' CheckThat(() => AssertLineIs("Ins delete1"))' CheckThat(() => AssertCursorLeftIs(11))'                  _.LeftArrow' CheckThat(() => AssertLineIs("Ins delete1"))' CheckThat(() => AssertCursorLeftIs(10))'                  _.Delete' CheckThat(() => AssertLineIs("Ins delete"))' CheckThat(() => AssertCursorLeftIs(10))'                  _.Delete' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("Ins delete"' Keys(                  "Ins delete1"' CheckThat(() => AssertLineIs("Ins delete1"))' CheckThat(() => AssertCursorLeftIs(11))'                  _.LeftArrow' CheckThat(() => AssertLineIs("Ins delete1"))' CheckThat(() => AssertCursorLeftIs(10))'                  _.Delete' CheckThat(() => AssertLineIs("Ins delete"))' CheckThat(() => AssertCursorLeftIs(10))'                  _.Delete' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDelete,The following statement contains a magic number: Test("Ins delete"' Keys(                  "Ins x delete"' _.LeftArrow' _.LeftArrow' _.LeftArrow' _.LeftArrow' _.LeftArrow' _.LeftArrow' _.LeftArrow' _.LeftArrow'                  _.Delete' _.Delete' CheckThat(() => AssertCursorLeftIs(4))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dB"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "2dB"' CheckThat(() => AssertLineIs("6"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dB"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "2dB"' CheckThat(() => AssertLineIs("6"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dB"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "2dB"' CheckThat(() => AssertLineIs("6"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dB"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "2dB"' CheckThat(() => AssertLineIs("6"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dE"' CheckThat(() => AssertLineIs("0 2+4 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "uBdE"' CheckThat(() => AssertLineIs("0  6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0ldE"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l2dE"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u03dE"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dE"' CheckThat(() => AssertLineIs("0 2+4 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "uBdE"' CheckThat(() => AssertLineIs("0  6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0ldE"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l2dE"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u03dE"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dE"' CheckThat(() => AssertLineIs("0 2+4 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "uBdE"' CheckThat(() => AssertLineIs("0  6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0ldE"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l2dE"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u03dE"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dE"' CheckThat(() => AssertLineIs("0 2+4 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "uBdE"' CheckThat(() => AssertLineIs("0  6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0ldE"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l2dE"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u03dE"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dW"' CheckThat(() => AssertLineIs("0 2+4 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "uBdW"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0ldW"' CheckThat(() => AssertLineIs("02+4 6"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l2dW"' CheckThat(() => AssertLineIs("06"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l3dW"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u03dW"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dW"' CheckThat(() => AssertLineIs("0 2+4 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "uBdW"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0ldW"' CheckThat(() => AssertLineIs("02+4 6"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l2dW"' CheckThat(() => AssertLineIs("06"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l3dW"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u03dW"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dW"' CheckThat(() => AssertLineIs("0 2+4 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "uBdW"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0ldW"' CheckThat(() => AssertLineIs("02+4 6"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l2dW"' CheckThat(() => AssertLineIs("06"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l3dW"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u03dW"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGlobDelete,The following statement contains a magic number: Test("0 2+4 6"' Keys(                  "0 2+4 6"' _.Escape' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dW"' CheckThat(() => AssertLineIs("0 2+4 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "uBdW"' CheckThat(() => AssertLineIs("0 6"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0ldW"' CheckThat(() => AssertLineIs("02+4 6"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l2dW"' CheckThat(() => AssertLineIs("06"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u0l3dW"' CheckThat(() => AssertLineIs("0"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u03dW"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("0 2+4 6"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("{{}}"' Keys(                  "{{}}"' _.Escape' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(0))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("{{}}"' Keys(                  "{{}}"' _.Escape' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(0))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(())"' Keys(                  "(())"' _.Escape' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(0))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(())"' Keys(                  "(())"' _.Escape' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(0))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("[[]]"' Keys(                  "[[]]"' _.Escape' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(0))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("[[]]"' Keys(                  "[[]]"' _.Escape' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(0))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3{5)789)b}c"' Keys(                  "(1{3{5)789)b}c"' _.Escape' CheckThat(() => AssertLineIs("(1{3{5)789)b}c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hd"' _.Percent' CheckThat(() => AssertLineIs("(1{3c"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u"' CheckThat(() => AssertLineIs("(1{3{5)789)b}c"))' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3{5)789)b}c"' Keys(                  "(1{3{5)789)b}c"' _.Escape' CheckThat(() => AssertLineIs("(1{3{5)789)b}c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hd"' _.Percent' CheckThat(() => AssertLineIs("(1{3c"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u"' CheckThat(() => AssertLineIs("(1{3{5)789)b}c"))' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3{5)789)b}c"' Keys(                  "(1{3{5)789)b}c"' _.Escape' CheckThat(() => AssertLineIs("(1{3{5)789)b}c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hd"' _.Percent' CheckThat(() => AssertLineIs("(1{3c"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u"' CheckThat(() => AssertLineIs("(1{3{5)789)b}c"))' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhhd"' _.Percent' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]"))' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhhd"' _.Percent' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]"))' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhhd"' _.Percent' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]"))' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]c"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhhhhd"' _.Percent' CheckThat(() => AssertLineIs("(19)b]c"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]c"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhhhhd"' _.Percent' CheckThat(() => AssertLineIs("(19)b]c"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]c"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhhhhd"' _.Percent' CheckThat(() => AssertLineIs("(19)b]c"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]d"' Keys(                  "(1{3[5)7}9)b]d"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]d"))' CheckThat(() => AssertCursorLeftIs(13))'                  "h"' _.Percent' "d"' _.Percent' CheckThat(() => AssertLineIs("(1{3d"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]d"))' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]d"' Keys(                  "(1{3[5)7}9)b]d"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]d"))' CheckThat(() => AssertCursorLeftIs(13))'                  "h"' _.Percent' "d"' _.Percent' CheckThat(() => AssertLineIs("(1{3d"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]d"))' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]d"' Keys(                  "(1{3[5)7}9)b]d"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]d"))' CheckThat(() => AssertCursorLeftIs(13))'                  "h"' _.Percent' "d"' _.Percent' CheckThat(() => AssertLineIs("(1{3d"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]d"))' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(10))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(10))'                  "d"' _.Percent' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]"))' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(10))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(10))'                  "d"' _.Percent' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]"))' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(10))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(10))'                  "d"' _.Percent' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]"))' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(10))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(10))'                  "d"' _.Percent' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]"))' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(10))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(10))'                  "d"' _.Percent' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]"))' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]c"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhhhh"' _.Percent' "d"' _.Percent' CheckThat(() => AssertLineIs("(19)b]c"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]c"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhhhh"' _.Percent' "d"' _.Percent' CheckThat(() => AssertLineIs("(19)b]c"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("(1{3[5)7}9)b]c"' Keys(                  "(1{3[5)7}9)b]c"' _.Escape' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(13))'                  "hhhhh"' _.Percent' "d"' _.Percent' CheckThat(() => AssertLineIs("(19)b]c"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' CheckThat(() => AssertLineIs("(1{3[5)7}9)b]c"))' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 [ 67 ] bc"' Keys(                  "012 [ 67 ] bc"' _.Escape' CheckThat(() => AssertLineIs("012 [ 67 ] bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))'                  "uh"' CheckThat(() => AssertLineIs("012 [ 67 ] bc"))' CheckThat(() => AssertCursorLeftIs(9))'                  'c'' _.Percent' "99"' _.Escape' CheckThat(() => AssertLineIs("012 99 bc"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 [ 67 ] bc"' Keys(                  "012 [ 67 ] bc"' _.Escape' CheckThat(() => AssertLineIs("012 [ 67 ] bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))'                  "uh"' CheckThat(() => AssertLineIs("012 [ 67 ] bc"))' CheckThat(() => AssertCursorLeftIs(9))'                  'c'' _.Percent' "99"' _.Escape' CheckThat(() => AssertLineIs("012 99 bc"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 [ 67 ] bc"' Keys(                  "012 [ 67 ] bc"' _.Escape' CheckThat(() => AssertLineIs("012 [ 67 ] bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))'                  "uh"' CheckThat(() => AssertLineIs("012 [ 67 ] bc"))' CheckThat(() => AssertCursorLeftIs(9))'                  'c'' _.Percent' "99"' _.Escape' CheckThat(() => AssertLineIs("012 99 bc"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 [ 67 ] bc"' Keys(                  "012 [ 67 ] bc"' _.Escape' CheckThat(() => AssertLineIs("012 [ 67 ] bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))'                  "uh"' CheckThat(() => AssertLineIs("012 [ 67 ] bc"))' CheckThat(() => AssertCursorLeftIs(9))'                  'c'' _.Percent' "99"' _.Escape' CheckThat(() => AssertLineIs("012 99 bc"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 [ 67 ] bc"' Keys(                  "012 [ 67 ] bc"' _.Escape' CheckThat(() => AssertLineIs("012 [ 67 ] bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))'                  "uh"' CheckThat(() => AssertLineIs("012 [ 67 ] bc"))' CheckThat(() => AssertCursorLeftIs(9))'                  'c'' _.Percent' "99"' _.Escape' CheckThat(() => AssertLineIs("012 99 bc"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 { 67 } bc"' Keys(                  "012 { 67 } bc"' _.Escape' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 { 67 } bc"' Keys(                  "012 { 67 } bc"' _.Escape' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 { 67 } bc"' Keys(                  "012 { 67 } bc"' _.Escape' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 { 67 } bc"' Keys(                  "012 { 67 } bc"' _.Escape' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 { 67 } bc"' Keys(                  "012 { 67 } bc"' _.Escape' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 { 67 } bc"' Keys(                  "012 { 67 } bc"' _.Escape' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 { 67 } bc"' Keys(                  "012 { 67 } bc"' _.Escape' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 { 67 } bc"' Keys(                  "012 { 67 } bc"' _.Escape' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 { 67 } bc"' Keys(                  "012 { 67 } bc"' _.Escape' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 { 67 } bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 ( 67 ) bc"' Keys(                  "012 ( 67 ) bc"' _.Escape' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 ( 67 ) bc"' Keys(                  "012 ( 67 ) bc"' _.Escape' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 ( 67 ) bc"' Keys(                  "012 ( 67 ) bc"' _.Escape' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 ( 67 ) bc"' Keys(                  "012 ( 67 ) bc"' _.Escape' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 ( 67 ) bc"' Keys(                  "012 ( 67 ) bc"' _.Escape' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 ( 67 ) bc"' Keys(                  "012 ( 67 ) bc"' _.Escape' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 ( 67 ) bc"' Keys(                  "012 ( 67 ) bc"' _.Escape' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 ( 67 ) bc"' Keys(                  "012 ( 67 ) bc"' _.Escape' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPercent,The following statement contains a magic number: Test("012 ( 67 ) bc"' Keys(                  "012 ( 67 ) bc"' _.Escape' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(12))'                  "hhh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertLineIs("012 ( 67 ) bc"))' CheckThat(() => AssertCursorLeftIs(10))'                  'h'' _.Percent' CheckThat(() => AssertCursorLeftIs(4))'                  'd'' _.Percent' CheckThat(() => AssertLineIs("012  bc"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViMisc,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape' CheckThat(() => AssertLineIs("abcd"))'                  "h"' _.Ctrl_t' CheckThat(() => AssertLineIs("acbd"))'                  _.Ctrl_t' CheckThat(() => AssertLineIs("acdb"))'                  CheckThat(() => AssertCursorLeftIs(3))'                  "0"' _.Ctrl_t' CheckThat(() => AssertLineIs("acdb"))'                  "uu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChange,The following statement contains a magic number: Test("012 45"' Keys(                  "012 45"' _.Escape'                  "0cwabc"' _.Escape' CheckThat(() => AssertLineIs("abc 45"))'                  "u"' CheckThat(() => AssertLineIs("012 45"))' CheckThat(() => AssertCursorLeftIs(4))'                  "0cwabc"' _.Escape' CheckThat(() => AssertLineIs("abc 45"))'                  "u"' CheckThat(() => AssertCursorLeftIs(4))'                  "0cwabc"' _.Escape' "wcwef"' _.Escape' CheckThat(() => AssertLineIs("abc ef"))'                  "uu"' CheckThat(() => AssertLineIs("012 45"))'                  "02cwabcdef"' _.Escape' CheckThat(() => AssertLineIs("abcdef"))'                  "u03cwghi klm"' _.Escape' CheckThat(() => AssertLineIs("ghi klm"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChange,The following statement contains a magic number: Test("012 45"' Keys(                  "012 45"' _.Escape'                  "0cwabc"' _.Escape' CheckThat(() => AssertLineIs("abc 45"))'                  "u"' CheckThat(() => AssertLineIs("012 45"))' CheckThat(() => AssertCursorLeftIs(4))'                  "0cwabc"' _.Escape' CheckThat(() => AssertLineIs("abc 45"))'                  "u"' CheckThat(() => AssertCursorLeftIs(4))'                  "0cwabc"' _.Escape' "wcwef"' _.Escape' CheckThat(() => AssertLineIs("abc ef"))'                  "uu"' CheckThat(() => AssertLineIs("012 45"))'                  "02cwabcdef"' _.Escape' CheckThat(() => AssertLineIs("abcdef"))'                  "u03cwghi klm"' _.Escape' CheckThat(() => AssertLineIs("ghi klm"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChange,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u02cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u03cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChange,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u02cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u03cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChange,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u02cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u03cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChange,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u0cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u02cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u03cEabc"' _.Escape' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChange,The following statement contains a magic number: Test("0[23]5"' Keys(                  "0[23]5"' _.Escape'                  "0wc"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0wc"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0w2c"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0w3c"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChange,The following statement contains a magic number: Test("0[23]5"' Keys(                  "0[23]5"' _.Escape'                  "0wc"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0wc"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0w2c"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0w3c"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChange,The following statement contains a magic number: Test("0[23]5"' Keys(                  "0[23]5"' _.Escape'                  "0wc"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0wc"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0w2c"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0w3c"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChange,The following statement contains a magic number: Test("0[23]5"' Keys(                  "0[23]5"' _.Escape'                  "0wc"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0wc"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0w2c"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0w3c"' _.Percent' "abc"' _.Escape' CheckThat(() => AssertLineIs("0abc5"))' CheckThat(() => AssertCursorLeftIs(3))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViInsertLine,The following statement contains a magic number: Test("line1\n"' Keys(                  _.Escape' "Oline1"' CheckThat(() => AssertCursorLeftIs(5))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViInsertLine,The following statement contains a magic number: Test("\nline1"' Keys(                  _.Escape' "oline1"' CheckThat(() => AssertCursorLeftIs(5 + adder))' CheckThat(() => AssertLineIs("\nline1"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(4 + adder))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViInsertLine,The following statement contains a magic number: Test("\nline1"' Keys(                  _.Escape' "oline1"' CheckThat(() => AssertCursorLeftIs(5 + adder))' CheckThat(() => AssertLineIs("\nline1"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(4 + adder))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViInsertLine,The following statement contains a magic number: Test(""' Keys(                  "line2"' _.Escape' CheckThat(() => AssertLineIs("line2"))'                  "Oline1"' _.Escape' CheckThat(() => AssertLineIs("line1\nline2"))' CheckThat(() => AssertCursorLeftIs(4))'                  "joline3"' _.Escape' CheckThat(() => AssertLineIs("line1\nline2\nline3"))'                  'u'' CheckThat(() => AssertLineIs("line1\nline2"))'                  'u'' CheckThat(() => AssertLineIs("line2"))'                  'u'' CheckThat(() => AssertLineIs("line"))'                  "uuuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViInsertLine,The following statement contains a magic number: Test(""' Keys(                  _.Escape' "oline4"' CheckThat(() => AssertLineIs("\nline4"))' CheckThat(() => AssertCursorLeftIs(5 + adder))'                  _.Escape' "Oline2"' CheckThat(() => AssertLineIs("\nline2\nline4"))' CheckThat(() => AssertCursorLeftIs(5 + adder))'                  _.Escape' "oline3"' CheckThat(() => AssertLineIs("\nline2\nline3\nline4"))'                  _.Escape' CheckThat(() => AssertLineIs("\nline2\nline3\nline4"))' CheckThat(() => AssertCursorLeftIs(4 + adder))'                  'u'' CheckThat(() => AssertLineIs("\nline2\nline4"))'                  'u'' CheckThat(() => AssertLineIs("\nline4"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViInsertLine,The following statement contains a magic number: Test(""' Keys(                  _.Escape' "oline4"' CheckThat(() => AssertLineIs("\nline4"))' CheckThat(() => AssertCursorLeftIs(5 + adder))'                  _.Escape' "Oline2"' CheckThat(() => AssertLineIs("\nline2\nline4"))' CheckThat(() => AssertCursorLeftIs(5 + adder))'                  _.Escape' "oline3"' CheckThat(() => AssertLineIs("\nline2\nline3\nline4"))'                  _.Escape' CheckThat(() => AssertLineIs("\nline2\nline3\nline4"))' CheckThat(() => AssertCursorLeftIs(4 + adder))'                  'u'' CheckThat(() => AssertLineIs("\nline2\nline4"))'                  'u'' CheckThat(() => AssertLineIs("\nline4"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViInsertLine,The following statement contains a magic number: Test(""' Keys(                  _.Escape' "oline4"' CheckThat(() => AssertLineIs("\nline4"))' CheckThat(() => AssertCursorLeftIs(5 + adder))'                  _.Escape' "Oline2"' CheckThat(() => AssertLineIs("\nline2\nline4"))' CheckThat(() => AssertCursorLeftIs(5 + adder))'                  _.Escape' "oline3"' CheckThat(() => AssertLineIs("\nline2\nline3\nline4"))'                  _.Escape' CheckThat(() => AssertLineIs("\nline2\nline3\nline4"))' CheckThat(() => AssertCursorLeftIs(4 + adder))'                  'u'' CheckThat(() => AssertLineIs("\nline2\nline4"))'                  'u'' CheckThat(() => AssertLineIs("\nline4"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "0cf6abc"' _.Escape' CheckThat(() => AssertLineIs("abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0cf5abc"' _.Escape' CheckThat(() => AssertLineIs("abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0lcf6abc"' _.Escape' CheckThat(() => AssertLineIs("0abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "cf6abc"' _.Escape' CheckThat(() => AssertLineIs("0123456bc"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "0cf6abc"' _.Escape' CheckThat(() => AssertLineIs("abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0cf5abc"' _.Escape' CheckThat(() => AssertLineIs("abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0lcf6abc"' _.Escape' CheckThat(() => AssertLineIs("0abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "cf6abc"' _.Escape' CheckThat(() => AssertLineIs("0123456bc"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "0cf6abc"' _.Escape' CheckThat(() => AssertLineIs("abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0cf5abc"' _.Escape' CheckThat(() => AssertLineIs("abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0lcf6abc"' _.Escape' CheckThat(() => AssertLineIs("0abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "cf6abc"' _.Escape' CheckThat(() => AssertLineIs("0123456bc"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "cF0abc"' _.Escape' CheckThat(() => AssertLineIs("abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "cF1abc"' _.Escape' CheckThat(() => AssertLineIs("0abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hcF0abc"' _.Escape' CheckThat(() => AssertLineIs("abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hcF1abc"' _.Escape' CheckThat(() => AssertLineIs("0abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0cF0abc"' _.Escape' CheckThat(() => AssertLineIs("0bc123456"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "cF0abc"' _.Escape' CheckThat(() => AssertLineIs("abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "cF1abc"' _.Escape' CheckThat(() => AssertLineIs("0abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hcF0abc"' _.Escape' CheckThat(() => AssertLineIs("abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hcF1abc"' _.Escape' CheckThat(() => AssertLineIs("0abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0cF0abc"' _.Escape' CheckThat(() => AssertLineIs("0bc123456"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "cF0abc"' _.Escape' CheckThat(() => AssertLineIs("abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "cF1abc"' _.Escape' CheckThat(() => AssertLineIs("0abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hcF0abc"' _.Escape' CheckThat(() => AssertLineIs("abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hcF1abc"' _.Escape' CheckThat(() => AssertLineIs("0abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0cF0abc"' _.Escape' CheckThat(() => AssertLineIs("0bc123456"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "cF0abc"' _.Escape' CheckThat(() => AssertLineIs("abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "cF1abc"' _.Escape' CheckThat(() => AssertLineIs("0abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hcF0abc"' _.Escape' CheckThat(() => AssertLineIs("abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hcF1abc"' _.Escape' CheckThat(() => AssertLineIs("0abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0cF0abc"' _.Escape' CheckThat(() => AssertLineIs("0bc123456"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "0ct6abc"' _.Escape' CheckThat(() => AssertLineIs("abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0lct6abc"' _.Escape' CheckThat(() => AssertLineIs("0abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "ct6abc"' _.Escape' CheckThat(() => AssertLineIs("0123456bc"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "0ct6abc"' _.Escape' CheckThat(() => AssertLineIs("abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0lct6abc"' _.Escape' CheckThat(() => AssertLineIs("0abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "ct6abc"' _.Escape' CheckThat(() => AssertLineIs("0123456bc"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "cT1abc"' _.Escape' CheckThat(() => AssertLineIs("01abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hcT1abc"' _.Escape' CheckThat(() => AssertLineIs("01abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0cT0abc"' _.Escape' CheckThat(() => AssertLineIs("0bc123456"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeChar,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "cT1abc"' _.Escape' CheckThat(() => AssertLineIs("01abc"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hcT1abc"' _.Escape' CheckThat(() => AssertLineIs("01abc6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0cT0abc"' _.Escape' CheckThat(() => AssertLineIs("0bc123456"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,TabComplete,The following statement contains a magic number: Test("$true"' Keys(                  "$tr"'                  _.Tab'                  CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,TabComplete,The following statement contains a magic number: Test("$zz"' Keys(                  "$zz"'                  _.Tab'                  CheckThat(() => AssertCursorLeftIs(3))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InvalidCompletionResult,The following statement contains a magic number: i <= 4
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,PossibleCompletions,The following statement contains a magic number: Test(""' Keys(                  _.Alt_Equals'                  CheckThat(() =>                  {                      AssertCursorLeftTopIs(0' 0);                      AssertScreenIs(2' NextLine);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,PossibleCompletions,The following statement contains a magic number: Test("psvar"' Keys(                  "psvar"'                  _.Alt_Equals'                  CheckThat(() => AssertScreenIs(5'                                                 TokenClassification.None' promptLine1'                                                 NextLine'                                                 promptLine2'                                                 TokenClassification.Command' "psvar"'                                                 NextLine'                                                 "$pssomething"'                                                 NextLine'                                                 TokenClassification.None' promptLine1'                                                 NextLine'                                                 promptLine2'                                                 TokenClassification.Command' "psvar")))'                  prompt: promptLine1 + "\n" + promptLine2);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,PossibleCompletions,The following statement contains a magic number: TestMustDing("none"' Keys(                  "none"'                  _.Alt_Equals'                  CheckThat(() => AssertScreenIs(2' TokenClassification.Command' "none"' NextLine))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,PossibleCompletionsPrompt,The following statement contains a magic number: PSConsoleReadLine.GetOptions().CompletionQueryItems = 10;
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,PossibleCompletionsPrompt,The following statement contains a magic number: Test("Get-Many"' Keys(                  "Get-Many"' _.Ctrl_Spacebar'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "Get-Many"' NextLine'                      TokenClassification.None' "Display all 15 possibilities? (y or n) _"))'                  "n"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,PossibleCompletionsPrompt,The following statement contains a magic number: Test("Get-Many"' Keys(                  "Get-Many"' _.Ctrl_Spacebar'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "Get-Many"' NextLine'                      TokenClassification.None' "Display all 15 possibilities? (y or n) _"))'                  "y"'                  CheckThat(() => AssertScreenIs(4'                      TokenClassification.Command' "Get-Many"' NextLine'                      TokenClassification.None'                      "Get-Many0   Get-Many3   Get-Many6   Get-Many9   Get-Many12"' NextLine'                      "Get-Many1   Get-Many4   Get-Many7   Get-Many10  Get-Many13"' NextLine'                      "Get-Many2   Get-Many5   Get-Many8   Get-Many11  Get-Many14"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,PossibleCompletionsPrompt,The following statement contains a magic number: Test("Get-Many"' Keys(                  "Get-Many"' _.Ctrl_Spacebar'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "Get-Many"' NextLine'                      TokenClassification.None' "Display all 15 possibilities? (y or n) _"))'                  "y"'                  CheckThat(() => AssertScreenIs(4'                      TokenClassification.Command' "Get-Many"' NextLine'                      TokenClassification.None'                      "Get-Many0   Get-Many3   Get-Many6   Get-Many9   Get-Many12"' NextLine'                      "Get-Many1   Get-Many4   Get-Many7   Get-Many10  Get-Many13"' NextLine'                      "Get-Many2   Get-Many5   Get-Many8   Get-Many11  Get-Many14"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MenuCompletions,The following statement contains a magic number: Test("Get-Many4"' Keys(                  "Get-Many"' _.Ctrl_Spacebar'                  CheckThat(() => AssertScreenIs(4'                      TokenClassification.Command' "Get-Many"'                      TokenClassification.Selection' "0"' NextLine'                      TokenClassification.Selection' "Get-Many0   "'                      TokenClassification.None'                      "Get-Many3   Get-Many6   Get-Many9   Get-Many12"' NextLine'                      "Get-Many1   Get-Many4   Get-Many7   Get-Many10  Get-Many13"' NextLine'                      "Get-Many2   Get-Many5   Get-Many8   Get-Many11  Get-Many14"))'                  "4"'                  CheckThat(() => AssertScreenIs(4'                      TokenClassification.Command' "Get-Many4"' NextLine'                      TokenClassification.Selection' "Get-Many4  "' NextLine'                      "                                                          "' NextLine'                      "                                                          "' NextLine))'                  _.Enter'                  _.Enter                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MenuCompletions,The following statement contains a magic number: Test("Get-Many4"' Keys(                  "Get-Many"' _.Ctrl_Spacebar'                  CheckThat(() => AssertScreenIs(4'                      TokenClassification.Command' "Get-Many"'                      TokenClassification.Selection' "0"' NextLine'                      TokenClassification.Selection' "Get-Many0   "'                      TokenClassification.None'                      "Get-Many3   Get-Many6   Get-Many9   Get-Many12"' NextLine'                      "Get-Many1   Get-Many4   Get-Many7   Get-Many10  Get-Many13"' NextLine'                      "Get-Many2   Get-Many5   Get-Many8   Get-Many11  Get-Many14"))'                  "4"'                  CheckThat(() => AssertScreenIs(4'                      TokenClassification.Command' "Get-Many4"' NextLine'                      TokenClassification.Selection' "Get-Many4  "' NextLine'                      "                                                          "' NextLine'                      "                                                          "' NextLine))'                  _.Enter'                  _.Enter                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DirectoryCompletion,The following statement contains a magic number: Test(""' Keys(                  "Get-Directory"' _.Tab'                  CheckThat(() => AssertLineIs("abc" + Path.DirectorySeparatorChar))'                  _.Tab'                  CheckThat(() => AssertLineIs("'e f" + Path.DirectorySeparatorChar + "'"))'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Tab'                  CheckThat(() => AssertLineIs("a" + Path.DirectorySeparatorChar))'                  _.Tab'                  CheckThat(() => AssertLineIs("'a b" + Path.DirectorySeparatorChar + "'"))'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Tab'                  CheckThat(() => AssertLineIs("\"a b" + Path.DirectorySeparatorChar + "\""))'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_c' InputAcceptedNow));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DirectoryCompletion,The following statement contains a magic number: Test(""' Keys(                  "Get-Directory"' _.Tab'                  CheckThat(() => AssertLineIs("abc" + Path.DirectorySeparatorChar))'                  _.Tab'                  CheckThat(() => AssertLineIs("'e f" + Path.DirectorySeparatorChar + "'"))'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Tab'                  CheckThat(() => AssertLineIs("a" + Path.DirectorySeparatorChar))'                  _.Tab'                  CheckThat(() => AssertLineIs("'a b" + Path.DirectorySeparatorChar + "'"))'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Tab'                  CheckThat(() => AssertLineIs("\"a b" + Path.DirectorySeparatorChar + "\""))'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_c' InputAcceptedNow));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DirectoryCompletion,The following statement contains a magic number: Test(""' Keys(                  "Get-Directory"' _.Tab'                  CheckThat(() => AssertLineIs("abc" + Path.DirectorySeparatorChar))'                  _.Tab'                  CheckThat(() => AssertLineIs("'e f" + Path.DirectorySeparatorChar + "'"))'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Tab'                  CheckThat(() => AssertLineIs("a" + Path.DirectorySeparatorChar))'                  _.Tab'                  CheckThat(() => AssertLineIs("'a b" + Path.DirectorySeparatorChar + "'"))'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Tab'                  CheckThat(() => AssertLineIs("\"a b" + Path.DirectorySeparatorChar + "\""))'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_c' InputAcceptedNow));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The following statement contains a magic number: switch (input)              {              case "$t":                  replacementIndex = 0;                  replacementLength = 2;                  completions.Add(new CompletionResult("$thing"));                  completions.Add(new CompletionResult("$this"));                  completions.Add(new CompletionResult("$true"));                  break;              case "$tr":                  replacementIndex = 0;                  replacementLength = 3;                  completions.Add(new CompletionResult("$true"));                  break;              case "psvar":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("$pssomething"));                  break;              case "ambig":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("ambiguous1"));                  completions.Add(new CompletionResult("ambiguous2"));                  completions.Add(new CompletionResult("ambiguous3"));                  break;              case "Get-Many":                  replacementIndex = 0;                  replacementLength = 8;                  for (int i = 0; i < 15; i++)                  {                      completions.Add(new CompletionResult("Get-Many" + i));                  }                  break;              case "Get-Tooltips":                  replacementIndex = 0;                  replacementLength = 12;                  completions.Add(new CompletionResult("something really long"' "item1"' CompletionResultType.Command' "useful description goes here"));                  break;              case "Get-Directory":                  replacementIndex = 0;                  replacementLength = 13;                  completions.Add(new CompletionResult("abc"' "abc"' CompletionResultType.ProviderContainer' "abc"));                  completions.Add(new CompletionResult("'e f'"' "'e f'"' CompletionResultType.ProviderContainer' "'e f'"));                  completions.Add(new CompletionResult("a"' "a"' CompletionResultType.ProviderContainer' "a"));                  completions.Add(new CompletionResult("'a b" + Path.DirectorySeparatorChar + "'"' "a b" + Path.DirectorySeparatorChar + "'"' CompletionResultType.ProviderContainer' "a b" + Path.DirectorySeparatorChar + "'"));                  completions.Add(new CompletionResult("\"a b" + Path.DirectorySeparatorChar + "\""' "\"a b" + Path.DirectorySeparatorChar + "\""' CompletionResultType.ProviderContainer' "\"a b" + Path.DirectorySeparatorChar + "\""));                  break;              case "invalid result 1":                  replacementIndex = -1;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 2":                  replacementIndex = 0;                  replacementLength = -1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 3":                  replacementIndex = int.MaxValue;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 4":                  replacementIndex = 0;                  replacementLength = int.MaxValue;                  completions.Add(new CompletionResult("result"));                  break;              case "ls -H":                  replacementIndex = cursor;                  replacementLength = 0;                  completions.Add(new CompletionResult("idden"));                  break;              case "none":                  break;              }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The following statement contains a magic number: switch (input)              {              case "$t":                  replacementIndex = 0;                  replacementLength = 2;                  completions.Add(new CompletionResult("$thing"));                  completions.Add(new CompletionResult("$this"));                  completions.Add(new CompletionResult("$true"));                  break;              case "$tr":                  replacementIndex = 0;                  replacementLength = 3;                  completions.Add(new CompletionResult("$true"));                  break;              case "psvar":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("$pssomething"));                  break;              case "ambig":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("ambiguous1"));                  completions.Add(new CompletionResult("ambiguous2"));                  completions.Add(new CompletionResult("ambiguous3"));                  break;              case "Get-Many":                  replacementIndex = 0;                  replacementLength = 8;                  for (int i = 0; i < 15; i++)                  {                      completions.Add(new CompletionResult("Get-Many" + i));                  }                  break;              case "Get-Tooltips":                  replacementIndex = 0;                  replacementLength = 12;                  completions.Add(new CompletionResult("something really long"' "item1"' CompletionResultType.Command' "useful description goes here"));                  break;              case "Get-Directory":                  replacementIndex = 0;                  replacementLength = 13;                  completions.Add(new CompletionResult("abc"' "abc"' CompletionResultType.ProviderContainer' "abc"));                  completions.Add(new CompletionResult("'e f'"' "'e f'"' CompletionResultType.ProviderContainer' "'e f'"));                  completions.Add(new CompletionResult("a"' "a"' CompletionResultType.ProviderContainer' "a"));                  completions.Add(new CompletionResult("'a b" + Path.DirectorySeparatorChar + "'"' "a b" + Path.DirectorySeparatorChar + "'"' CompletionResultType.ProviderContainer' "a b" + Path.DirectorySeparatorChar + "'"));                  completions.Add(new CompletionResult("\"a b" + Path.DirectorySeparatorChar + "\""' "\"a b" + Path.DirectorySeparatorChar + "\""' CompletionResultType.ProviderContainer' "\"a b" + Path.DirectorySeparatorChar + "\""));                  break;              case "invalid result 1":                  replacementIndex = -1;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 2":                  replacementIndex = 0;                  replacementLength = -1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 3":                  replacementIndex = int.MaxValue;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 4":                  replacementIndex = 0;                  replacementLength = int.MaxValue;                  completions.Add(new CompletionResult("result"));                  break;              case "ls -H":                  replacementIndex = cursor;                  replacementLength = 0;                  completions.Add(new CompletionResult("idden"));                  break;              case "none":                  break;              }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The following statement contains a magic number: switch (input)              {              case "$t":                  replacementIndex = 0;                  replacementLength = 2;                  completions.Add(new CompletionResult("$thing"));                  completions.Add(new CompletionResult("$this"));                  completions.Add(new CompletionResult("$true"));                  break;              case "$tr":                  replacementIndex = 0;                  replacementLength = 3;                  completions.Add(new CompletionResult("$true"));                  break;              case "psvar":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("$pssomething"));                  break;              case "ambig":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("ambiguous1"));                  completions.Add(new CompletionResult("ambiguous2"));                  completions.Add(new CompletionResult("ambiguous3"));                  break;              case "Get-Many":                  replacementIndex = 0;                  replacementLength = 8;                  for (int i = 0; i < 15; i++)                  {                      completions.Add(new CompletionResult("Get-Many" + i));                  }                  break;              case "Get-Tooltips":                  replacementIndex = 0;                  replacementLength = 12;                  completions.Add(new CompletionResult("something really long"' "item1"' CompletionResultType.Command' "useful description goes here"));                  break;              case "Get-Directory":                  replacementIndex = 0;                  replacementLength = 13;                  completions.Add(new CompletionResult("abc"' "abc"' CompletionResultType.ProviderContainer' "abc"));                  completions.Add(new CompletionResult("'e f'"' "'e f'"' CompletionResultType.ProviderContainer' "'e f'"));                  completions.Add(new CompletionResult("a"' "a"' CompletionResultType.ProviderContainer' "a"));                  completions.Add(new CompletionResult("'a b" + Path.DirectorySeparatorChar + "'"' "a b" + Path.DirectorySeparatorChar + "'"' CompletionResultType.ProviderContainer' "a b" + Path.DirectorySeparatorChar + "'"));                  completions.Add(new CompletionResult("\"a b" + Path.DirectorySeparatorChar + "\""' "\"a b" + Path.DirectorySeparatorChar + "\""' CompletionResultType.ProviderContainer' "\"a b" + Path.DirectorySeparatorChar + "\""));                  break;              case "invalid result 1":                  replacementIndex = -1;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 2":                  replacementIndex = 0;                  replacementLength = -1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 3":                  replacementIndex = int.MaxValue;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 4":                  replacementIndex = 0;                  replacementLength = int.MaxValue;                  completions.Add(new CompletionResult("result"));                  break;              case "ls -H":                  replacementIndex = cursor;                  replacementLength = 0;                  completions.Add(new CompletionResult("idden"));                  break;              case "none":                  break;              }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The following statement contains a magic number: switch (input)              {              case "$t":                  replacementIndex = 0;                  replacementLength = 2;                  completions.Add(new CompletionResult("$thing"));                  completions.Add(new CompletionResult("$this"));                  completions.Add(new CompletionResult("$true"));                  break;              case "$tr":                  replacementIndex = 0;                  replacementLength = 3;                  completions.Add(new CompletionResult("$true"));                  break;              case "psvar":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("$pssomething"));                  break;              case "ambig":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("ambiguous1"));                  completions.Add(new CompletionResult("ambiguous2"));                  completions.Add(new CompletionResult("ambiguous3"));                  break;              case "Get-Many":                  replacementIndex = 0;                  replacementLength = 8;                  for (int i = 0; i < 15; i++)                  {                      completions.Add(new CompletionResult("Get-Many" + i));                  }                  break;              case "Get-Tooltips":                  replacementIndex = 0;                  replacementLength = 12;                  completions.Add(new CompletionResult("something really long"' "item1"' CompletionResultType.Command' "useful description goes here"));                  break;              case "Get-Directory":                  replacementIndex = 0;                  replacementLength = 13;                  completions.Add(new CompletionResult("abc"' "abc"' CompletionResultType.ProviderContainer' "abc"));                  completions.Add(new CompletionResult("'e f'"' "'e f'"' CompletionResultType.ProviderContainer' "'e f'"));                  completions.Add(new CompletionResult("a"' "a"' CompletionResultType.ProviderContainer' "a"));                  completions.Add(new CompletionResult("'a b" + Path.DirectorySeparatorChar + "'"' "a b" + Path.DirectorySeparatorChar + "'"' CompletionResultType.ProviderContainer' "a b" + Path.DirectorySeparatorChar + "'"));                  completions.Add(new CompletionResult("\"a b" + Path.DirectorySeparatorChar + "\""' "\"a b" + Path.DirectorySeparatorChar + "\""' CompletionResultType.ProviderContainer' "\"a b" + Path.DirectorySeparatorChar + "\""));                  break;              case "invalid result 1":                  replacementIndex = -1;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 2":                  replacementIndex = 0;                  replacementLength = -1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 3":                  replacementIndex = int.MaxValue;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 4":                  replacementIndex = 0;                  replacementLength = int.MaxValue;                  completions.Add(new CompletionResult("result"));                  break;              case "ls -H":                  replacementIndex = cursor;                  replacementLength = 0;                  completions.Add(new CompletionResult("idden"));                  break;              case "none":                  break;              }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The following statement contains a magic number: switch (input)              {              case "$t":                  replacementIndex = 0;                  replacementLength = 2;                  completions.Add(new CompletionResult("$thing"));                  completions.Add(new CompletionResult("$this"));                  completions.Add(new CompletionResult("$true"));                  break;              case "$tr":                  replacementIndex = 0;                  replacementLength = 3;                  completions.Add(new CompletionResult("$true"));                  break;              case "psvar":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("$pssomething"));                  break;              case "ambig":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("ambiguous1"));                  completions.Add(new CompletionResult("ambiguous2"));                  completions.Add(new CompletionResult("ambiguous3"));                  break;              case "Get-Many":                  replacementIndex = 0;                  replacementLength = 8;                  for (int i = 0; i < 15; i++)                  {                      completions.Add(new CompletionResult("Get-Many" + i));                  }                  break;              case "Get-Tooltips":                  replacementIndex = 0;                  replacementLength = 12;                  completions.Add(new CompletionResult("something really long"' "item1"' CompletionResultType.Command' "useful description goes here"));                  break;              case "Get-Directory":                  replacementIndex = 0;                  replacementLength = 13;                  completions.Add(new CompletionResult("abc"' "abc"' CompletionResultType.ProviderContainer' "abc"));                  completions.Add(new CompletionResult("'e f'"' "'e f'"' CompletionResultType.ProviderContainer' "'e f'"));                  completions.Add(new CompletionResult("a"' "a"' CompletionResultType.ProviderContainer' "a"));                  completions.Add(new CompletionResult("'a b" + Path.DirectorySeparatorChar + "'"' "a b" + Path.DirectorySeparatorChar + "'"' CompletionResultType.ProviderContainer' "a b" + Path.DirectorySeparatorChar + "'"));                  completions.Add(new CompletionResult("\"a b" + Path.DirectorySeparatorChar + "\""' "\"a b" + Path.DirectorySeparatorChar + "\""' CompletionResultType.ProviderContainer' "\"a b" + Path.DirectorySeparatorChar + "\""));                  break;              case "invalid result 1":                  replacementIndex = -1;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 2":                  replacementIndex = 0;                  replacementLength = -1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 3":                  replacementIndex = int.MaxValue;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 4":                  replacementIndex = 0;                  replacementLength = int.MaxValue;                  completions.Add(new CompletionResult("result"));                  break;              case "ls -H":                  replacementIndex = cursor;                  replacementLength = 0;                  completions.Add(new CompletionResult("idden"));                  break;              case "none":                  break;              }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The following statement contains a magic number: switch (input)              {              case "$t":                  replacementIndex = 0;                  replacementLength = 2;                  completions.Add(new CompletionResult("$thing"));                  completions.Add(new CompletionResult("$this"));                  completions.Add(new CompletionResult("$true"));                  break;              case "$tr":                  replacementIndex = 0;                  replacementLength = 3;                  completions.Add(new CompletionResult("$true"));                  break;              case "psvar":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("$pssomething"));                  break;              case "ambig":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("ambiguous1"));                  completions.Add(new CompletionResult("ambiguous2"));                  completions.Add(new CompletionResult("ambiguous3"));                  break;              case "Get-Many":                  replacementIndex = 0;                  replacementLength = 8;                  for (int i = 0; i < 15; i++)                  {                      completions.Add(new CompletionResult("Get-Many" + i));                  }                  break;              case "Get-Tooltips":                  replacementIndex = 0;                  replacementLength = 12;                  completions.Add(new CompletionResult("something really long"' "item1"' CompletionResultType.Command' "useful description goes here"));                  break;              case "Get-Directory":                  replacementIndex = 0;                  replacementLength = 13;                  completions.Add(new CompletionResult("abc"' "abc"' CompletionResultType.ProviderContainer' "abc"));                  completions.Add(new CompletionResult("'e f'"' "'e f'"' CompletionResultType.ProviderContainer' "'e f'"));                  completions.Add(new CompletionResult("a"' "a"' CompletionResultType.ProviderContainer' "a"));                  completions.Add(new CompletionResult("'a b" + Path.DirectorySeparatorChar + "'"' "a b" + Path.DirectorySeparatorChar + "'"' CompletionResultType.ProviderContainer' "a b" + Path.DirectorySeparatorChar + "'"));                  completions.Add(new CompletionResult("\"a b" + Path.DirectorySeparatorChar + "\""' "\"a b" + Path.DirectorySeparatorChar + "\""' CompletionResultType.ProviderContainer' "\"a b" + Path.DirectorySeparatorChar + "\""));                  break;              case "invalid result 1":                  replacementIndex = -1;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 2":                  replacementIndex = 0;                  replacementLength = -1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 3":                  replacementIndex = int.MaxValue;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 4":                  replacementIndex = 0;                  replacementLength = int.MaxValue;                  completions.Add(new CompletionResult("result"));                  break;              case "ls -H":                  replacementIndex = cursor;                  replacementLength = 0;                  completions.Add(new CompletionResult("idden"));                  break;              case "none":                  break;              }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The following statement contains a magic number: switch (input)              {              case "$t":                  replacementIndex = 0;                  replacementLength = 2;                  completions.Add(new CompletionResult("$thing"));                  completions.Add(new CompletionResult("$this"));                  completions.Add(new CompletionResult("$true"));                  break;              case "$tr":                  replacementIndex = 0;                  replacementLength = 3;                  completions.Add(new CompletionResult("$true"));                  break;              case "psvar":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("$pssomething"));                  break;              case "ambig":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("ambiguous1"));                  completions.Add(new CompletionResult("ambiguous2"));                  completions.Add(new CompletionResult("ambiguous3"));                  break;              case "Get-Many":                  replacementIndex = 0;                  replacementLength = 8;                  for (int i = 0; i < 15; i++)                  {                      completions.Add(new CompletionResult("Get-Many" + i));                  }                  break;              case "Get-Tooltips":                  replacementIndex = 0;                  replacementLength = 12;                  completions.Add(new CompletionResult("something really long"' "item1"' CompletionResultType.Command' "useful description goes here"));                  break;              case "Get-Directory":                  replacementIndex = 0;                  replacementLength = 13;                  completions.Add(new CompletionResult("abc"' "abc"' CompletionResultType.ProviderContainer' "abc"));                  completions.Add(new CompletionResult("'e f'"' "'e f'"' CompletionResultType.ProviderContainer' "'e f'"));                  completions.Add(new CompletionResult("a"' "a"' CompletionResultType.ProviderContainer' "a"));                  completions.Add(new CompletionResult("'a b" + Path.DirectorySeparatorChar + "'"' "a b" + Path.DirectorySeparatorChar + "'"' CompletionResultType.ProviderContainer' "a b" + Path.DirectorySeparatorChar + "'"));                  completions.Add(new CompletionResult("\"a b" + Path.DirectorySeparatorChar + "\""' "\"a b" + Path.DirectorySeparatorChar + "\""' CompletionResultType.ProviderContainer' "\"a b" + Path.DirectorySeparatorChar + "\""));                  break;              case "invalid result 1":                  replacementIndex = -1;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 2":                  replacementIndex = 0;                  replacementLength = -1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 3":                  replacementIndex = int.MaxValue;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 4":                  replacementIndex = 0;                  replacementLength = int.MaxValue;                  completions.Add(new CompletionResult("result"));                  break;              case "ls -H":                  replacementIndex = cursor;                  replacementLength = 0;                  completions.Add(new CompletionResult("idden"));                  break;              case "none":                  break;              }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The following statement contains a magic number: switch (input)              {              case "$t":                  replacementIndex = 0;                  replacementLength = 2;                  completions.Add(new CompletionResult("$thing"));                  completions.Add(new CompletionResult("$this"));                  completions.Add(new CompletionResult("$true"));                  break;              case "$tr":                  replacementIndex = 0;                  replacementLength = 3;                  completions.Add(new CompletionResult("$true"));                  break;              case "psvar":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("$pssomething"));                  break;              case "ambig":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("ambiguous1"));                  completions.Add(new CompletionResult("ambiguous2"));                  completions.Add(new CompletionResult("ambiguous3"));                  break;              case "Get-Many":                  replacementIndex = 0;                  replacementLength = 8;                  for (int i = 0; i < 15; i++)                  {                      completions.Add(new CompletionResult("Get-Many" + i));                  }                  break;              case "Get-Tooltips":                  replacementIndex = 0;                  replacementLength = 12;                  completions.Add(new CompletionResult("something really long"' "item1"' CompletionResultType.Command' "useful description goes here"));                  break;              case "Get-Directory":                  replacementIndex = 0;                  replacementLength = 13;                  completions.Add(new CompletionResult("abc"' "abc"' CompletionResultType.ProviderContainer' "abc"));                  completions.Add(new CompletionResult("'e f'"' "'e f'"' CompletionResultType.ProviderContainer' "'e f'"));                  completions.Add(new CompletionResult("a"' "a"' CompletionResultType.ProviderContainer' "a"));                  completions.Add(new CompletionResult("'a b" + Path.DirectorySeparatorChar + "'"' "a b" + Path.DirectorySeparatorChar + "'"' CompletionResultType.ProviderContainer' "a b" + Path.DirectorySeparatorChar + "'"));                  completions.Add(new CompletionResult("\"a b" + Path.DirectorySeparatorChar + "\""' "\"a b" + Path.DirectorySeparatorChar + "\""' CompletionResultType.ProviderContainer' "\"a b" + Path.DirectorySeparatorChar + "\""));                  break;              case "invalid result 1":                  replacementIndex = -1;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 2":                  replacementIndex = 0;                  replacementLength = -1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 3":                  replacementIndex = int.MaxValue;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 4":                  replacementIndex = 0;                  replacementLength = int.MaxValue;                  completions.Add(new CompletionResult("result"));                  break;              case "ls -H":                  replacementIndex = cursor;                  replacementLength = 0;                  completions.Add(new CompletionResult("idden"));                  break;              case "none":                  break;              }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentValues,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(1' argValue))'                  _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(2' argValue))'                  _.Alt_3' _.Ctrl_z' CheckThat(() => Assert.Equal(3' argValue))'                  _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(4' argValue))'                  _.Alt_5' _.Ctrl_z' CheckThat(() => Assert.Equal(5' argValue))'                  _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(6' argValue))'                  _.Alt_7' _.Ctrl_z' CheckThat(() => Assert.Equal(7' argValue))'                  _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(8' argValue))'                  _.Alt_9' _.Ctrl_z' CheckThat(() => Assert.Equal(9' argValue))'                  _.Alt_0' _.Ctrl_z' CheckThat(() => Assert.Equal(0' argValue))'                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_2' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(45678' argValue))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_Minus' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(-2' argValue))'                  _.Alt_Minus' _.Backspace' // Negative backspace should do nothing                  "a"' _.Home' _.Alt_Minus' _.Delete' // Negative delete should do nothing                  _.Delete' // Delete the 'a' we added above                  _.Alt_1' _.Alt_2' _.Ctrl_z' CheckThat(() => Assert.Equal(12' argValue))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-1' argValue))'                  _.Alt_1' _.Alt_2' _.Alt_Minus' _.Ctrl_z' CheckThat(() => Assert.Equal(-12' argValue))'                  _.Alt_2' _.Alt_Minus' _.Alt_3' _.Alt_4' _.Ctrl_z' CheckThat(() => Assert.Equal(-234' argValue))'                  _.Alt_3' _.Alt_4' _.Alt_Minus' _.Alt_5' _.Alt_6' _.Ctrl_z' CheckThat(() => Assert.Equal(-3456' argValue))'                  _.Alt_4' _.Alt_5' _.Alt_6' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(-45678' argValue))'                  _.Alt_9' _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(978' argValue))'                  _.Alt_Minus' _.Alt_Minus' _.Alt_7' _.Alt_8' _.Ctrl_z' CheckThat(() => Assert.Equal(78' argValue))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentPrompt,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -3"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 3"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -2"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 2"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentPrompt,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -3"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 3"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -2"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 2"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentPrompt,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -3"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 3"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -2"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 2"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentPrompt,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -3"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 3"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -2"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 2"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentPrompt,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -3"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 3"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -2"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 2"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentPrompt,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -3"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 3"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -2"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 2"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentPrompt,The following statement contains a magic number: Test(""' Keys(                  _.Alt_1' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 1"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -3"))'                  _.Ctrl_g'                  _.Alt_Minus' _.Alt_Minus' _.Alt_3' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 3"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: -2"))'                  _.Ctrl_g'                  _.Alt_2' _.Alt_Minus' _.Alt_Minus' CheckThat(() => AssertScreenIs(2' NextLine' "digit-argument: 2"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following statement contains a magic number: switch (i) {                      case 0: return _.Alt_0;                      case 1: return _.Alt_1;                      case 2: return _.Alt_2;                      case 3: return _.Alt_3;                      case 4: return _.Alt_4;                      case 5: return _.Alt_5;                      case 6: return _.Alt_6;                      case 7: return _.Alt_7;                      case 8: return _.Alt_8;                      case 9: return _.Alt_9;                  }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following statement contains a magic number: switch (i) {                      case 0: return _.Alt_0;                      case 1: return _.Alt_1;                      case 2: return _.Alt_2;                      case 3: return _.Alt_3;                      case 4: return _.Alt_4;                      case 5: return _.Alt_5;                      case 6: return _.Alt_6;                      case 7: return _.Alt_7;                      case 8: return _.Alt_8;                      case 9: return _.Alt_9;                  }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following statement contains a magic number: switch (i) {                      case 0: return _.Alt_0;                      case 1: return _.Alt_1;                      case 2: return _.Alt_2;                      case 3: return _.Alt_3;                      case 4: return _.Alt_4;                      case 5: return _.Alt_5;                      case 6: return _.Alt_6;                      case 7: return _.Alt_7;                      case 8: return _.Alt_8;                      case 9: return _.Alt_9;                  }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following statement contains a magic number: switch (i) {                      case 0: return _.Alt_0;                      case 1: return _.Alt_1;                      case 2: return _.Alt_2;                      case 3: return _.Alt_3;                      case 4: return _.Alt_4;                      case 5: return _.Alt_5;                      case 6: return _.Alt_6;                      case 7: return _.Alt_7;                      case 8: return _.Alt_8;                      case 9: return _.Alt_9;                  }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following statement contains a magic number: switch (i) {                      case 0: return _.Alt_0;                      case 1: return _.Alt_1;                      case 2: return _.Alt_2;                      case 3: return _.Alt_3;                      case 4: return _.Alt_4;                      case 5: return _.Alt_5;                      case 6: return _.Alt_6;                      case 7: return _.Alt_7;                      case 8: return _.Alt_8;                      case 9: return _.Alt_9;                  }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following statement contains a magic number: switch (i) {                      case 0: return _.Alt_0;                      case 1: return _.Alt_1;                      case 2: return _.Alt_2;                      case 3: return _.Alt_3;                      case 4: return _.Alt_4;                      case 5: return _.Alt_5;                      case 6: return _.Alt_6;                      case 7: return _.Alt_7;                      case 8: return _.Alt_8;                      case 9: return _.Alt_9;                  }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following statement contains a magic number: switch (i) {                      case 0: return _.Alt_0;                      case 1: return _.Alt_1;                      case 2: return _.Alt_2;                      case 3: return _.Alt_3;                      case 4: return _.Alt_4;                      case 5: return _.Alt_5;                      case 6: return _.Alt_6;                      case 7: return _.Alt_7;                      case 8: return _.Alt_8;                      case 9: return _.Alt_9;                  }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following statement contains a magic number: switch (i) {                      case 0: return _.Alt_0;                      case 1: return _.Alt_1;                      case 2: return _.Alt_2;                      case 3: return _.Alt_3;                      case 4: return _.Alt_4;                      case 5: return _.Alt_5;                      case 6: return _.Alt_6;                      case 7: return _.Alt_7;                      case 8: return _.Alt_8;                      case 9: return _.Alt_9;                  }
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following statement contains a magic number: line = new string('z'' i * 10);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following statement contains a magic number: i < 9
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SearchHistory,The following statement contains a magic number: Test("dosomething"' Keys(                  "d"'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })'                  _.DownArrow' CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() =>                  {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SearchHistory,The following statement contains a magic number: Test("dosomething"' Keys(                  "d"'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })'                  _.DownArrow' CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() =>                  {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SearchHistory,The following statement contains a magic number: Test("dosomething"' Keys(                  "d"'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })'                  _.DownArrow' CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() =>                  {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SearchHistory,The following statement contains a magic number: Test("dosomething"' Keys(                  "d"'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })'                  _.DownArrow' CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() =>                  {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistorySearchCursorMovesToEnd,The following statement contains a magic number: Test("dosomething"' Keys(                  "d"'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })'                  _.DownArrow' CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() =>                  {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistorySearchCursorMovesToEnd,The following statement contains a magic number: Test("dosomething"' Keys(                  "d"'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })'                  _.DownArrow' CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() =>                  {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistorySearchCursorMovesToEnd,The following statement contains a magic number: Test("dosomething"' Keys(                  "d"'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })'                  _.DownArrow' CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() =>                  {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistorySearchCursorMovesToEnd,The following statement contains a magic number: Test("dosomething"' Keys(                  "d"'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })'                  _.DownArrow' CheckThat(() => {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "ir");                      AssertCursorLeftIs(3);                  })'                  _.UpArrow'   CheckThat(() =>                  {                      AssertScreenIs(1'                          emphasisColors' 'd''                          TokenClassification.Command' "osomething");                      AssertCursorLeftIs(11);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo abc"' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "aa"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  'b'' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "ab"'                      TokenClassification.None' 'b''                      NextLine'                      statusColors' "bck-i-search: ab_"))'                  'c'' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "abc"'                      NextLine'                      statusColors' "bck-i-search: abc_"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo abc"' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "aa"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  'b'' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "ab"'                      TokenClassification.None' 'b''                      NextLine'                      statusColors' "bck-i-search: ab_"))'                  'c'' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "abc"'                      NextLine'                      statusColors' "bck-i-search: abc_"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo abc"' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "aa"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  'b'' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "ab"'                      TokenClassification.None' 'b''                      NextLine'                      statusColors' "bck-i-search: ab_"))'                  'c'' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "abc"'                      NextLine'                      statusColors' "bck-i-search: abc_"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo abc"' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "aa"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bb"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo abc"' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "aa"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bb"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo abc"' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "aa"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bb"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo abc"' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  'b''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "ab"'                      TokenClassification.None' 'c''                      NextLine'                      statusColors' "bck-i-search: ab_"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo abc"' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  'b''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "ab"'                      TokenClassification.None' 'c''                      NextLine'                      statusColors' "bck-i-search: ab_"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo zed"' Keys("echo zed"' _.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_g'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      TokenClassification.None' "zed"'                      NextLine))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo zed"' Keys("echo zed"' _.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_g'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      TokenClassification.None' "zed"'                      NextLine))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo zed"' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Alt_d' "zed"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo yabc"' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Escape' "y"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo aaa"' Keys(_.Ctrl_r'                  _.Backspace'  // Try backspace on empty search string                  "ab"' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "ab"'                      TokenClassification.None' 'b''                      NextLine'                      statusColors' "bck-i-search: ab_"))'                  _.Backspace'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "aa"'                      NextLine'                      statusColors' "bck-i-search: a_"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo aaa"' Keys(_.Ctrl_r'                  _.Backspace'  // Try backspace on empty search string                  "ab"' CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "ab"'                      TokenClassification.None' 'b''                      NextLine'                      statusColors' "bck-i-search: ab_"))'                  _.Backspace'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "aa"'                      NextLine'                      statusColors' "bck-i-search: a_"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test(""' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bzz"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      TokenClassification.None' "abzz"'                      NextLine'                      statusColors' "failed-bck-i-search: a_"))'                  _.Ctrl_s'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bzz"'                      NextLine'                      statusColors' "fwd-i-search: a_"))'                  _.Ctrl_g));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test(""' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bzz"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      TokenClassification.None' "abzz"'                      NextLine'                      statusColors' "failed-bck-i-search: a_"))'                  _.Ctrl_s'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bzz"'                      NextLine'                      statusColors' "fwd-i-search: a_"))'                  _.Ctrl_g));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test(""' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bzz"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      TokenClassification.None' "abzz"'                      NextLine'                      statusColors' "failed-bck-i-search: a_"))'                  _.Ctrl_s'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bzz"'                      NextLine'                      statusColors' "fwd-i-search: a_"))'                  _.Ctrl_g));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test(""' Keys(_.Ctrl_r'                  'a''                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bc"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bzz"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      TokenClassification.None' "abzz"'                      NextLine'                      statusColors' "failed-bck-i-search: a_"))'                  _.Ctrl_s'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' 'a''                      TokenClassification.None' "bzz"'                      NextLine'                      statusColors' "fwd-i-search: a_"))'                  _.Ctrl_g));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo aa1"' Keys(_.Ctrl_r' "zz"' _.Backspace' _.Backspace' "a1"'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " a"'                      emphasisColors' "a1"'                      NextLine'                      statusColors' "bck-i-search: a1_"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo aa2"' Keys(                  _.Ctrl_r'                  "aa"'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "2"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "1"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Backspace'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "a"'                      TokenClassification.None' "a2"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  'a'' _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "1"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Backspace));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo aa2"' Keys(                  _.Ctrl_r'                  "aa"'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "2"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "1"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Backspace'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "a"'                      TokenClassification.None' "a2"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  'a'' _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "1"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Backspace));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo aa2"' Keys(                  _.Ctrl_r'                  "aa"'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "2"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "1"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Backspace'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "a"'                      TokenClassification.None' "a2"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  'a'' _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "1"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Backspace));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,InteractiveHistorySearch,The following statement contains a magic number: Test("echo aa2"' Keys(                  _.Ctrl_r'                  "aa"'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "2"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "1"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Backspace'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "a"'                      TokenClassification.None' "a2"'                      NextLine'                      statusColors' "bck-i-search: a_"))'                  'a'' _.Ctrl_r'                  CheckThat(() => AssertScreenIs(2'                      TokenClassification.Command' "echo"'                      TokenClassification.None' " "'                      emphasisColors' "aa"'                      TokenClassification.None' "1"'                      NextLine'                      statusColors' "bck-i-search: aa_"))'                  _.Backspace));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistoryNoDuplicates,The following statement contains a magic number: Assert.Equal(5' PSConsoleReadLine.GetHistoryItems().Length);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistoryNoDuplicates,The following statement contains a magic number: Test("aaaa"' Keys(Enumerable.Repeat(_.UpArrow' 4)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistoryNoDuplicates,The following statement contains a magic number: Test("zzzz"' Keys(Enumerable.Repeat(_.UpArrow' 4)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistoryNoDuplicates,The following statement contains a magic number: Assert.Equal(3' PSConsoleReadLine.GetHistoryItems().Length);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistoryNoDuplicates,The following statement contains a magic number: Test("aaaa"' Keys(Enumerable.Repeat(_.UpArrow' 3)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistoryNoDuplicates,The following statement contains a magic number: Test("cccc"' Keys(                  Enumerable.Repeat(_.UpArrow' 3)'                  Enumerable.Repeat(_.DownArrow' 2)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistoryNoDuplicates,The following statement contains a magic number: Test("cccc"' Keys(                  Enumerable.Repeat(_.UpArrow' 3)'                  Enumerable.Repeat(_.DownArrow' 2)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistorySearchNoDuplicates,The following statement contains a magic number: Test("echo aaaa"' Keys("echo"' Enumerable.Repeat(_.UpArrow' 3)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistorySearchNoDuplicates,The following statement contains a magic number: Test("echo cccc"' Keys(                  "echo"'                  Enumerable.Repeat(_.UpArrow' 3)'                  Enumerable.Repeat(_.DownArrow' 2)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistorySearchNoDuplicates,The following statement contains a magic number: Test("echo cccc"' Keys(                  "echo"'                  Enumerable.Repeat(_.UpArrow' 3)'                  Enumerable.Repeat(_.DownArrow' 2)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistoryCount,The following statement contains a magic number: PSConsoleReadLine.SetOptions(new SetPSReadLineOption {MaximumHistoryCount = 3});
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistoryCount,The following statement contains a magic number: Test("aaaa"' Keys(Enumerable.Repeat(_.UpArrow' 4)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,HistoryCount,The following statement contains a magic number: Test("aaaa"' Keys(Enumerable.Repeat(_.UpArrow' 4)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViMovementAfterHistory,The following statement contains a magic number: Test("012 456 890"' Keys(                  _.Escape' "k"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,WhatIsKey,The following statement contains a magic number: Test(""' Keys(                  _.Alt_Question'                  CheckThat(() => AssertScreenIs(2' NextLine' "what-is-key:"))'                  'a''                  CheckThat(() => AssertScreenIs(2' NextLine' "a: SelfInsert - Insert the key typed"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,WhatIsKey,The following statement contains a magic number: Test(""' Keys(                  _.Alt_Question'                  CheckThat(() => AssertScreenIs(2' NextLine' "what-is-key:"))'                  'a''                  CheckThat(() => AssertScreenIs(2' NextLine' "a: SelfInsert - Insert the key typed"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,WhatIsKey,The following statement contains a magic number: Test(""' Keys(                  _.Alt_Question' _.F9'                  CheckThat(() => AssertScreenIs(2' NextLine' "F9: Key is unbound"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,WhatIsKey,The following statement contains a magic number: Test(""' Keys(                  _.Alt_Question' _.LeftArrow'                  CheckThat(() => AssertScreenIs(2' NextLine' "LeftArrow: BackwardChar - Move the cursor back one character"))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,WhatIsKey,The following statement contains a magic number: Test(""' Keys(                  _.Alt_Question' _.Ctrl_x' _.Ctrl_u'                  CheckThat(() => AssertScreenIs(2' NextLine' "Ctrl+x'Ctrl+u: Undo - Undo a previous edit"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShowKeyBindings,The following statement contains a magic number: Test(""' Keys(Enumerable.Repeat(_.Ctrl_Alt_Question' 3)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShowKeyBindings,The following statement contains a magic number: Test(""' Keys(Enumerable.Repeat(_.Ctrl_Alt_Question' 3)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShowKeyBindings,The following statement contains a magic number: Test(""' Keys(Enumerable.Repeat(_.Ctrl_Alt_Question' 3)));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,KillWord,The following statement contains a magic number: Test("echo  defabc"' Keys(                  _.Alt_d' // Test on empty input                  "echo abc def"'                  Enumerable.Repeat(_.LeftArrow' 7)'                  _.Alt_d' // Kill 'abc'                  _.End' _.Ctrl_y));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,BackwardKillWord,The following statement contains a magic number: Test("echo defabc "' Keys(                  _.Alt_Backspace' // Test on empty line                  "echo abc def"'                  Enumerable.Repeat(_.LeftArrow' 3)'                  _.Alt_Backspace'    // Kill 'abc '                  _.End' _.Ctrl_y));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,YankPop,The following statement contains a magic number: i < PSConsoleReadLineOptions.DefaultMaximumKillRingCount + 2
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellKillWord,The following statement contains a magic number: Test("echo  defabc"' Keys(                  _.Alt_d' // Test on empty input                  "echo abc def"'                  Enumerable.Repeat(_.LeftArrow' 7)'                  _.Alt_d' // Kill 'abc'                  _.End' _.Ctrl_y));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellBackwardKillWord,The following statement contains a magic number: Test("echo defabc "' Keys(                  _.Alt_Backspace' // Test on empty line                  "echo abc def"'                  Enumerable.Repeat(_.LeftArrow' 3)'                  _.Alt_Backspace'    // Kill 'abc '                  _.End' _.Ctrl_y));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ExchangePointAndMark,The following statement contains a magic number: Test("abcde"' Keys(                  "abcde"'                  exchangePointAndMark'                  CheckThat(() => AssertCursorLeftIs(0))'                  _.RightArrow'                  setMark'                  _.RightArrow'                  _.RightArrow'                  CheckThat(() => AssertCursorLeftIs(3))'                  exchangePointAndMark'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SelectAll,The following statement contains a magic number: Test(""' Keys(                  "echo foo"' _.Ctrl_LeftArrow' _.Ctrl_a'                  CheckThat(() => AssertScreenIs(1'                      TokenClassification.Command' Selected("echo foo")))'                  CheckThat(() => AssertCursorLeftIs(8))'                  _.Delete                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,EndOfLine,The following statement contains a magic number: buffer = new string(' '' _console.BufferWidth + 5);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,EndOfLine,The following statement contains a magic number: Test(buffer' Keys(                  buffer'                  _.Home'                  CheckThat(() => AssertCursorLeftIs(0))'                  _.End'                  CheckThat(() => AssertCursorLeftTopIs(5' 1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: int wrappedLength_1 = 9;
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: int wrappedLength_2 = 2;
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement_WithWrappedLines,The following statement contains a magic number: Test(""' Keys(                  ""'     _.Shift_Enter'        // physical line 0                  line_0' _.Shift_Enter'        // physical line 1                  line_1' _.Shift_Enter'        // physical line 2                  line_2' _.Shift_Enter'        // physical line 3                  wrappedLine_1' _.Shift_Enter' // physical line 4'5                  wrappedLine_2' _.Shift_Enter' // physical line 6'7                  line_3'                       // physical line 8                    // Starting at the end of the last line.                  // Verify that UpArrow goes to the end of the previous logical line.                  CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  // Press Up/Down/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_1' 5))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_2.Length' 3))'                  // Press Up/Up                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow'   CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length' 1))'                    // Move to left for 1 character' so the cursor now is not at the end of line.                  // Verify that DownArrow/UpArrow goes to the previous logical line at the same column.                  _.LeftArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                  // Press Down all the way to the end                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_3.Length' 8))'                  // Press Up all the way to the physical line 1                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(wrappedLength_2' 7))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 6))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 5))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_1.Length' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength + line_0.Length - 1' 1))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultilineCursorMovement,The following statement contains a magic number: Test(""' Keys(                  "4444"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "666666"' _.Shift_Enter'                  "4444"' _.Shift_Enter'                    // Starting at the end of the next to last line (because it's not blank)                  // Verify that Home first goes to the start of the line' then the start of the input.                  _.LeftArrow'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                    // Now (because we're at the start)' verify first End goes to end of the line                  // and the second End goes to the end of the input.                  _.End' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.End' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Home' _.Home'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 5))'                  _.LeftArrow' _.Home'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 0))'    // was (4'0)' but seems wrong                    // Make sure that movement between lines stays at the end of a line if it starts                  // at the end of a line                  _.End' _.End'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(4' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(4 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(0 + continutationPromptLength' 5))'                    _.Escape'                  _.Shift_Enter'                  "88888888"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "22"' _.Shift_Enter'                  "55555"' _.Shift_Enter'                  "88888888"'                  _.LeftArrow' _.LeftArrow'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.UpArrow' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 1))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 2))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(2 + continutationPromptLength' 3))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(5 + continutationPromptLength' 4))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(6 + continutationPromptLength' 5))'                    // Using the input previously entered' check for correct cursor movements when first line is blank                  _.Home' _.Home' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  _.DownArrow' CheckThat(() => AssertCursorLeftTopIs(8 + continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(continutationPromptLength' 1))'                  _.Home' CheckThat(() => AssertCursorLeftTopIs(0'0))'                    // Clear the input' we were just testing movement                  _.Escape                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CursorMovement,The following statement contains a magic number: Test("abcde"' Keys(                  // Left arrow at start of line.                  _.LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  "ace"'                  _.LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  'd''                  _.LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.LeftArrow' CheckThat(() => AssertCursorLeftIs(1))'                  'b'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CursorMovement,The following statement contains a magic number: Test("abcde"' Keys(                  // Left arrow at start of line.                  _.LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  "ace"'                  _.LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  'd''                  _.LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.LeftArrow' CheckThat(() => AssertCursorLeftIs(1))'                  'b'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CursorMovement,The following statement contains a magic number: Test(input' Keys(                  _.Alt_9' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  _.Alt_9' _.RightArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_5' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Alt_Minus' _.Alt_2' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_2' _.RightArrow' CheckThat(() => AssertCursorLeftIs(9))'                  _.Alt_Minus' _.Alt_7' _.RightArrow' CheckThat(() => AssertCursorLeftIs(2))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CursorMovement,The following statement contains a magic number: Test(input' Keys(                  _.Alt_9' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  _.Alt_9' _.RightArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_5' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Alt_Minus' _.Alt_2' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_2' _.RightArrow' CheckThat(() => AssertCursorLeftIs(9))'                  _.Alt_Minus' _.Alt_7' _.RightArrow' CheckThat(() => AssertCursorLeftIs(2))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CursorMovement,The following statement contains a magic number: Test(input' Keys(                  _.Alt_9' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  _.Alt_9' _.RightArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_5' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Alt_Minus' _.Alt_2' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_2' _.RightArrow' CheckThat(() => AssertCursorLeftIs(9))'                  _.Alt_Minus' _.Alt_7' _.RightArrow' CheckThat(() => AssertCursorLeftIs(2))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CursorMovement,The following statement contains a magic number: Test(input' Keys(                  _.Alt_9' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  _.Alt_9' _.RightArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_5' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Alt_Minus' _.Alt_2' _.LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_2' _.RightArrow' CheckThat(() => AssertCursorLeftIs(9))'                  _.Alt_Minus' _.Alt_7' _.RightArrow' CheckThat(() => AssertCursorLeftIs(2))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,GotoBrace,The following statement contains a magic number: Test("$a[11]"' Keys("$a[11]"' _.LeftArrow' _.Ctrl_RBracket' CheckThat(() => AssertCursorLeftIs(2))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,GotoBrace,The following statement contains a magic number: Test("(11)"' Keys("(11)"' _.Home' _.Ctrl_RBracket' CheckThat(() => AssertCursorLeftIs(3))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,GotoBrace,The following statement contains a magic number: Test("$a[11]"' Keys("$a[11]"' _.Home' _.RightArrow' _.RightArrow' _.Ctrl_RBracket' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,GotoBrace,The following statement contains a magic number: Test("{11}"' Keys("{11}"' _.Home' _.Ctrl_RBracket' CheckThat(() => AssertCursorLeftIs(3))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,GotoBrace,The following statement contains a magic number: TestMustDing(""' Keys(                  "'()'"' _.LeftArrow' _.LeftArrow'                  _.Ctrl_RBracket' CheckThat(() => AssertCursorLeftIs(2))'                  _.Ctrl_c' InputAcceptedNow));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearch,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"' _.Home'                  _.F3' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.F3' '|'' CheckThat(() => AssertCursorLeftIs(12))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearch,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"' _.Home'                  _.F3' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.F3' '|'' CheckThat(() => AssertCursorLeftIs(12))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchEmacs,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"' _.Home'                  _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.End'                  _.Alt_Minus' _.Alt_2' _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Home'                  _.Alt_2' _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchEmacs,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"' _.Home'                  _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.End'                  _.Alt_Minus' _.Alt_2' _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Home'                  _.Alt_2' _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchEmacs,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"' _.Home'                  _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.End'                  _.Alt_Minus' _.Alt_2' _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Home'                  _.Alt_2' _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchEmacs,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"' _.Home'                  _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.End'                  _.Alt_Minus' _.Alt_2' _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Home'                  _.Alt_2' _.Ctrl_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchApi,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"'                  _.Home'                  _.Ctrl_z' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_z' CheckThat(() => AssertCursorLeftIs(12))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchApi,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"'                  _.Home'                  _.Ctrl_z' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_z' CheckThat(() => AssertCursorLeftIs(12))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchBackward,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"'                  _.Shift_F3' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.Shift_F3' '|'' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchBackward,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"'                  _.Shift_F3' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.Shift_F3' '|'' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchBackwardEmacs,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"'                  _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Home'                  _.Alt_Minus' _.Alt_2' _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.End'                  _.Alt_2' _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchBackwardEmacs,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"'                  _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Home'                  _.Alt_Minus' _.Alt_2' _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.End'                  _.Alt_2' _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchBackwardEmacs,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"'                  _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Home'                  _.Alt_Minus' _.Alt_2' _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.End'                  _.Alt_2' _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchBackwardEmacs,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"'                  _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))'                  _.Home'                  _.Alt_Minus' _.Alt_2' _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(12))'                  _.End'                  _.Alt_2' _.Ctrl_Alt_RBracket' '|'' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchBackwardApi,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"'                  _.Ctrl_z' CheckThat(() => AssertCursorLeftIs(12))'                  _.Ctrl_z' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CharacterSearchBackwardApi,The following statement contains a magic number: Test("cmd1 | cmd2 | cmd3"' Keys(                  "cmd1 | cmd2 | cmd3"'                  _.Ctrl_z' CheckThat(() => AssertCursorLeftIs(12))'                  _.Ctrl_z' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012 456 890"'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'w''                  CheckThat(() => AssertCursorLeftIs(8))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'w''                  CheckThat(() => AssertCursorLeftIs(10))'                  'b''                  CheckThat(() => AssertCursorLeftIs(8))'                  'b''                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2w"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "w2b"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'b''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'W''                  CheckThat(() => AssertCursorLeftIs(8))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'W''                  CheckThat(() => AssertCursorLeftIs(10))'                  'B''                  CheckThat(() => AssertCursorLeftIs(8))'                  'B''                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "2W"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "W2B"'                  CheckThat(() => AssertCursorLeftIs(4))'                  'B''                  CheckThat(() => AssertCursorLeftIs(0))'                  "3W"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'e''                  CheckThat(() => AssertCursorLeftIs(2))'                  'e''                  CheckThat(() => AssertCursorLeftIs(6))'                  'e''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2e"'                  CheckThat(() => AssertCursorLeftIs(6))'                  "3B"'                  CheckThat(() => AssertCursorLeftIs(0))'                  'E''                  CheckThat(() => AssertCursorLeftIs(2))'                  'E''                  CheckThat(() => AssertCursorLeftIs(6))'                  'E''                  CheckThat(() => AssertCursorLeftIs(10))'                  "3b"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "2E"'                  CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 12 45 78"' Keys(                  " 12 45 78"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(7))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 12 45 78"' Keys(                  " 12 45 78"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(7))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 12 45 78"' Keys(                  " 12 45 78"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(7))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 12 45 78"' Keys(                  " 12 45 78"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(7))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456 890"' Keys(                  "012"' _.Spacebar' "456"' _.Spacebar' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "b"' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(5))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "b"' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(5))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "b"' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(5))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "b"' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(5))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "B"' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(5))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "B"' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(5))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "B"' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(5))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "B"' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(5))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(5))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(5))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(5))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(5))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(5))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012  567  012"' Keys(                  "012"' _.Spacebar' _.Spacebar' "567"' _.Spacebar' _.Spacebar' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(5))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678"' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))'                  "W"' CheckThat(() => AssertCursorLeftIs(8))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(6))'                  "b"' CheckThat(() => AssertCursorLeftIs(1))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(1))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(6))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(6))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(1))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "W"' CheckThat(() => AssertCursorLeftIs(6))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(9))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))'                  "e"' CheckThat(() => AssertCursorLeftIs(9))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  " 123  678  "' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  " 123  678  "' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  " 123  678  "' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  " 123  678  "' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  " 123  678  "' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  " 123  678  "' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "E"' CheckThat(() => AssertCursorLeftIs(3))'                  "E"' CheckThat(() => AssertCursorLeftIs(8))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "E"' CheckThat(() => AssertCursorLeftIs(3))'                  "E"' CheckThat(() => AssertCursorLeftIs(8))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "E"' CheckThat(() => AssertCursorLeftIs(3))'                  "E"' CheckThat(() => AssertCursorLeftIs(8))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "E"' CheckThat(() => AssertCursorLeftIs(3))'                  "E"' CheckThat(() => AssertCursorLeftIs(8))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "E"' CheckThat(() => AssertCursorLeftIs(3))'                  "E"' CheckThat(() => AssertCursorLeftIs(8))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test(" 123  678  "' Keys(                  _.Spacebar' "123"' _.Spacebar' _.Spacebar' "678"' _.Spacebar' _.Spacebar' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "E"' CheckThat(() => AssertCursorLeftIs(3))'                  "E"' CheckThat(() => AssertCursorLeftIs(8))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))'                  "E"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViWordMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "02e"' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(7))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(7))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(7))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(7))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(7))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(7))'                  "b"' CheckThat(() => AssertCursorLeftIs(4))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(7))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(7))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(7))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(7))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(7))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(7))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(7))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(4))'                  "w"' CheckThat(() => AssertCursorLeftIs(7))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012.456.890"' Keys(                  "012"' _.Period' "456"' _.Period' "890"' CheckThat(() => AssertCursorLeftIs(11))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(10))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))'                  "W"' CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "b"' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(5))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "b"' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(5))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "b"' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(5))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "b"' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(5))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "b"' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(5))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "b"' CheckThat(() => AssertCursorLeftIs(10))'                  "b"' CheckThat(() => AssertCursorLeftIs(8))'                  "b"' CheckThat(() => AssertCursorLeftIs(5))'                  "b"' CheckThat(() => AssertCursorLeftIs(3))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))'                  "b"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "w"' CheckThat(() => AssertCursorLeftIs(3))'                  "w"' CheckThat(() => AssertCursorLeftIs(5))'                  "w"' CheckThat(() => AssertCursorLeftIs(8))'                  "w"' CheckThat(() => AssertCursorLeftIs(10))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))'                  "w"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test("012..567..012"' Keys(                  "012"' _.Period' _.Period' "567"' _.Period' _.Period' "012"' CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))'                  "W"' CheckThat(() => AssertCursorLeftIs(12))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(5))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(5))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(5))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(5))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(5))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(5))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(5))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "e"' CheckThat(() => AssertCursorLeftIs(3))'                  "e"' CheckThat(() => AssertCursorLeftIs(5))'                  "e"' CheckThat(() => AssertCursorLeftIs(8))'                  "e"' CheckThat(() => AssertCursorLeftIs(10))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))'                  "e"' CheckThat(() => AssertCursorLeftIs(13))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "E"' CheckThat(() => AssertCursorLeftIs(13))'                  "E"' CheckThat(() => AssertCursorLeftIs(13))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "E"' CheckThat(() => AssertCursorLeftIs(13))'                  "E"' CheckThat(() => AssertCursorLeftIs(13))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "E"' CheckThat(() => AssertCursorLeftIs(13))'                  "E"' CheckThat(() => AssertCursorLeftIs(13))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViDotWordMovement,The following statement contains a magic number: Test(" 123..678..123"' Keys(                  _.Spacebar' "123"' _.Period' _.Period' "678"' _.Period' _.Period' "123"' CheckThat(() => AssertCursorLeftIs(14))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(13))'                  "0"' CheckThat(() => AssertCursorLeftIs(0))'                  "E"' CheckThat(() => AssertCursorLeftIs(13))'                  "E"' CheckThat(() => AssertCursorLeftIs(13))'                  "B"' CheckThat(() => AssertCursorLeftIs(1))'                  "B"' CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test("ac"' Keys("ac"' CheckThat(() => AssertCursorLeftIs(2))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test("ace"' Keys("ace"' CheckThat(() => AssertCursorLeftIs(3))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test(" abcde"' Keys(                  "ace"'                  CheckThat(() => AssertCursorLeftIs(3))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(2))'                  'h''                  CheckThat(() => AssertCursorLeftIs(1))'                  "ib"'                  CheckThat(() => AssertCursorLeftIs(2))'                  _.Escape'                  'l''                  CheckThat(() => AssertCursorLeftIs(2))'                  "ad"'                  CheckThat(() => AssertCursorLeftIs(4))'                  _.Escape'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(4))'                  'l''                  CheckThat(() => AssertCursorLeftIs(4))'                  "3h"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2l"'                  CheckThat(() => AssertCursorLeftIs(3))'                  '0''                  CheckThat(() => AssertCursorLeftIs(0))'                  '$''                  CheckThat(() => AssertCursorLeftIs(4))'                  "0i"'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Escape'                  _.Dollar'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Uphat'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test(" abcde"' Keys(                  "ace"'                  CheckThat(() => AssertCursorLeftIs(3))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(2))'                  'h''                  CheckThat(() => AssertCursorLeftIs(1))'                  "ib"'                  CheckThat(() => AssertCursorLeftIs(2))'                  _.Escape'                  'l''                  CheckThat(() => AssertCursorLeftIs(2))'                  "ad"'                  CheckThat(() => AssertCursorLeftIs(4))'                  _.Escape'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(4))'                  'l''                  CheckThat(() => AssertCursorLeftIs(4))'                  "3h"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2l"'                  CheckThat(() => AssertCursorLeftIs(3))'                  '0''                  CheckThat(() => AssertCursorLeftIs(0))'                  '$''                  CheckThat(() => AssertCursorLeftIs(4))'                  "0i"'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Escape'                  _.Dollar'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Uphat'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test(" abcde"' Keys(                  "ace"'                  CheckThat(() => AssertCursorLeftIs(3))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(2))'                  'h''                  CheckThat(() => AssertCursorLeftIs(1))'                  "ib"'                  CheckThat(() => AssertCursorLeftIs(2))'                  _.Escape'                  'l''                  CheckThat(() => AssertCursorLeftIs(2))'                  "ad"'                  CheckThat(() => AssertCursorLeftIs(4))'                  _.Escape'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(4))'                  'l''                  CheckThat(() => AssertCursorLeftIs(4))'                  "3h"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2l"'                  CheckThat(() => AssertCursorLeftIs(3))'                  '0''                  CheckThat(() => AssertCursorLeftIs(0))'                  '$''                  CheckThat(() => AssertCursorLeftIs(4))'                  "0i"'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Escape'                  _.Dollar'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Uphat'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test(" abcde"' Keys(                  "ace"'                  CheckThat(() => AssertCursorLeftIs(3))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(2))'                  'h''                  CheckThat(() => AssertCursorLeftIs(1))'                  "ib"'                  CheckThat(() => AssertCursorLeftIs(2))'                  _.Escape'                  'l''                  CheckThat(() => AssertCursorLeftIs(2))'                  "ad"'                  CheckThat(() => AssertCursorLeftIs(4))'                  _.Escape'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(4))'                  'l''                  CheckThat(() => AssertCursorLeftIs(4))'                  "3h"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2l"'                  CheckThat(() => AssertCursorLeftIs(3))'                  '0''                  CheckThat(() => AssertCursorLeftIs(0))'                  '$''                  CheckThat(() => AssertCursorLeftIs(4))'                  "0i"'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Escape'                  _.Dollar'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Uphat'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test(" abcde"' Keys(                  "ace"'                  CheckThat(() => AssertCursorLeftIs(3))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(2))'                  'h''                  CheckThat(() => AssertCursorLeftIs(1))'                  "ib"'                  CheckThat(() => AssertCursorLeftIs(2))'                  _.Escape'                  'l''                  CheckThat(() => AssertCursorLeftIs(2))'                  "ad"'                  CheckThat(() => AssertCursorLeftIs(4))'                  _.Escape'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(4))'                  'l''                  CheckThat(() => AssertCursorLeftIs(4))'                  "3h"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2l"'                  CheckThat(() => AssertCursorLeftIs(3))'                  '0''                  CheckThat(() => AssertCursorLeftIs(0))'                  '$''                  CheckThat(() => AssertCursorLeftIs(4))'                  "0i"'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Escape'                  _.Dollar'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Uphat'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test(" abcde"' Keys(                  "ace"'                  CheckThat(() => AssertCursorLeftIs(3))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(2))'                  'h''                  CheckThat(() => AssertCursorLeftIs(1))'                  "ib"'                  CheckThat(() => AssertCursorLeftIs(2))'                  _.Escape'                  'l''                  CheckThat(() => AssertCursorLeftIs(2))'                  "ad"'                  CheckThat(() => AssertCursorLeftIs(4))'                  _.Escape'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(4))'                  'l''                  CheckThat(() => AssertCursorLeftIs(4))'                  "3h"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2l"'                  CheckThat(() => AssertCursorLeftIs(3))'                  '0''                  CheckThat(() => AssertCursorLeftIs(0))'                  '$''                  CheckThat(() => AssertCursorLeftIs(4))'                  "0i"'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Escape'                  _.Dollar'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Uphat'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test(" abcde"' Keys(                  "ace"'                  CheckThat(() => AssertCursorLeftIs(3))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(2))'                  'h''                  CheckThat(() => AssertCursorLeftIs(1))'                  "ib"'                  CheckThat(() => AssertCursorLeftIs(2))'                  _.Escape'                  'l''                  CheckThat(() => AssertCursorLeftIs(2))'                  "ad"'                  CheckThat(() => AssertCursorLeftIs(4))'                  _.Escape'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(4))'                  'l''                  CheckThat(() => AssertCursorLeftIs(4))'                  "3h"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2l"'                  CheckThat(() => AssertCursorLeftIs(3))'                  '0''                  CheckThat(() => AssertCursorLeftIs(0))'                  '$''                  CheckThat(() => AssertCursorLeftIs(4))'                  "0i"'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Escape'                  _.Dollar'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Uphat'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test(" abcde"' Keys(                  "ace"'                  CheckThat(() => AssertCursorLeftIs(3))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(2))'                  'h''                  CheckThat(() => AssertCursorLeftIs(1))'                  "ib"'                  CheckThat(() => AssertCursorLeftIs(2))'                  _.Escape'                  'l''                  CheckThat(() => AssertCursorLeftIs(2))'                  "ad"'                  CheckThat(() => AssertCursorLeftIs(4))'                  _.Escape'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(4))'                  'l''                  CheckThat(() => AssertCursorLeftIs(4))'                  "3h"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2l"'                  CheckThat(() => AssertCursorLeftIs(3))'                  '0''                  CheckThat(() => AssertCursorLeftIs(0))'                  '$''                  CheckThat(() => AssertCursorLeftIs(4))'                  "0i"'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Escape'                  _.Dollar'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Uphat'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test(" abcde"' Keys(                  "ace"'                  CheckThat(() => AssertCursorLeftIs(3))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(2))'                  'h''                  CheckThat(() => AssertCursorLeftIs(1))'                  "ib"'                  CheckThat(() => AssertCursorLeftIs(2))'                  _.Escape'                  'l''                  CheckThat(() => AssertCursorLeftIs(2))'                  "ad"'                  CheckThat(() => AssertCursorLeftIs(4))'                  _.Escape'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(4))'                  'l''                  CheckThat(() => AssertCursorLeftIs(4))'                  "3h"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2l"'                  CheckThat(() => AssertCursorLeftIs(3))'                  '0''                  CheckThat(() => AssertCursorLeftIs(0))'                  '$''                  CheckThat(() => AssertCursorLeftIs(4))'                  "0i"'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Escape'                  _.Dollar'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Uphat'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCursorMovement,The following statement contains a magic number: Test(" abcde"' Keys(                  "ace"'                  CheckThat(() => AssertCursorLeftIs(3))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(2))'                  'h''                  CheckThat(() => AssertCursorLeftIs(1))'                  "ib"'                  CheckThat(() => AssertCursorLeftIs(2))'                  _.Escape'                  'l''                  CheckThat(() => AssertCursorLeftIs(2))'                  "ad"'                  CheckThat(() => AssertCursorLeftIs(4))'                  _.Escape'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(4))'                  'l''                  CheckThat(() => AssertCursorLeftIs(4))'                  "3h"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2l"'                  CheckThat(() => AssertCursorLeftIs(3))'                  '0''                  CheckThat(() => AssertCursorLeftIs(0))'                  '$''                  CheckThat(() => AssertCursorLeftIs(4))'                  "0i"'                  _.Spacebar'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Escape'                  _.Dollar'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Uphat'                  CheckThat(() => AssertCursorLeftIs(1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: Test("0[2(4{6]8)a}c"' Keys(                  "0[2(4{6]8)a}c"'                  CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  'h'' CheckThat(() => AssertCursorLeftIs(11))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(5))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(11))'                  "hh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  "hh"' CheckThat(() => AssertCursorLeftIs(7))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(1))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: Test("0[2(4{6]8)a}c"' Keys(                  "0[2(4{6]8)a}c"'                  CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  'h'' CheckThat(() => AssertCursorLeftIs(11))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(5))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(11))'                  "hh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  "hh"' CheckThat(() => AssertCursorLeftIs(7))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(1))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: Test("0[2(4{6]8)a}c"' Keys(                  "0[2(4{6]8)a}c"'                  CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  'h'' CheckThat(() => AssertCursorLeftIs(11))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(5))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(11))'                  "hh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  "hh"' CheckThat(() => AssertCursorLeftIs(7))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(1))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: Test("0[2(4{6]8)a}c"' Keys(                  "0[2(4{6]8)a}c"'                  CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  'h'' CheckThat(() => AssertCursorLeftIs(11))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(5))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(11))'                  "hh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  "hh"' CheckThat(() => AssertCursorLeftIs(7))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(1))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: Test("0[2(4{6]8)a}c"' Keys(                  "0[2(4{6]8)a}c"'                  CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  'h'' CheckThat(() => AssertCursorLeftIs(11))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(5))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(11))'                  "hh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  "hh"' CheckThat(() => AssertCursorLeftIs(7))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(1))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: Test("0[2(4{6]8)a}c"' Keys(                  "0[2(4{6]8)a}c"'                  CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  'h'' CheckThat(() => AssertCursorLeftIs(11))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(5))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(11))'                  "hh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  "hh"' CheckThat(() => AssertCursorLeftIs(7))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(1))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: Test("0[2(4{6]8)a}c"' Keys(                  "0[2(4{6]8)a}c"'                  CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  'h'' CheckThat(() => AssertCursorLeftIs(11))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(5))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(11))'                  "hh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  "hh"' CheckThat(() => AssertCursorLeftIs(7))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(1))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: Test("0[2(4{6]8)a}c"' Keys(                  "0[2(4{6]8)a}c"'                  CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  'h'' CheckThat(() => AssertCursorLeftIs(11))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(5))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(11))'                  "hh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  "hh"' CheckThat(() => AssertCursorLeftIs(7))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(1))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: Test("0[2(4{6]8)a}c"' Keys(                  "0[2(4{6]8)a}c"'                  CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  'h'' CheckThat(() => AssertCursorLeftIs(11))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(5))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(11))'                  "hh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  "hh"' CheckThat(() => AssertCursorLeftIs(7))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(1))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: Test("0[2(4{6]8)a}c"' Keys(                  "0[2(4{6]8)a}c"'                  CheckThat(() => AssertCursorLeftIs(13))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(12))'                  'h'' CheckThat(() => AssertCursorLeftIs(11))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(5))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(11))'                  "hh"' CheckThat(() => AssertCursorLeftIs(9))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(3))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(9))'                  "hh"' CheckThat(() => AssertCursorLeftIs(7))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(1))'                  _.Percent' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: TestMustDing(""' Keys(                      input'                      CheckThat(() => AssertCursorLeftIs(5))'                      _.Escape'                      CheckThat(() => AssertCursorLeftIs(4))'                      _.Percent'                      CheckThat(() => AssertCursorLeftIs(4))'                      "ddi"                      ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: TestMustDing(""' Keys(                      input'                      CheckThat(() => AssertCursorLeftIs(5))'                      _.Escape'                      CheckThat(() => AssertCursorLeftIs(4))'                      _.Percent'                      CheckThat(() => AssertCursorLeftIs(4))'                      "ddi"                      ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViGotoBrace,The following statement contains a magic number: TestMustDing(""' Keys(                      input'                      CheckThat(() => AssertCursorLeftIs(5))'                      _.Escape'                      CheckThat(() => AssertCursorLeftIs(4))'                      _.Percent'                      CheckThat(() => AssertCursorLeftIs(4))'                      "ddi"                      ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "f8"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2f8"'                  CheckThat(() => AssertCursorLeftIs(18))'                  "F1;"'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(11))'                  "0f8;"'                  CheckThat(() => AssertCursorLeftIs(18))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(8))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "f8"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2f8"'                  CheckThat(() => AssertCursorLeftIs(18))'                  "F1;"'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(11))'                  "0f8;"'                  CheckThat(() => AssertCursorLeftIs(18))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(8))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "f8"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2f8"'                  CheckThat(() => AssertCursorLeftIs(18))'                  "F1;"'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(11))'                  "0f8;"'                  CheckThat(() => AssertCursorLeftIs(18))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(8))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "f8"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2f8"'                  CheckThat(() => AssertCursorLeftIs(18))'                  "F1;"'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(11))'                  "0f8;"'                  CheckThat(() => AssertCursorLeftIs(18))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(8))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "f8"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2f8"'                  CheckThat(() => AssertCursorLeftIs(18))'                  "F1;"'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(11))'                  "0f8;"'                  CheckThat(() => AssertCursorLeftIs(18))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(8))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "f8"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2f8"'                  CheckThat(() => AssertCursorLeftIs(18))'                  "F1;"'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(11))'                  "0f8;"'                  CheckThat(() => AssertCursorLeftIs(18))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(8))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "f8"'                  CheckThat(() => AssertCursorLeftIs(8))'                  "F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2F1"'                  CheckThat(() => AssertCursorLeftIs(1))'                  "2f8"'                  CheckThat(() => AssertCursorLeftIs(18))'                  "F1;"'                  CheckThat(() => AssertCursorLeftIs(1))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(11))'                  "0f8;"'                  CheckThat(() => AssertCursorLeftIs(18))'                  _.Comma'                  CheckThat(() => AssertCursorLeftIs(8))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "t8"'                  CheckThat(() => AssertCursorLeftIs(7))'                  "T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "2t8"'                  CheckThat(() => AssertCursorLeftIs(17))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "t8"'                  CheckThat(() => AssertCursorLeftIs(7))'                  "T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "2t8"'                  CheckThat(() => AssertCursorLeftIs(17))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "t8"'                  CheckThat(() => AssertCursorLeftIs(7))'                  "T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "2t8"'                  CheckThat(() => AssertCursorLeftIs(17))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "t8"'                  CheckThat(() => AssertCursorLeftIs(7))'                  "T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "2t8"'                  CheckThat(() => AssertCursorLeftIs(17))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "t8"'                  CheckThat(() => AssertCursorLeftIs(7))'                  "T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "2t8"'                  CheckThat(() => AssertCursorLeftIs(17))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: Test(""' Keys(                  "0123456789"'                  CheckThat(() => AssertCursorLeftIs(10))'                  _.Escape'                  "0"'                  CheckThat(() => AssertCursorLeftIs(0))'                  "t8"'                  CheckThat(() => AssertCursorLeftIs(7))'                  "T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "$a0123456789"'                  CheckThat(() => AssertCursorLeftIs(20))'                  _.Escape'                  "2T1"'                  CheckThat(() => AssertCursorLeftIs(2))'                  "2t8"'                  CheckThat(() => AssertCursorLeftIs(17))'                  "dd"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: TestMustDing("01234"' Keys(                  "01234"'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Escape'                  "F9"'                  CheckThat(() => AssertCursorLeftIs(4))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: TestMustDing("01234"' Keys(                  "01234"'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Escape'                  "F9"'                  CheckThat(() => AssertCursorLeftIs(4))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: TestMustDing("01234"' Keys(                  "01234"'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Escape'                  "0f9"'                  CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: TestMustDing("01234"' Keys(                  "01234"'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Escape'                  "T9"'                  CheckThat(() => AssertCursorLeftIs(4))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: TestMustDing("01234"' Keys(                  "01234"'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Escape'                  "T9"'                  CheckThat(() => AssertCursorLeftIs(4))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharacterSearch,The following statement contains a magic number: TestMustDing("01234"' Keys(                  "01234"'                  CheckThat(() => AssertCursorLeftIs(5))'                  _.Escape'                  "0t9"'                  CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViColumnMovement,The following statement contains a magic number: Test("0123456789012345678901234567890"' Keys(                  "0123456789012345678901234567890"'                  CheckThat(() => AssertCursorLeftIs(31))'                  _.Escape'                  "11|"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "1|"'                  CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViColumnMovement,The following statement contains a magic number: Test("0123456789012345678901234567890"' Keys(                  "0123456789012345678901234567890"'                  CheckThat(() => AssertCursorLeftIs(31))'                  _.Escape'                  "11|"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "1|"'                  CheckThat(() => AssertCursorLeftIs(0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViColumnMovement,The following statement contains a magic number: TestMustDing("0123456789012345678901234567890"' Keys(                  "0123456789012345678901234567890"'                  CheckThat(() => AssertCursorLeftIs(31))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(30))'                 "11|"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "33|"'                  CheckThat(() => AssertCursorLeftIs(30))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViColumnMovement,The following statement contains a magic number: TestMustDing("0123456789012345678901234567890"' Keys(                  "0123456789012345678901234567890"'                  CheckThat(() => AssertCursorLeftIs(31))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(30))'                 "11|"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "33|"'                  CheckThat(() => AssertCursorLeftIs(30))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViColumnMovement,The following statement contains a magic number: TestMustDing("0123456789012345678901234567890"' Keys(                  "0123456789012345678901234567890"'                  CheckThat(() => AssertCursorLeftIs(31))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(30))'                 "11|"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "33|"'                  CheckThat(() => AssertCursorLeftIs(30))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViColumnMovement,The following statement contains a magic number: TestMustDing("0123456789012345678901234567890"' Keys(                  "0123456789012345678901234567890"'                  CheckThat(() => AssertCursorLeftIs(31))'                  _.Escape'                  CheckThat(() => AssertCursorLeftIs(30))'                 "11|"'                  CheckThat(() => AssertCursorLeftIs(10))'                  "33|"'                  CheckThat(() => AssertCursorLeftIs(30))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharDelete,The following statement contains a magic number: Test(""' Keys(                  "abcdefg"' _.Escape' CheckThat(() => AssertLineIs("abcdefg"))'                  "0dfg"' CheckThat(() => AssertLineIs(""))'                  'u'' CheckThat(() => AssertLineIs("abcdefg"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0dff"' CheckThat(() => AssertLineIs("g"))'                  'u'' CheckThat(() => AssertLineIs("abcdefg"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0dfg"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharDelete,The following statement contains a magic number: Test(""' Keys(                  "abcdefg"' _.Escape' CheckThat(() => AssertLineIs("abcdefg"))'                  "0dfg"' CheckThat(() => AssertLineIs(""))'                  'u'' CheckThat(() => AssertLineIs("abcdefg"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0dff"' CheckThat(() => AssertLineIs("g"))'                  'u'' CheckThat(() => AssertLineIs("abcdefg"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0dfg"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharDelete,The following statement contains a magic number: Test(""' Keys(                  "abcdefg"' _.Escape' CheckThat(() => AssertLineIs("abcdefg"))'                  "dFa"' _.Escape' CheckThat(() => AssertLineIs(""))'                  'u'' CheckThat(() => AssertCursorLeftIs(6))'                  "dFb"' CheckThat(() => AssertLineIs("a"))'                  'u'' CheckThat(() => AssertCursorLeftIs(6))'                  "dFa"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharDelete,The following statement contains a magic number: Test(""' Keys(                  "abcdefg"' _.Escape' CheckThat(() => AssertLineIs("abcdefg"))'                  "dFa"' _.Escape' CheckThat(() => AssertLineIs(""))'                  'u'' CheckThat(() => AssertCursorLeftIs(6))'                  "dFb"' CheckThat(() => AssertLineIs("a"))'                  'u'' CheckThat(() => AssertCursorLeftIs(6))'                  "dFa"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharDelete,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "0dt6"' CheckThat(() => AssertLineIs("6"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0dt5"' CheckThat(() => AssertLineIs("56"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))'                  "0ldt6"' CheckThat(() => AssertLineIs("06"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))'                  "0ldt5"' CheckThat(() => AssertLineIs("056"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharDelete,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "dT0"' CheckThat(() => AssertLineIs("0"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hdT0"' CheckThat(() => AssertLineIs("06"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0dT0"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViCharDelete,The following statement contains a magic number: Test("0123456"' Keys(                  "0123456"' _.Escape' CheckThat(() => AssertLineIs("0123456"))'                  "dT0"' CheckThat(() => AssertLineIs("0"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "hdT0"' CheckThat(() => AssertLineIs("06"))'                  'u'' CheckThat(() => AssertLineIs("0123456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "0dT0"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViForwardChar,The following statement contains a magic number: Test(buffer' Keys(                  _.DQuote' _.Enter'                  "line2"' _.Enter'                  "line3"' _.Enter'                  _.DQuote'                  _.Escape'                  _.k' _.k' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 0))'                  // move right                  _.l' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 1))'                  "10l"' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 4))              ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViMoveToFirstLogicalLineThenJumpToLastLogicalLine,The following statement contains a magic number: Test(buffer' Keys(                  _.DQuote' "Multiline buffer"' _.Enter'                  " containing an empty line"' _.Enter'                  _.Enter'                  "and text aligned on the left"' _.Enter'                  _.DQuote'                  _.Escape' CheckThat(() => AssertCursorTopIs(4))'                  "gg"' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  'G'' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength' 4))              ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViMoveToFirstLogicalLineThenJumpToLastLogicalLine,The following statement contains a magic number: Test(buffer' Keys(                  _.DQuote' "Multiline buffer"' _.Enter'                  " containing an empty line"' _.Enter'                  _.Enter'                  "and text aligned on the left"' _.Enter'                  _.DQuote'                  _.Escape' CheckThat(() => AssertCursorTopIs(4))'                  "gg"' CheckThat(() => AssertCursorLeftTopIs(0' 0))'                  'G'' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength' 4))              ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViMoveToFirstNonBlankOfLogicalLineThenJumpToEndOfLogicalLine,The following statement contains a magic number: Test(buffer' Keys(                  _.DQuote' _.Enter' "  line"' _.DQuote' _.Escape' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 6))'                  _.Underbar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 2' 1))'                  _.Dollar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 6' 1))'                  // also works forward                  '0'' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength' 1))'                  _.Underbar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 2' 1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViMoveToFirstNonBlankOfLogicalLineThenJumpToEndOfLogicalLine,The following statement contains a magic number: Test(buffer' Keys(                  _.DQuote' _.Enter' "  line"' _.DQuote' _.Escape' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 6))'                  _.Underbar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 2' 1))'                  _.Dollar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 6' 1))'                  // also works forward                  '0'' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength' 1))'                  _.Underbar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 2' 1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViMoveToFirstNonBlankOfLogicalLineThenJumpToEndOfLogicalLine,The following statement contains a magic number: Test(buffer' Keys(                  _.DQuote' _.Enter' "  line"' _.DQuote' _.Escape' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 6))'                  _.Underbar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 2' 1))'                  _.Dollar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 6' 1))'                  // also works forward                  '0'' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength' 1))'                  _.Underbar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 2' 1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViMoveToFirstNonBlankOfLogicalLineThenJumpToEndOfLogicalLine,The following statement contains a magic number: Test(buffer' Keys(                  _.DQuote' _.Enter' "  line"' _.DQuote' _.Escape' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 6))'                  _.Underbar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 2' 1))'                  _.Dollar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 6' 1))'                  // also works forward                  '0'' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength' 1))'                  _.Underbar' CheckThat(() => AssertCursorLeftTopIs(continuationPrefixLength + 2' 1))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ContinuationPrompt,The following statement contains a magic number: Test(""' Keys(                  "{\n}"'                  CheckThat(() =>                      AssertScreenIs(2'                          TokenClassification.None' '{''                          NextLine'                          Tuple.Create(_console.ForegroundColor' _console.BackgroundColor)'                          PSConsoleReadLineOptions.DefaultContinuationPrompt'                          TokenClassification.None' '}'))'                  _.Ctrl_c'                  InputAcceptedNow                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ContinuationPrompt,The following statement contains a magic number: Test(""' Keys(                  "{\n}"'                  CheckThat(() => AssertScreenIs(2' TokenClassification.None' '{'' NextLine' '}' ))'                  _.Ctrl_c'                  InputAcceptedNow                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ContinuationPrompt,The following statement contains a magic number: Test(""' Keys(                  "{\n}"'                  CheckThat(() =>                      AssertScreenIs(2'                          TokenClassification.None' '{''                          NextLine'                          Tuple.Create(ConsoleColor.Magenta' ConsoleColor.DarkYellow)'                          continuationPrompt'                          TokenClassification.None' '}'))'                  _.Ctrl_c'                  InputAcceptedNow                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DeleteAPI,The following statement contains a magic number: Test("echo"' Keys(                  "echo zzz"'                  CheckThat(() => PSConsoleReadLine.Delete(4' 4))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DeleteAPI,The following statement contains a magic number: Test("echo"' Keys(                  "echo zzz"'                  CheckThat(() => PSConsoleReadLine.Delete(4' 4))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ReplaceAPI,The following statement contains a magic number: Test("echo zzz"' Keys(                  "echo foobar"'                  CheckThat(() => PSConsoleReadLine.Replace(5' 6' "zzz"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ReplaceAPI,The following statement contains a magic number: Test("echo zzz"' Keys(                  "echo foobar"'                  CheckThat(() => PSConsoleReadLine.Replace(5' 6' "zzz"))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ReplaceAPI,The following statement contains a magic number: Test("echo"' Keys(                  "echo"'                  CheckThat(() =>                  {                      try { PSConsoleReadLine.Replace(-1' 6' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Negative start should throw");                        try { PSConsoleReadLine.Replace(11' 6' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Start beyond end of buffer should throw");                        try { PSConsoleReadLine.Replace(0' 12' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Length too long should throw");                        try { PSConsoleReadLine.Replace(0' -1' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Negative length should throw");                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ReplaceAPI,The following statement contains a magic number: Test("echo"' Keys(                  "echo"'                  CheckThat(() =>                  {                      try { PSConsoleReadLine.Replace(-1' 6' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Negative start should throw");                        try { PSConsoleReadLine.Replace(11' 6' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Start beyond end of buffer should throw");                        try { PSConsoleReadLine.Replace(0' 12' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Length too long should throw");                        try { PSConsoleReadLine.Replace(0' -1' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Negative length should throw");                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ReplaceAPI,The following statement contains a magic number: Test("echo"' Keys(                  "echo"'                  CheckThat(() =>                  {                      try { PSConsoleReadLine.Replace(-1' 6' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Negative start should throw");                        try { PSConsoleReadLine.Replace(11' 6' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Start beyond end of buffer should throw");                        try { PSConsoleReadLine.Replace(0' 12' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Length too long should throw");                        try { PSConsoleReadLine.Replace(0' -1' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Negative length should throw");                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ReplaceAPI,The following statement contains a magic number: Test("echo"' Keys(                  "echo"'                  CheckThat(() =>                  {                      try { PSConsoleReadLine.Replace(-1' 6' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Negative start should throw");                        try { PSConsoleReadLine.Replace(11' 6' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Start beyond end of buffer should throw");                        try { PSConsoleReadLine.Replace(0' 12' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Length too long should throw");                        try { PSConsoleReadLine.Replace(0' -1' "zzz"); }                      catch (ArgumentException) { throws = true; }                      Assert.True(throws' "Negative length should throw");                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,GetBufferStateAPI,The following statement contains a magic number: Test("echo"' Keys(                  "echo"'                  CheckThat(() =>                  {                      PSConsoleReadLine.GetBufferState(out var input' out var cursor);                      Assert.Equal("echo"' input);                      Assert.Equal(4' cursor);                        PSConsoleReadLine.GetBufferState(out var ast' out var tokens' out var parseErrors' out cursor);                      Assert.NotNull(ast);                      Assert.True(ast is ScriptBlockAst sbast && sbast.EndBlock.Statements.Count == 1);                      Assert.Equal(TokenFlags.CommandName' (tokens[0].TokenFlags & TokenFlags.CommandName));                      Assert.Empty(parseErrors);                      Assert.Equal(4' cursor);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,GetBufferStateAPI,The following statement contains a magic number: Test("echo"' Keys(                  "echo"'                  CheckThat(() =>                  {                      PSConsoleReadLine.GetBufferState(out var input' out var cursor);                      Assert.Equal("echo"' input);                      Assert.Equal(4' cursor);                        PSConsoleReadLine.GetBufferState(out var ast' out var tokens' out var parseErrors' out cursor);                      Assert.NotNull(ast);                      Assert.True(ast is ScriptBlockAst sbast && sbast.EndBlock.Statements.Count == 1);                      Assert.Equal(TokenFlags.CommandName' (tokens[0].TokenFlags & TokenFlags.CommandName));                      Assert.Empty(parseErrors);                      Assert.Equal(4' cursor);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,GetSelectionStateAPI,The following statement contains a magic number: Test("echo"' Keys(                  "echo"'                  CheckThat(() =>                  {                      PSConsoleReadLine.GetSelectionState(out var start' out var length);                      Assert.Equal(-1' start);                      Assert.Equal(-1' length);                  })'                  _.Shift_Home'                  CheckThat(() =>                  {                      PSConsoleReadLine.GetSelectionState(out var start' out var length);                      Assert.Equal(0' start);                      Assert.Equal(4' length);                  })'                  _.Shift_RightArrow'                  CheckThat(() =>                  {                      PSConsoleReadLine.GetSelectionState(out var start' out var length);                      Assert.Equal(1' start);                      Assert.Equal(3' length);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,GetSelectionStateAPI,The following statement contains a magic number: Test("echo"' Keys(                  "echo"'                  CheckThat(() =>                  {                      PSConsoleReadLine.GetSelectionState(out var start' out var length);                      Assert.Equal(-1' start);                      Assert.Equal(-1' length);                  })'                  _.Shift_Home'                  CheckThat(() =>                  {                      PSConsoleReadLine.GetSelectionState(out var start' out var length);                      Assert.Equal(0' start);                      Assert.Equal(4' length);                  })'                  _.Shift_RightArrow'                  CheckThat(() =>                  {                      PSConsoleReadLine.GetSelectionState(out var start' out var length);                      Assert.Equal(1' start);                      Assert.Equal(3' length);                  })));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SetCursorPositionAPI,The following statement contains a magic number: Test("echo abc"' Keys(                  "ec a"'                  CheckThat(() => PSConsoleReadLine.SetCursorPosition(2))'                  "ho"'                  CheckThat(() => PSConsoleReadLine.SetCursorPosition(100))'                  "bc"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,SetCursorPositionAPI,The following statement contains a magic number: Test("echo abc"' Keys(                  "ec a"'                  CheckThat(() => PSConsoleReadLine.SetCursorPosition(2))'                  "ho"'                  CheckThat(() => PSConsoleReadLine.SetCursorPosition(100))'                  "bc"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ClearScreen,The following statement contains a magic number: AssertCursorTopIs(3);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ClearScreen,The following statement contains a magic number: AssertCursorTopIs(4);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,Render,The following statement contains a magic number: Test("{}"' Keys(                  '{'' _.Enter'                  _.Backspace' CheckThat(() => AssertScreenIs(2' TokenClassification.None' '{'' NextLine))'                  '}'));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultiLine,The following statement contains a magic number: Test("{\n\nd\n}"' Keys(                  '{''                  _.Enter'      CheckThat(() => AssertCursorTopIs(1))'                  'd''                  _.Enter'      CheckThat(() => AssertCursorTopIs(2))'                  _.Home'                  _.RightArrow' CheckThat(() => AssertCursorLeftTopIs(1' 0))'                  _.Enter'      CheckThat(() => AssertCursorLeftTopIs(continationPrefixLength' 1))'                  _.End'        CheckThat(() => AssertCursorLeftTopIs(continationPrefixLength' 3))'                  '}'));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultiLine,The following statement contains a magic number: Test("{\n\nd\n}"' Keys(                  '{''                  _.Enter'      CheckThat(() => AssertCursorTopIs(1))'                  'd''                  _.Enter'      CheckThat(() => AssertCursorTopIs(2))'                  _.Home'                  _.RightArrow' CheckThat(() => AssertCursorLeftTopIs(1' 0))'                  _.Enter'      CheckThat(() => AssertCursorLeftTopIs(continationPrefixLength' 1))'                  _.End'        CheckThat(() => AssertCursorLeftTopIs(continationPrefixLength' 3))'                  '}'));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MultiLine,The following statement contains a magic number: Test("{\n}"' Keys(                  "{\n}"'                  _.Home'                  _.Enter' CheckThat(() => AssertCursorLeftTopIs(0' 2))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CaptureScreen,The following statement contains a magic number: AssertCursorTopIs(4);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CaptureScreen,The following statement contains a magic number: Test(""' Keys(                  // Basic up/down arrows                  _.Ctrl_z' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[2]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.DownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                    // Select multiple lines                  _.Ctrl_z' _.UpArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Select multiple lines' then shorten selection                  _.Ctrl_z' _.UpArrow' shiftUpArrow' shiftUpArrow' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' shiftDownArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Test trying to arrow down past end of buffer (arrowing past top of buffer covered above)                  _.Ctrl_z' Enumerable.Repeat(_.DownArrow' _console.BufferHeight)' _.Escape)'                  resetCursor: false);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CaptureScreen,The following statement contains a magic number: Test(""' Keys(                  // Basic up/down arrows                  _.Ctrl_z' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[2]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.DownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                    // Select multiple lines                  _.Ctrl_z' _.UpArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Select multiple lines' then shorten selection                  _.Ctrl_z' _.UpArrow' shiftUpArrow' shiftUpArrow' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' shiftDownArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Test trying to arrow down past end of buffer (arrowing past top of buffer covered above)                  _.Ctrl_z' Enumerable.Repeat(_.DownArrow' _console.BufferHeight)' _.Escape)'                  resetCursor: false);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CaptureScreen,The following statement contains a magic number: Test(""' Keys(                  // Basic up/down arrows                  _.Ctrl_z' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[2]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.DownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                    // Select multiple lines                  _.Ctrl_z' _.UpArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Select multiple lines' then shorten selection                  _.Ctrl_z' _.UpArrow' shiftUpArrow' shiftUpArrow' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' shiftDownArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Test trying to arrow down past end of buffer (arrowing past top of buffer covered above)                  _.Ctrl_z' Enumerable.Repeat(_.DownArrow' _console.BufferHeight)' _.Escape)'                  resetCursor: false);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CaptureScreen,The following statement contains a magic number: Test(""' Keys(                  // Basic up/down arrows                  _.Ctrl_z' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[2]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.DownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                    // Select multiple lines                  _.Ctrl_z' _.UpArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Select multiple lines' then shorten selection                  _.Ctrl_z' _.UpArrow' shiftUpArrow' shiftUpArrow' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' shiftDownArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Test trying to arrow down past end of buffer (arrowing past top of buffer covered above)                  _.Ctrl_z' Enumerable.Repeat(_.DownArrow' _console.BufferHeight)' _.Escape)'                  resetCursor: false);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CaptureScreen,The following statement contains a magic number: Test(""' Keys(                  // Basic up/down arrows                  _.Ctrl_z' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[2]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.DownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                    // Select multiple lines                  _.Ctrl_z' _.UpArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Select multiple lines' then shorten selection                  _.Ctrl_z' _.UpArrow' shiftUpArrow' shiftUpArrow' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' shiftDownArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Test trying to arrow down past end of buffer (arrowing past top of buffer covered above)                  _.Ctrl_z' Enumerable.Repeat(_.DownArrow' _console.BufferHeight)' _.Escape)'                  resetCursor: false);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CaptureScreen,The following statement contains a magic number: Test(""' Keys(                  // Basic up/down arrows                  _.Ctrl_z' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[2]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.DownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                    // Select multiple lines                  _.Ctrl_z' _.UpArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Select multiple lines' then shorten selection                  _.Ctrl_z' _.UpArrow' shiftUpArrow' shiftUpArrow' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' shiftDownArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Test trying to arrow down past end of buffer (arrowing past top of buffer covered above)                  _.Ctrl_z' Enumerable.Repeat(_.DownArrow' _console.BufferHeight)' _.Escape)'                  resetCursor: false);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CaptureScreen,The following statement contains a magic number: Test(""' Keys(                  // Basic up/down arrows                  _.Ctrl_z' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[2]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.DownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                    // Select multiple lines                  _.Ctrl_z' _.UpArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Select multiple lines' then shorten selection                  _.Ctrl_z' _.UpArrow' shiftUpArrow' shiftUpArrow' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' shiftDownArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Test trying to arrow down past end of buffer (arrowing past top of buffer covered above)                  _.Ctrl_z' Enumerable.Repeat(_.DownArrow' _console.BufferHeight)' _.Escape)'                  resetCursor: false);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CaptureScreen,The following statement contains a magic number: Test(""' Keys(                  // Basic up/down arrows                  _.Ctrl_z' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[2]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.DownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                    // Select multiple lines                  _.Ctrl_z' _.UpArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Select multiple lines' then shorten selection                  _.Ctrl_z' _.UpArrow' shiftUpArrow' shiftUpArrow' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' shiftDownArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Test trying to arrow down past end of buffer (arrowing past top of buffer covered above)                  _.Ctrl_z' Enumerable.Repeat(_.DownArrow' _console.BufferHeight)' _.Escape)'                  resetCursor: false);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,CaptureScreen,The following statement contains a magic number: Test(""' Keys(                  // Basic up/down arrows                  _.Ctrl_z' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.Enter' CheckThat(() => AssertScreenCaptureClipboardIs(line[2]))'                  _.Ctrl_z' _.UpArrow' _.UpArrow' _.DownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[3]))'                    // Select multiple lines                  _.Ctrl_z' _.UpArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Select multiple lines' then shorten selection                  _.Ctrl_z' _.UpArrow' shiftUpArrow' shiftUpArrow' shiftDownArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[2]' line[3]))'                  _.Ctrl_z' Enumerable.Repeat(_.UpArrow' 10)' shiftDownArrow' shiftDownArrow' shiftUpArrow' _.Enter'                  CheckThat(() => AssertScreenCaptureClipboardIs(line[0]' line[1]))'                    // Test trying to arrow down past end of buffer (arrowing past top of buffer covered above)                  _.Ctrl_z' Enumerable.Repeat(_.DownArrow' _console.BufferHeight)' _.Escape)'                  resetCursor: false);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,TestSetup,The following statement contains a magic number: var options = new SetPSReadLineOption              {                  AddToHistoryHandler               = PSConsoleReadLineOptions.DefaultAddToHistoryHandler'                  AnsiEscapeTimeout                 = 0'                  BellStyle                         = PSConsoleReadLineOptions.DefaultBellStyle'                  CompletionQueryItems              = PSConsoleReadLineOptions.DefaultCompletionQueryItems'                  ContinuationPrompt                = PSConsoleReadLineOptions.DefaultContinuationPrompt'                  DingDuration                      = 1'  // Make tests virtually silent when they ding                  DingTone                          = 37' // Make tests virtually silent when they ding                  ExtraPromptLineCount              = PSConsoleReadLineOptions.DefaultExtraPromptLineCount'                  HistoryNoDuplicates               = PSConsoleReadLineOptions.DefaultHistoryNoDuplicates'                  HistorySaveStyle                  = HistorySaveStyle.SaveNothing'                  HistorySearchCaseSensitive        = PSConsoleReadLineOptions.DefaultHistorySearchCaseSensitive'                  HistorySearchCursorMovesToEnd     = PSConsoleReadLineOptions.DefaultHistorySearchCursorMovesToEnd'                  MaximumHistoryCount               = PSConsoleReadLineOptions.DefaultMaximumHistoryCount'                  MaximumKillRingCount              = PSConsoleReadLineOptions.DefaultMaximumKillRingCount'                  ShowToolTips                      = PSConsoleReadLineOptions.DefaultShowToolTips'                  WordDelimiters                    = PSConsoleReadLineOptions.DefaultWordDelimiters'                  PromptText                        = new [] {""}'                  Colors = new Hashtable {                      { "ContinuationPrompt"'       MakeCombinedColor(_console.ForegroundColor' _console.BackgroundColor) }'                      { "Emphasis"'                 MakeCombinedColor(PSConsoleReadLineOptions.DefaultEmphasisColor' _console.BackgroundColor) }'                      { "Error"'                    MakeCombinedColor(ConsoleColor.Red' ConsoleColor.DarkRed) }'                  }              };
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ValidEscapeSequences,The following statement contains a magic number: var map = new WindowsAnsiCharMap(1000);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,AltSequences,The following statement contains a magic number: var map = new WindowsAnsiCharMap(1000);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,AltSequences,The following statement contains a magic number: map.EscapeTimeout = 1000;
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,PartialEscapeSequences,The following statement contains a magic number: var map = new WindowsAnsiCharMap(1000);
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,PartialEscapeSequences,The following statement contains a magic number: CheckPartialEscapeInput(map' 5' StringToCKI("\x1b[1;2"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,PartialEscapeSequences,The following statement contains a magic number: CheckPartialEscapeInput(map' 4' StringToCKI("\x1b[11"));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,BackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(12))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,BackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(12))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,BackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(12))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,BackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_3' _.Alt_3' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_2' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_1' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_0' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_2' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,BackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_3' _.Alt_3' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_2' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_1' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_0' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_2' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,BackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_3' _.Alt_3' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_2' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_1' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_0' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_2' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,BackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_3' _.Alt_3' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_2' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_1' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_0' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_Minus' _.Alt_1' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_2' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,EmacsBackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(12))'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,EmacsBackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(12))'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,EmacsBackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(12))'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(7))'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,EmacsBackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_2' _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_1' _.Alt_b' CheckThat(() => AssertCursorLeftIs(12))'                  _.Alt_2' _.Alt_b' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_Minus' _.Alt_2' _.Alt_b' CheckThat(() => AssertCursorLeftIs(10))'                  _.Alt_4' _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,EmacsBackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_2' _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_1' _.Alt_b' CheckThat(() => AssertCursorLeftIs(12))'                  _.Alt_2' _.Alt_b' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_Minus' _.Alt_2' _.Alt_b' CheckThat(() => AssertCursorLeftIs(10))'                  _.Alt_4' _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,EmacsBackwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_2' _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Alt_1' _.Alt_b' CheckThat(() => AssertCursorLeftIs(12))'                  _.Alt_2' _.Alt_b' CheckThat(() => AssertCursorLeftIs(2))'                  _.Alt_Minus' _.Alt_2' _.Alt_b' CheckThat(() => AssertCursorLeftIs(10))'                  _.Alt_4' _.Alt_b' CheckThat(() => AssertCursorLeftIs(0))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ForwardWord,The following statement contains a magic number: Test(input' Keys(                   input' _.Home' _.Alt_f'                   CheckThat(() => AssertCursorLeftIs(4))'                   _.RightArrow' _.Alt_f'                   CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ForwardWord,The following statement contains a magic number: Test(input' Keys(                   input' _.Home' _.Alt_f'                   CheckThat(() => AssertCursorLeftIs(4))'                   _.RightArrow' _.Alt_f'                   CheckThat(() => AssertCursorLeftIs(10))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ForwardWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  _.Alt_4' _.Alt_f' CheckThat(() => AssertCursorLeftIs(20))'                  _.Alt_3' _.Alt_Minus' _.Alt_f' CheckThat(() => AssertCursorLeftIs(7))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ForwardWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  _.Alt_4' _.Alt_f' CheckThat(() => AssertCursorLeftIs(20))'                  _.Alt_3' _.Alt_Minus' _.Alt_f' CheckThat(() => AssertCursorLeftIs(7))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellBackwardWord,The following statement contains a magic number: Test(input' Keys(                  input'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(29))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(15))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellBackwardWord,The following statement contains a magic number: Test(input' Keys(                  input'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(29))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(15))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellBackwardWord,The following statement contains a magic number: Test(input' Keys(                  input'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(29))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(15))'                  _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellBackwardWord,The following statement contains a magic number: Test(input' Keys(                  input'                  _.Alt_3' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(15))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellBackwardWord,The following statement contains a magic number: Test(input' Keys(                  input'                  _.Alt_3' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Alt_1' _.Alt_Minus' _.Ctrl_LeftArrow' CheckThat(() => AssertCursorLeftIs(15))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test("aaa  bbb  ccc"' Keys(                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(0))'                  "aaa  bbb  ccc"'                  _.Home' CheckThat(() => AssertCursorLeftIs(0))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.LeftArrow' _.LeftArrow' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.LeftArrow' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(10))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(13))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test("aaa  bbb  ccc"' Keys(                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(0))'                  "aaa  bbb  ccc"'                  _.Home' CheckThat(() => AssertCursorLeftIs(0))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.LeftArrow' _.LeftArrow' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.LeftArrow' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(10))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(13))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test("aaa  bbb  ccc"' Keys(                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(0))'                  "aaa  bbb  ccc"'                  _.Home' CheckThat(() => AssertCursorLeftIs(0))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.LeftArrow' _.LeftArrow' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.LeftArrow' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(10))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(13))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test("aaa  bbb  ccc"' Keys(                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(0))'                  "aaa  bbb  ccc"'                  _.Home' CheckThat(() => AssertCursorLeftIs(0))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.LeftArrow' _.LeftArrow' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.LeftArrow' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(10))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(13))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test("aaa  bbb  ccc"' Keys(                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(0))'                  "aaa  bbb  ccc"'                  _.Home' CheckThat(() => AssertCursorLeftIs(0))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.LeftArrow' _.LeftArrow' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.LeftArrow' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(10))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(13))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home' Enumerable.Repeat(_.RightArrow' 5)'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(15))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(18))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(23))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home' Enumerable.Repeat(_.RightArrow' 5)'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(15))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(18))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(23))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home' Enumerable.Repeat(_.RightArrow' 5)'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(15))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(18))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(23))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home' Enumerable.Repeat(_.RightArrow' 5)'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(15))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(18))'                  _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(23))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  _.Alt_3' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(18))'                  _.Home'                  _.Alt_4' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(23))'                  _.Alt_Minus' _.Alt_3' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  _.Alt_3' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(18))'                  _.Home'                  _.Alt_4' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(23))'                  _.Alt_Minus' _.Alt_3' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellNextWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  _.Alt_3' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(18))'                  _.Home'                  _.Alt_4' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(23))'                  _.Alt_Minus' _.Alt_3' _.Ctrl_RightArrow' CheckThat(() => AssertCursorLeftIs(5))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellForwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Ctrl_a' CheckThat(() => AssertCursorLeftIs(0))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(3))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(8))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(13))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellForwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Ctrl_a' CheckThat(() => AssertCursorLeftIs(0))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(3))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(8))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(13))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellForwardWord,The following statement contains a magic number: Test(input' Keys(                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(0))'                  input'                  _.Ctrl_a' CheckThat(() => AssertCursorLeftIs(0))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(3))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(8))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(13))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellForwardWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  Enumerable.Repeat(_.RightArrow' 5)'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(14))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(28))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(31))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellForwardWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  Enumerable.Repeat(_.RightArrow' 5)'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(14))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(28))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(31))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellForwardWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  Enumerable.Repeat(_.RightArrow' 5)'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(14))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(28))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(31))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellForwardWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  Enumerable.Repeat(_.RightArrow' 5)'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(14))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(28))'                  _.Alt_f' CheckThat(() => AssertCursorLeftIs(31))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellForwardWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  _.Alt_2' _.Alt_f' CheckThat(() => AssertCursorLeftIs(14))'                  _.RightArrow' _.Alt_2' _.Alt_f' CheckThat(() => AssertCursorLeftIs(25))'                  _.Alt_Minus' _.Alt_4' _.Alt_f' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellForwardWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  _.Alt_2' _.Alt_f' CheckThat(() => AssertCursorLeftIs(14))'                  _.RightArrow' _.Alt_2' _.Alt_f' CheckThat(() => AssertCursorLeftIs(25))'                  _.Alt_Minus' _.Alt_4' _.Alt_f' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ShellForwardWord,The following statement contains a magic number: Test(input' Keys(                  input' _.Home'                  _.Alt_2' _.Alt_f' CheckThat(() => AssertCursorLeftIs(14))'                  _.RightArrow' _.Alt_2' _.Alt_f' CheckThat(() => AssertCursorLeftIs(25))'                  _.Alt_Minus' _.Alt_4' _.Alt_f' CheckThat(() => AssertCursorLeftIs(5))));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("test()b"' Keys(                  "test()b"' _.Escape' CheckThat(() => AssertLineIs("test()b"))' CheckThat(() => AssertCursorLeftIs(6))'                  'b'' CheckThat(() => AssertCursorLeftIs(4))'                  "cw"' CheckThat(() => AssertCursorLeftIs(4))'                  "[]"' _.Escape' CheckThat(() => AssertLineIs("test[]b"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("test()b"' Keys(                  "test()b"' _.Escape' CheckThat(() => AssertLineIs("test()b"))' CheckThat(() => AssertCursorLeftIs(6))'                  'b'' CheckThat(() => AssertCursorLeftIs(4))'                  "cw"' CheckThat(() => AssertCursorLeftIs(4))'                  "[]"' _.Escape' CheckThat(() => AssertLineIs("test[]b"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("test()b"' Keys(                  "test()b"' _.Escape' CheckThat(() => AssertLineIs("test()b"))' CheckThat(() => AssertCursorLeftIs(6))'                  'b'' CheckThat(() => AssertCursorLeftIs(4))'                  "cw"' CheckThat(() => AssertCursorLeftIs(4))'                  "[]"' _.Escape' CheckThat(() => AssertLineIs("test[]b"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("test()"' Keys(                  "test()"' CheckThat(() => AssertLineIs("test()"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(5))'                  'b'' CheckThat(() => AssertCursorLeftIs(4))'                  "cw"' CheckThat(() => AssertLineIs("test"))'                  "[]"' _.Escape' CheckThat(() => AssertLineIs("test[]"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("test()"' Keys(                  "test()"' CheckThat(() => AssertLineIs("test()"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(5))'                  'b'' CheckThat(() => AssertCursorLeftIs(4))'                  "cw"' CheckThat(() => AssertLineIs("test"))'                  "[]"' _.Escape' CheckThat(() => AssertLineIs("test[]"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("test()"' Keys(                  "test()"' CheckThat(() => AssertLineIs("test()"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(5))'                  'b'' CheckThat(() => AssertCursorLeftIs(4))'                  "dw"' CheckThat(() => AssertLineIs("test"))'                  "ubcw"' CheckThat(() => AssertLineIs("test"))'                  "[]"' _.Escape' CheckThat(() => AssertLineIs("test[]"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("test()"' Keys(                  "test()"' CheckThat(() => AssertLineIs("test()"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(5))'                  'b'' CheckThat(() => AssertCursorLeftIs(4))'                  "dw"' CheckThat(() => AssertLineIs("test"))'                  "ubcw"' CheckThat(() => AssertLineIs("test"))'                  "[]"' _.Escape' CheckThat(() => AssertLineIs("test[]"))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test(@"vim .\xx\VisualEditing.vi.cs"' Keys(                  "vim "' _.Period' _.Backslash' "PSReadLine"' _.Backslash' "VisualEditing"' _.Period' "vi"' _.Period' "cs"'                  CheckThat(() => AssertLineIs(@"vim .\PSReadLine\VisualEditing.vi.cs"))'                  _.Escape' "Bll"' CheckThat(() => AssertCursorLeftIs(6))'                  "cw"' _.Escape' CheckThat(() => AssertCursorLeftIs(5))' CheckThat(() => AssertLineIs(@"vim .\\VisualEditing.vi.cs"))'                  'u'' CheckThat(() => AssertCursorLeftIs(16))' CheckThat(() => AssertLineIs(@"vim .\PSReadLine\VisualEditing.vi.cs"))'                  "bcwxx"' _.Escape' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test(@"vim .\xx\VisualEditing.vi.cs"' Keys(                  "vim "' _.Period' _.Backslash' "PSReadLine"' _.Backslash' "VisualEditing"' _.Period' "vi"' _.Period' "cs"'                  CheckThat(() => AssertLineIs(@"vim .\PSReadLine\VisualEditing.vi.cs"))'                  _.Escape' "Bll"' CheckThat(() => AssertCursorLeftIs(6))'                  "cw"' _.Escape' CheckThat(() => AssertCursorLeftIs(5))' CheckThat(() => AssertLineIs(@"vim .\\VisualEditing.vi.cs"))'                  'u'' CheckThat(() => AssertCursorLeftIs(16))' CheckThat(() => AssertLineIs(@"vim .\PSReadLine\VisualEditing.vi.cs"))'                  "bcwxx"' _.Escape' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test(@"vim .\xx\VisualEditing.vi.cs"' Keys(                  "vim "' _.Period' _.Backslash' "PSReadLine"' _.Backslash' "VisualEditing"' _.Period' "vi"' _.Period' "cs"'                  CheckThat(() => AssertLineIs(@"vim .\PSReadLine\VisualEditing.vi.cs"))'                  _.Escape' "Bll"' CheckThat(() => AssertCursorLeftIs(6))'                  "cw"' _.Escape' CheckThat(() => AssertCursorLeftIs(5))' CheckThat(() => AssertLineIs(@"vim .\\VisualEditing.vi.cs"))'                  'u'' CheckThat(() => AssertCursorLeftIs(16))' CheckThat(() => AssertLineIs(@"vim .\PSReadLine\VisualEditing.vi.cs"))'                  "bcwxx"' _.Escape' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test(@"vim .\xx\VisualEditing.vi.cs"' Keys(                  "vim "' _.Period' _.Backslash' "PSReadLine"' _.Backslash' "VisualEditing"' _.Period' "vi"' _.Period' "cs"'                  CheckThat(() => AssertLineIs(@"vim .\PSReadLine\VisualEditing.vi.cs"))'                  _.Escape' "Bll"' CheckThat(() => AssertCursorLeftIs(6))'                  "cw"' _.Escape' CheckThat(() => AssertCursorLeftIs(5))' CheckThat(() => AssertLineIs(@"vim .\\VisualEditing.vi.cs"))'                  'u'' CheckThat(() => AssertCursorLeftIs(16))' CheckThat(() => AssertLineIs(@"vim .\PSReadLine\VisualEditing.vi.cs"))'                  "bcwxx"' _.Escape' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("$response.Headers['location']"' Keys(                  _.Dollar' "response"' _.Period' "Headers"' _.LBracket' _.SQuote' "location"' _.SQuote' _.RBracket' _.Escape'                  CheckThat(() => AssertLineIs("$response.Headers['location']"))'                  "bb"' CheckThat(() => AssertCursorLeftIs(19))'                  "cw"' CheckThat(() => AssertLineIs("$response.Headers['']"))'                  "territory"' CheckThat(() => AssertLineIs("$response.Headers['territory']"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(27))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("$response.Headers['location']"' Keys(                  _.Dollar' "response"' _.Period' "Headers"' _.LBracket' _.SQuote' "location"' _.SQuote' _.RBracket' _.Escape'                  CheckThat(() => AssertLineIs("$response.Headers['location']"))'                  "bb"' CheckThat(() => AssertCursorLeftIs(19))'                  "cw"' CheckThat(() => AssertLineIs("$response.Headers['']"))'                  "territory"' CheckThat(() => AssertLineIs("$response.Headers['territory']"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(27))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("test(int)"' Keys(                  "test(int)"' CheckThat(() => AssertLineIs("test(int)"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  'b'' CheckThat(() => AssertCursorLeftIs(5))'                  "cw"' CheckThat(() => AssertLineIs("test()"))' CheckThat(() => AssertCursorLeftIs(5))'                  "float"' CheckThat(() => AssertLineIs("test(float)"))'                  _.Escape' 'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("test(int)"' Keys(                  "test(int)"' CheckThat(() => AssertLineIs("test(int)"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  'b'' CheckThat(() => AssertCursorLeftIs(5))'                  "cw"' CheckThat(() => AssertLineIs("test()"))' CheckThat(() => AssertCursorLeftIs(5))'                  "float"' CheckThat(() => AssertLineIs("test(float)"))'                  _.Escape' 'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViChangeWord,The following statement contains a magic number: Test("test(int)"' Keys(                  "test(int)"' CheckThat(() => AssertLineIs("test(int)"))'                  _.Escape' CheckThat(() => AssertCursorLeftIs(8))'                  'b'' CheckThat(() => AssertCursorLeftIs(5))'                  "cw"' CheckThat(() => AssertLineIs("test()"))' CheckThat(() => AssertCursorLeftIs(5))'                  "float"' CheckThat(() => AssertLineIs("test(float)"))'                  _.Escape' 'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteChar,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  'x'' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  'p'' CheckThat(() => AssertLineIs("abcd"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abcdd"))' CheckThat(() => AssertCursorLeftIs(3))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteChar,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  'x'' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  'p'' CheckThat(() => AssertLineIs("abcd"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abcdd"))' CheckThat(() => AssertCursorLeftIs(3))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteChar,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  'x'' CheckThat(() => AssertLineIs("abc"))' CheckThat(() => AssertCursorLeftIs(2))'                  'p'' CheckThat(() => AssertLineIs("abcd"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abcdd"))' CheckThat(() => AssertCursorLeftIs(3))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteChar,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "h2x"' CheckThat(() => AssertLineIs("ab"))' CheckThat(() => AssertCursorLeftIs(1))'                  'p'' CheckThat(() => AssertLineIs("abcd"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abccdd"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteChar,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "h2x"' CheckThat(() => AssertLineIs("ab"))' CheckThat(() => AssertCursorLeftIs(1))'                  'p'' CheckThat(() => AssertLineIs("abcd"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abccdd"))' CheckThat(() => AssertCursorLeftIs(4))'                  'u'                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteChar,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  'X'' CheckThat(() => AssertLineIs("abd"))' CheckThat(() => AssertCursorLeftIs(2))'                  'p'' CheckThat(() => AssertLineIs("abdc"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abdcc"))' CheckThat(() => AssertCursorLeftIs(3))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteChar,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  'X'' CheckThat(() => AssertLineIs("abd"))' CheckThat(() => AssertCursorLeftIs(2))'                  'p'' CheckThat(() => AssertLineIs("abdc"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abdcc"))' CheckThat(() => AssertCursorLeftIs(3))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteChar,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  'X'' CheckThat(() => AssertLineIs("abd"))' CheckThat(() => AssertCursorLeftIs(2))'                  'p'' CheckThat(() => AssertLineIs("abdc"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abdcc"))' CheckThat(() => AssertCursorLeftIs(3))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteChar,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "2X"' CheckThat(() => AssertLineIs("ad"))' CheckThat(() => AssertCursorLeftIs(1))'                  'p'' CheckThat(() => AssertLineIs("adbc"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("adbbcc"))' CheckThat(() => AssertCursorLeftIs(4))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteChar,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "2X"' CheckThat(() => AssertLineIs("ad"))' CheckThat(() => AssertCursorLeftIs(1))'                  'p'' CheckThat(() => AssertLineIs("adbc"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("adbbcc"))' CheckThat(() => AssertCursorLeftIs(4))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'p'' CheckThat(() => AssertLineIs("abcd"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abcabcdd"))' CheckThat(() => AssertCursorLeftIs(6))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'p'' CheckThat(() => AssertLineIs("abcd"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abcabcdd"))' CheckThat(() => AssertCursorLeftIs(6))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "hd"' _.Dollar' CheckThat(() => AssertLineIs("ab"))' CheckThat(() => AssertCursorLeftIs(1))'                  "hp"' CheckThat(() => AssertLineIs("acdb"))' CheckThat(() => AssertCursorLeftIs(2))'                  'P'' CheckThat(() => AssertLineIs("accddb"))' CheckThat(() => AssertCursorLeftIs(3))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "hd"' _.Dollar' CheckThat(() => AssertLineIs("ab"))' CheckThat(() => AssertCursorLeftIs(1))'                  "hp"' CheckThat(() => AssertLineIs("acdb"))' CheckThat(() => AssertCursorLeftIs(2))'                  'P'' CheckThat(() => AssertLineIs("accddb"))' CheckThat(() => AssertCursorLeftIs(3))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "dh"' CheckThat(() => AssertLineIs("abd"))' CheckThat(() => AssertCursorLeftIs(2))'                  'p'' CheckThat(() => AssertLineIs("abdc"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abdcc"))' CheckThat(() => AssertCursorLeftIs(3))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "dh"' CheckThat(() => AssertLineIs("abd"))' CheckThat(() => AssertCursorLeftIs(2))'                  'p'' CheckThat(() => AssertLineIs("abdc"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abdcc"))' CheckThat(() => AssertCursorLeftIs(3))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "dh"' CheckThat(() => AssertLineIs("abd"))' CheckThat(() => AssertCursorLeftIs(2))'                  'p'' CheckThat(() => AssertLineIs("abdc"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("abdcc"))' CheckThat(() => AssertCursorLeftIs(3))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test("abcd"' Keys(                  "abcd"' _.Escape'                  "0dl"' CheckThat(() => AssertLineIs("bcd"))' CheckThat(() => AssertCursorLeftIs(0))'                  'p'' CheckThat(() => AssertLineIs("bacd"))' CheckThat(() => AssertCursorLeftIs(1))'                  _.Dollar' 'P'' CheckThat(() => AssertLineIs("bacad"))' CheckThat(() => AssertCursorLeftIs(3))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test("abcdef"' Keys(                  "abcdef"' _.Escape'                  "hhd0"' CheckThat(() => AssertLineIs("def"))' CheckThat(() => AssertCursorLeftIs(0))'                  'p'' CheckThat(() => AssertLineIs("dabcef"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("dababccef"))' CheckThat(() => AssertCursorLeftIs(5))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test("abcdef"' Keys(                  "abcdef"' _.Escape'                  "hhd0"' CheckThat(() => AssertLineIs("def"))' CheckThat(() => AssertCursorLeftIs(0))'                  'p'' CheckThat(() => AssertLineIs("dabcef"))' CheckThat(() => AssertCursorLeftIs(3))'                  'P'' CheckThat(() => AssertLineIs("dababccef"))' CheckThat(() => AssertCursorLeftIs(5))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test(" abc def"' Keys(                  " abc def"' _.Escape'                  "bd"' _.Uphat' CheckThat(() => AssertLineIs(" def"))' CheckThat(() => AssertCursorLeftIs(1))'                  'p'' CheckThat(() => AssertLineIs(" dabc ef"))' CheckThat(() => AssertCursorLeftIs(5))'                  'P'' CheckThat(() => AssertLineIs(" dabcabc  ef"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDelete,The following statement contains a magic number: Test(" abc def"' Keys(                  " abc def"' _.Escape'                  "bd"' _.Uphat' CheckThat(() => AssertLineIs(" def"))' CheckThat(() => AssertCursorLeftIs(1))'                  'p'' CheckThat(() => AssertLineIs(" dabc ef"))' CheckThat(() => AssertCursorLeftIs(5))'                  'P'' CheckThat(() => AssertLineIs(" dabcabc  ef"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteBraces,The following statement contains a magic number: Test("abc(def)ghi"' Keys(                  "abc(def)ghi"' _.Escape'                  "hhhd"' _.Percent' CheckThat(() => AssertLineIs("abcghi"))'                  'p'' CheckThat(() => AssertLineIs("abcg(def)hi"))' CheckThat(() => AssertCursorLeftIs(8))'                  'P'' CheckThat(() => AssertLineIs("abcg(def(def))hi"))' CheckThat(() => AssertCursorLeftIs(12))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteBraces,The following statement contains a magic number: Test("abc(def)ghi"' Keys(                  "abc(def)ghi"' _.Escape'                  "hhhd"' _.Percent' CheckThat(() => AssertLineIs("abcghi"))'                  'p'' CheckThat(() => AssertLineIs("abcg(def)hi"))' CheckThat(() => AssertCursorLeftIs(8))'                  'P'' CheckThat(() => AssertLineIs("abcg(def(def))hi"))' CheckThat(() => AssertCursorLeftIs(12))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteBraces,The following statement contains a magic number: Test("abc{def}ghi"' Keys(                  "abc{def}ghi"' _.Escape'                  "hhhd"' _.Percent' CheckThat(() => AssertLineIs("abcghi"))'                  'p'' CheckThat(() => AssertLineIs("abcg{def}hi"))' CheckThat(() => AssertCursorLeftIs(8))'                  'P'' CheckThat(() => AssertLineIs("abcg{def{def}}hi"))' CheckThat(() => AssertCursorLeftIs(12))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteBraces,The following statement contains a magic number: Test("abc{def}ghi"' Keys(                  "abc{def}ghi"' _.Escape'                  "hhhd"' _.Percent' CheckThat(() => AssertLineIs("abcghi"))'                  'p'' CheckThat(() => AssertLineIs("abcg{def}hi"))' CheckThat(() => AssertCursorLeftIs(8))'                  'P'' CheckThat(() => AssertLineIs("abcg{def{def}}hi"))' CheckThat(() => AssertCursorLeftIs(12))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  _.Ctrl_w' CheckThat(() => AssertLineIs("abc f"))' CheckThat(() => AssertCursorLeftIs(4))'                  'p'' CheckThat(() => AssertLineIs("abc fde"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc fddee"))' CheckThat(() => AssertCursorLeftIs(7))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  _.Ctrl_w' CheckThat(() => AssertLineIs("abc f"))' CheckThat(() => AssertCursorLeftIs(4))'                  'p'' CheckThat(() => AssertLineIs("abc fde"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc fddee"))' CheckThat(() => AssertCursorLeftIs(7))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  _.Ctrl_w' CheckThat(() => AssertLineIs("abc f"))' CheckThat(() => AssertCursorLeftIs(4))'                  'p'' CheckThat(() => AssertLineIs("abc fde"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc fddee"))' CheckThat(() => AssertCursorLeftIs(7))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  _.Ctrl_u' CheckThat(() => AssertLineIs("f"))' CheckThat(() => AssertCursorLeftIs(0))'                  'p'' CheckThat(() => AssertLineIs("fabc de"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("fabc dabc dee"))' CheckThat(() => AssertCursorLeftIs(11))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  _.Ctrl_u' CheckThat(() => AssertLineIs("f"))' CheckThat(() => AssertCursorLeftIs(0))'                  'p'' CheckThat(() => AssertLineIs("fabc de"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("fabc dabc dee"))' CheckThat(() => AssertCursorLeftIs(11))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bdw"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bdw"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bdw"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "db"' CheckThat(() => AssertLineIs("abc f"))' CheckThat(() => AssertCursorLeftIs(4))'                  'p'' CheckThat(() => AssertLineIs("abc fde"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc fddee"))' CheckThat(() => AssertCursorLeftIs(7))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "db"' CheckThat(() => AssertLineIs("abc f"))' CheckThat(() => AssertCursorLeftIs(4))'                  'p'' CheckThat(() => AssertLineIs("abc fde"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc fddee"))' CheckThat(() => AssertCursorLeftIs(7))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "db"' CheckThat(() => AssertLineIs("abc f"))' CheckThat(() => AssertCursorLeftIs(4))'                  'p'' CheckThat(() => AssertLineIs("abc fde"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc fddee"))' CheckThat(() => AssertCursorLeftIs(7))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bdW"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bdW"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bdW"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "dB"' CheckThat(() => AssertLineIs("abc f"))' CheckThat(() => AssertCursorLeftIs(4))'                  'p'' CheckThat(() => AssertLineIs("abc fde"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc fddee"))' CheckThat(() => AssertCursorLeftIs(7))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "dB"' CheckThat(() => AssertLineIs("abc f"))' CheckThat(() => AssertCursorLeftIs(4))'                  'p'' CheckThat(() => AssertLineIs("abc fde"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc fddee"))' CheckThat(() => AssertCursorLeftIs(7))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "dB"' CheckThat(() => AssertLineIs("abc f"))' CheckThat(() => AssertCursorLeftIs(4))'                  'p'' CheckThat(() => AssertLineIs("abc fde"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc fddee"))' CheckThat(() => AssertCursorLeftIs(7))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bde"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bde"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bde"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bdE"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bdE"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteWord,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "bdE"' CheckThat(() => AssertLineIs("abc "))' CheckThat(() => AssertCursorLeftIs(3))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  'P'' CheckThat(() => AssertLineIs("abc dedeff"))' CheckThat(() => AssertCursorLeftIs(8))'                  "uuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteLine,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'P'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  "uuuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterDeleteLine,The following statement contains a magic number: Test("abc def"' Keys(                  "abc def"' _.Escape'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'p'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  "dd"' CheckThat(() => AssertLineIs(""))' CheckThat(() => AssertCursorLeftIs(0))'                  'P'' CheckThat(() => AssertLineIs("abc def"))' CheckThat(() => AssertCursorLeftIs(6))'                  "uuuu"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankLine,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "byyP"' CheckThat(() => AssertLineIs("012 456\n012 456"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("012 456"))' CheckThat(() => AssertCursorLeftIs(4))'                  "p"' CheckThat(() => AssertLineIs("012 456\n012 456"))' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 0))'                  "u"' CheckThat(() => AssertLineIs("012 456"))' CheckThat(() => AssertCursorLeftIs(4))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankLine,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "byyP"' CheckThat(() => AssertLineIs("012 456\n012 456"))' CheckThat(() => AssertCursorLeftIs(0))'                  "u"' CheckThat(() => AssertLineIs("012 456"))' CheckThat(() => AssertCursorLeftIs(4))'                  "p"' CheckThat(() => AssertLineIs("012 456\n012 456"))' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 0))'                  "u"' CheckThat(() => AssertLineIs("012 456"))' CheckThat(() => AssertCursorLeftIs(4))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "bylP"' CheckThat(() => AssertLineIs("012 4456"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u2ylP"' CheckThat(() => AssertLineIs("012 45456"))' CheckThat(() => AssertCursorLeftIs(5))'                  "ullylp"' CheckThat(() => AssertLineIs("012 4566"))' CheckThat(() => AssertCursorLeftIs(7))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "bylP"' CheckThat(() => AssertLineIs("012 4456"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u2ylP"' CheckThat(() => AssertLineIs("012 45456"))' CheckThat(() => AssertCursorLeftIs(5))'                  "ullylp"' CheckThat(() => AssertLineIs("012 4566"))' CheckThat(() => AssertCursorLeftIs(7))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "bylP"' CheckThat(() => AssertLineIs("012 4456"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u2ylP"' CheckThat(() => AssertLineIs("012 45456"))' CheckThat(() => AssertCursorLeftIs(5))'                  "ullylp"' CheckThat(() => AssertLineIs("012 4566"))' CheckThat(() => AssertCursorLeftIs(7))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "by"' _.Spacebar' "P"' CheckThat(() => AssertLineIs("012 4456"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u2y"' _.Spacebar' "P"' CheckThat(() => AssertLineIs("012 45456"))' CheckThat(() => AssertCursorLeftIs(5))'                  "ully"' _.Spacebar' "p"' CheckThat(() => AssertLineIs("012 4566"))' CheckThat(() => AssertCursorLeftIs(7))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "by"' _.Spacebar' "P"' CheckThat(() => AssertLineIs("012 4456"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u2y"' _.Spacebar' "P"' CheckThat(() => AssertLineIs("012 45456"))' CheckThat(() => AssertCursorLeftIs(5))'                  "ully"' _.Spacebar' "p"' CheckThat(() => AssertLineIs("012 4566"))' CheckThat(() => AssertCursorLeftIs(7))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "by"' _.Spacebar' "P"' CheckThat(() => AssertLineIs("012 4456"))' CheckThat(() => AssertCursorLeftIs(4))'                  "u2y"' _.Spacebar' "P"' CheckThat(() => AssertLineIs("012 45456"))' CheckThat(() => AssertCursorLeftIs(5))'                  "ully"' _.Spacebar' "p"' CheckThat(() => AssertLineIs("012 4566"))' CheckThat(() => AssertCursorLeftIs(7))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "bbeyhP"' CheckThat(() => AssertLineIs("0112 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u2yhP"' CheckThat(() => AssertLineIs("01012 456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0yhP"' CheckThat(() => AssertLineIs("0012 456"))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "bbeyhP"' CheckThat(() => AssertLineIs("0112 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u2yhP"' CheckThat(() => AssertLineIs("01012 456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u0yhP"' CheckThat(() => AssertLineIs("0012 456"))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "by"' _.Dollar' "P"' CheckThat(() => AssertLineIs("012 456456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u"' _.Dollar' "y"' _.Dollar' "P"' CheckThat(() => AssertLineIs("012 4566"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u"' CheckThat(() => AssertLineIs("012 456"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "by"' _.Dollar' "P"' CheckThat(() => AssertLineIs("012 456456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u"' _.Dollar' "y"' _.Dollar' "P"' CheckThat(() => AssertLineIs("012 4566"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u"' CheckThat(() => AssertLineIs("012 456"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankMovement,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "by"' _.Dollar' "P"' CheckThat(() => AssertLineIs("012 456456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u"' _.Dollar' "y"' _.Dollar' "P"' CheckThat(() => AssertLineIs("012 4566"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u"' CheckThat(() => AssertLineIs("012 456"))' CheckThat(() => AssertCursorLeftIs(6))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "ybp"' CheckThat(() => AssertLineIs("012 45645"))' CheckThat(() => AssertCursorLeftIs(8))'                  "u0ybP"' CheckThat(() => AssertLineIs("45012 456"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u"' _.Dollar' "2ybp"' CheckThat(() => AssertLineIs("012 456012 45"))' CheckThat(() => AssertCursorLeftIs(12))'                  "u"' _.Dollar' "3ybp"' CheckThat(() => AssertLineIs("012 456012 45"))' CheckThat(() => AssertCursorLeftIs(12))'                  "uh2ybp"' CheckThat(() => AssertLineIs("012 45012 46"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "ybp"' CheckThat(() => AssertLineIs("012 45645"))' CheckThat(() => AssertCursorLeftIs(8))'                  "u0ybP"' CheckThat(() => AssertLineIs("45012 456"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u"' _.Dollar' "2ybp"' CheckThat(() => AssertLineIs("012 456012 45"))' CheckThat(() => AssertCursorLeftIs(12))'                  "u"' _.Dollar' "3ybp"' CheckThat(() => AssertLineIs("012 456012 45"))' CheckThat(() => AssertCursorLeftIs(12))'                  "uh2ybp"' CheckThat(() => AssertLineIs("012 45012 46"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "ybp"' CheckThat(() => AssertLineIs("012 45645"))' CheckThat(() => AssertCursorLeftIs(8))'                  "u0ybP"' CheckThat(() => AssertLineIs("45012 456"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u"' _.Dollar' "2ybp"' CheckThat(() => AssertLineIs("012 456012 45"))' CheckThat(() => AssertCursorLeftIs(12))'                  "u"' _.Dollar' "3ybp"' CheckThat(() => AssertLineIs("012 456012 45"))' CheckThat(() => AssertCursorLeftIs(12))'                  "uh2ybp"' CheckThat(() => AssertLineIs("012 45012 46"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "ybp"' CheckThat(() => AssertLineIs("012 45645"))' CheckThat(() => AssertCursorLeftIs(8))'                  "u0ybP"' CheckThat(() => AssertLineIs("45012 456"))' CheckThat(() => AssertCursorLeftIs(1))'                  "u"' _.Dollar' "2ybp"' CheckThat(() => AssertLineIs("012 456012 45"))' CheckThat(() => AssertCursorLeftIs(12))'                  "u"' _.Dollar' "3ybp"' CheckThat(() => AssertLineIs("012 456012 45"))' CheckThat(() => AssertCursorLeftIs(12))'                  "uh2ybp"' CheckThat(() => AssertLineIs("012 45012 46"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456 "' Keys(                  "012 456 "' _.Escape'                  "ybp"' CheckThat(() => AssertLineIs("012 456 456"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u0ybP"' CheckThat(() => AssertLineIs("456012 456 "))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' _.Dollar' "2ybp"' CheckThat(() => AssertLineIs("012 456 012 456"))' CheckThat(() => AssertCursorLeftIs(14))'                  "u"' _.Dollar' "3ybp"' CheckThat(() => AssertLineIs("012 456 012 456"))' CheckThat(() => AssertCursorLeftIs(14))'                  "uh2ybp"' CheckThat(() => AssertLineIs("012 456012 45 "))' CheckThat(() => AssertCursorLeftIs(12))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456 "' Keys(                  "012 456 "' _.Escape'                  "ybp"' CheckThat(() => AssertLineIs("012 456 456"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u0ybP"' CheckThat(() => AssertLineIs("456012 456 "))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' _.Dollar' "2ybp"' CheckThat(() => AssertLineIs("012 456 012 456"))' CheckThat(() => AssertCursorLeftIs(14))'                  "u"' _.Dollar' "3ybp"' CheckThat(() => AssertLineIs("012 456 012 456"))' CheckThat(() => AssertCursorLeftIs(14))'                  "uh2ybp"' CheckThat(() => AssertLineIs("012 456012 45 "))' CheckThat(() => AssertCursorLeftIs(12))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456 "' Keys(                  "012 456 "' _.Escape'                  "ybp"' CheckThat(() => AssertLineIs("012 456 456"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u0ybP"' CheckThat(() => AssertLineIs("456012 456 "))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' _.Dollar' "2ybp"' CheckThat(() => AssertLineIs("012 456 012 456"))' CheckThat(() => AssertCursorLeftIs(14))'                  "u"' _.Dollar' "3ybp"' CheckThat(() => AssertLineIs("012 456 012 456"))' CheckThat(() => AssertCursorLeftIs(14))'                  "uh2ybp"' CheckThat(() => AssertLineIs("012 456012 45 "))' CheckThat(() => AssertCursorLeftIs(12))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456 "' Keys(                  "012 456 "' _.Escape'                  "ybp"' CheckThat(() => AssertLineIs("012 456 456"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u0ybP"' CheckThat(() => AssertLineIs("456012 456 "))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' _.Dollar' "2ybp"' CheckThat(() => AssertLineIs("012 456 012 456"))' CheckThat(() => AssertCursorLeftIs(14))'                  "u"' _.Dollar' "3ybp"' CheckThat(() => AssertLineIs("012 456 012 456"))' CheckThat(() => AssertCursorLeftIs(14))'                  "uh2ybp"' CheckThat(() => AssertLineIs("012 456012 45 "))' CheckThat(() => AssertCursorLeftIs(12))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456 "' Keys(                  "012 456 "' _.Escape'                  "ybp"' CheckThat(() => AssertLineIs("012 456 456"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u0ybP"' CheckThat(() => AssertLineIs("456012 456 "))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"' _.Dollar' "2ybp"' CheckThat(() => AssertLineIs("012 456 012 456"))' CheckThat(() => AssertCursorLeftIs(14))'                  "u"' _.Dollar' "3ybp"' CheckThat(() => AssertLineIs("012 456 012 456"))' CheckThat(() => AssertCursorLeftIs(14))'                  "uh2ybp"' CheckThat(() => AssertLineIs("012 456012 45 "))' CheckThat(() => AssertCursorLeftIs(12))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0ywP"' CheckThat(() => AssertLineIs("012 012 456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u02ywP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u03ywP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u0lywP"' CheckThat(() => AssertLineIs("012 12 456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0ywP"' CheckThat(() => AssertLineIs("012 012 456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u02ywP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u03ywP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u0lywP"' CheckThat(() => AssertLineIs("012 12 456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0ywP"' CheckThat(() => AssertLineIs("012 012 456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u02ywP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u03ywP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u0lywP"' CheckThat(() => AssertLineIs("012 12 456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0ywP"' CheckThat(() => AssertLineIs("012 012 456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u02ywP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u03ywP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u0lywP"' CheckThat(() => AssertLineIs("012 12 456"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' _.Escape'                  "0ywP"' CheckThat(() => AssertLineIs("  123  678 "))' CheckThat(() => AssertCursorLeftIs(0))'                  "u02ywP"' CheckThat(() => AssertLineIs(" 123   123  678 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "u03ywP"' CheckThat(() => AssertLineIs(" 123  678  123  678 "))' CheckThat(() => AssertCursorLeftIs(9))'                  "u0lywP"' CheckThat(() => AssertLineIs(" 123  123  678 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' _.Escape'                  "0ywP"' CheckThat(() => AssertLineIs("  123  678 "))' CheckThat(() => AssertCursorLeftIs(0))'                  "u02ywP"' CheckThat(() => AssertLineIs(" 123   123  678 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "u03ywP"' CheckThat(() => AssertLineIs(" 123  678  123  678 "))' CheckThat(() => AssertCursorLeftIs(9))'                  "u0lywP"' CheckThat(() => AssertLineIs(" 123  123  678 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' _.Escape'                  "0ywP"' CheckThat(() => AssertLineIs("  123  678 "))' CheckThat(() => AssertCursorLeftIs(0))'                  "u02ywP"' CheckThat(() => AssertLineIs(" 123   123  678 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "u03ywP"' CheckThat(() => AssertLineIs(" 123  678  123  678 "))' CheckThat(() => AssertCursorLeftIs(9))'                  "u0lywP"' CheckThat(() => AssertLineIs(" 123  123  678 "))' CheckThat(() => AssertCursorLeftIs(5))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0yeP"' CheckThat(() => AssertLineIs("012012 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u02yeP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u03yeP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u0lyeP"' CheckThat(() => AssertLineIs("01212 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0yeP"' CheckThat(() => AssertLineIs("012012 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u02yeP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u03yeP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u0lyeP"' CheckThat(() => AssertLineIs("01212 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0yeP"' CheckThat(() => AssertLineIs("012012 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u02yeP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u03yeP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u0lyeP"' CheckThat(() => AssertLineIs("01212 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test("012 456"' Keys(                  "012 456"' _.Escape'                  "0yeP"' CheckThat(() => AssertLineIs("012012 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u02yeP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u03yeP"' CheckThat(() => AssertLineIs("012 456012 456"))' CheckThat(() => AssertCursorLeftIs(6))'                  "u0lyeP"' CheckThat(() => AssertLineIs("01212 456"))' CheckThat(() => AssertCursorLeftIs(2))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' _.Escape'                  "0yeP"' CheckThat(() => AssertLineIs(" 123 123  678 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "u02yeP"' CheckThat(() => AssertLineIs(" 123  678 123  678 "))' CheckThat(() => AssertCursorLeftIs(8))'                  "u03yeP"' CheckThat(() => AssertLineIs(" 123  678  123  678 "))' CheckThat(() => AssertCursorLeftIs(9))'                  "u0lyeP"' CheckThat(() => AssertLineIs(" 123123  678 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' _.Escape'                  "0yeP"' CheckThat(() => AssertLineIs(" 123 123  678 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "u02yeP"' CheckThat(() => AssertLineIs(" 123  678 123  678 "))' CheckThat(() => AssertCursorLeftIs(8))'                  "u03yeP"' CheckThat(() => AssertLineIs(" 123  678  123  678 "))' CheckThat(() => AssertCursorLeftIs(9))'                  "u0lyeP"' CheckThat(() => AssertLineIs(" 123123  678 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' _.Escape'                  "0yeP"' CheckThat(() => AssertLineIs(" 123 123  678 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "u02yeP"' CheckThat(() => AssertLineIs(" 123  678 123  678 "))' CheckThat(() => AssertCursorLeftIs(8))'                  "u03yeP"' CheckThat(() => AssertLineIs(" 123  678  123  678 "))' CheckThat(() => AssertCursorLeftIs(9))'                  "u0lyeP"' CheckThat(() => AssertLineIs(" 123123  678 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankWord,The following statement contains a magic number: Test(" 123  678 "' Keys(                  " 123  678 "' _.Escape'                  "0yeP"' CheckThat(() => AssertLineIs(" 123 123  678 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "u02yeP"' CheckThat(() => AssertLineIs(" 123  678 123  678 "))' CheckThat(() => AssertCursorLeftIs(8))'                  "u03yeP"' CheckThat(() => AssertLineIs(" 123  678  123  678 "))' CheckThat(() => AssertCursorLeftIs(9))'                  "u0lyeP"' CheckThat(() => AssertLineIs(" 123123  678 "))' CheckThat(() => AssertCursorLeftIs(3))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankBeginningOfLine,The following statement contains a magic number: Test("\"\nHello\n World!\n\""' Keys(                  _.DQuote' _.Enter'                  "Hello"' _.Enter'                  " World!"' _.Enter'                  _.DQuote' _.Escape'                  _.k' "5l"' // move the cursor to the 'd' character of "World!"                  "y0"' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 0))'                  "P"' CheckThat(() => AssertLineIs("\"\nHello\n Worl World!\n\""))' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 4))'                  "u"' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 0))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankEndOfLine,The following statement contains a magic number: Test("\"\nHello\nWorld!\n\""' Keys(                  _.DQuote' _.Enter'                  "Hello"' _.Enter'                  "World!"' _.Enter'                   _.DQuote' _.Escape'                  _.k' _.l' // move to the 'o' character of 'World!'                  "y$P"' CheckThat(() => AssertLineIs("\"\nHello\nWorld!orld!\n\""))' CheckThat(() => AssertCursorLeftIs(continuationPrefixLength + 5))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankFirstNoneBlank,The following statement contains a magic number: Test("012"' Keys(                  "012"' _.Escape'                  "y"' _.Uphat' "P"' CheckThat(() => AssertLineIs("01012"))' CheckThat(() => AssertCursorLeftIs(3))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankFirstNoneBlank,The following statement contains a magic number: Test(" 123  "' Keys(                  " 123  "' _.Escape'                  "y"' _.Uphat' "P"' CheckThat(() => AssertLineIs(" 123 123  "))' CheckThat(() => AssertCursorLeftIs(8))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankPercent,The following statement contains a magic number: Test("012{45}78"' Keys(                  "012{45}78"' _.Escape' "hh"'                  "y"' _.Percent' "p"' CheckThat(() => AssertLineIs("012{45}{45}78"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankPercent,The following statement contains a magic number: Test("012{45}78"' Keys(                  "012{45}78"' _.Escape' "hh"'                  "y"' _.Percent' "p"' CheckThat(() => AssertLineIs("012{45}{45}78"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankPercent,The following statement contains a magic number: Test("012(45)78"' Keys(                  "012(45)78"' _.Escape' "hh"'                  "y"' _.Percent' "p"' CheckThat(() => AssertLineIs("012(45)(45)78"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankPercent,The following statement contains a magic number: Test("012(45)78"' Keys(                  "012(45)78"' _.Escape' "hh"'                  "y"' _.Percent' "p"' CheckThat(() => AssertLineIs("012(45)(45)78"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankPercent,The following statement contains a magic number: Test("012[45]78"' Keys(                  "012[45]78"' _.Escape' "hh"'                  "y"' _.Percent' "p"' CheckThat(() => AssertLineIs("012[45][45]78"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankPercent,The following statement contains a magic number: Test("012[45]78"' Keys(                  "012[45]78"' _.Escape' "hh"'                  "y"' _.Percent' "p"' CheckThat(() => AssertLineIs("012[45][45]78"))' CheckThat(() => AssertCursorLeftIs(10))'                  "u"' CheckThat(() => AssertCursorLeftIs(7))                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankPercent,The following statement contains a magic number: Test("012{45}"' Keys(                  "012{45}"' _.Escape' "hhh"' CheckThat(() => AssertCursorLeftIs(3))'                  "y"' _.Percent' "P"' CheckThat(() => AssertLineIs("012{45}{45}"))'                  "u"                  ));
Magic Number,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,ViPasteAfterYankPercent,The following statement contains a magic number: Test("{123}56"' Keys(                  "{123}56"' _.Escape' "hh"' CheckThat(() => AssertCursorLeftIs(4))'                  "y"' _.Percent' "p"' CheckThat(() => AssertLineIs("{123}{123}56"))'                  "u"                  ));
Magic Number,Test,WindowsConsoleFixtureHelper,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ConsoleFixture.cs,SetKeyboardLayout,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Test,CHAR_INFO,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MockConsole.cs,CHAR_INFO,The following statement contains a magic number: Attributes = (ushort)(((int)background << 4) | (int)foreground);
Magic Number,Test,TestConsole,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MockConsole.cs,TestConsole,The following statement contains a magic number: _bufferWidth = _windowWidth = 60;
Magic Number,Test,TestConsole,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MockConsole.cs,TestConsole,The following statement contains a magic number: _bufferHeight = _windowHeight = 1000;
Magic Number,Test,TestConsole,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MockConsole.cs,Write,The following statement contains a magic number: var len = endSequence - i - (s[endSequence] != 'm' ? 1 : 2);
Magic Number,Test,TestConsole,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MockConsole.cs,Write,The following statement contains a magic number: var escapeSequence = s.Substring(i + 2' len);
Magic Number,Test,TestConsole,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MockConsole.cs,ToggleNegative,The following statement contains a magic number: c.ForegroundColor = (ConsoleColor)((int)c.ForegroundColor ^ 7);
Magic Number,Test,TestConsole,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MockConsole.cs,ToggleNegative,The following statement contains a magic number: c.BackgroundColor = (ConsoleColor)((int)c.BackgroundColor ^ 7);
Magic Number,Test,MultiLineBufferHelperTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MultiLineBufferHelperTests.cs,MultiLineBufferHelper_LinewiseYank_Lines,The following statement contains a magic number: var range = MultiLineBufferHelper.GetRange(buffer' 1' 2);
Magic Number,Test,MultiLineBufferHelperTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MultiLineBufferHelperTests.cs,MultiLineBufferHelper_LinewiseYank_Lines,The following statement contains a magic number: Assert.Equal(6' range.Offset);
Magic Number,Test,MultiLineBufferHelperTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MultiLineBufferHelperTests.cs,MultiLineBufferHelper_LinewiseYank_Lines,The following statement contains a magic number: Assert.Equal(12' range.Count);
Magic Number,Test,MultiLineBufferHelperTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MultiLineBufferHelperTests.cs,MultilineBufferHelper_LinewiseYank_MoreLinesThanAvailable,The following statement contains a magic number: var range = MultiLineBufferHelper.GetRange(buffer' 1' 42);
Magic Number,Test,MultiLineBufferHelperTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MultiLineBufferHelperTests.cs,MultilineBufferHelper_LinewiseYank_MoreLinesThanAvailable,The following statement contains a magic number: Assert.Equal(6' range.Offset);
Magic Number,Test,MultiLineBufferHelperTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\MultiLineBufferHelperTests.cs,MultilineBufferHelper_LinewiseYank_MoreLinesThanAvailable,The following statement contains a magic number: Assert.Equal(5' range.Count);
Magic Number,Test,ViRegisterTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ViRegisterTests.cs,ViRegister_Fragment_LinewisePasteBefore,The following statement contains a magic number: const int position = 2;
Magic Number,Test,ViRegisterTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ViRegisterTests.cs,ViRegister_Lines_LinewisePasteBefore,The following statement contains a magic number: const int position = 2;
Magic Number,Test,ViRegisterTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ViRegisterTests.cs,ViRegister_Fragment_LinewisePasteAfter_Fragment,The following statement contains a magic number: const int position = 2;
Magic Number,Test,ViRegisterTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ViRegisterTests.cs,ViRegister_Fragment_LinewisePasteAfter_Fragment,The following statement contains a magic number: Assert.Equal(6' newPosition);
Magic Number,Test,ViRegisterTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ViRegisterTests.cs,ViRegister_Fragment_LinewisePasteAfter_Lines,The following statement contains a magic number: const int position = 2;
Magic Number,Test,ViRegisterTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ViRegisterTests.cs,ViRegister_Fragment_LinewisePasteAfter_Lines,The following statement contains a magic number: Assert.Equal(6' newPosition);
Magic Number,Test,ViRegisterTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ViRegisterTests.cs,ViRegister_Lines_LinewisePasteAfter_Fragment,The following statement contains a magic number: const int position = 2;
Magic Number,Test,ViRegisterTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ViRegisterTests.cs,ViRegister_Lines_LinewisePasteAfter_Fragment,The following statement contains a magic number: Assert.Equal(6' newPosition);
Magic Number,Test,ViRegisterTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ViRegisterTests.cs,ViRegister_Lines_LinewisePasteAfter_Lines,The following statement contains a magic number: const int position = 2;
Magic Number,Test,ViRegisterTests,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\ViRegisterTests.cs,ViRegister_Lines_LinewisePasteAfter_Lines,The following statement contains a magic number: Assert.Equal(6' newPosition);
Missing Default,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,MockedCompleteInput,The following switch statement is missing a default case: switch (input)              {              case "$t":                  replacementIndex = 0;                  replacementLength = 2;                  completions.Add(new CompletionResult("$thing"));                  completions.Add(new CompletionResult("$this"));                  completions.Add(new CompletionResult("$true"));                  break;              case "$tr":                  replacementIndex = 0;                  replacementLength = 3;                  completions.Add(new CompletionResult("$true"));                  break;              case "psvar":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("$pssomething"));                  break;              case "ambig":                  replacementIndex = 0;                  replacementLength = 5;                  completions.Add(new CompletionResult("ambiguous1"));                  completions.Add(new CompletionResult("ambiguous2"));                  completions.Add(new CompletionResult("ambiguous3"));                  break;              case "Get-Many":                  replacementIndex = 0;                  replacementLength = 8;                  for (int i = 0; i < 15; i++)                  {                      completions.Add(new CompletionResult("Get-Many" + i));                  }                  break;              case "Get-Tooltips":                  replacementIndex = 0;                  replacementLength = 12;                  completions.Add(new CompletionResult("something really long"' "item1"' CompletionResultType.Command' "useful description goes here"));                  break;              case "Get-Directory":                  replacementIndex = 0;                  replacementLength = 13;                  completions.Add(new CompletionResult("abc"' "abc"' CompletionResultType.ProviderContainer' "abc"));                  completions.Add(new CompletionResult("'e f'"' "'e f'"' CompletionResultType.ProviderContainer' "'e f'"));                  completions.Add(new CompletionResult("a"' "a"' CompletionResultType.ProviderContainer' "a"));                  completions.Add(new CompletionResult("'a b" + Path.DirectorySeparatorChar + "'"' "a b" + Path.DirectorySeparatorChar + "'"' CompletionResultType.ProviderContainer' "a b" + Path.DirectorySeparatorChar + "'"));                  completions.Add(new CompletionResult("\"a b" + Path.DirectorySeparatorChar + "\""' "\"a b" + Path.DirectorySeparatorChar + "\""' CompletionResultType.ProviderContainer' "\"a b" + Path.DirectorySeparatorChar + "\""));                  break;              case "invalid result 1":                  replacementIndex = -1;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 2":                  replacementIndex = 0;                  replacementLength = -1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 3":                  replacementIndex = int.MaxValue;                  replacementLength = 1;                  completions.Add(new CompletionResult("result"));                  break;              case "invalid result 4":                  replacementIndex = 0;                  replacementLength = int.MaxValue;                  completions.Add(new CompletionResult("result"));                  break;              case "ls -H":                  replacementIndex = cursor;                  replacementLength = 0;                  completions.Add(new CompletionResult("idden"));                  break;              case "none":                  break;              }
Missing Default,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,DigitArgumentWithSelfInsert,The following switch statement is missing a default case: switch (i) {                      case 0: return _.Alt_0;                      case 1: return _.Alt_1;                      case 2: return _.Alt_2;                      case 3: return _.Alt_3;                      case 4: return _.Alt_4;                      case 5: return _.Alt_5;                      case 6: return _.Alt_6;                      case 7: return _.Alt_7;                      case 8: return _.Alt_8;                      case 9: return _.Alt_9;                  }
Missing Default,Test,ReadLine,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\BasicEditingTest.cs,TestSetup,The following switch statement is missing a default case: switch (keyMode)              {              case KeyMode.Cmd:                  options.EditMode = EditMode.Windows;                  break;              case KeyMode.Emacs:                  options.EditMode = EditMode.Emacs;                  break;              case KeyMode.Vi:                  options.EditMode = EditMode.Vi;                  break;              }
Missing Default,Test,KeyboardLayout,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\KeyboardLayouts.cs,TryGetMember,The following switch statement is missing a default case: switch (binder.Name) {                  case "VolumeUp":                      result = new ConsoleKeyInfo('\0'' ConsoleKey.VolumeUp' false' false' false);                      return true;                  case "VolumeDown":                      result = new ConsoleKeyInfo('\0'' ConsoleKey.VolumeDown' false' false' false);                      return true;                  case "VolumeMute":                      result = new ConsoleKeyInfo('\0'' ConsoleKey.VolumeMute' false' false' false);                      return true;              }
Missing Default,Test,KeyInfo,D:\research\architectureSmells\repos\lzybkr_PSReadLine\test\KeyboardLayouts.cs,CharAsPropertyName,The following switch statement is missing a default case: switch (c)                  {                      case ' ': return "Spacebar";                      case '\r': return "Enter";                      case '\n': return "Enter";                      case '`': return "Backtick";                      case '~': return "Tilde";                      case '!': return "Bang";                      case '@': return "At";                      case '#': return "Pound";                      case '$': return "Dollar";                      case '%': return "Percent";                      case '^': return "Uphat";                      case '&': return "Ampersand";                      case '*': return "Star";                      case '(': return "LParen";                      case ')': return "RParen";                      case '_': return "Underbar";                      case '=': return "Equals";                      case '-': return "Minus";                      case '+': return "Plus";                      case '[': return "LBracket";                      case ']': return "RBracket";                      case '{': return "LBrace";                      case '}': return "RBrace";                      case '\\': return "Backslash";                      case '|': return "Pipe";                      case ';': return "Semicolon";                      case '\'': return "SQuote";                      case ':': return "Colon";                      case '"': return "DQuote";                      case ''': return "Comma";                      case '.': return "Period";                      case '/': return "Slash";                      case '<': return "Less";                      case '>': return "Greater";                      case '?': return "Question";                      case '0': return "D0";                      case '1': return "D1";                      case '2': return "D2";                      case '3': return "D3";                      case '4': return "D4";                      case '5': return "D5";                      case '6': return "D6";                      case '7': return "D7";                      case '8': return "D8";                      case '9': return "D9";                  }
