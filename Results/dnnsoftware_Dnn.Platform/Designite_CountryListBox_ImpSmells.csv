Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,Cyclomatic complexity of the method is 8
Long Statement,DotNetNuke.UI.WebControls,CountryListBox,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryListBox.cs,OnDataBinding,The length of the statement  "                    Context.Cache.Insert("GeoIPData"' CountryLookup.FileToMemory(Context.Server.MapPath(_GeoIPFile))' new CacheDependency(Context.Server.MapPath(_GeoIPFile))); " is 155.
Long Statement,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPAddressToNumber,The length of the statement  "                return Convert.ToInt64(16777216*Convert.ToDouble(_Address[0]) + 65536*Convert.ToDouble(_Address[1]) + 256*Convert.ToDouble(_Address[2]) + Convert.ToDouble(_Address[3])); " is 169.
Long Statement,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,FileToMemory,The length of the statement  "                                    "  Please set the \"GeoIPFile\" Property to specify the location of this file.  The property value must be set to the virtual path to GeoIP.dat (i.e. \"/controls/CountryListBox/Data/GeoIP.dat\")"); " is 197.
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,CountryLookup,The following statement contains a magic number: using (var _FileStream = new FileStream(FileLocation' FileMode.Open' FileAccess.Read))              {                  m_MemoryStream = new MemoryStream();                  var _Byte = new byte[256];                  while (_FileStream.Read(_Byte' 0' _Byte.Length) != 0)                  {                      m_MemoryStream.Write(_Byte' 0' _Byte.Length);                  }                  _FileStream.Close();                }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPAddressToNumber,The following statement contains a magic number: if (_Address.Length == 4)              {                  return Convert.ToInt64(16777216*Convert.ToDouble(_Address[0]) + 65536*Convert.ToDouble(_Address[1]) + 256*Convert.ToDouble(_Address[2]) + Convert.ToDouble(_Address[3]));              }              else              {                  return 0;              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPAddressToNumber,The following statement contains a magic number: if (_Address.Length == 4)              {                  return Convert.ToInt64(16777216*Convert.ToDouble(_Address[0]) + 65536*Convert.ToDouble(_Address[1]) + 256*Convert.ToDouble(_Address[2]) + Convert.ToDouble(_Address[3]));              }              else              {                  return 0;              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPAddressToNumber,The following statement contains a magic number: if (_Address.Length == 4)              {                  return Convert.ToInt64(16777216*Convert.ToDouble(_Address[0]) + 65536*Convert.ToDouble(_Address[1]) + 256*Convert.ToDouble(_Address[2]) + Convert.ToDouble(_Address[3]));              }              else              {                  return 0;              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPAddressToNumber,The following statement contains a magic number: if (_Address.Length == 4)              {                  return Convert.ToInt64(16777216*Convert.ToDouble(_Address[0]) + 65536*Convert.ToDouble(_Address[1]) + 256*Convert.ToDouble(_Address[2]) + Convert.ToDouble(_Address[3]));              }              else              {                  return 0;              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPAddressToNumber,The following statement contains a magic number: if (_Address.Length == 4)              {                  return Convert.ToInt64(16777216*Convert.ToDouble(_Address[0]) + 65536*Convert.ToDouble(_Address[1]) + 256*Convert.ToDouble(_Address[2]) + Convert.ToDouble(_Address[3]));              }              else              {                  return 0;              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPAddressToNumber,The following statement contains a magic number: if (_Address.Length == 4)              {                  return Convert.ToInt64(16777216*Convert.ToDouble(_Address[0]) + 65536*Convert.ToDouble(_Address[1]) + 256*Convert.ToDouble(_Address[2]) + Convert.ToDouble(_Address[3]));              }              else              {                  return 0;              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPNumberToAddress,The following statement contains a magic number: string _IPNumberPart1 = Convert.ToString(((int) (_IPNumber/16777216))%256);
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPNumberToAddress,The following statement contains a magic number: string _IPNumberPart1 = Convert.ToString(((int) (_IPNumber/16777216))%256);
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPNumberToAddress,The following statement contains a magic number: string _IPNumberPart2 = Convert.ToString(((int) (_IPNumber/65536))%256);
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPNumberToAddress,The following statement contains a magic number: string _IPNumberPart2 = Convert.ToString(((int) (_IPNumber/65536))%256);
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPNumberToAddress,The following statement contains a magic number: string _IPNumberPart3 = Convert.ToString(((int) (_IPNumber/256))%256);
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPNumberToAddress,The following statement contains a magic number: string _IPNumberPart3 = Convert.ToString(((int) (_IPNumber/256))%256);
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,ConvertIPNumberToAddress,The following statement contains a magic number: string _IPNumberPart4 = Convert.ToString(((int) (_IPNumber))%256);
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,FileToMemory,The following statement contains a magic number: var _Byte = new byte[256];
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,LookupCountryCode,The following statement contains a magic number: return CountryCode[Convert.ToInt32(SeekCountry(0' ConvertIPAddressToNumber(_IPAddress)' 31))];
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,LookupCountryName,The following statement contains a magic number: return CountryName[Convert.ToInt32(SeekCountry(0' ConvertIPAddressToNumber(addr)' 31))];
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,The following statement contains a magic number: try              {                  var Buffer = new byte[6];                  var X = new int[2];                  short I;                  short J;                  byte Y;                  if (Depth == 0)                  {                      throw new Exception();                  }                  m_MemoryStream.Seek(6*Offset' 0);                  var len = m_MemoryStream.Read(Buffer' 0' 6);                  if (len == 6)                  {                      for (I = 0; I <= 1; I++)                      {                          X[I] = 0;                          for (J = 0; J <= 2; J++)                          {                              Y = Buffer[I * 3 + J];                              if (Y < 0)                              {                                  Y = Convert.ToByte(Y + 256);                              }                              X[I] = Convert.ToInt32(X[I] + (Y << (J * 8)));                          }                      }                  }                  else                  {                      for (I = 0; I < 6; I++)                      {                          X[I] = 0;                      }                  }                    if ((Ipnum & (1 << Depth)) > 0)                  {                      if (X[1] >= CountryBegin)                      {                          return Convert.ToInt32(X[1] - CountryBegin);                      }                      return SeekCountry(X[1]' Ipnum' Convert.ToInt16(Depth - 1));                  }                  else                  {                      if (X[0] >= CountryBegin)                      {                          return Convert.ToInt32(X[0] - CountryBegin);                      }                      return SeekCountry(X[0]' Ipnum' Convert.ToInt16(Depth - 1));                  }              }              catch (Exception exc)              {                  throw new Exception("Error seeking country: " + exc.Message);              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,The following statement contains a magic number: try              {                  var Buffer = new byte[6];                  var X = new int[2];                  short I;                  short J;                  byte Y;                  if (Depth == 0)                  {                      throw new Exception();                  }                  m_MemoryStream.Seek(6*Offset' 0);                  var len = m_MemoryStream.Read(Buffer' 0' 6);                  if (len == 6)                  {                      for (I = 0; I <= 1; I++)                      {                          X[I] = 0;                          for (J = 0; J <= 2; J++)                          {                              Y = Buffer[I * 3 + J];                              if (Y < 0)                              {                                  Y = Convert.ToByte(Y + 256);                              }                              X[I] = Convert.ToInt32(X[I] + (Y << (J * 8)));                          }                      }                  }                  else                  {                      for (I = 0; I < 6; I++)                      {                          X[I] = 0;                      }                  }                    if ((Ipnum & (1 << Depth)) > 0)                  {                      if (X[1] >= CountryBegin)                      {                          return Convert.ToInt32(X[1] - CountryBegin);                      }                      return SeekCountry(X[1]' Ipnum' Convert.ToInt16(Depth - 1));                  }                  else                  {                      if (X[0] >= CountryBegin)                      {                          return Convert.ToInt32(X[0] - CountryBegin);                      }                      return SeekCountry(X[0]' Ipnum' Convert.ToInt16(Depth - 1));                  }              }              catch (Exception exc)              {                  throw new Exception("Error seeking country: " + exc.Message);              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,The following statement contains a magic number: try              {                  var Buffer = new byte[6];                  var X = new int[2];                  short I;                  short J;                  byte Y;                  if (Depth == 0)                  {                      throw new Exception();                  }                  m_MemoryStream.Seek(6*Offset' 0);                  var len = m_MemoryStream.Read(Buffer' 0' 6);                  if (len == 6)                  {                      for (I = 0; I <= 1; I++)                      {                          X[I] = 0;                          for (J = 0; J <= 2; J++)                          {                              Y = Buffer[I * 3 + J];                              if (Y < 0)                              {                                  Y = Convert.ToByte(Y + 256);                              }                              X[I] = Convert.ToInt32(X[I] + (Y << (J * 8)));                          }                      }                  }                  else                  {                      for (I = 0; I < 6; I++)                      {                          X[I] = 0;                      }                  }                    if ((Ipnum & (1 << Depth)) > 0)                  {                      if (X[1] >= CountryBegin)                      {                          return Convert.ToInt32(X[1] - CountryBegin);                      }                      return SeekCountry(X[1]' Ipnum' Convert.ToInt16(Depth - 1));                  }                  else                  {                      if (X[0] >= CountryBegin)                      {                          return Convert.ToInt32(X[0] - CountryBegin);                      }                      return SeekCountry(X[0]' Ipnum' Convert.ToInt16(Depth - 1));                  }              }              catch (Exception exc)              {                  throw new Exception("Error seeking country: " + exc.Message);              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,The following statement contains a magic number: try              {                  var Buffer = new byte[6];                  var X = new int[2];                  short I;                  short J;                  byte Y;                  if (Depth == 0)                  {                      throw new Exception();                  }                  m_MemoryStream.Seek(6*Offset' 0);                  var len = m_MemoryStream.Read(Buffer' 0' 6);                  if (len == 6)                  {                      for (I = 0; I <= 1; I++)                      {                          X[I] = 0;                          for (J = 0; J <= 2; J++)                          {                              Y = Buffer[I * 3 + J];                              if (Y < 0)                              {                                  Y = Convert.ToByte(Y + 256);                              }                              X[I] = Convert.ToInt32(X[I] + (Y << (J * 8)));                          }                      }                  }                  else                  {                      for (I = 0; I < 6; I++)                      {                          X[I] = 0;                      }                  }                    if ((Ipnum & (1 << Depth)) > 0)                  {                      if (X[1] >= CountryBegin)                      {                          return Convert.ToInt32(X[1] - CountryBegin);                      }                      return SeekCountry(X[1]' Ipnum' Convert.ToInt16(Depth - 1));                  }                  else                  {                      if (X[0] >= CountryBegin)                      {                          return Convert.ToInt32(X[0] - CountryBegin);                      }                      return SeekCountry(X[0]' Ipnum' Convert.ToInt16(Depth - 1));                  }              }              catch (Exception exc)              {                  throw new Exception("Error seeking country: " + exc.Message);              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,The following statement contains a magic number: try              {                  var Buffer = new byte[6];                  var X = new int[2];                  short I;                  short J;                  byte Y;                  if (Depth == 0)                  {                      throw new Exception();                  }                  m_MemoryStream.Seek(6*Offset' 0);                  var len = m_MemoryStream.Read(Buffer' 0' 6);                  if (len == 6)                  {                      for (I = 0; I <= 1; I++)                      {                          X[I] = 0;                          for (J = 0; J <= 2; J++)                          {                              Y = Buffer[I * 3 + J];                              if (Y < 0)                              {                                  Y = Convert.ToByte(Y + 256);                              }                              X[I] = Convert.ToInt32(X[I] + (Y << (J * 8)));                          }                      }                  }                  else                  {                      for (I = 0; I < 6; I++)                      {                          X[I] = 0;                      }                  }                    if ((Ipnum & (1 << Depth)) > 0)                  {                      if (X[1] >= CountryBegin)                      {                          return Convert.ToInt32(X[1] - CountryBegin);                      }                      return SeekCountry(X[1]' Ipnum' Convert.ToInt16(Depth - 1));                  }                  else                  {                      if (X[0] >= CountryBegin)                      {                          return Convert.ToInt32(X[0] - CountryBegin);                      }                      return SeekCountry(X[0]' Ipnum' Convert.ToInt16(Depth - 1));                  }              }              catch (Exception exc)              {                  throw new Exception("Error seeking country: " + exc.Message);              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,The following statement contains a magic number: try              {                  var Buffer = new byte[6];                  var X = new int[2];                  short I;                  short J;                  byte Y;                  if (Depth == 0)                  {                      throw new Exception();                  }                  m_MemoryStream.Seek(6*Offset' 0);                  var len = m_MemoryStream.Read(Buffer' 0' 6);                  if (len == 6)                  {                      for (I = 0; I <= 1; I++)                      {                          X[I] = 0;                          for (J = 0; J <= 2; J++)                          {                              Y = Buffer[I * 3 + J];                              if (Y < 0)                              {                                  Y = Convert.ToByte(Y + 256);                              }                              X[I] = Convert.ToInt32(X[I] + (Y << (J * 8)));                          }                      }                  }                  else                  {                      for (I = 0; I < 6; I++)                      {                          X[I] = 0;                      }                  }                    if ((Ipnum & (1 << Depth)) > 0)                  {                      if (X[1] >= CountryBegin)                      {                          return Convert.ToInt32(X[1] - CountryBegin);                      }                      return SeekCountry(X[1]' Ipnum' Convert.ToInt16(Depth - 1));                  }                  else                  {                      if (X[0] >= CountryBegin)                      {                          return Convert.ToInt32(X[0] - CountryBegin);                      }                      return SeekCountry(X[0]' Ipnum' Convert.ToInt16(Depth - 1));                  }              }              catch (Exception exc)              {                  throw new Exception("Error seeking country: " + exc.Message);              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,The following statement contains a magic number: try              {                  var Buffer = new byte[6];                  var X = new int[2];                  short I;                  short J;                  byte Y;                  if (Depth == 0)                  {                      throw new Exception();                  }                  m_MemoryStream.Seek(6*Offset' 0);                  var len = m_MemoryStream.Read(Buffer' 0' 6);                  if (len == 6)                  {                      for (I = 0; I <= 1; I++)                      {                          X[I] = 0;                          for (J = 0; J <= 2; J++)                          {                              Y = Buffer[I * 3 + J];                              if (Y < 0)                              {                                  Y = Convert.ToByte(Y + 256);                              }                              X[I] = Convert.ToInt32(X[I] + (Y << (J * 8)));                          }                      }                  }                  else                  {                      for (I = 0; I < 6; I++)                      {                          X[I] = 0;                      }                  }                    if ((Ipnum & (1 << Depth)) > 0)                  {                      if (X[1] >= CountryBegin)                      {                          return Convert.ToInt32(X[1] - CountryBegin);                      }                      return SeekCountry(X[1]' Ipnum' Convert.ToInt16(Depth - 1));                  }                  else                  {                      if (X[0] >= CountryBegin)                      {                          return Convert.ToInt32(X[0] - CountryBegin);                      }                      return SeekCountry(X[0]' Ipnum' Convert.ToInt16(Depth - 1));                  }              }              catch (Exception exc)              {                  throw new Exception("Error seeking country: " + exc.Message);              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,The following statement contains a magic number: try              {                  var Buffer = new byte[6];                  var X = new int[2];                  short I;                  short J;                  byte Y;                  if (Depth == 0)                  {                      throw new Exception();                  }                  m_MemoryStream.Seek(6*Offset' 0);                  var len = m_MemoryStream.Read(Buffer' 0' 6);                  if (len == 6)                  {                      for (I = 0; I <= 1; I++)                      {                          X[I] = 0;                          for (J = 0; J <= 2; J++)                          {                              Y = Buffer[I * 3 + J];                              if (Y < 0)                              {                                  Y = Convert.ToByte(Y + 256);                              }                              X[I] = Convert.ToInt32(X[I] + (Y << (J * 8)));                          }                      }                  }                  else                  {                      for (I = 0; I < 6; I++)                      {                          X[I] = 0;                      }                  }                    if ((Ipnum & (1 << Depth)) > 0)                  {                      if (X[1] >= CountryBegin)                      {                          return Convert.ToInt32(X[1] - CountryBegin);                      }                      return SeekCountry(X[1]' Ipnum' Convert.ToInt16(Depth - 1));                  }                  else                  {                      if (X[0] >= CountryBegin)                      {                          return Convert.ToInt32(X[0] - CountryBegin);                      }                      return SeekCountry(X[0]' Ipnum' Convert.ToInt16(Depth - 1));                  }              }              catch (Exception exc)              {                  throw new Exception("Error seeking country: " + exc.Message);              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,The following statement contains a magic number: try              {                  var Buffer = new byte[6];                  var X = new int[2];                  short I;                  short J;                  byte Y;                  if (Depth == 0)                  {                      throw new Exception();                  }                  m_MemoryStream.Seek(6*Offset' 0);                  var len = m_MemoryStream.Read(Buffer' 0' 6);                  if (len == 6)                  {                      for (I = 0; I <= 1; I++)                      {                          X[I] = 0;                          for (J = 0; J <= 2; J++)                          {                              Y = Buffer[I * 3 + J];                              if (Y < 0)                              {                                  Y = Convert.ToByte(Y + 256);                              }                              X[I] = Convert.ToInt32(X[I] + (Y << (J * 8)));                          }                      }                  }                  else                  {                      for (I = 0; I < 6; I++)                      {                          X[I] = 0;                      }                  }                    if ((Ipnum & (1 << Depth)) > 0)                  {                      if (X[1] >= CountryBegin)                      {                          return Convert.ToInt32(X[1] - CountryBegin);                      }                      return SeekCountry(X[1]' Ipnum' Convert.ToInt16(Depth - 1));                  }                  else                  {                      if (X[0] >= CountryBegin)                      {                          return Convert.ToInt32(X[0] - CountryBegin);                      }                      return SeekCountry(X[0]' Ipnum' Convert.ToInt16(Depth - 1));                  }              }              catch (Exception exc)              {                  throw new Exception("Error seeking country: " + exc.Message);              }
Magic Number,DotNetNuke.UI.WebControls,CountryLookup,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Controls\CountryListBox\CountryLookup.cs,SeekCountry,The following statement contains a magic number: try              {                  var Buffer = new byte[6];                  var X = new int[2];                  short I;                  short J;                  byte Y;                  if (Depth == 0)                  {                      throw new Exception();                  }                  m_MemoryStream.Seek(6*Offset' 0);                  var len = m_MemoryStream.Read(Buffer' 0' 6);                  if (len == 6)                  {                      for (I = 0; I <= 1; I++)                      {                          X[I] = 0;                          for (J = 0; J <= 2; J++)                          {                              Y = Buffer[I * 3 + J];                              if (Y < 0)                              {                                  Y = Convert.ToByte(Y + 256);                              }                              X[I] = Convert.ToInt32(X[I] + (Y << (J * 8)));                          }                      }                  }                  else                  {                      for (I = 0; I < 6; I++)                      {                          X[I] = 0;                      }                  }                    if ((Ipnum & (1 << Depth)) > 0)                  {                      if (X[1] >= CountryBegin)                      {                          return Convert.ToInt32(X[1] - CountryBegin);                      }                      return SeekCountry(X[1]' Ipnum' Convert.ToInt16(Depth - 1));                  }                  else                  {                      if (X[0] >= CountryBegin)                      {                          return Convert.ToInt32(X[0] - CountryBegin);                      }                      return SeekCountry(X[0]' Ipnum' Convert.ToInt16(Depth - 1));                  }              }              catch (Exception exc)              {                  throw new Exception("Error seeking country: " + exc.Message);              }
