Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,LoadSettings,Cyclomatic complexity of the method is 8
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetObjectList,The length of the statement  "                                                //This overload allows control of the page size. You can return all remaining results by passing null for the maxResults parameter' " is 131.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetFileUrl,The length of the statement  "	        var directLink = string.IsNullOrEmpty(GetSetting(folderMapping' DirectLink)) || GetSetting(folderMapping' DirectLink).ToLowerInvariant() == "true"; " is 147.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetFileUrl,The length of the statement  "			        policy = new SharedAccessBlobPolicy { Permissions = SharedAccessBlobPermissions.Read' SharedAccessExpiryTime = DateTime.UtcNow.AddYears(100)}; " is 142.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetFileUrl,The length of the statement  "                 * (see this article for further information https://connect.microsoft.com/VisualStudio/feedback/details/760974/windows-azure-sdk-cloudblobcontainer-setpermissions-permissions-as-microsoft-windowsazure-storageclient-blobcontainerpermissions-error). " is 247.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,LoadSettings,The length of the statement  "			chkDirectLink.Checked = !folderMappingSettings.ContainsKey(DirectLink) || folderMappingSettings[DirectLink].ToString().ToLowerInvariant() == "true"; " is 148.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,UpdateSettings,The length of the statement  "                valContainerName.ErrorMessage = Localization.GetString("MultipleFolderMappingsWithSameSettings.ErrorMessage"' LocalResourceFile); " is 129.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,AreThereFolderMappingsWithSameSettings,The length of the statement  "                .Where(fm => fm.FolderMappingID != folderMapping.FolderMappingID && fm.FolderProviderType == folderMapping.FolderProviderType) " is 126.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetFiles,The length of the statement  "            //        where f.StartsWith(mappedPath' true' CultureInfo.InvariantCulture) && f.Length > mappedPath.Length && r.IndexOf("/"' StringComparison.Ordinal) == -1 " is 158.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetFiles,The length of the statement  "                     let r = (!string.IsNullOrEmpty(mappedPath) ? Regex.Replace(f' pattern' ""' RegexOptions.IgnoreCase' TimeSpan.FromSeconds(2)) : f) " is 129.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetFiles,The length of the statement  "                    where f.StartsWith(mappedPath' true' CultureInfo.InvariantCulture) && f.Length > mappedPath.Length && r.IndexOf("/"' StringComparison.Ordinal) == -1 " is 148.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetSubFolders,The length of the statement  "            //        let r = (!string.IsNullOrEmpty(folderPath) ? RegexUtils.GetCachedRegex(Regex.Escape(folderPath)).Replace(f' string.Empty' 1) : f) " is 139.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,RenameFolder,The length of the statement  "            if (mappedPath == folder.FolderName + "/" || mappedPath.EndsWith("/" + folder.FolderName + "/"' StringComparison.Ordinal)) " is 122.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BusinessController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BusinessController.cs,UpgradeModule,The length of the statement  "                    var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger' p => p.Name == "DotNetNuke.Providers.FolderProviders"); " is 134.
Complex Conditional,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,CheckSettings,The conditional expression  "string.IsNullOrEmpty((string)settings[AccountName]) ||                  string.IsNullOrEmpty((string)settings[AccountKey]) ||                  string.IsNullOrEmpty((string)settings[Container]) ||                  string.IsNullOrEmpty((string)settings[UseHttps])"  is complex.
Magic Number,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,AzureFolderProvider,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 100;
Magic Number,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetObjectList,The following statement contains a magic number: return CBO.GetCachedObject<IList<IRemoteStorageItem>>(new CacheItemArgs(cacheKey'                                                                          ListObjectsCacheTimeout'                                                                          CacheItemPriority.Default'                                                                          folderMapping.FolderMappingID)'                                          c =>                                          {                                              var container = GetContainer(folderMapping);                                                BlobContinuationToken continuationToken = null;                                              BlobResultSegment resultSegment = null;                                                var list = new List<IRemoteStorageItem>();                                              do                                              {                                                  //This overload allows control of the page size. You can return all remaining results by passing null for the maxResults parameter'                                                  //or by calling a different overload.                                                  resultSegment = container.ListBlobsSegmented(""' true' BlobListingDetails.All' 10' continuationToken' null' null);                                                  foreach (var blobItem in resultSegment.Results)                                                  {                                                      list.Add(new AzureRemoteStorageItem {Blob = new AzureBlob(blobItem as CloudBlob)});                                                  }                                                    //Get the continuation token.                                                  continuationToken = resultSegment.ContinuationToken;                                              }                                              while (continuationToken != null);                                                                                            return list;                                          });
Magic Number,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetFileUrl,The following statement contains a magic number: if (directLink)  	        {  	            var folder = FolderManager.Instance.GetFolder(file.FolderId);                  var uri = folder.MappedPath + file.FileName;    		        var container = GetContainer(folderMapping);  		        var blob = container.GetBlobReference(uri);                  var absuri = blob.Uri.AbsoluteUri;                  var customDomain = GetEncryptedSetting(folderMapping.FolderMappingSettings' CustomDomain);                    if (!string.IsNullOrEmpty(customDomain))                  {                      var customUri = new UriBuilder(customDomain).Uri;                      absuri =                          new UriBuilder(blob.Uri.AbsoluteUri) { Host = customUri.Host' Scheme = customUri.Scheme' Port = customUri.Port }                              .Uri.AbsoluteUri;                  }                    const string groupPolicyIdentifier = "DNNFileManagerPolicy";    		        var permissions = container.GetPermissions();    		        SharedAccessBlobPolicy policy;    		        permissions.SharedAccessPolicies.TryGetValue(groupPolicyIdentifier' out policy);    		        if (policy == null)  		        {  			        policy = new SharedAccessBlobPolicy { Permissions = SharedAccessBlobPermissions.Read' SharedAccessExpiryTime = DateTime.UtcNow.AddYears(100)};    			        permissions.SharedAccessPolicies.Add(groupPolicyIdentifier' policy);  		        }  		        else  		        {  			        policy.Permissions = SharedAccessBlobPermissions.Read;  			        policy.SharedAccessExpiryTime = DateTime.UtcNow.AddYears(100);  		        }                    /*                   * Workaround for CONTENT-3662                   * The Azure Client Storage api has issue when used with Italian Thread.Culture or eventually other cultures                   * (see this article for further information https://connect.microsoft.com/VisualStudio/feedback/details/760974/windows-azure-sdk-cloudblobcontainer-setpermissions-permissions-as-microsoft-windowsazure-storageclient-blobcontainerpermissions-error).                   * This code changes the thread culture to en-US                   */                  var currentCulture = Thread.CurrentThread.CurrentCulture;                  if (currentCulture.Name != "en-US")                  {                      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");                  }    	            container.SetPermissions(permissions);    		        var signature = blob.GetSharedAccessSignature(new SharedAccessBlobPolicy()' groupPolicyIdentifier);                    // Reset original Thread Culture                  if (currentCulture.Name != "en-US")  	            {  	                Thread.CurrentThread.CurrentCulture = currentCulture;  	            }                    return absuri + signature;  	        }
Magic Number,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetFileUrl,The following statement contains a magic number: if (directLink)  	        {  	            var folder = FolderManager.Instance.GetFolder(file.FolderId);                  var uri = folder.MappedPath + file.FileName;    		        var container = GetContainer(folderMapping);  		        var blob = container.GetBlobReference(uri);                  var absuri = blob.Uri.AbsoluteUri;                  var customDomain = GetEncryptedSetting(folderMapping.FolderMappingSettings' CustomDomain);                    if (!string.IsNullOrEmpty(customDomain))                  {                      var customUri = new UriBuilder(customDomain).Uri;                      absuri =                          new UriBuilder(blob.Uri.AbsoluteUri) { Host = customUri.Host' Scheme = customUri.Scheme' Port = customUri.Port }                              .Uri.AbsoluteUri;                  }                    const string groupPolicyIdentifier = "DNNFileManagerPolicy";    		        var permissions = container.GetPermissions();    		        SharedAccessBlobPolicy policy;    		        permissions.SharedAccessPolicies.TryGetValue(groupPolicyIdentifier' out policy);    		        if (policy == null)  		        {  			        policy = new SharedAccessBlobPolicy { Permissions = SharedAccessBlobPermissions.Read' SharedAccessExpiryTime = DateTime.UtcNow.AddYears(100)};    			        permissions.SharedAccessPolicies.Add(groupPolicyIdentifier' policy);  		        }  		        else  		        {  			        policy.Permissions = SharedAccessBlobPermissions.Read;  			        policy.SharedAccessExpiryTime = DateTime.UtcNow.AddYears(100);  		        }                    /*                   * Workaround for CONTENT-3662                   * The Azure Client Storage api has issue when used with Italian Thread.Culture or eventually other cultures                   * (see this article for further information https://connect.microsoft.com/VisualStudio/feedback/details/760974/windows-azure-sdk-cloudblobcontainer-setpermissions-permissions-as-microsoft-windowsazure-storageclient-blobcontainerpermissions-error).                   * This code changes the thread culture to en-US                   */                  var currentCulture = Thread.CurrentThread.CurrentCulture;                  if (currentCulture.Name != "en-US")                  {                      Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US");                  }    	            container.SetPermissions(permissions);    		        var signature = blob.GetSharedAccessSignature(new SharedAccessBlobPolicy()' groupPolicyIdentifier);                    // Reset original Thread Culture                  if (currentCulture.Name != "en-US")  	            {  	                Thread.CurrentThread.CurrentCulture = currentCulture;  	            }                    return absuri + signature;  	        }
Magic Number,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,ddlContainers_SelectedIndexChanged,The following statement contains a magic number: if (tbAccountName.Text.Trim().Length > 0 && tbAccountKey.Text.Trim().Length > 0)              {                  ddlContainers.Items.Clear();                    ddlContainers.Items.Add(Localization.GetString("SelectContainer"' LocalResourceFile));                  ddlContainers.Items.Add(Localization.GetString("RefreshContainerList"' LocalResourceFile));                    LoadContainers();                    if (ddlContainers.Items.Count == 3)                  {                      // If there is only one container' then select it                      ddlContainers.SelectedValue = ddlContainers.Items[2].Value;                  }              }              else              {                  valContainerName.ErrorMessage = Localization.GetString("CredentialsRequired.ErrorMessage"' LocalResourceFile);                  valContainerName.IsValid = false;              }
Magic Number,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,ddlContainers_SelectedIndexChanged,The following statement contains a magic number: if (tbAccountName.Text.Trim().Length > 0 && tbAccountKey.Text.Trim().Length > 0)              {                  ddlContainers.Items.Clear();                    ddlContainers.Items.Add(Localization.GetString("SelectContainer"' LocalResourceFile));                  ddlContainers.Items.Add(Localization.GetString("RefreshContainerList"' LocalResourceFile));                    LoadContainers();                    if (ddlContainers.Items.Count == 3)                  {                      // If there is only one container' then select it                      ddlContainers.SelectedValue = ddlContainers.Items[2].Value;                  }              }              else              {                  valContainerName.ErrorMessage = Localization.GetString("CredentialsRequired.ErrorMessage"' LocalResourceFile);                  valContainerName.IsValid = false;              }
Magic Number,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetFiles,The following statement contains a magic number: return  (from i in list                      let f = i.Key                       let r = (!string.IsNullOrEmpty(mappedPath) ? Regex.Replace(f' pattern' ""' RegexOptions.IgnoreCase' TimeSpan.FromSeconds(2)) : f)                      where f.StartsWith(mappedPath' true' CultureInfo.InvariantCulture) && f.Length > mappedPath.Length && r.IndexOf("/"' StringComparison.Ordinal) == -1                      select Path.GetFileName(f)).ToArray();
Magic Number,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetSubFolders,The following statement contains a magic number: return (from o in list                  let f = o.Key                  let r =                      (!string.IsNullOrEmpty(folderPath)                          ? Regex.Replace(f'  pattern' ""' RegexOptions.IgnoreCase' TimeSpan.FromSeconds(2))                          : f)                  where f.StartsWith(folderPath' StringComparison.InvariantCultureIgnoreCase)                                     && f.Length > folderPath.Length                                     && r.IndexOf("/"' StringComparison.Ordinal) > -1                             select folderPath + r.Substring(0' r.IndexOf("/"' StringComparison.Ordinal)) + "/").Distinct().ToList();
Missing Default,DotNetNuke.Providers.FolderProviders.Components,BusinessController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BusinessController.cs,UpgradeModule,The following switch statement is missing a default case: switch (version)              {                  case "09.02.00":                      var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger' p => p.Name == "DotNetNuke.Providers.FolderProviders");                      if (package != null)                      {                          DataProvider.Instance().UnRegisterAssembly(package.PackageID' "Microsoft.WindowsAzure.StorageClient.dll");                      }                      break;              }
