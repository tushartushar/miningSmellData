Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,LoadSettings,Cyclomatic complexity of the method is 9
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetObjectList,The length of the statement  "                                                //This overload allows control of the page size. You can return all remaining results by passing null for the maxResults parameter' " is 131.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetObjectList,The length of the statement  "                                                resultSegment = container.ListBlobsSegmented(""' true' BlobListingDetails.All' synchBatchSize' continuationToken' null' null); " is 126.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetFileUrl,The length of the statement  "	        var directLink = string.IsNullOrEmpty(GetSetting(folderMapping' Constants.DirectLink)) || GetSetting(folderMapping' Constants.DirectLink).ToLowerInvariant() == "true"; " is 167.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetFileUrl,The length of the statement  "			        policy = new SharedAccessBlobPolicy { Permissions = SharedAccessBlobPermissions.Read' SharedAccessExpiryTime = DateTime.UtcNow.AddYears(100)}; " is 142.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetFileUrl,The length of the statement  "                 * (see this article for further information https://connect.microsoft.com/VisualStudio/feedback/details/760974/windows-azure-sdk-cloudblobcontainer-setpermissions-permissions-as-microsoft-windowsazure-storageclient-blobcontainerpermissions-error). " is 247.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,LoadSettings,The length of the statement  "            chkDirectLink.Checked = !folderMappingSettings.ContainsKey(Constants.DirectLink) || folderMappingSettings[Constants.DirectLink].ToString().ToLowerInvariant() == "true"; " is 168.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,LoadSettings,The length of the statement  "            if (folderMappingSettings.ContainsKey(Constants.SyncBatchSize) && folderMappingSettings[Constants.SyncBatchSize] != null) " is 121.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,UpdateSettings,The length of the statement  "                valContainerName.ErrorMessage = Localization.GetString("MultipleFolderMappingsWithSameSettings.ErrorMessage"' LocalResourceFile); " is 129.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,AreThereFolderMappingsWithSameSettings,The length of the statement  "                .Where(fm => fm.FolderMappingID != folderMapping.FolderMappingID && fm.FolderProviderType == folderMapping.FolderProviderType) " is 126.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,AreThereFolderMappingsWithSameSettings,The length of the statement  "                .Any(fm => fm.FolderMappingSettings[Constants.AccountName].ToString().Equals(accountName' StringComparison.InvariantCulture) && " is 127.
Long Statement,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,AreThereFolderMappingsWithSameSettings,The length of the statement  "                           fm.FolderMappingSettings[Constants.Container].ToString().Equals(container' StringComparison.InvariantCultureIgnoreCase)); " is 121.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetFiles,The length of the statement  "            //        where f.StartsWith(mappedPath' true' CultureInfo.InvariantCulture) && f.Length > mappedPath.Length && r.IndexOf("/"' StringComparison.Ordinal) == -1 " is 158.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetFiles,The length of the statement  "                     let r = (!string.IsNullOrEmpty(mappedPath) ? Regex.Replace(f' pattern' ""' RegexOptions.IgnoreCase' TimeSpan.FromSeconds(2)) : f) " is 129.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetFiles,The length of the statement  "                    where f.StartsWith(mappedPath' true' CultureInfo.InvariantCulture) && f.Length > mappedPath.Length && r.IndexOf("/"' StringComparison.Ordinal) == -1 " is 148.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetSubFolders,The length of the statement  "            //        let r = (!string.IsNullOrEmpty(folderPath) ? RegexUtils.GetCachedRegex(Regex.Escape(folderPath)).Replace(f' string.Empty' 1) : f) " is 139.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,RenameFolder,The length of the statement  "            if (mappedPath == folder.FolderName + "/" || mappedPath.EndsWith("/" + folder.FolderName + "/"' StringComparison.Ordinal)) " is 122.
Long Statement,DotNetNuke.Providers.FolderProviders.Components,BusinessController,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BusinessController.cs,UpgradeModule,The length of the statement  "                    var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger' p => p.Name == "DotNetNuke.Providers.FolderProviders"); " is 134.
Complex Conditional,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,CheckSettings,The conditional expression  "string.IsNullOrEmpty((string)settings[Constants.AccountName]) ||                  string.IsNullOrEmpty((string)settings[Constants.AccountKey]) ||                  string.IsNullOrEmpty((string)settings[Constants.Container]) ||                  string.IsNullOrEmpty((string)settings[Constants.UseHttps])"  is complex.
Magic Number,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,AzureFolderProvider,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 100;
Magic Number,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,AzureFolderProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\AzureFolderProvider.cs,GetFileUrl,The following statement contains a magic number: policy = new SharedAccessBlobPolicy { Permissions = SharedAccessBlobPermissions.Read' SharedAccessExpiryTime = DateTime.UtcNow.AddYears(100)};
Magic Number,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,ddlContainers_SelectedIndexChanged,The following statement contains a magic number: ddlContainers.SelectedValue = ddlContainers.Items[2].Value;
Magic Number,DotNetNuke.Providers.FolderProviders.AzureFolderProvider,Settings,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\AzureFolderProvider\Settings.ascx.cs,ddlContainers_SelectedIndexChanged,The following statement contains a magic number: ddlContainers.Items.Count == 3
Magic Number,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetFiles,The following statement contains a magic number: return  (from i in list                      let f = i.Key                       let r = (!string.IsNullOrEmpty(mappedPath) ? Regex.Replace(f' pattern' ""' RegexOptions.IgnoreCase' TimeSpan.FromSeconds(2)) : f)                      where f.StartsWith(mappedPath' true' CultureInfo.InvariantCulture) && f.Length > mappedPath.Length && r.IndexOf("/"' StringComparison.Ordinal) == -1                      select Path.GetFileName(f)).ToArray();
Magic Number,DotNetNuke.Providers.FolderProviders.Components,BaseRemoteStorageProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BaseRemoteStorageProvider.cs,GetSubFolders,The following statement contains a magic number: return (from o in list                  let f = o.Key                  let r =                      (!string.IsNullOrEmpty(folderPath)                          ? Regex.Replace(f'  pattern' ""' RegexOptions.IgnoreCase' TimeSpan.FromSeconds(2))                          : f)                  where f.StartsWith(folderPath' StringComparison.InvariantCultureIgnoreCase)                                     && f.Length > folderPath.Length                                     && r.IndexOf("/"' StringComparison.Ordinal) > -1                             select folderPath + r.Substring(0' r.IndexOf("/"' StringComparison.Ordinal)) + "/").Distinct().ToList();
Missing Default,DotNetNuke.Providers.FolderProviders.Components,BusinessController,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Providers\FolderProviders\Components\BusinessController.cs,UpgradeModule,The following switch statement is missing a default case: switch (version)              {                  case "09.02.00":                      var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger' p => p.Name == "DotNetNuke.Providers.FolderProviders");                      if (package != null)                      {                          DataProvider.Instance().UnRegisterAssembly(package.PackageID' "Microsoft.WindowsAzure.StorageClient.dll");                      }                      break;              }
