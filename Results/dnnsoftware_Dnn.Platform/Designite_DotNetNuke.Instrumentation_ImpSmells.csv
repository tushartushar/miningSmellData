Implementation smell,Namespace,Class,File,Method,Description
Magic Number,DotNetNuke.Instrumentation,DnnLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Instrumentation\DnnLogger.cs,DnnLogger,The following statement contains a magic number: if (stack != null) {  	int frameDepth = 0;  	Type methodType = stack [frameDepth].GetMethod ().ReflectedType;  	#pragma  	while (methodType == _dnnExceptionType || methodType == typeof(DnnLogger) || methodType == typeof(DnnLog) || methodType == typeof(Control))  	#pragma  	 {  		frameDepth++;  		methodType = stack [frameDepth].GetMethod ().ReflectedType;  	}  	_stackBoundary = new StackTrace ().GetFrame (frameDepth - 1).GetMethod ().DeclaringType;  } else {  	_stackBoundary = typeof(DnnLogger);  }  
Magic Number,DotNetNuke.Instrumentation,DnnLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Instrumentation\DnnLogger.cs,DnnLogger,The following statement contains a magic number: if (stack != null) {  	int frameDepth = 0;  	Type methodType = stack [frameDepth].GetMethod ().ReflectedType;  	#pragma  	while (methodType == _dnnExceptionType || methodType == typeof(DnnLogger) || methodType == typeof(DnnLog) || methodType == typeof(Control))  	#pragma  	 {  		frameDepth++;  		methodType = stack [frameDepth].GetMethod ().ReflectedType;  	}  	_stackBoundary = new StackTrace ().GetFrame (frameDepth - 1).GetMethod ().DeclaringType;  } else {  	_stackBoundary = typeof(DnnLogger);  }  
Magic Number,DotNetNuke.Instrumentation,DnnLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Instrumentation\DnnLogger.cs,DnnLogger,The following statement contains a magic number: if (stack != null) {  	int frameDepth = 0;  	Type methodType = stack [frameDepth].GetMethod ().ReflectedType;  	#pragma  	while (methodType == _dnnExceptionType || methodType == typeof(DnnLogger) || methodType == typeof(DnnLog) || methodType == typeof(Control))  	#pragma  	 {  		frameDepth++;  		methodType = stack [frameDepth].GetMethod ().ReflectedType;  	}  	_stackBoundary = new StackTrace ().GetFrame (frameDepth - 1).GetMethod ().DeclaringType;  } else {  	_stackBoundary = typeof(DnnLogger);  }  
Magic Number,DotNetNuke.Instrumentation,DnnLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Instrumentation\DnnLogger.cs,DnnLogger,The following statement contains a magic number: if (stack != null) {  	int frameDepth = 0;  	Type methodType = stack [frameDepth].GetMethod ().ReflectedType;  	#pragma  	while (methodType == _dnnExceptionType || methodType == typeof(DnnLogger) || methodType == typeof(DnnLog) || methodType == typeof(Control))  	#pragma  	 {  		frameDepth++;  		methodType = stack [frameDepth].GetMethod ().ReflectedType;  	}  	_stackBoundary = new StackTrace ().GetFrame (frameDepth - 1).GetMethod ().DeclaringType;  } else {  	_stackBoundary = typeof(DnnLogger);  }  
Magic Number,DotNetNuke.Instrumentation,DnnLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Instrumentation\DnnLogger.cs,DnnLogger,The following statement contains a magic number: while (methodType == _dnnExceptionType || methodType == typeof(DnnLogger) || methodType == typeof(DnnLog) || methodType == typeof(Control))  #pragma   {  	frameDepth++;  	methodType = stack [frameDepth].GetMethod ().ReflectedType;  }  
Magic Number,DotNetNuke.Instrumentation,DnnLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Instrumentation\DnnLogger.cs,DnnLogger,The following statement contains a magic number: while (methodType == _dnnExceptionType || methodType == typeof(DnnLogger) || methodType == typeof(DnnLog) || methodType == typeof(Control))  #pragma   {  	frameDepth++;  	methodType = stack [frameDepth].GetMethod ().ReflectedType;  }  
