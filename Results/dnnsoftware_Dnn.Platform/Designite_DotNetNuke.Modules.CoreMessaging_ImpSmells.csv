Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetNuke.Modules.CoreMessaging.Components,CoreMessagingBusinessController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Components\CoreMessagingBusinessController.cs,UpgradeModule,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetSubscriptions,Cyclomatic complexity of the method is 11
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Inbox,The length of the statement  "		var messageBoxView = InternalMessagingController.Instance.GetRecentInbox (UserInfo.UserID' afterMessageId' numberOfRecords); " is 124.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Inbox,The length of the statement  "		messageBoxView.TotalConversations = InternalMessagingController.Instance.CountConversations (UserInfo.UserID' portalId); " is 120.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Sentbox,The length of the statement  "		var messageBoxView = InternalMessagingController.Instance.GetRecentSentbox (UserInfo.UserID' afterMessageId' numberOfRecords); " is 126.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Sentbox,The length of the statement  "		messageBoxView.TotalConversations = InternalMessagingController.Instance.CountSentConversations (UserInfo.UserID' portalId); " is 124.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Archived,The length of the statement  "		var messageBoxView = InternalMessagingController.Instance.GetArchivedMessages (UserInfo.UserID' afterMessageId' numberOfRecords); " is 129.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Archived,The length of the statement  "		messageBoxView.TotalConversations = InternalMessagingController.Instance.CountArchivedConversations (UserInfo.UserID' portalId); " is 128.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Thread,The length of the statement  "		var messageThreadsView = InternalMessagingController.Instance.GetMessageThread (conversationId' UserInfo.UserID' afterMessageId' numberOfRecords' ref totalRecords); " is 164.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Thread,The length of the statement  "		messageThreadsView.TotalNewThreads = InternalMessagingController.Instance.CountUnreadMessages (UserInfo.UserID' portalId); " is 122.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Thread,The length of the statement  "		messageThreadsView.TotalArchivedThreads = InternalMessagingController.Instance.CountArchivedMessagesByConversation (conversationId); " is 132.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Reply,The length of the statement  "		var messageId = InternalMessagingController.Instance.ReplyMessage (postData.ConversationId' postData.Body' postData.FileIds); " is 125.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Reply,The length of the statement  "		var totalArchivedThreads = InternalMessagingController.Instance.CountArchivedMessagesByConversation (postData.ConversationId); " is 126.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Notifications,The length of the statement  "		var notificationsDomainModel = NotificationsController.Instance.GetNotifications (UserInfo.UserID' portalId' afterNotificationId' numberOfRecords); " is 147.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Notifications,The length of the statement  "			var notificationTypeActions = NotificationsController.Instance.GetNotificationTypeActions (notification.NotificationTypeID); " is 124.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,CheckReplyHasRecipients,The length of the statement  "		var recipientCount = InternalMessagingController.Instance.CheckReplyHasRecipients (conversationId' UserController.Instance.GetCurrentUserInfo ().UserID); " is 153.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,LocalizeActionString,The length of the statement  "		var resourceFile = string.Format ("~/DesktopModules/{0}/{1}/{2}"' desktopModule.FolderName.Replace ("\\"' "/")' Localization.LocalResourceDirectory' Localization.LocalSharedResourceFile); " is 187.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetSubscriptions,The length of the statement  "				sortedList = desc ? subscriptions.OrderByDescending (s => s.Description).ToList () : subscriptions.OrderBy (s => s.Description).ToList (); " is 138.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetSubscriptions,The length of the statement  "				sortedList = desc ? subscriptions.OrderByDescending (s => s.SubscriptionType).ToList () : subscriptions.OrderBy (s => s.SubscriptionType).ToList (); " is 148.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,DeleteContentSubscription,The length of the statement  "		var sub = SubscriptionController.Instance.GetUserSubscriptions (UserInfo' PortalSettings.PortalId).SingleOrDefault (s => s.SubscriptionId == subscription.SubscriptionId); " is 170.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetLocalizationTable,The length of the statement  "		var files = Directory.GetFiles (System.Web.HttpContext.Current.Server.MapPath (resourcesPath)).Select (x => new FileInfo (x).Name).Where (f => !IsLanguageSpecific (f)).ToList (); " is 178.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetLocalizationTable,The length of the statement  "		foreach (var kvp in files.SelectMany (f => GetLocalizationValues (resourcesPath' f' culture)).Where (kvp => !dictionary.ContainsKey (kvp.Key))) { " is 145.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetLocalizationTable,The length of the statement  "		foreach (var kvp in GetLocalizationValues (SharedResources' culture).Where (kvp => !dictionary.ContainsKey (kvp.Key))) { " is 120.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetSubscriptionViewModel,The length of the statement  "	var subscriptionType = SubscriptionTypeController.Instance.GetSubscriptionType (t => t.SubscriptionTypeId == subscription.SubscriptionTypeId); " is 142.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetLocalizationValues,The length of the statement  "	using (var stream = new FileStream (System.Web.HttpContext.Current.Server.MapPath (fullPath)' FileMode.Open' FileAccess.Read)) { " is 128.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetLocalizationValues,The length of the statement  "		foreach (var xmlNode in document.SelectNodes ("/root/data").Cast<XmlNode> ())// ReSharper restore AssignNullToNotNullAttribute " is 126.
Long Statement,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,AssertHeaderValue,The length of the statement  "	var header = headers.FirstOrDefault (x => GetNameAttribute (x).Equals (key' StringComparison.InvariantCultureIgnoreCase)); " is 122.
Long Statement,DotNetNuke.Modules.CoreMessaging,Subscriptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Subscriptions.ascx.cs,GetModuleSettings,The length of the statement  "	var usePopup = portalSettings.EnablePopUps && portalSettings.LoginTabId == Null.NullInteger && !HasSocialAuthenticationEnabled (); " is 130.
Long Statement,DotNetNuke.Modules.CoreMessaging,Subscriptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Subscriptions.ascx.cs,GetModuleSettings,The length of the statement  "	var navigationKey = moduleInfo != null && moduleInfo.DesktopModule != null ? GetHistoryNavigationKey (moduleInfo.DesktopModule.FriendlyName) : null; " is 148.
Long Statement,DotNetNuke.Modules.CoreMessaging,Subscriptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Subscriptions.ascx.cs,HasSocialAuthenticationEnabled,The length of the statement  "	let enabled = (a.AuthenticationType == "Facebook" || a.AuthenticationType == "Google" || a.AuthenticationType == "Live" || a.AuthenticationType == "Twitter") ? PortalController.GetPortalSettingAsBoolean (a.AuthenticationType + "_Enabled"' PortalSettings.Current.PortalId' false) : !string.IsNullOrEmpty (a.LoginControlSrc) " is 322.
Long Statement,DotNetNuke.Modules.CoreMessaging,View,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\View.ascx.cs,OnInit,The length of the statement  "		UI.Skins.Skin.AddModuleMessage (this' Localization.GetString ("ContentNotAvailable"' LocalResourceFile)' ModuleMessage.ModuleMessageType.YellowWarning); " is 152.
Long Statement,DotNetNuke.Modules.CoreMessaging,View,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\View.ascx.cs,OnInit,The length of the statement  "	if (UserId != ProfileUserId && (PortalSettings.ActiveTab.ParentId == PortalSettings.UserTabId || TabId == PortalSettings.UserTabId)) { " is 134.
Long Statement,DotNetNuke.Modules.CoreMessaging,View,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\View.ascx.cs,OnInit,The length of the statement  "		UI.Skins.Skin.AddModuleMessage (this' Localization.GetString ("PermissionsNotProperlySet"' LocalResourceFile)' ModuleMessage.ModuleMessageType.YellowWarning); " is 158.
Long Statement,DotNetNuke.Modules.CoreMessaging,View,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\View.ascx.cs,PermissionPredicate,The length of the statement  "	return p.PermissionKey == "VIEW" && p.AllowAccess && (p.RoleName == Globals.glbRoleAllUsersName || p.RoleName == Globals.glbRoleUnauthUserName); " is 144.
Empty Catch Block,DotNetNuke.Modules.CoreMessaging,Subscriptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Subscriptions.ascx.cs,GetSessionTimeout,The method has an empty catch block.
Magic Number,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Notifications,The following statement contains a magic number: try {  	var portalId = PortalController.GetEffectivePortalId (UserController.Instance.GetCurrentUserInfo ().PortalID);  	var notificationsDomainModel = NotificationsController.Instance.GetNotifications (UserInfo.UserID' portalId' afterNotificationId' numberOfRecords);  	var notificationsViewModel = new NotificationsViewModel {  		TotalNotifications = NotificationsController.Instance.CountNotifications (UserInfo.UserID' portalId)'  		Notifications = new List<NotificationViewModel> (notificationsDomainModel.Count)  	};  	foreach (var notification in notificationsDomainModel) {  		var user = UserController.Instance.GetUser (PortalSettings.PortalId' notification.SenderUserID);  		var displayName = (user != null ? user.DisplayName : "");  		var notificationViewModel = new NotificationViewModel {  			NotificationId = notification.NotificationID'  			Subject = notification.Subject'  			From = notification.From'  			Body = notification.Body'  			DisplayDate = Common.Utilities.DateUtils.CalculateDateForDisplay (notification.CreatedOnDate)'  			SenderAvatar = UserController.Instance.GetUserProfilePictureUrl (notification.SenderUserID' 64' 64)'  			SenderProfileUrl = Globals.UserProfileURL (notification.SenderUserID)'  			SenderDisplayName = displayName'  			Actions = new List<NotificationActionViewModel> ()  		};  		var notificationType = NotificationsController.Instance.GetNotificationType (notification.NotificationTypeID);  		var notificationTypeActions = NotificationsController.Instance.GetNotificationTypeActions (notification.NotificationTypeID);  		foreach (var notificationTypeAction in notificationTypeActions) {  			var notificationActionViewModel = new NotificationActionViewModel {  				Name = LocalizeActionString (notificationTypeAction.NameResourceKey' notificationType.DesktopModuleId)'  				Description = LocalizeActionString (notificationTypeAction.DescriptionResourceKey' notificationType.DesktopModuleId)'  				Confirm = LocalizeActionString (notificationTypeAction.ConfirmResourceKey' notificationType.DesktopModuleId)'  				APICall = notificationTypeAction.APICall  			};  			notificationViewModel.Actions.Add (notificationActionViewModel);  		}  		if (notification.IncludeDismissAction) {  			notificationViewModel.Actions.Add (new NotificationActionViewModel {  				Name = Localization.GetString ("Dismiss.Text")'  				Description = Localization.GetString ("DismissNotification.Text")'  				Confirm = ""'  				APICall = "API/InternalServices/NotificationsService/Dismiss"  			});  		}  		notificationsViewModel.Notifications.Add (notificationViewModel);  	}  	return Request.CreateResponse (HttpStatusCode.OK' notificationsViewModel);  } catch (Exception exc) {  	Logger.Error (exc);  	return Request.CreateErrorResponse (HttpStatusCode.InternalServerError' exc);  }  
Magic Number,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Notifications,The following statement contains a magic number: try {  	var portalId = PortalController.GetEffectivePortalId (UserController.Instance.GetCurrentUserInfo ().PortalID);  	var notificationsDomainModel = NotificationsController.Instance.GetNotifications (UserInfo.UserID' portalId' afterNotificationId' numberOfRecords);  	var notificationsViewModel = new NotificationsViewModel {  		TotalNotifications = NotificationsController.Instance.CountNotifications (UserInfo.UserID' portalId)'  		Notifications = new List<NotificationViewModel> (notificationsDomainModel.Count)  	};  	foreach (var notification in notificationsDomainModel) {  		var user = UserController.Instance.GetUser (PortalSettings.PortalId' notification.SenderUserID);  		var displayName = (user != null ? user.DisplayName : "");  		var notificationViewModel = new NotificationViewModel {  			NotificationId = notification.NotificationID'  			Subject = notification.Subject'  			From = notification.From'  			Body = notification.Body'  			DisplayDate = Common.Utilities.DateUtils.CalculateDateForDisplay (notification.CreatedOnDate)'  			SenderAvatar = UserController.Instance.GetUserProfilePictureUrl (notification.SenderUserID' 64' 64)'  			SenderProfileUrl = Globals.UserProfileURL (notification.SenderUserID)'  			SenderDisplayName = displayName'  			Actions = new List<NotificationActionViewModel> ()  		};  		var notificationType = NotificationsController.Instance.GetNotificationType (notification.NotificationTypeID);  		var notificationTypeActions = NotificationsController.Instance.GetNotificationTypeActions (notification.NotificationTypeID);  		foreach (var notificationTypeAction in notificationTypeActions) {  			var notificationActionViewModel = new NotificationActionViewModel {  				Name = LocalizeActionString (notificationTypeAction.NameResourceKey' notificationType.DesktopModuleId)'  				Description = LocalizeActionString (notificationTypeAction.DescriptionResourceKey' notificationType.DesktopModuleId)'  				Confirm = LocalizeActionString (notificationTypeAction.ConfirmResourceKey' notificationType.DesktopModuleId)'  				APICall = notificationTypeAction.APICall  			};  			notificationViewModel.Actions.Add (notificationActionViewModel);  		}  		if (notification.IncludeDismissAction) {  			notificationViewModel.Actions.Add (new NotificationActionViewModel {  				Name = Localization.GetString ("Dismiss.Text")'  				Description = Localization.GetString ("DismissNotification.Text")'  				Confirm = ""'  				APICall = "API/InternalServices/NotificationsService/Dismiss"  			});  		}  		notificationsViewModel.Notifications.Add (notificationViewModel);  	}  	return Request.CreateResponse (HttpStatusCode.OK' notificationsViewModel);  } catch (Exception exc) {  	Logger.Error (exc);  	return Request.CreateErrorResponse (HttpStatusCode.InternalServerError' exc);  }  
Magic Number,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Notifications,The following statement contains a magic number: foreach (var notification in notificationsDomainModel) {  	var user = UserController.Instance.GetUser (PortalSettings.PortalId' notification.SenderUserID);  	var displayName = (user != null ? user.DisplayName : "");  	var notificationViewModel = new NotificationViewModel {  		NotificationId = notification.NotificationID'  		Subject = notification.Subject'  		From = notification.From'  		Body = notification.Body'  		DisplayDate = Common.Utilities.DateUtils.CalculateDateForDisplay (notification.CreatedOnDate)'  		SenderAvatar = UserController.Instance.GetUserProfilePictureUrl (notification.SenderUserID' 64' 64)'  		SenderProfileUrl = Globals.UserProfileURL (notification.SenderUserID)'  		SenderDisplayName = displayName'  		Actions = new List<NotificationActionViewModel> ()  	};  	var notificationType = NotificationsController.Instance.GetNotificationType (notification.NotificationTypeID);  	var notificationTypeActions = NotificationsController.Instance.GetNotificationTypeActions (notification.NotificationTypeID);  	foreach (var notificationTypeAction in notificationTypeActions) {  		var notificationActionViewModel = new NotificationActionViewModel {  			Name = LocalizeActionString (notificationTypeAction.NameResourceKey' notificationType.DesktopModuleId)'  			Description = LocalizeActionString (notificationTypeAction.DescriptionResourceKey' notificationType.DesktopModuleId)'  			Confirm = LocalizeActionString (notificationTypeAction.ConfirmResourceKey' notificationType.DesktopModuleId)'  			APICall = notificationTypeAction.APICall  		};  		notificationViewModel.Actions.Add (notificationActionViewModel);  	}  	if (notification.IncludeDismissAction) {  		notificationViewModel.Actions.Add (new NotificationActionViewModel {  			Name = Localization.GetString ("Dismiss.Text")'  			Description = Localization.GetString ("DismissNotification.Text")'  			Confirm = ""'  			APICall = "API/InternalServices/NotificationsService/Dismiss"  		});  	}  	notificationsViewModel.Notifications.Add (notificationViewModel);  }  
Magic Number,DotNetNuke.Modules.CoreMessaging.Services,MessagingServiceController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\MessagingServiceController.cs,Notifications,The following statement contains a magic number: foreach (var notification in notificationsDomainModel) {  	var user = UserController.Instance.GetUser (PortalSettings.PortalId' notification.SenderUserID);  	var displayName = (user != null ? user.DisplayName : "");  	var notificationViewModel = new NotificationViewModel {  		NotificationId = notification.NotificationID'  		Subject = notification.Subject'  		From = notification.From'  		Body = notification.Body'  		DisplayDate = Common.Utilities.DateUtils.CalculateDateForDisplay (notification.CreatedOnDate)'  		SenderAvatar = UserController.Instance.GetUserProfilePictureUrl (notification.SenderUserID' 64' 64)'  		SenderProfileUrl = Globals.UserProfileURL (notification.SenderUserID)'  		SenderDisplayName = displayName'  		Actions = new List<NotificationActionViewModel> ()  	};  	var notificationType = NotificationsController.Instance.GetNotificationType (notification.NotificationTypeID);  	var notificationTypeActions = NotificationsController.Instance.GetNotificationTypeActions (notification.NotificationTypeID);  	foreach (var notificationTypeAction in notificationTypeActions) {  		var notificationActionViewModel = new NotificationActionViewModel {  			Name = LocalizeActionString (notificationTypeAction.NameResourceKey' notificationType.DesktopModuleId)'  			Description = LocalizeActionString (notificationTypeAction.DescriptionResourceKey' notificationType.DesktopModuleId)'  			Confirm = LocalizeActionString (notificationTypeAction.ConfirmResourceKey' notificationType.DesktopModuleId)'  			APICall = notificationTypeAction.APICall  		};  		notificationViewModel.Actions.Add (notificationActionViewModel);  	}  	if (notification.IncludeDismissAction) {  		notificationViewModel.Actions.Add (new NotificationActionViewModel {  			Name = Localization.GetString ("Dismiss.Text")'  			Description = Localization.GetString ("DismissNotification.Text")'  			Confirm = ""'  			APICall = "API/InternalServices/NotificationsService/Dismiss"  		});  	}  	notificationsViewModel.Notifications.Add (notificationViewModel);  }  
Magic Number,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetSubscriptions,The following statement contains a magic number: try {  	var subscriptions = from s in SubscriptionController.Instance.GetUserSubscriptions (UserInfo' PortalSettings.PortalId)  	select GetSubscriptionViewModel (s);  	List<SubscriptionViewModel> sortedList;  	if (string.IsNullOrEmpty (sortExpression)) {  		sortedList = subscriptions.ToList ();  	} else {  		var sort = sortExpression.Split (' ');  		var desc = sort.Length == 2 && sort [1] == "desc";  		switch (sort [0]) {  		case "Description":  			sortedList = desc ? subscriptions.OrderByDescending (s => s.Description).ToList () : subscriptions.OrderBy (s => s.Description).ToList ();  			break;  		case "SubscriptionType":  			sortedList = desc ? subscriptions.OrderByDescending (s => s.SubscriptionType).ToList () : subscriptions.OrderBy (s => s.SubscriptionType).ToList ();  			break;  		default:  			sortedList = subscriptions.ToList ();  			break;  		}  	}  	var response = new {  		Success = true'  		Results = sortedList.Skip (pageIndex * pageSize).Take (pageSize).ToList ()'  		TotalResults = sortedList.Count ()  	};  	return Request.CreateResponse (HttpStatusCode.OK' response);  } catch (Exception ex) {  	Exceptions.LogException (ex);  	return Request.CreateErrorResponse (HttpStatusCode.InternalServerError' ex.Message);  }  
Magic Number,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,GetSubscriptions,The following statement contains a magic number: if (string.IsNullOrEmpty (sortExpression)) {  	sortedList = subscriptions.ToList ();  } else {  	var sort = sortExpression.Split (' ');  	var desc = sort.Length == 2 && sort [1] == "desc";  	switch (sort [0]) {  	case "Description":  		sortedList = desc ? subscriptions.OrderByDescending (s => s.Description).ToList () : subscriptions.OrderBy (s => s.Description).ToList ();  		break;  	case "SubscriptionType":  		sortedList = desc ? subscriptions.OrderByDescending (s => s.SubscriptionType).ToList () : subscriptions.OrderBy (s => s.SubscriptionType).ToList ();  		break;  	default:  		sortedList = subscriptions.ToList ();  		break;  	}  }  
Magic Number,DotNetNuke.Modules.CoreMessaging.Services,SubscriptionsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Services\SubscriptionsController.cs,IsLanguageSpecific,The following statement contains a magic number: if (components.Length > 1) {  	var language = components [components.Length - 2];  	if (!string.IsNullOrEmpty (language)) {  		try {  			CultureInfo.GetCultureInfo (language);  			return true;  		} catch (CultureNotFoundException) {  			return false;  		}  	}  }  
Magic Number,DotNetNuke.Modules.CoreMessaging,Subscriptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Subscriptions.ascx.cs,GetViewSettings,The following statement contains a magic number: return new Hashtable {  	{  		"moduleScope"'  		string.Format ("#{0}"' ScopeWrapper.ClientID)  	}'  	{  		"pageSize"'  		25  	}'  	{  		"notifyFrequency"'  		userPreference != null ? (int)userPreference.NotificationsEmailFrequency : notifyFrequency  	}'  	{  		"msgFrequency"'  		userPreference != null ? (int)userPreference.MessagesEmailFrequency : messageFrequency  	}  };  
Magic Number,DotNetNuke.Modules.CoreMessaging,Subscriptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Subscriptions.ascx.cs,GetSessionTimeout,The following statement contains a magic number: return TimeSpan.FromMinutes (25);  
Magic Number,DotNetNuke.Modules.CoreMessaging,View,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\View.ascx.cs,AddIe7StyleSheet,The following statement contains a magic number: if (browser.Type == "IE" || browser.MajorVersion < 8) {  	const string cssLink = "<link href=\"/ie-messages.css\" rel=\"stylesheet\" type=\"text/css\" />";  	Page.Header.Controls.Add (new LiteralControl (cssLink));  }  
Missing Default,DotNetNuke.Modules.CoreMessaging.Components,CoreMessagingBusinessController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\CoreMessaging\Components\CoreMessagingBusinessController.cs,UpgradeModule,The following switch statement is missing a default case: switch (Version) {  case "06.02.00":  	var moduleDefinition = ModuleDefinitionController.GetModuleDefinitionByFriendlyName ("Message Center");  	if (moduleDefinition != null) {  		var portals = PortalController.Instance.GetPortals ();  		foreach (PortalInfo portal in portals) {  			if (portal.UserTabId > Null.NullInteger) {  				//Find TabInfo  				var tab = TabController.Instance.GetTab (portal.UserTabId' portal.PortalID' true);  				if (tab != null) {  					foreach (var module in ModuleController.Instance.GetTabModules (portal.UserTabId).Values) {  						if (module.DesktopModule.FriendlyName == "Messaging") {  							//Delete the Module from the Modules list  							ModuleController.Instance.DeleteTabModule (module.TabID' module.ModuleID' false);  							//Add new module to the page  							Upgrade.AddModuleToPage (tab' moduleDefinition.ModuleDefID' "Message Center"' ""' true);  							break;  						}  					}  				}  			}  		}  	}  	break;  }  
