Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetNuke.Tests.Urls,FriendlyUrlTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\FriendlyUrlTests.cs,AdvancedUrlProvider_Regex,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Tests.Urls,UrlRewriteTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\UrlRewriteTests.cs,AdvancedUrlRewriter_Regex,Cyclomatic complexity of the method is 11
Long Parameter List,DotNetNuke.Tests.Urls,ExtensionUrlProviderControllerTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,AddProviderRow,The method has 11 parameters. Parameters: providersTable' extensionUrlProviderId' portalId' desktopModuleId' providerName' providerType' settingsControlSrc' isActive' rewriteAllUrls' redirectAllUrls' replaceAllUrls
Long Parameter List,DotNetNuke.Tests.Urls,FakeExtensionUrlProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,ChangeFriendlyUrl,The method has 7 parameters. Parameters: tab' friendlyUrlPath' options' cultureCode' endingPageName' useDnnPagePath' messages
Long Parameter List,DotNetNuke.Tests.Urls,FakeExtensionUrlProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,CheckForRedirect,The method has 8 parameters. Parameters: tabId' portalid' httpAlias' requestUri' queryStringCol' options' redirectLocation' messages
Long Parameter List,DotNetNuke.Tests.Urls,FakeExtensionUrlProvider,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,TransformFriendlyUrlToQueryString,The method has 9 parameters. Parameters: urlParms' tabId' portalId' options' cultureCode' portalAlias' messages' status' location
Long Parameter List,DotNetNuke.Tests.Urls,UrlTestFactoryClass,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\UrlTestFactoryClass.cs,GetTests,The method has 5 parameters. Parameters: testPrefix' alias' testType' testName' testData
Long Identifier,DotNetNuke.Tests.Urls,ExtensionUrlProviderControllerTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,GetModuleProviders_ExcludeSingleProviderWithTypeThatDoesNotExist,The length of the parameter getExtensionUrlProvidersDataSet is 31.
Long Identifier,DotNetNuke.Tests.Urls,ExtensionUrlProviderControllerTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,GetModuleProviders_OnlyExcludeProviderWithTypeThatDoesNotExistButIncludeOther,The length of the parameter getExtensionUrlProvidersDataSet is 31.
Long Identifier,DotNetNuke.Tests.Urls,ExtensionUrlProviderControllerTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,SetupGetModuleProvidersCall,The length of the parameter getExtensionUrlProvidersReader is 30.
Long Identifier,DotNetNuke.Tests.Urls,ExtensionUrlProviderControllerTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,GetDataSetForExtensionUrlProvidersCall,The length of the parameter getExtensionUrlProvidersDataSet is 31.
Long Statement,DotNetNuke.Tests.Urls,ExtensionUrlProviderControllerTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,GetModuleProviders_OnlyExcludeProviderWithTypeThatDoesNotExistButIncludeOther,The length of the statement  "            AddProviderRow(providersTable' providerName: "Working Provider"' providerType: typeof(FakeExtensionUrlProvider).AssemblyQualifiedName); " is 135.
Long Statement,DotNetNuke.Tests.Urls,ExtensionUrlProviderControllerTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,GetModuleProviders_OnlyExcludeProviderWithTypeThatDoesNotExistButIncludeOther,The length of the statement  "            Assert.AreEqual("Working Provider"' providers[0].ProviderConfig.ProviderName' "Providers list should have the valid entry"); " is 124.
Long Statement,DotNetNuke.Tests.Urls,ExtensionUrlProviderControllerTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,SetupGetModuleProvidersCall,The length of the statement  "            dataProvider.Setup(dp => dp.GetExtensionUrlProviders(Constants.PORTAL_ValidPortalId)).Returns(getExtensionUrlProvidersReader); " is 126.
Long Statement,DotNetNuke.Tests.Urls,ExtensionUrlProviderControllerTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,GetDataSetForExtensionUrlProvidersCall,The length of the statement  "                    new DataColumn("IsActive"' typeof(bool))' new DataColumn("RewriteAllUrls"' typeof(bool))' new DataColumn("RedirectAllUrls"' typeof(bool))' " is 138.
Long Statement,DotNetNuke.Tests.Urls,ExtensionUrlProviderControllerTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\ExtensionUrlProviderControllerTests.cs,GetDataSetForExtensionUrlProvidersCall,The length of the statement  "            providerTabsTable.Columns.AddRange(new[] { new DataColumn("ExtensionUrlProviderID"' typeof(int))' new DataColumn("TabId"' typeof(int))' }); " is 139.
Long Statement,DotNetNuke.Tests.Urls,UrlRewriteTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\UrlRewriteTests.cs,ExecuteTestForTab,The length of the statement  "                    Assert.IsTrue(expectedRedirectUrl.Equals(testHelper.Result.FinalUrl.TrimStart('/')' StringComparison.InvariantCultureIgnoreCase)); " is 130.
Magic Number,DotNetNuke.Tests.Urls,FriendlyUrlTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\FriendlyUrlTests.cs,TestFixtureSetUp,The following statement contains a magic number: TestUtil.ReadStream(String.Format("{0}"' "Users")' (line' header) =>                          {                              string[] fields = line.Split(''');                                TestUtil.AddUser(PortalId' fields[0].Trim()' fields[1].Trim()' fields[2].Trim());                          });
Magic Number,DotNetNuke.Tests.Urls,UrlRewriteTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\UrlRewriteTests.cs,TestFixtureSetUp,The following statement contains a magic number: TestUtil.ReadStream(String.Format("{0}"' "Users")' (line' header) =>                                  {                                      string[] fields = line.Split(''');                                        TestUtil.AddUser(PortalId' fields[0].Trim()' fields[1].Trim()' fields[2].Trim());                                  });
Magic Number,DotNetNuke.Tests.Urls,UrlRewriteTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\UrlRewriteTests.cs,ExecuteTestForTab,The following statement contains a magic number: switch (expectedStatus)              {                  case 200:                      //Test expected rewrite path                      if (!String.IsNullOrEmpty(expectedResult))                      {                          Assert.AreEqual(expectedResult' testHelper.Result.RewritePath.TrimStart('/'));                      }                      break;                  case 301:                  case 302:                      //Test for final Url if redirected                      Assert.IsTrue(expectedRedirectUrl.Equals(testHelper.Result.FinalUrl.TrimStart('/')' StringComparison.InvariantCultureIgnoreCase));                      Assert.AreEqual(redirectReason' testHelper.Result.Reason.ToString()' "Redirect reason incorrect");                      break;              }
Magic Number,DotNetNuke.Tests.Urls,UrlRewriteTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\UrlRewriteTests.cs,ExecuteTestForTab,The following statement contains a magic number: switch (expectedStatus)              {                  case 200:                      //Test expected rewrite path                      if (!String.IsNullOrEmpty(expectedResult))                      {                          Assert.AreEqual(expectedResult' testHelper.Result.RewritePath.TrimStart('/'));                      }                      break;                  case 301:                  case 302:                      //Test for final Url if redirected                      Assert.IsTrue(expectedRedirectUrl.Equals(testHelper.Result.FinalUrl.TrimStart('/')' StringComparison.InvariantCultureIgnoreCase));                      Assert.AreEqual(redirectReason' testHelper.Result.Reason.ToString()' "Redirect reason incorrect");                      break;              }
Magic Number,DotNetNuke.Tests.Urls,UrlRewriteTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\UrlRewriteTests.cs,ExecuteTestForTab,The following statement contains a magic number: switch (expectedStatus)              {                  case 200:                      //Test expected rewrite path                      if (!String.IsNullOrEmpty(expectedResult))                      {                          Assert.AreEqual(expectedResult' testHelper.Result.RewritePath.TrimStart('/'));                      }                      break;                  case 301:                  case 302:                      //Test for final Url if redirected                      Assert.IsTrue(expectedRedirectUrl.Equals(testHelper.Result.FinalUrl.TrimStart('/')' StringComparison.InvariantCultureIgnoreCase));                      Assert.AreEqual(redirectReason' testHelper.Result.Reason.ToString()' "Redirect reason incorrect");                      break;              }
Missing Default,DotNetNuke.Tests.Urls,FriendlyUrlTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\FriendlyUrlTests.cs,AdvancedUrlProvider_PageExtension,The following switch statement is missing a default case: switch (pageExtensionUsageType)              {                  case "AlwaysUse":                      settings.PageExtensionUsageType = PageExtensionUsageType.AlwaysUse;                      break;                  case "PageOnly":                      settings.PageExtensionUsageType = PageExtensionUsageType.PageOnly;                      break;                  case "Never":                      settings.PageExtensionUsageType = PageExtensionUsageType.Never;                      break;              }
Missing Default,DotNetNuke.Tests.Urls,FriendlyUrlTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\FriendlyUrlTests.cs,AdvancedUrlProvider_Regex,The following switch statement is missing a default case: switch (regexSetting)                  {                      case "IgnoreRegex":                          settings.IgnoreRegex = regexValue;                          break;                      case "DoNotRewriteRegex":                          settings.DoNotRewriteRegex = regexValue;                          break;                      case "UseSiteUrlsRegex":                          settings.UseSiteUrlsRegex = regexValue;                          break;                      case "DoNotRedirectRegex":                          settings.DoNotRedirectRegex = regexValue;                          break;                      case "DoNotRedirectSecureRegex":                          settings.DoNotRedirectSecureRegex = regexValue;                          break;                      case "ForceLowerCaseRegex":                          settings.ForceLowerCaseRegex = regexValue;                          break;                      case "NoFriendlyUrlRegex":                          settings.NoFriendlyUrlRegex = regexValue;                          break;                      case "DoNotIncludeInPathRegex":                          settings.DoNotIncludeInPathRegex = regexValue;                          break;                      case "ValidExtensionlessUrlsRegex":                          settings.ValidExtensionlessUrlsRegex = regexValue;                          break;                      case "RegexMatch":                          settings.RegexMatch = regexValue;                          break;                  }
Missing Default,DotNetNuke.Tests.Urls,UrlRewriteTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\UrlRewriteTests.cs,ExecuteTestForTab,The following switch statement is missing a default case: switch (expectedStatus)              {                  case 200:                      //Test expected rewrite path                      if (!String.IsNullOrEmpty(expectedResult))                      {                          Assert.AreEqual(expectedResult' testHelper.Result.RewritePath.TrimStart('/'));                      }                      break;                  case 301:                  case 302:                      //Test for final Url if redirected                      Assert.IsTrue(expectedRedirectUrl.Equals(testHelper.Result.FinalUrl.TrimStart('/')' StringComparison.InvariantCultureIgnoreCase));                      Assert.AreEqual(redirectReason' testHelper.Result.Reason.ToString()' "Redirect reason incorrect");                      break;              }
Missing Default,DotNetNuke.Tests.Urls,UrlRewriteTests,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Tests\DotNetNuke.Tests.Urls\UrlRewriteTests.cs,AdvancedUrlRewriter_Regex,The following switch statement is missing a default case: switch (regexSetting)                  {                      case "IgnoreRegex":                          settings.IgnoreRegex = regexValue;                          break;                      case "DoNotRewriteRegex":                          settings.DoNotRewriteRegex = regexValue;                          break;                      case "UseSiteUrlsRegex":                          settings.UseSiteUrlsRegex = regexValue;                          break;                      case "DoNotRedirectRegex":                          settings.DoNotRedirectRegex = regexValue;                          break;                      case "DoNotRedirectSecureRegex":                          settings.DoNotRedirectSecureRegex = regexValue;                          break;                      case "ForceLowerCaseRegex":                          settings.ForceLowerCaseRegex = regexValue;                          break;                      case "NoFriendlyUrlRegex":                          settings.NoFriendlyUrlRegex = regexValue;                          break;                      case "DoNotIncludeInPathRegex":                          settings.DoNotIncludeInPathRegex = regexValue;                          break;                      case "ValidExtensionlessUrlsRegex":                          settings.ValidExtensionlessUrlsRegex = regexValue;                          break;                      case "RegexMatch":                          settings.RegexMatch = regexValue;                          break;                  }
