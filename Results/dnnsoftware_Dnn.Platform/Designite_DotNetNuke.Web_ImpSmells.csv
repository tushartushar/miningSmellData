Implementation smell,Namespace,Class,File,Method,Description
Long Method,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,The method has 116 lines of code.
Long Method,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForPageInternal,The method has 100 lines of code.
Long Method,DotNetNuke.Web.InternalServices,FileUploadController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\FileUploadController.cs,UploadFile,The method has 113 lines of code.
Long Method,DotNetNuke.Web.UI.WebControls,DnnUrlControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnUrlControl.cs,DoRenderTypes,The method has 118 lines of code.
Long Method,DotNetNuke.Web.UI.WebControls,DnnUrlControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnUrlControl.cs,DoRenderTypeControls,The method has 132 lines of code.
Long Method,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,SaveTabInfoObject,The method has 185 lines of code.
Long Method,DotNetNuke.Web.UI,Utilities,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\Utilities.cs,ApplySkin,The method has 111 lines of code.
Complex Method,DotNetNuke.Web.Api,DnnAuthorizeAttribute,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\DnnAuthorizeAttribute.cs,IsAuthorized,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Web.Api,TraceWriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\TraceWriter.cs,Log,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Web.Api.Internal,ServicesRoutingManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\ServicesRoutingManager.cs,RegisterAuthenticationHandlers,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,AddModule,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddNewModule,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForPageInternal,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForFolderInternal,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,GetGroupedDetailViews,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Web.UI.WebControls,DnnUrlControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnUrlControl.cs,DoChangeURL,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Web.UI.WebControls,DnnUrlControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnUrlControl.cs,DoRenderTypes,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Web.UI.WebControls,DnnFilePicker,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFilePicker.cs,OnPreRender,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Web.UI.WebControls,Tags,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Tags.cs,RenderControl,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,SaveTabInfoObject,Cyclomatic complexity of the method is 23
Complex Method,DotNetNuke.Web.UI,Utilities,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\Utilities.cs,ApplySkin,Cyclomatic complexity of the method is 20
Long Parameter List,DotNetNuke.Web.Api,StringPassThroughMediaTypeFormatter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\StringPassThroughMediaTypeFormatter.cs,WriteToStreamAsync,The method has 5 parameters. Parameters: type' value' writeStream' content' transportContext
Long Parameter List,DotNetNuke.Web.Api,UrlHelperExtensions,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\UrlHelperExtensions.cs,DnnLink,The method has 5 parameters. Parameters: urlHelper' moduleFolderName' routeName' routeValues' portalAliasInfo
Long Parameter List,DotNetNuke.Web.Api,IMapRoute,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\IMapRoute.cs,MapHttpRoute,The method has 6 parameters. Parameters: moduleFolderName' routeName' url' defaults' constraints' namespaces
Long Parameter List,DotNetNuke.Web.Api,IMapRoute,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\IMapRoute.cs,MapHttpRoute,The method has 5 parameters. Parameters: moduleFolderName' routeName' url' defaults' namespaces
Long Parameter List,DotNetNuke.Web.Api.Internal,ServicesRoutingManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\ServicesRoutingManager.cs,MapHttpRoute,The method has 6 parameters. Parameters: moduleFolderName' routeName' url' defaults' constraints' namespaces
Long Parameter List,DotNetNuke.Web.Api.Internal,ServicesRoutingManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\ServicesRoutingManager.cs,MapHttpRoute,The method has 5 parameters. Parameters: moduleFolderName' routeName' url' defaults' namespaces
Long Parameter List,DotNetNuke.Web.Api.Internal,ServicesRoutingManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\ServicesRoutingManager.cs,MapHttpRouteWithNamespace,The method has 5 parameters. Parameters: name' url' defaults' constraints' namespaces
Long Parameter List,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,GetPortalDesktopModules,The method has 7 parameters. Parameters: category' loadingStartIndex' loadingPageSize' searchTerm' excludeCategories' sortBookmarks' topModule
Long Parameter List,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,The method has 6 parameters. Parameters: moduleId' tabId' paneName' position' align' cloneModule
Long Parameter List,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,AddModulePermission,The method has 5 parameters. Parameters: objModule' permission' roleId' userId' allowAccess
Long Parameter List,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddNewModule,The method has 6 parameters. Parameters: title' desktopModuleId' paneName' position' permissionType' align
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPageDescendants,The method has 10 parameters. Parameters: parentId' sortOrder' searchText' portalId' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles' disabledNotSelectable
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForPage,The method has 8 parameters. Parameters: itemId' sortOrder' portalId' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPages,The method has 9 parameters. Parameters: treeAsJson' sortOrder' searchText' portalId' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInPortalGroup,The method has 8 parameters. Parameters: treeAsJson' sortOrder' searchText' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPages,The method has 8 parameters. Parameters: sortOrder' portalId' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles' disabledNotSelectable
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPages,The method has 8 parameters. Parameters: searchText' sortOrder' portalId' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPageDescendantsInPortalGroup,The method has 8 parameters. Parameters: parentId' sortOrder' searchText' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForPageInPortalGroup,The method has 7 parameters. Parameters: itemId' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPagesInPortalGroup,The method has 7 parameters. Parameters: searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFolderDescendants,The method has 5 parameters. Parameters: parentId' sortOrder' searchText' permission' portalId
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortFolders,The method has 5 parameters. Parameters: treeAsJson' sortOrder' searchText' permission' portalId
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFiles,The method has 5 parameters. Parameters: parentId' filter' sortOrder' permission' portalId
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortFiles,The method has 6 parameters. Parameters: parentId' filter' sortOrder' searchText' permission' portalId
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchFiles,The method has 6 parameters. Parameters: parentId' filter' searchText' sortOrder' permission' portalId
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPagesInternal,The method has 8 parameters. Parameters: portalId' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles' disabledNotSelectable
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPageDescendantsInPortalGroupInternal,The method has 8 parameters. Parameters: parentId' sortOrder' searchText' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPageDescendantsInternal,The method has 10 parameters. Parameters: portalId' parentId' sortOrder' searchText' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles' disabledNotSelectable
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPageDescendantsInternal,The method has 10 parameters. Parameters: portalId' parentId' sortOrder' searchText' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles' disabledNotSelectable
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPagesInternal,The method has 9 parameters. Parameters: portalId' searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles' disabledNotSelectable
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPortalPages,The method has 6 parameters. Parameters: portalId' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInternal,The method has 8 parameters. Parameters: portalId' treeAsJson' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInternal,The method has 8 parameters. Parameters: portalId' openedNodesTree' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPagesInPortalGroupInternal,The method has 7 parameters. Parameters: searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPagesInPortalGroupInternal,The method has 8 parameters. Parameters: treeAsJson' searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInPortalGroupInternal,The method has 7 parameters. Parameters: treeAsJson' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInPortalGroupInternal,The method has 7 parameters. Parameters: openedNode' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForPageInternal,The method has 9 parameters. Parameters: portalId' itemId' sortOrder' includePortalTree' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForPageInternal,The method has 8 parameters. Parameters: itemId' sortOrder' includePortalTree' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForPageInternal,The method has 10 parameters. Parameters: portalId' selectedItemId' sortOrder' includePortalTree' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles' disabledNotSelectable
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortFoldersRecursevely,The method has 5 parameters. Parameters: portalId' treeNode' openedNode' sortOrder' permissions
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFolderDescendantsInternal,The method has 5 parameters. Parameters: portalId' parentId' sortOrder' searchText' permission
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFolderDescendantsInternal,The method has 5 parameters. Parameters: portalId' parentId' sortOrder' searchText' permission
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFilesInternal,The method has 6 parameters. Parameters: portalId' parentId' filter' searchText' sortOrder' permissions
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortFilesInternal,The method has 5 parameters. Parameters: portalId' parentId' filter' sortOrder' permissions
Long Parameter List,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFileItemsDto,The method has 6 parameters. Parameters: portalId' parentId' filter' searchText' permission' sortOrder
Long Parameter List,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,Search,The method has 5 parameters. Parameters: search' culture' pageIndex' pageSize' sortOption
Long Parameter List,DotNetNuke.Web.InternalServices,FileUploadController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\FileUploadController.cs,SaveFile,The method has 11 parameters. Parameters: stream' portalSettings' userInfo' folder' filter' fileName' overwrite' isHostMenu' extract' alreadyExists' errorMessage
Long Parameter List,DotNetNuke.Web.InternalServices,FileUploadController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\FileUploadController.cs,UploadFile,The method has 9 parameters. Parameters: stream' portalId' userInfo' folder' filter' fileName' overwrite' isHostPortal' extract
Long Parameter List,DotNetNuke.Web.UI.WebControls,RibbonBarToolInfo,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\RibbonBarToolInfo.cs,RibbonBarToolInfo,The method has 7 parameters. Parameters: toolName' isHostTool' useButton' linkWindowTarget' moduleFriendlyName' controlKey' showAsPopUp
Long Parameter List,DotNetNuke.Web.UI.WebControls.Internal,DnnFormComboBoxItem,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Internal\DnnFormComboBoxItem.cs,BindListInternal,The method has 5 parameters. Parameters: comboBox' value' listSource' textField' valueField
Long Identifier,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,The length of the parameter arrSystemModuleViewPermissions is 30.
Long Identifier,DotNetNuke.Web.UI.WebControls,DnnPaswordStrengthOptions,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnPaswordStrengthOptions.cs,,The length of the parameter CriteriaAtLeastNSpecialCharsText is 32.
Long Identifier,DotNetNuke.Web.UI.WebControls,DnnPaswordStrengthOptions,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnPaswordStrengthOptions.cs,,The length of the parameter CriteriaValidationExpressionText is 32.
Long Statement,DotNetNuke.Web.Api,AuthFilterContext,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\AuthFilterContext.cs,HandleUnauthorizedRequest,The length of the statement  "            ActionContext.Response = ActionContext.ControllerContext.Request.CreateErrorResponse(HttpStatusCode.Unauthorized' AuthFailureMessage); " is 134.
Long Statement,DotNetNuke.Web.Api,AuthorizeAttributeBase,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\AuthorizeAttributeBase.cs,IsAnonymousAttributePresent,The length of the statement  "                         && actionContext.ActionDescriptor.GetCustomAttributes<AuthorizeAttributeBase>().All(t => t is SupportedModulesAttribute)); " is 122.
Long Statement,DotNetNuke.Web.Api,DnnHttpControllerSelector,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\DnnHttpControllerSelector.cs,SelectController,The length of the statement  "                throw new HttpResponseException(request.CreateErrorResponse(HttpStatusCode.NotFound' string.Format(Localization.GetString("ControllerNotFound"' Localization.ExceptionsResourceFile)' request.RequestUri' string.Join("' "' namespaces)))); " is 235.
Long Statement,DotNetNuke.Web.Api,DnnHttpControllerSelector,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\DnnHttpControllerSelector.cs,SelectController,The length of the statement  "            throw new HttpResponseException(request.CreateErrorResponse(HttpStatusCode.Conflict' string.Format(Localization.GetString("AmbiguousController"' Localization.ExceptionsResourceFile)' controllerName' string.Join("' "' namespaces)))); " is 232.
Long Statement,DotNetNuke.Web.Api,PortalAliasRouteManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\PortalAliasRouteManager.cs,GetOldRouteUrl,The length of the statement  "            return string.Format("{0}DesktopModules/{1}/API/{2}"' new PortalAliasRouteManager().GeneratePrefixString(count)' moduleFolderName' url); " is 136.
Long Statement,DotNetNuke.Web.Api,PortalAliasRouteManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\PortalAliasRouteManager.cs,GetRoutePrefixCounts,The length of the statement  "                    IEnumerable<string> aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId(portal.PortalID).Select(x => x.HTTPAlias); " is 130.
Long Statement,DotNetNuke.Web.Api,UrlHelperExtensions,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\UrlHelperExtensions.cs,DnnLink,The length of the statement  "            return DnnLink(urlHelper' moduleFolderName' routeName' routeValues' PortalController.Instance.GetCurrentPortalSettings().PortalAlias); " is 134.
Long Statement,DotNetNuke.Web.Api,UrlHelperExtensions,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\UrlHelperExtensions.cs,DnnLink,The length of the statement  "            var fullName = parm.GetRouteName(moduleFolderName' routeName' PortalController.Instance.GetCurrentPortalSettings().PortalAlias); " is 128.
Long Statement,DotNetNuke.Web.Api.Internal,DnnActionFilterProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\DnnActionFilterProvider.cs,GetFilters,The length of the statement  "            var controllerFilters = actionDescriptor.ControllerDescriptor.GetFilters().Select(instance => new FilterInfo(instance' FilterScope.Controller)); " is 144.
Long Statement,DotNetNuke.Web.Api.Internal,DnnContextMessageHandler,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\DnnContextMessageHandler.cs,ValidateTabAndModuleContext,The length of the statement  "                    throw new HttpResponseException(request.CreateErrorResponse(HttpStatusCode.BadRequest' Localization.GetString("TabNotInPortal"' Localization.ExceptionsResourceFile))); " is 167.
Long Statement,DotNetNuke.Web.Api.Internal,DnnContextMessageHandler,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\DnnContextMessageHandler.cs,ValidateTabAndModuleContext,The length of the statement  "                        throw new HttpResponseException(request.CreateErrorResponse(HttpStatusCode.BadRequest' Localization.GetString("TabModuleNotExist"' Localization.ExceptionsResourceFile))); " is 170.
Long Statement,DotNetNuke.Web.Api.Internal,DnnPageEditorAttribute,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\DnnPageEditorAttribute.cs,IsAuthorized,The length of the statement  "            return PagePermissionsAttributesHelper.HasTabPermission("EDIT'CONTENT'MANAGE") || IsModuleAdmin(((DnnApiController)context.ActionContext.ControllerContext.Controller).PortalSettings); " is 183.
Long Statement,DotNetNuke.Web.Api.Internal,DnnPageEditorAttribute,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\DnnPageEditorAttribute.cs,IsModuleAdmin,The length of the statement  "                    bool blnHasModuleEditPermissions = ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit' Null.NullString' objModule); " is 132.
Long Statement,DotNetNuke.Web.Api.Internal,ServicesRoutingManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\ServicesRoutingManager.cs,RegisterRoutes,The length of the statement  "                GlobalConfiguration.Configuration.Services.Replace(typeof(IHttpControllerSelector)' new DnnHttpControllerSelector(GlobalConfiguration.Configuration)); " is 150.
Long Statement,DotNetNuke.Web.Api.Internal,ServicesRoutingManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\ServicesRoutingManager.cs,RegisterRoutes,The length of the statement  "                var defaultprovider = GlobalConfiguration.Configuration.Services.GetFilterProviders().Where(x => x is ActionDescriptorFilterProvider); " is 134.
Long Statement,DotNetNuke.Web.Api.Internal,ServicesRoutingManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\ServicesRoutingManager.cs,RegisterAuthenticationHandlers,The length of the statement  "                    var handler = Activator.CreateInstance(type' handlerEntry.DefaultInclude' handlerEntry.ForceSsl) as AuthMessageHandlerBase; " is 123.
Long Statement,DotNetNuke.Web.Api.Auth,AuthMessageHandlerBase,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Auth\AuthMessageHandlerBase.cs,SendAsync,The length of the statement  "                response.RequestMessage = response.RequestMessage ?? request; //if someone returns new HttpResponseMessage()' fill in the requestMessage for other handlers in the chain " is 168.
Long Statement,DotNetNuke.Web.Api.Auth,AuthMessageHandlerBase,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Auth\AuthMessageHandlerBase.cs,SendAsync,The length of the statement  "            return base.SendAsync(request' cancellationToken).ContinueWith(x => OnOutboundResponse(x.Result' cancellationToken)' cancellationToken); " is 136.
Long Statement,DotNetNuke.Web.Api.Auth,DigestAuthMessageHandler,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Auth\DigestAuthMessageHandler.cs,AddWwwAuthenticateHeader,The length of the statement  "            var value = string.Format("realm=\"DNNAPI\"' nonce=\"{0}\"'  opaque=\"0000000000000000\"' stale={1}' algorithm=MD5' qop=\"auth\""' CreateNewNonce()' isStale); " is 158.
Long Statement,DotNetNuke.Web.Api.Auth,DigestAuthMessageHandler,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Auth\DigestAuthMessageHandler.cs,TryToAuthenticate,The length of the statement  "            var digestAuthentication = new DigestAuthentication(new DigestAuthenticationRequest(authHeader' request.Method.Method)' portalId' request.GetIPAddress()); " is 154.
Long Statement,DotNetNuke.Web.Api.Internal.Auth,DigestAuthentication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\Auth\DigestAuthentication.cs,AuthenticateRequest,The length of the statement  "                //Services.Logging.LoggingController.SimpleLog(String.Format("Request hash: {0} - Response Hash: {1}"' _request.RequestParams("response")' HashedDigest)) " is 153.
Long Statement,DotNetNuke.Web.Api.Internal.Auth,DigestAuthentication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\Auth\DigestAuthentication.cs,CreateMd5HashBinHex,The length of the statement  "            //Services.Logging.LoggingController.SimpleLog(String.Format("Back and forth: {0}"' Encoding.Default.GetString(Encoding.Default.GetBytes(val)))) " is 144.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("caching"' typeof(CachingProvider)' typeof(FBCachingProvider))); " is 121.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("logging"' typeof(LoggingProvider)' typeof(DBLoggingProvider))); " is 121.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("scheduling"' typeof(SchedulingProvider)' typeof(DNNScheduler))); " is 122.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("searchIndex"' typeof(IndexingProvider)' typeof(ModuleIndexer))); " is 122.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("searchDataStore"' typeof(SearchDataStoreProvider)' typeof(SearchDataStore))); " is 135.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("members"' typeof(MembershipProvider)' typeof(AspNetMembershipProvider))); " is 131.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("profiles"' typeof(ProfileProvider)' typeof(DNNProfileProvider))); " is 123.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("permissions"' typeof(PermissionProvider)' typeof(CorePermissionProvider))); " is 133.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("sitemap"' typeof(SitemapProvider)' typeof(CoreSitemapProvider))); " is 123.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("htmlEditor"' typeof(HtmlEditorProvider)' ComponentLifeStyleType.Transient)); " is 134.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("navigationControl"' typeof(NavigationProvider)' ComponentLifeStyleType.Transient)); " is 141.
Long Statement,DotNetNuke.Web.Common.Internal,DotNetNukeHttpApplication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeHttpApplication.cs,Application_Start,The length of the statement  "            ComponentFactory.InstallComponents(new ProviderInstaller("cryptography"' typeof(CryptographyProvider)'typeof(FipsCompilanceCryptographyProvider))); " is 147.
Long Statement,DotNetNuke.Web.Components.Controllers,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Components\Controllers\ControlBarController.cs,GetCategoryDesktopModules,The length of the statement  "            var formattedSearchTerm = String.IsNullOrEmpty(searchTerm) ? string.Empty : searchTerm.ToLower(CultureInfo.InvariantCulture); " is 125.
Long Statement,DotNetNuke.Web.Components.Controllers,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Components\Controllers\ControlBarController.cs,GetCategoryDesktopModules,The length of the statement  "                : (Func<KeyValuePair<string' PortalDesktopModuleInfo>' bool>)(kvp => kvp.Value.DesktopModule.Category == category && kvp.Key.ToLower(CultureInfo.InvariantCulture).Contains(formattedSearchTerm)); " is 194.
Long Statement,DotNetNuke.Web.Components.Controllers,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Components\Controllers\ControlBarController.cs,GetBookmarkedDesktopModules,The length of the statement  "            var formattedSearchTerm = String.IsNullOrEmpty(searchTerm) ? string.Empty : searchTerm.ToLower(CultureInfo.InvariantCulture); " is 125.
Long Statement,DotNetNuke.Web.Components.Controllers,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Components\Controllers\ControlBarController.cs,GetBookmarkedDesktopModules,The length of the statement  "            IEnumerable<KeyValuePair<string' PortalDesktopModuleInfo>> bookmarkedModules = GetBookmarkedModules(PortalSettings.Current.PortalId' userId) " is 140.
Long Statement,DotNetNuke.Web.Components.Controllers,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Components\Controllers\ControlBarController.cs,EnsureBookmarkValue,The length of the statement  "            var ensuredModules = bookmarkValue.Split(''').Where(desktopModuleId => bookmarkCategoryModules.All(m => m.Value.DesktopModuleID.ToString(CultureInfo.InvariantCulture) != desktopModuleId)).ToList(); " is 197.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,GetPortalDesktopModules,The length of the statement  "            var bookmarkedModules = Controller.GetBookmarkedDesktopModules(PortalSettings.Current.PortalId' UserController.Instance.GetCurrentUserInfo().UserID' searchTerm); " is 161.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,GetPortalDesktopModules,The length of the statement  "            var bookmarkCategoryModules = Controller.GetCategoryDesktopModules(PortalSettings.PortalId' bookmarCategory' searchTerm); " is 121.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,GetPortalDesktopModules,The length of the statement  "            var filteredList = bookmarCategory == category ? bookmarkCategoryModules.OrderBy(m => m.Key).Union(bookmarkedModules.OrderBy(m => m.Key)).Distinct() " is 148.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,GetPageList,The length of the statement  "                tabList = TabController.GetPortalTabs(portalSettings.PortalId' PortalSettings.ActiveTab.TabID' false' string.Empty' true' false' false' false' true); " is 149.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,GetPageList,The length of the statement  "                    tabList = TabController.GetPortalTabs(portalSettings.PortalId' Null.NullInteger' false' string.Empty' true' false' false' false' false); " is 136.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,GetPageList,The length of the statement  "                if (tab.PortalID == PortalSettings.PortalId || (GetModules(tab.TabID).Count > 0 && tab.TabID != portalSettings.AdminTabId && tab.ParentId != portalSettings.AdminTabId)) " is 168.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,GetModules,The length of the statement  "            var isRemote = TabController.Instance.GetTab(tabID' Null.NullInteger' false).PortalID != PortalSettings.Current.PortalId; " is 121.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,GetModules,The length of the statement  "                                : tabModules.Values.Where(m => ModulePermissionController.HasModuleAccess(SecurityAccessLevel.Edit' "MANAGE"' m) && !m.IsDeleted).ToList(); " is 139.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,SwitchSite,The length of the statement  "                            return Request.CreateResponse(HttpStatusCode.OK' new { RedirectURL = Globals.AddHTTP(((PortalAliasInfo)portalAliases[0]).HTTPAlias) }); " is 135.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,CanAddModuleToPage,The length of the statement  "            //return (string.IsNullOrEmpty(HttpContext.Current.Request.QueryString["mid"])) && (string.IsNullOrEmpty(HttpContext.Current.Request.QueryString["ctl"])); " is 154.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,The length of the statement  "                            throw new ApplicationException(string.Format("Module '{0}' does not support Shareable and should not be listed in Add Existing Module from a different source site"' " is 164.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,The length of the statement  "                        object objObject = DotNetNuke.Framework.Reflection.CreateObject(newModule.DesktopModule.BusinessControllerClass' newModule.DesktopModule.BusinessControllerClass); " is 162.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,The length of the statement  "                    TabController.Instance.UpdateTabSetting(targetTab.TabID' "CustomStylesheet"' originalTab.TabSettings["CustomStylesheet"].ToString()); " is 133.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,The length of the statement  "                    ArrayList arrSystemModuleViewPermissions = permissionController.GetPermissionByCodeAndKey("SYSTEM_MODULE_DEFINITION"' "VIEW"); " is 126.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,The length of the statement  "                EventLogController.Instance.AddLog(newModule' PortalSettings.Current' userID' ""' EventLogController.EventLogType.MODULE_CREATED); " is 130.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddNewModule,The length of the statement  "                if (!DesktopModuleController.GetDesktopModules(PortalSettings.Current.PortalId).TryGetValue(desktopModuleId' out desktopModule)) " is 128.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddNewModule,The length of the statement  "                    if (PortalSettings.Current.DefaultModuleId > Null.NullInteger && PortalSettings.Current.DefaultTabId > Null.NullInteger) " is 120.
Long Statement,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddNewModule,The length of the statement  "                        ModuleInfo defaultModule = ModuleController.Instance.GetModule(PortalSettings.Current.DefaultModuleId' PortalSettings.Current.DefaultTabId' true); " is 146.
Long Statement,DotNetNuke.Web.InternalServices,ContentWorkflowServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ContentWorkflowServiceController.cs,Review,The length of the statement  "                    var sourceAction = Reflection.CreateInstance(Reflection.CreateType(workflowSource.SourceType)) as IContentWorkflowAction; " is 121.
Long Statement,DotNetNuke.Web.InternalServices,ContentWorkflowServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ContentWorkflowServiceController.cs,Review,The length of the statement  "                    return Request.CreateResponse(HttpStatusCode.OK' new { Result = "success"' Link = sourceAction.GetAction(parameters) });  " is 120.
Long Statement,DotNetNuke.Web.InternalServices,CountryRegionController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\CountryRegionController.cs,Countries,The length of the statement  "                x => x.NormalizedFullName.IndexOf(searchString' StringComparison.CurrentCulture) > -1).OrderBy(x => x.NormalizedFullName)); " is 123.
Long Statement,DotNetNuke.Web.InternalServices,EventLogServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\EventLogServiceController.cs,GetPropertiesText,The length of the statement  "                    str.Append("<p><strong>" + ldi.PropertyName + "</strong>:</br><pre>" + HttpUtility.HtmlEncode(ldi.PropertyValue) + "</pre></p>"); " is 129.
Long Statement,DotNetNuke.Web.InternalServices,LanguageServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\LanguageServiceController.cs,GetNonTranslatedPages,The length of the statement  "                var nonTranslated = (from t in ctl.GetTabsByPortal(PortalSettings.PortalId).WithCulture(locale.Code' false).Values where !t.IsTranslated && !t.IsDeleted select t); " is 163.
Long Statement,DotNetNuke.Web.InternalServices,LanguageServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\LanguageServiceController.cs,GetNonTranslatedPages,The length of the statement  "                        EditUrl = DotNetNuke.Common.Globals.NavigateURL(page.TabID' "Tab"' "action=edit"' "returntabid=" + PortalSettings.ActiveTab.TabID) " is 130.
Long Statement,DotNetNuke.Web.InternalServices,PageServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\PageServiceController.cs,UpdateCustomUrl,The length of the statement  "            var options = UrlRewriterUtils.ExtendOptionsForCustomURLs( UrlRewriterUtils.GetOptionsFromSettings(new FriendlyUrlSettings(PortalSettings.PortalId)) ); " is 151.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPages,The length of the statement  "                Tree = string.IsNullOrEmpty(searchText) ? SortPagesInternal(portalId' treeAsJson' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles) " is 166.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPages,The length of the statement  "                            : SearchPagesInternal(portalId' searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles)' " is 129.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInPortalGroup,The length of the statement  "                Tree = string.IsNullOrEmpty(searchText) ? SortPagesInPortalGroupInternal(treeAsJson' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles) " is 169.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInPortalGroup,The length of the statement  "                        : SearchPagesInPortalGroupInternal(treeAsJson' searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles)' " is 144.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPages,The length of the statement  "                Tree = GetPagesInternal(portalId' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles' disabledNotSelectable)' " is 142.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPages,The length of the statement  "                Tree = string.IsNullOrEmpty(searchText) ? GetPagesInternal(portalId' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles' false) " is 160.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPages,The length of the statement  "                            : SearchPagesInternal(portalId' searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles)' " is 129.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPageDescendantsInPortalGroup,The length of the statement  "                Items = GetPageDescendantsInPortalGroupInternal(parentId' sortOrder' searchText' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles) " is 154.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForPageInPortalGroup,The length of the statement  "                Tree = GetTreePathForPageInternal(itemId' sortOrder' true' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles)' " is 133.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPagesInPortalGroup,The length of the statement  "                        : SearchPagesInPortalGroupInternal(searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles)' " is 132.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortFolders,The length of the statement  "                Tree = string.IsNullOrEmpty(searchText) ? SortFoldersInternal(portalId' treeAsJson' sortOrder' permission) : SearchFoldersInternal(portalId' searchText' sortOrder' permission)' " is 176.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchFolders,The length of the statement  "                Tree = string.IsNullOrEmpty(searchText) ? GetFoldersInternal(portalId' sortOrder' permission) : SearchFoldersInternal(portalId' searchText' sortOrder' permission)' " is 163.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortFiles,The length of the statement  "                Tree = string.IsNullOrEmpty(searchText) ? SortFilesInternal(portalId' parentId' filter' sortOrder' permission) : GetFilesInternal(portalId' parentId' filter' searchText' sortOrder' permission)' " is 193.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPagesInternal,The length of the statement  "            var children = ApplySort(GetChildrenOf(tabs' Null.NullInteger' filterTabs)' sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList(); " is 145.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPageDescendantsInPortalGroupInternal,The length of the statement  "                    return SearchPagesInternal(portalId' searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles).Children.Select(node => node.Data); " is 169.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPageDescendantsInPortalGroupInternal,The length of the statement  "            return GetPageDescendantsInternal(portalId' parentIdAsInt' sortOrder' searchText' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles); " is 156.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPageDescendantsInternal,The length of the statement  "            return GetPageDescendantsInternal(portalId' id' sortOrder' searchText' includeDisabled ' includeAllTypes' includeActive' includeHostPages' roles' disabledNotSelectable); " is 169.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPageDescendantsInternal,The length of the statement  "                tabs = TabController.GetPortalTabs(portalId' (includeActive) ? Null.NullInteger : PortalSettings.ActiveTab.TabID' false' null' true' false' includeAllTypes' true' false) " is 169.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPagesInternal,The length of the statement  "                    tabs.AddRange(TabController.Instance.GetTabsByPortal(-1).Where(tab => !tab.Value.DisableLink && searchFunc(tab.Value) && !tab.Value.IsSystem) " is 141.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPagesInternal,The length of the statement  "                    tabs = TabController.Instance.GetTabsByPortal(-1).Where(tab => !tab.Value.DisableLink && searchFunc(tab.Value) && !tab.Value.IsSystem) " is 134.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPortalPages,The length of the statement  "      		tabs = TabController.GetPortalTabs(portalId' (includeActive) ? Null.NullInteger : PortalSettings.ActiveTab.TabID' false' null' true' false' includeAllTypes' true' false) " is 169.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPortalPages,The length of the statement  "                    tabs.AddRange(TabController.Instance.GetTabsByPortal(-1).AsList().Where(t => !t.IsDeleted && !t.DisableLink && !t.IsSystem).ToList()); " is 134.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetPortalPages,The length of the statement  "                    tabs = TabController.Instance.GetTabsByPortal(-1).AsList().Where(t => !t.IsDeleted && !t.DisableLink && !t.IsSystem).ToList(); " is 126.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInternal,The length of the statement  "            return SortPagesInternal(portalId' tree' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles); " is 126.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPagesInPortalGroupInternal,The length of the statement  "                    var pageTree = SearchPagesInternal(portalId' searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles); " is 142.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPagesInPortalGroupInternal,The length of the statement  "                var treeNodeChild = treeNode.Children.Find(child => String.Equals(child.Data.Key' portalIdString' StringComparison.InvariantCultureIgnoreCase)); " is 144.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchPagesInPortalGroupInternal,The length of the statement  "                    var pageTree = SearchPagesInternal(portalId' searchText' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles); " is 142.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInPortalGroupInternal,The length of the statement  "			return SortPagesInPortalGroupInternal(tree' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles); " is 129.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInPortalGroupInternal,The length of the statement  "                    var treeNodeChild = treeNode.Children.Find(child => String.Equals(child.Data.Key' portalIdString' StringComparison.InvariantCultureIgnoreCase)); " is 144.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesInPortalGroupInternal,The length of the statement  "                    var treeOfPages = SortPagesInternal(portalId' openedNodeChild' sortOrder' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles); " is 148.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesRecursevely,The length of the statement  "            var children = ApplySort(GetChildrenOf(tabs' openedNode.Data.Id)' sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList(); " is 135.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortPagesRecursevely,The length of the statement  "                    var treeNodeChild = treeNode.Children.Find(child => String.Equals(child.Data.Key' openedNodeChild.Data.Id' StringComparison.InvariantCultureIgnoreCase)); " is 153.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForPageInternal,The length of the statement  "            return GetTreePathForPageInternal(portalId' itemIdAsInt' sortOrder' includePortalTree' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles); " is 161.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetTreePathForPageInternal,The length of the statement  "            return GetTreePathForPageInternal(portalId' itemIdAsInt' sortOrder' includePortalTree' includeDisabled' includeAllTypes' includeActive' includeHostPages' roles); " is 161.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,FilterTabsByRole,The length of the statement  "                                .Any(p => roleList.Contains(p.RoleID) && p.UserID == Null.NullInteger && p.PermissionKey == "VIEW" && p.AllowAccess)).ToList() " is 126.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFoldersInternal,The length of the statement  "            var children = ApplySort(GetFolderDescendantsInternal(portalId' -1' sortOrder' string.Empty' permissions)' sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList(); " is 176.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFoldersInternal,The length of the statement  "                children = ApplySort(GetFolderDescendantsInternal(portalId' child.Data.Key' sortOrder' string.Empty' permissions)' sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList(); " is 184.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortFoldersRecursevely,The length of the statement  "            var children = ApplySort(GetFolderDescendantsInternal(portalId' openedNode.Data.Id' sortOrder' string.Empty' permissions)' sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList(); " is 192.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortFoldersRecursevely,The length of the statement  "                    var treeNodeChild = treeNode.Children.Find(child => String.Equals(child.Data.Key' openedNodeChild.Data.Id' StringComparison.InvariantCultureIgnoreCase)); " is 153.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFolderDescendantsInternal,The length of the statement  "            var parentFolder = parentId > -1 ? FolderManager.Instance.GetFolder(parentId) : FolderManager.Instance.GetFolder(portalId' ""); " is 127.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFilesInternal,The length of the statement  "            var children = GetFileItemsDto(portalId' parentId' filter' searchText' permissions' sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList(); " is 153.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SortFilesInternal,The length of the statement  "            var children = GetFileItemsDto(portalId' parentId' filter' string.Empty' permissions' sortOrder).Select(dto => new NTree<ItemDto> { Data = dto }).ToList(); " is 155.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,GetFileItemsDto,The length of the statement  "            var parentFolder = parentId > -1 ? FolderManager.Instance.GetFolder(parentId) : FolderManager.Instance.GetFolder(portalId' ""); " is 127.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchUser,The length of the statement  "                // GetUsersAdvancedSearch doesn't accept a comma or a single quote in the query so we have to remove them for now. See issue 20224. " is 131.
Long Statement,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchUser,The length of the statement  "                var results = UserController.Instance.GetUsersBasicSearch(portalId' 0' numResults' "DisplayName"' true' "DisplayName"' q) " is 121.
Long Statement,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,GetSearchModule,The length of the statement  "                findModule = arrModules.Cast<ModuleInfo>().FirstOrDefault(searchModule => searchModule.CultureCode == PortalSettings.CultureCode); " is 130.
Long Statement,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,GetSearchModuleDefIds,The length of the statement  "                    if (configuredList.Any(l => l.Contains(contentSource.LocalizedName)) && contentSource.ModuleDefinitionId > 0) // in configured list " is 131.
Long Statement,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,GetSearchContentSources,The length of the statement  "                foreach (var contentSources in typesList.Select(t1 => list.Where(src => string.Equals(src.LocalizedName' t1' StringComparison.OrdinalIgnoreCase)))) " is 147.
Long Statement,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,GetTabTitleFromModuleId,The length of the statement  "            return CBO.GetCachedObject<string>(new CacheItemArgs(cacheKey' ModuleTitleCacheTimeOut' ModuleTitleCachePriority' moduleId)' GetTabTitleCallBack); " is 146.
Long Statement,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,AddSynonymsGroup,The length of the statement  "            var synonymsGroupId = SearchHelper.Instance.AddSynonymsGroup(synonymsGroup.Tags' synonymsGroup.PortalId' synonymsGroup.Culture' out duplicateWord); " is 147.
Long Statement,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,UpdateSynonymsGroup,The length of the statement  "            var synonymsGroupId = SearchHelper.Instance.UpdateSynonymsGroup(synonymsGroup.Id' synonymsGroup.Tags' synonymsGroup.PortalId' synonymsGroup.Culture' out duplicateWord); " is 168.
Long Statement,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,UpdateStopWords,The length of the statement  "            var stopWordsId = SearchHelper.Instance.UpdateSearchStopWords(stopWords.Id' stopWords.Words' stopWords.PortalId' stopWords.Culture); " is 132.
Long Statement,DotNetNuke.Web.InternalServices,FileUploadController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\FileUploadController.cs,PostFile,The length of the statement  "                                        returnFileDto = SaveFile(stream' portalSettings' userInfo' folder' filter' fileName' overwrite' isHostMenu' extract' out alreadyExists' out errorMessage); " is 154.
Long Statement,DotNetNuke.Web.InternalServices,ModuleServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ModuleServiceController.cs,GetModuleShareable,The length of the statement  "            return Request.CreateResponse(HttpStatusCode.OK' new { Shareable = desktopModule.Shareable.ToString()' RequiresWarning = requiresWarning }); " is 140.
Long Statement,DotNetNuke.Web.InternalServices,ProfileServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ProfileServiceController.cs,Search,The length of the statement  "            var results = RegistrationProfileController.Instance.Search(PortalController.GetEffectivePortalId(PortalSettings.PortalId)' q); " is 127.
Long Statement,DotNetNuke.Web.InternalServices,ProfileServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ProfileServiceController.cs,ProfilePropertyValues,The length of the statement  "            return Request.CreateResponse(HttpStatusCode.OK' Entities.Profile.ProfileController.SearchProfilePropertyValues(portalId' propertyName' searchString)); " is 151.
Long Statement,DotNetNuke.Web.InternalServices,MessagingServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\MessagingServiceController.cs,WaitTimeForNextMessage,The length of the statement  "                return Request.CreateResponse(HttpStatusCode.OK' new { Result = "success"' Value = InternalMessagingController.Instance.WaitTimeForNextMessage(UserInfo) }); " is 156.
Long Statement,DotNetNuke.Web.InternalServices,MessagingServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\MessagingServiceController.cs,Create,The length of the statement  "                    ? roleIdsList.Select(id => RoleController.Instance.GetRole(portalId' r => r.RoleID == id)).Where(role => role != null).ToList() " is 127.
Long Statement,DotNetNuke.Web.InternalServices,MessagingServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\MessagingServiceController.cs,Create,The length of the statement  "                var message = new Message { Subject = HttpUtility.UrlDecode(postData.Subject)' Body = HttpUtility.UrlDecode(postData.Body) }; " is 125.
Long Statement,DotNetNuke.Web.InternalServices,MessagingServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\MessagingServiceController.cs,Search,The length of the statement  "                // GetUsersAdvancedSearch doesn't accept a comma or a single quote in the query so we have to remove them for now. See issue 20224. " is 131.
Long Statement,DotNetNuke.Web.InternalServices,MessagingServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\MessagingServiceController.cs,Search,The length of the statement  "                var results = UserController.Instance.GetUsersBasicSearch(portalId' 0' numResults' "DisplayName"' true' "DisplayName"' q) " is 121.
Long Statement,DotNetNuke.Web.InternalServices,NewUserNotificationServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\NewUserNotificationServiceController.cs,Authorize,The length of the statement  "            if (!user.IsSuperUser && user.IsInRole("Unverified Users") && PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.VerifiedRegistration) " is 154.
Long Statement,DotNetNuke.Web.Mvp,ProfileModuleViewBase<TModel>,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Mvp\ProfileModuleViewBase.cs,GetRedirectUrl,The length of the statement  "                redirectUrl = TestableGlobals.Instance.GetPortalDomainName(PortalSettings.Current.PortalAlias.HTTPAlias' Request' true) + "/" + Globals.glbDefaultPage; " is 151.
Long Statement,DotNetNuke.Web.Mvp,ProfileModuleViewBase<TModel>,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Mvp\ProfileModuleViewBase.cs,OnInit,The length of the statement  "                                      ? Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID' ""' "UserId=" + ModuleContext.PortalSettings.UserId.ToString(CultureInfo.InvariantCulture)) " is 159.
Long Statement,DotNetNuke.Web.Mvp,AttributeBasedViewStateSerializer,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Mvp\AttributeBasedViewStateSerializer.cs,DeSerialize,The length of the statement  "                ViewStateAttribute attr = member.GetCustomAttributes(typeof (ViewStateAttribute)' true).OfType<ViewStateAttribute>().FirstOrDefault(); " is 134.
Long Statement,DotNetNuke.Web.Mvp,AttributeBasedViewStateSerializer,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Mvp\AttributeBasedViewStateSerializer.cs,Serialize,The length of the statement  "                ViewStateAttribute attr = member.GetCustomAttributes(typeof (ViewStateAttribute)' true).OfType<ViewStateAttribute>().FirstOrDefault(); " is 134.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFileDropDownList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileDropDownList.cs,OnPreRender,The length of the statement  "                UndefinedItem = new ListItem(DynamicSharedConstants.Unspecified' Null.NullInteger.ToString(CultureInfo.InvariantCulture)); " is 122.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterClientScript,The length of the statement  "            ClientResourceManager.RegisterStyleSheet(page' "~/Resources/Shared/Components/FileUpload/dnn.FileUpload.css"' FileOrder.Css.ResourceCss); " is 137.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterClientScript,The length of the statement  "                ClientResourceManager.RegisterStyleSheet(page' "~/Resources/Shared/Components/FileUpload/dnn.FileUpload." + skin + ".css"' FileOrder.Css.ResourceCss); " is 150.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterClientScript,The length of the statement  "            ClientResourceManager.RegisterScript(page' "~/Resources/Shared/scripts/dnn.WebResourceUrl.js"' FileOrder.Js.DefaultPriority + 2); " is 129.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterClientScript,The length of the statement  "            ClientResourceManager.RegisterScript(page' "~/Resources/Shared/scripts/dnn.jquery.extensions.js"' FileOrder.Js.DefaultPriority + 3); " is 132.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterClientScript,The length of the statement  "            ClientResourceManager.RegisterScript(page' "~/Resources/Shared/Components/FileUpload/dnn.FileUpload.js"' FileOrder.Js.DefaultPriority + 4); " is 139.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterStartupScript,The length of the statement  "                var rootFolder = (SupportHost && portalSettings.ActiveTab.IsSuperTab) ? DynamicSharedConstants.HostRootFolder : DynamicSharedConstants.RootFolder; " is 146.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterStartupScript,The length of the statement  "                    SelectedItem = (folder != null) ? new SerializableKeyValuePair<string' string>(folder.FolderID.ToString(CultureInfo.InvariantCulture)' rootFolder) : null " is 153.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterStartupScript,The length of the statement  "                var extensionsText = Options.Extensions.Aggregate(string.Empty' (current' extension) => current.Append(extension' "' ")); " is 121.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterStartupScript,The length of the statement  "                Options.Resources.TooManyFiles = string.Format(Options.Resources.TooManyFiles' Options.MaxFiles.ToString(CultureInfo.InvariantCulture)); " is 136.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnPortalPageDropDownList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnPortalPageDropDownList.cs,OnInit,The length of the statement  "            SelectItemDefaultText = Localization.GetString("DropDownList.SelectWebPageDefaultText"' Localization.SharedResourceFile); " is 121.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFolderDropDownList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFolderDropDownList.cs,OnInit,The length of the statement  "            SelectItemDefaultText = Localization.GetString("DropDownList.SelectFolderDefaultText"' Localization.SharedResourceFile); " is 120.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnDropDownList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnDropDownList.cs,CreateChildControls,The length of the statement  "            _selectedValue = new HtmlAnchor { HRef = "javascript:void(0);"' Title = LocalizeString("DropDownList.SelectedItemExpandTooltip") }; " is 131.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnDropDownList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnDropDownList.cs,RegisterClientScript,The length of the statement  "            ClientResourceManager.RegisterStyleSheet(page' "~/Resources/Shared/components/DropDownList/dnn.DropDownList.css"' FileOrder.Css.ResourceCss); " is 141.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnDropDownList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnDropDownList.cs,RegisterClientScript,The length of the statement  "                ClientResourceManager.RegisterStyleSheet(page' "~/Resources/Shared/components/DropDownList/dnn.DropDownList." + skin + ".css"' FileOrder.Css.ResourceCss); " is 154.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnDropDownList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnDropDownList.cs,RegisterClientScript,The length of the statement  "            ClientResourceManager.RegisterStyleSheet(page' "~/Resources/Shared/scripts/jquery/dnn.jScrollBar.css"' FileOrder.Css.ResourceCss); " is 130.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnDropDownList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnDropDownList.cs,RegisterStartupScript,The length of the statement  "            var script = string.Format("dnn.createDropDownList('#{0}'' {1}' {2});{3}"' ClientID' optionsAsJsonString' methodsAsJsonString' Environment.NewLine); " is 148.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFormPasswordItem,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFormPasswordItem.cs,OnInit,The length of the statement  "			ClientResourceManager.RegisterStyleSheet(Page' "~/Resources/Shared/stylesheets/dnn.PasswordStrength.css"' FileOrder.Css.ResourceCss); " is 133.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFilePickerUploader,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFilePickerUploader.cs,OnLoad,The length of the statement  "            FoldersComboBox.SelectItemDefaultText = (SupportHost && PortalSettings.Current.ActiveTab.IsSuperTab) ? DynamicSharedConstants.HostRootFolder : DynamicSharedConstants.RootFolder; " is 177.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFilePickerUploader,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFilePickerUploader.cs,OnPreRender,The length of the statement  "            if (FoldersComboBox.SelectedFolder != null && FoldersComboBox.SelectedFolder.FolderPath.StartsWith("Users/"' StringComparison.InvariantCultureIgnoreCase)) " is 154.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnMemberListControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnMemberListControl.cs,Render,The length of the statement  "            var filterUser = Filters.ContainsKey("UserId") && Filters["UserId"] != null ? new UserInfo() { UserID = int.Parse(Filters["UserId"]) } : new UserInfo() { PortalID = _currentUser.PortalID }; " is 189.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnMemberListControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnMemberListControl.cs,Render,The length of the statement  "            var role = Filters.ContainsKey("RoleId") && Filters["RoleId"] != null ? new UserRoleInfo() { RoleID = int.Parse(Filters["RoleId"]) } : null; " is 140.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnMemberListControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnMemberListControl.cs,Render,The length of the statement  "            var relationship = Filters.ContainsKey("RelationshipTypeId") && Filters["RelationshipTypeId"] != null ? new RelationshipType() { RelationshipTypeId = int.Parse(Filters["RelationshipTypeId"]) } : null; " is 200.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnMemberListControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnMemberListControl.cs,Render,The length of the statement  "            //users.Load(_relationshipController.GetUsersAdvancedSearch(_currentUser' filterUser' role' relationship' Filters' additionalFilters)); " is 135.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnMemberListControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnMemberListControl.cs,Render,The length of the statement  "                    writer.Write(string.IsNullOrEmpty(AlternatingRowHeaderTemplate) || row%2 == 0 ? RowHeaderTemplate : AlternatingRowHeaderTemplate); " is 130.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnMemberListControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnMemberListControl.cs,Render,The length of the statement  "                    writer.Write(string.IsNullOrEmpty(AlternatingRowFooterTemplate) || row%2 == 0 ? RowFooterTemplate : AlternatingRowFooterTemplate); " is 130.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnPageDropDownList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnPageDropDownList.cs,OnInit,The length of the statement  "            SelectItemDefaultText = Localization.GetString("DropDownList.SelectWebPageDefaultText"' Localization.SharedResourceFile); " is 121.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnPageDropDownList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnPageDropDownList.cs,OnPreRender,The length of the statement  "            Services.Parameters.Add("includeHostPages"' (IncludeHostPages && UserController.Instance.GetCurrentUserInfo().IsSuperUser).ToString().ToLowerInvariant()); " is 154.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnPaswordStrengthOptions,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnPaswordStrengthOptions.cs,OnSerializing,The length of the statement  "            int portalId = (PortalController.Instance.GetCurrentPortalSettings()) != null ? (PortalController.Instance.GetCurrentPortalSettings().PortalId) : -1; " is 149.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFormRadioButtonListItem,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFormRadioButtonListItem.cs,BindList,The length of the statement  "                string selectedValue = !_radioButtonList.Page.IsPostBack ? Convert.ToString(Value) : _radioButtonList.Page.Request.Form[_radioButtonList.UniqueID]; " is 147.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFormRadioButtonListItem,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFormRadioButtonListItem.cs,CreateControlInternal,The length of the statement  "            _radioButtonList = new RadioButtonList  { ID = ID + "_RadioButtonList"' RepeatColumns = 1' RepeatDirection = RepeatDirection.Vertical' RepeatLayout = RepeatLayout.Flow}; " is 169.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFormEditor,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFormEditor.cs,SetUpTabs,The length of the statement  "                        formTab.ExpandAllScript += "\t\t\t\texpandText: '" + Localization.GetString("ExpandAll"' Localization.SharedResourceFile) + "''\r\n"; " is 133.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFormEditor,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFormEditor.cs,SetUpTabs,The length of the statement  "                        formTab.ExpandAllScript += "\t\t\t\tcollapseText: '" + Localization.GetString("CollapseAll"' Localization.SharedResourceFile) + "''\r\n"; " is 137.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFormEditor,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFormEditor.cs,CreateControlHierarchy,The length of the statement  "        	CssClass = string.IsNullOrEmpty(CssClass) ? "dnnForm" : CssClass.Contains("dnnForm") ? CssClass : string.Format("dnnForm {0}"' CssClass); " is 137.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnRibbonBar,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnRibbonBar.cs,Render,The length of the statement  "                Groups[Groups.Count - 1].CssClass = Groups[Groups.Count - 1].CssClass + " " + Groups[Groups.Count - 1].CssClass.Trim() + "Last"; " is 128.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnRibbonBarTool,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnRibbonBarTool.cs,ControlPanelTool_OnClick,The length of the statement  "                        TabController.CopyDesignToChildren(PortalSettings.ActiveTab' PortalSettings.ActiveTab.SkinSrc' PortalSettings.ActiveTab.ContainerSrc); " is 134.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnRibbonBarTool,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnRibbonBarTool.cs,ProcessTool,The length of the statement  "                            // Prevent PageSettings in a popup if SSL is enabled and enforced' which causes redirection/javascript broswer security issues. " is 127.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnRibbonBarTool,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnRibbonBarTool.cs,ProcessTool,The length of the statement  "                                    DnnLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(DnnLink.NavigateUrl' this' PortalSettings' true' false)); " is 121.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnRibbonBarTool,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnRibbonBarTool.cs,ProcessTool,The length of the statement  "                                DnnLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(DnnLink.NavigateUrl' this' PortalSettings' true' false)); " is 121.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnRibbonBarTool,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnRibbonBarTool.cs,GetTabURL,The length of the statement  "                strURL = Globals.NavigateURL(moduleInfo.TabID' isHostPage' PortalSettings' ToolInfo.ControlKey' currentCulture' additionalParams.ToArray()); " is 140.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnUrlControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnUrlControl.cs,DoChangeURL,The length of the statement  "                if (_Urltype == "U" && (_Url.StartsWith("~/" + PortalSettings.DefaultIconLocation' StringComparison.InvariantCultureIgnoreCase))) " is 129.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnUrlControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnUrlControl.cs,DoRenderTypeControls,The length of the statement  "                        string strImagesFolder = Path.Combine(Globals.ApplicationMapPath' PortalSettings.DefaultIconLocation.Replace('/'' '\\')); " is 121.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnUrlControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnUrlControl.cs,OnLoad,The length of the statement  "                if ((Request.QueryString["pid"] != null) && (Globals.IsHostTab(PortalSettings.ActiveTab.TabID) || UserController.Instance.GetCurrentUserInfo().IsSuperUser)) " is 156.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFilePicker,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFilePicker.cs,IsUserFolder,The length of the statement  "            return (folderPath.ToLowerInvariant().StartsWith("users/") && folderPath.EndsWith(string.Format("/{0}/"' user.UserID))); " is 120.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFilePicker,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFilePicker.cs,OnPreRender,The length of the statement  "						if ((FolderPermissionController.HasFolderPermission(PortalId' _cboFolders.SelectedItem.Value' "ADD") || IsUserFolder(_cboFolders.SelectedItem.Value)) && ShowUpLoad) " is 164.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFilePicker,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFilePicker.cs,SaveFile,The length of the statement  "                        _lblMessage.Text += "<br />" + string.Format(Localization.GetString("InsufficientFolderPermission")' folder.FolderPath); " is 120.
Long Statement,DotNetNuke.Web.UI.WebControls,DnnFilePicker,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFilePicker.cs,SaveFile,The length of the statement  "						_lblMessage.Text += "<br />" + string.Format(Localization.GetString("RestrictedFileType")' fileName' Host.AllowedExtensionWhitelist.ToDisplayString()); " is 151.
Long Statement,DotNetNuke.Web.UI.WebControls,Tags,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Tags.cs,SaveTags,The length of the statement  "                        Term existingTerm = (from term in ContentItem.Terms.AsQueryable() where term.Name.Equals(tagName' StringComparison.CurrentCultureIgnoreCase) select term).SingleOrDefault(); " is 172.
Long Statement,DotNetNuke.Web.UI.WebControls,Tags,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Tags.cs,SaveTags,The length of the statement  "                                (from te in termController.GetTermsByVocabulary(TagVocabulary.VocabularyId) where te.Name.Equals(tagName' StringComparison.CurrentCultureIgnoreCase) select te). " is 160.
Long Statement,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,GetPagesList,The length of the statement  "                    portalTabs = TabController.GetPortalTabs(PortalSettings.Current.PortalId' Null.NullInteger' false' Null.NullString' true' false' true' false' true); " is 148.
Long Statement,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,SaveTabInfoObject,The length of the statement  "                        //get the siblings from the selectedtab and iterate through until you find a sibbling with a corresponding defaultlanguagetab " is 125.
Long Statement,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,SaveTabInfoObject,The length of the statement  "                        var selectedTabSibblings = TabController.Instance.GetTabsByPortal(tab.PortalID).WithCulture(tab.CultureCode' true).AsList(); " is 124.
Long Statement,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,SaveTabInfoObject,The length of the statement  "                            var defaultLanguageTabs = TabController.Instance.GetTabsByPortal(tab.PortalID).WithCulture(PortalSettings.Current.DefaultLanguage' true).AsList(); " is 146.
Long Statement,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,SaveTabInfoObject,The length of the statement  "                if ((IsHostConsolePage(relativeToTab) && (location == TabRelativeLocation.AFTER || location == TabRelativeLocation.BEFORE))) " is 124.
Long Statement,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,SaveTabInfoObject,The length of the statement  "                    throw new DotNetNukeException("You cannot add or move pages before or after the Host tab."' DotNetNukeErrorCode.HostBeforeAfterError); " is 134.
Long Statement,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,SaveTabInfoObject,The length of the statement  "                        throw new DotNetNukeException("You do not have permissions to add or move pages to this location. You can only add or move pages as children of pages you can edit."' " is 165.
Long Statement,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,SaveTabInfoObject,The length of the statement  "                    TabController.DeserializePanes(xmlDoc.SelectSingleNode("//portal/tabs/tab/panes")' tab.PortalID' tab.TabID' PortalTemplateModuleAction.Ignore' new Hashtable()); " is 160.
Long Statement,DotNetNuke.Web.UI,Utilities,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\Utilities.cs,ApplySkin,The length of the statement  "                    systemWebControlSkin = Path.Combine(systemWebControlSkin' string.Format("{0}.{1}.css"' controlName' webControlSkinName)); " is 121.
Long Statement,DotNetNuke.Web.UI,Utilities,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\Utilities.cs,ApplySkin,The length of the statement  "                            systemWebControlSkin = Path.Combine(systemWebControlSkin' string.Format("{0}.{1}.css"' controlName' webControlSkinName)); " is 121.
Long Statement,DotNetNuke.Web.UI,Utilities,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\Utilities.cs,GetClientAlert,The length of the statement  "            return "jQuery(document).ready(function($){$.dnnAlert({ okText: '" + GetLocalizedString("Ok.Text") + "'' text: '" + message.Message + "'' title: '" + message.Title + "'});});"; " is 176.
Long Statement,DotNetNuke.Web.UI,Utilities,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\Utilities.cs,GetOnClientClickConfirm,The length of the statement  "            return string.Format("return postBackConfirm('{0}'' event' '{1}'' '{2}'' ''' '{3}');"' message.Message' message.WindowWidth' message.WindowHeight' message.Title); " is 162.
Long Statement,DotNetNuke.Web.UI,Utilities,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\Utilities.cs,RegisterAlertOnPageLoad,The length of the statement  "            ctrl.Page.ClientScript.RegisterClientScriptBlock(ctrl.GetType()' ctrl.ID + "_AlertOnPageLoad"' GetClientAlert(ctrl' message)' true); " is 132.
Long Statement,DotNetNuke.Web.UI.WebControls.Extensions,ListControlExtensions,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Extensions\ListControlExtensions.cs,FindByTextWithIgnoreCase,The length of the statement  "			return listItems.Cast<ListItem>().FirstOrDefault(item => item.Text.Equals(text' StringComparison.InvariantCultureIgnoreCase)); " is 126.
Long Statement,DotNetNuke.Web.UI.WebControls.Extensions,ListControlExtensions,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Extensions\ListControlExtensions.cs,FindByValueWithIgnoreCase,The length of the statement  "			return listItems.Cast<ListItem>().FirstOrDefault(item => item.Value.Equals(value' StringComparison.InvariantCultureIgnoreCase)); " is 128.
Long Statement,DotNetNuke.Web.UI.WebControls.Internal,DnnFormToggleButtonItem,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Internal\DnnFormToggleButtonItem.cs,CreateControlInternal,The length of the statement  "            //_checkBox = new DnnRadButton {ID = ID + "_CheckBox"' ButtonType = RadButtonType.ToggleButton' ToggleType = ButtonToggleType.CheckBox' AutoPostBack = false}; " is 158.
Long Statement,DotNetNuke.Web.UI.WebControls.Internal,DnnModuleComboBox,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Internal\DnnModuleComboBox.cs,GetPortalDesktopModules,The length of the statement  "                    .Where((kvp) => kvp.Value.DesktopModule.Category == "Uncategorised" || String.IsNullOrEmpty(kvp.Value.DesktopModule.Category)) " is 126.
Long Statement,DotNetNuke.Web.UI.WebControls.Internal,DnnModuleComboBox,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Internal\DnnModuleComboBox.cs,GetTabModules,The length of the statement  "            var isRemote = TabController.Instance.GetTab(tabID' Null.NullInteger' false).PortalID != PortalSettings.Current.PortalId; " is 121.
Long Statement,DotNetNuke.Web.UI.WebControls.Internal,DnnModuleComboBox,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Internal\DnnModuleComboBox.cs,GetTabModules,The length of the statement  "            var pageModules = tabModules.Values.Where(m => !isRemote || ModuleSuportsSharing(m)).Where(m => ModulePermissionController.CanAdminModule(m) && m.IsDeleted == false).ToList(); " is 175.
Long Statement,DotNetNuke.Web.UI.WebControls.Internal,DnnModuleComboBox,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Internal\DnnModuleComboBox.cs,BindTabModuleImages,The length of the statement  "            //                       join modDefs in moduleDefnitions on portMods.Value.DesktopModuleID equals modDefs.Value.DesktopModuleID " is 128.
Long Statement,DotNetNuke.Web.UI.WebControls.Internal,DnnModuleComboBox,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Internal\DnnModuleComboBox.cs,BindTabModuleImages,The length of the statement  "            //                       join tabMods in tabModules on modDefs.Value.DesktopModuleID equals tabMods.Value.DesktopModuleID " is 121.
Long Statement,DotNetNuke.Web.UI.WebControls.Internal,TermsSelector,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Internal\TermsSelector.cs,OnInit,The length of the statement  "            var apiPath = Globals.ResolveUrl($"~/API/InternalServices/ItemListService/GetTerms?includeSystem={includeSystem}&includeTags={includeTags}&q="); " is 144.
Long Statement,DotNetNuke.Web.Validators,DataAnnotationsObjectValidator,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Validators\DataAnnotationsObjectValidator.cs,ValidateAttribute,The length of the statement  "            return !attribute.IsValid(targetProperty.GetValue(target' new object[] {})) ? new ValidationResult(new[] {CreateError(targetProperty.Name' attribute)}) : ValidationResult.Successful; " is 182.
Long Statement,DotNetNuke.Web.Validators,DataAnnotationsObjectValidator,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Validators\DataAnnotationsObjectValidator.cs,CreateError,The length of the statement  "            return new ValidationError {ErrorMessage = attribute.FormatErrorMessage(propertyName)' PropertyName = propertyName' Validator = attribute}; " is 139.
Long Statement,DotNetNuke.Web.Validators,PropertyBasedObjectValidator,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Validators\PropertyBasedObjectValidator.cs,ValidateObject,The length of the statement  "            return target.GetType().GetProperties().Aggregate(ValidationResult.Successful' (result' member) => result.CombineWith(ValidateProperty(target' member) ?? ValidationResult.Successful)); " is 184.
Long Statement,DotNetNuke.Web.Validators,Validator,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Validators\Validator.cs,ValidateObject,The length of the statement  "            return _Validators.Aggregate(ValidationResult.Successful' (result' validator) => result.CombineWith(validator.ValidateObject(target) ?? ValidationResult.Successful)); " is 166.
Complex Conditional,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,GetPageList,The conditional expression  "tab.PortalID == PortalSettings.PortalId || (GetModules(tab.TabID).Count > 0 && tab.TabID != portalSettings.AdminTabId && tab.ParentId != portalSettings.AdminTabId)"  is complex.
Complex Conditional,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,CopyPermissionsToChildren,The conditional expression  "TabPermissionController.CanManagePage() && UserController.Instance.GetCurrentUserInfo().IsInRole("Administrators")                  && ActiveTabHasChildren() && !PortalSettings.ActiveTab.IsSuperTab"  is complex.
Complex Conditional,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,The conditional expression  "originalTab != null                      && originalTab.TabSettings.ContainsKey("CustomStylesheet")                      && !string.IsNullOrEmpty(originalTab.TabSettings["CustomStylesheet"].ToString())                      && (!targetTab.TabSettings.ContainsKey("CustomStylesheet") ||                              string.IsNullOrEmpty(targetTab.TabSettings["CustomStylesheet"].ToString()))"  is complex.
Complex Conditional,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,Preview,The conditional expression  "portalIds.Any() && searchTypeIds.Any() &&                  (!string.IsNullOrEmpty(cleanedKeywords) || tags.Any())"  is complex.
Complex Conditional,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,Search,The conditional expression  "portalIds.Any() && searchTypeIds.Any() &&                   (!string.IsNullOrEmpty(cleanedKeywords) || tags.Any())"  is complex.
Empty Catch Block,DotNetNuke.Web.Api.Internal.Auth,DigestAuthenticationRequest,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\Auth\DigestAuthenticationRequest.cs,DigestAuthenticationRequest,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,SwitchSite,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,SwitchLanguage,The method has an empty catch block.
Magic Number,DotNetNuke.Web.Api.Auth,BasicAuthMessageHandler,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Auth\BasicAuthMessageHandler.cs,GetCredentials,The following statement contains a magic number: string[] parts = decoded.Split(new[] {':'}' 2);
Magic Number,DotNetNuke.Web.Api.Auth,BasicAuthMessageHandler,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Auth\BasicAuthMessageHandler.cs,GetCredentials,The following statement contains a magic number: if (parts.Length < 2)              {                  return null;              }
Magic Number,DotNetNuke.Web.Api.Internal.Auth,DigestAuthentication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\Auth\DigestAuthentication.cs,CreateMd5HashBinHex,The following statement contains a magic number: for (int i = 0; i <= 15; i++)              {                  ha1 += String.Format("{0:x02}"' bha1[i]);              }
Magic Number,DotNetNuke.Web.Api.Internal.Auth,DigestAuthentication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\Auth\DigestAuthentication.cs,IsNonceValid,The following statement contains a magic number: int numPadChars = nonce.Length%4;
Magic Number,DotNetNuke.Web.Api.Internal.Auth,DigestAuthentication,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\Auth\DigestAuthentication.cs,IsNonceValid,The following statement contains a magic number: if (numPadChars > 0)              {                  numPadChars = 4 - numPadChars;              }
Magic Number,DotNetNuke.Web.Api.Internal.Auth,DigestAuthenticationRequest,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\Internal\Auth\DigestAuthenticationRequest.cs,DigestAuthenticationRequest,The following statement contains a magic number: try              {                  RequestParams = new NameValueCollection();                  foreach (Match m in AuthHeaderRegex.Matches(authorizationHeader))                  {                      RequestParams.Add(m.Groups["name"].Value' m.Groups["value"].Value);                  }                  HttpMethod = httpMethod;                  RawUsername = RequestParams["username"].Replace("\\\\"' "\\");                  CleanUsername = RawUsername;                  if (CleanUsername.LastIndexOf("\\"' System.StringComparison.Ordinal) > 0)                  {                      CleanUsername = CleanUsername.Substring(CleanUsername.LastIndexOf("\\"' System.StringComparison.Ordinal) + 2 - 1);                  }              }              catch (Exception)              {                                    //suppress any issue e.g. another 401 from a different auth method              }
Magic Number,DotNetNuke.Web.Common.Internal,DotNetNukeShutdownOverload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Common\DotNetNukeShutdownOverload.cs,ShceduleShutdown,The following statement contains a magic number: if (_handleShutdowns && !_shutdownInprogress)              {                  _shutdownInprogress = true;                  // delay for a very short period                  _shutDownDelayTimer.Change(1500' Timeout.Infinite);              }
Magic Number,DotNetNuke.Web.InternalServices,ContentWorkflowServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ContentWorkflowServiceController.cs,Reject,The following statement contains a magic number: try              {                  var notification = NotificationsController.Instance.GetNotification(postData.NotificationId);                  if (notification != null)                  {                      if (string.IsNullOrEmpty(notification.Context))                      {                          return Request.CreateResponse(HttpStatusCode.OK' new { Result = "success" });                      }                        string[] parameters = notification.Context.Split(':');                        var stateTransiction = new StateTransaction                                             {                                                 ContentItemId = int.Parse(parameters[0])'                                                 CurrentStateId = int.Parse(parameters[2])'                                                 Message = new StateTransactionMessage ()'                                                 UserId = UserInfo.UserID                                             };                      _workflowEngine.DiscardState(stateTransiction);                        return Request.CreateResponse(HttpStatusCode.OK' new { Result = "success" });                  }              }              catch (Exception exc)              {                  Exceptions.LogException(exc);              }
Magic Number,DotNetNuke.Web.InternalServices,ContentWorkflowServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ContentWorkflowServiceController.cs,Approve,The following statement contains a magic number: try              {                  var notification = NotificationsController.Instance.GetNotification(postData.NotificationId);                  if (notification != null)                  {                      if (string.IsNullOrEmpty(notification.Context))                      {                          return Request.CreateResponse(HttpStatusCode.OK' new { Result = "success" });                      }                        string[] parameters = notification.Context.Split(':');                        var stateTransiction = new StateTransaction                                              {                                                  ContentItemId = int.Parse(parameters[0])'                                                  CurrentStateId = int.Parse(parameters[2])'                                                  Message = new StateTransactionMessage()'                                                  UserId = UserInfo.UserID                                              };                      _workflowEngine.CompleteState(stateTransiction);                        return Request.CreateResponse(HttpStatusCode.OK' new { Result = "success" });                  }              }              catch (Exception exc)              {                  Exceptions.LogException(exc);              }
Magic Number,DotNetNuke.Web.InternalServices,ImageHeader,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ImageHeader.cs,DecodeBitmap,The following statement contains a magic number: binaryReader.ReadBytes(16);
Magic Number,DotNetNuke.Web.InternalServices,ImageHeader,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ImageHeader.cs,DecodePng,The following statement contains a magic number: binaryReader.ReadBytes(8);
Magic Number,DotNetNuke.Web.InternalServices,ImageHeader,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ImageHeader.cs,DecodeJfif,The following statement contains a magic number: while (binaryReader.ReadByte() == 0xff)  			{  				byte marker = binaryReader.ReadByte();  				short chunkLength = ReadLittleEndianInt16(binaryReader);                  if (marker == 0xc0 || marker == 0xc2)  				{  					binaryReader.ReadByte();  					int height = ReadLittleEndianInt16(binaryReader);  					int width = ReadLittleEndianInt16(binaryReader);  					return new Size(width' height);  				}  				if (chunkLength < 0)  				{  					var uchunkLength = (ushort) chunkLength;  					binaryReader.ReadBytes(uchunkLength - 2);  				}  				else  				{  					binaryReader.ReadBytes(chunkLength - 2);  				}  			}
Magic Number,DotNetNuke.Web.InternalServices,ImageHeader,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ImageHeader.cs,DecodeJfif,The following statement contains a magic number: while (binaryReader.ReadByte() == 0xff)  			{  				byte marker = binaryReader.ReadByte();  				short chunkLength = ReadLittleEndianInt16(binaryReader);                  if (marker == 0xc0 || marker == 0xc2)  				{  					binaryReader.ReadByte();  					int height = ReadLittleEndianInt16(binaryReader);  					int width = ReadLittleEndianInt16(binaryReader);  					return new Size(width' height);  				}  				if (chunkLength < 0)  				{  					var uchunkLength = (ushort) chunkLength;  					binaryReader.ReadBytes(uchunkLength - 2);  				}  				else  				{  					binaryReader.ReadBytes(chunkLength - 2);  				}  			}
Magic Number,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchUser,The following statement contains a magic number: try              {                  var portalId = PortalController.GetEffectivePortalId(PortalSettings.PortalId);                  const int numResults = 5;                    // GetUsersAdvancedSearch doesn't accept a comma or a single quote in the query so we have to remove them for now. See issue 20224.                  q = q.Replace("'"' "").Replace("'"' "");                  if (q.Length == 0) return Request.CreateResponse<SearchResult>(HttpStatusCode.OK' null);                    var results = UserController.Instance.GetUsersBasicSearch(portalId' 0' numResults' "DisplayName"' true' "DisplayName"' q)                      .Select(user => new SearchResult                      {                          id = user.UserID'                          name = user.DisplayName'                          iconfile = UserController.Instance.GetUserProfilePictureUrl(user.UserID' 32' 32)'                      }).ToList();                    return Request.CreateResponse(HttpStatusCode.OK' results.OrderBy(sr => sr.name));              }              catch (Exception exc)              {                  Logger.Error(exc);                  return Request.CreateErrorResponse(HttpStatusCode.InternalServerError' exc);              }
Magic Number,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchUser,The following statement contains a magic number: try              {                  var portalId = PortalController.GetEffectivePortalId(PortalSettings.PortalId);                  const int numResults = 5;                    // GetUsersAdvancedSearch doesn't accept a comma or a single quote in the query so we have to remove them for now. See issue 20224.                  q = q.Replace("'"' "").Replace("'"' "");                  if (q.Length == 0) return Request.CreateResponse<SearchResult>(HttpStatusCode.OK' null);                    var results = UserController.Instance.GetUsersBasicSearch(portalId' 0' numResults' "DisplayName"' true' "DisplayName"' q)                      .Select(user => new SearchResult                      {                          id = user.UserID'                          name = user.DisplayName'                          iconfile = UserController.Instance.GetUserProfilePictureUrl(user.UserID' 32' 32)'                      }).ToList();                    return Request.CreateResponse(HttpStatusCode.OK' results.OrderBy(sr => sr.name));              }              catch (Exception exc)              {                  Logger.Error(exc);                  return Request.CreateErrorResponse(HttpStatusCode.InternalServerError' exc);              }
Magic Number,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,SearchUser,The following statement contains a magic number: try              {                  var portalId = PortalController.GetEffectivePortalId(PortalSettings.PortalId);                  const int numResults = 5;                    // GetUsersAdvancedSearch doesn't accept a comma or a single quote in the query so we have to remove them for now. See issue 20224.                  q = q.Replace("'"' "").Replace("'"' "");                  if (q.Length == 0) return Request.CreateResponse<SearchResult>(HttpStatusCode.OK' null);                    var results = UserController.Instance.GetUsersBasicSearch(portalId' 0' numResults' "DisplayName"' true' "DisplayName"' q)                      .Select(user => new SearchResult                      {                          id = user.UserID'                          name = user.DisplayName'                          iconfile = UserController.Instance.GetUserProfilePictureUrl(user.UserID' 32' 32)'                      }).ToList();                    return Request.CreateResponse(HttpStatusCode.OK' results.OrderBy(sr => sr.name));              }              catch (Exception exc)              {                  Logger.Error(exc);                  return Request.CreateErrorResponse(HttpStatusCode.InternalServerError' exc);              }
Magic Number,DotNetNuke.Web.InternalServices,ItemListServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ItemListServiceController.cs,ApplySort,The following statement contains a magic number: switch (sortOrder)              {                  case 1: // sort by a-z                      return items.OrderBy(item => item.Value).ToList();                  case 2: // sort by z-a                      return items.OrderByDescending(item => item.Value).ToList();                  default: // no sort                      return items;              }
Magic Number,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,GetGroupedBasicViews,The following statement contains a magic number: foreach (var preview in previews)              {                  //if the document type is user' then try to add user pic into preview's custom attributes.                  if (userSearchSource != null && preview.DocumentTypeName == userSearchSource.LocalizedName)                  {                      var match = GroupedBasicViewRegex.Match(preview.DocumentUrl);                      if (match.Success)                      {                          var userid = Convert.ToInt32(match.Groups[2].Value);                          var user = UserController.Instance.GetUserById(portalId' userid);                           if (user != null)                          {                              preview.Attributes.Add("Avatar"' user.Profile.PhotoURL);                          }                      }                  }                    var groupedResult = results.SingleOrDefault(g => g.DocumentTypeName == preview.DocumentTypeName);                  if (groupedResult != null)                  {                      if (!groupedResult.Results.Any(r => string.Equals(r.DocumentUrl' preview.DocumentUrl)))                          groupedResult.Results.Add(new BasicView                          {                              Title = preview.Title.Contains("<") ? HttpUtility.HtmlEncode(preview.Title) : preview.Title'                              Snippet = preview.Snippet'                              DocumentUrl = preview.DocumentUrl'                              Attributes = preview.Attributes                          });                  }                  else                  {                      results.Add(new GroupedBasicView(preview));                  }              }
Magic Number,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,Preview,The following statement contains a magic number: if (portalIds.Any() && searchTypeIds.Any() &&                  (!string.IsNullOrEmpty(cleanedKeywords) || tags.Any()))              {                  var query = new SearchQuery                  {                      KeyWords = cleanedKeywords'                      Tags = tags'                      PortalIds = portalIds'                      SearchTypeIds = searchTypeIds'                      ModuleDefIds = moduleDefids'                      BeginModifiedTimeUtc = beginModifiedTimeUtc'                      PageIndex = 1'                      PageSize = 5'                      TitleSnippetLength = 40'                      BodySnippetLength = 100'                      CultureCode = culture'                      WildCardSearch = forceWild > 0                   };                    try                  {                      results = GetGroupedBasicViews(query' userSearchSource' PortalSettings.PortalId);                  }                  catch (Exception ex)                  {                      DotNetNuke.Services.Exceptions.Exceptions.LogException(ex);                  }              }
Magic Number,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,Preview,The following statement contains a magic number: if (portalIds.Any() && searchTypeIds.Any() &&                  (!string.IsNullOrEmpty(cleanedKeywords) || tags.Any()))              {                  var query = new SearchQuery                  {                      KeyWords = cleanedKeywords'                      Tags = tags'                      PortalIds = portalIds'                      SearchTypeIds = searchTypeIds'                      ModuleDefIds = moduleDefids'                      BeginModifiedTimeUtc = beginModifiedTimeUtc'                      PageIndex = 1'                      PageSize = 5'                      TitleSnippetLength = 40'                      BodySnippetLength = 100'                      CultureCode = culture'                      WildCardSearch = forceWild > 0                   };                    try                  {                      results = GetGroupedBasicViews(query' userSearchSource' PortalSettings.PortalId);                  }                  catch (Exception ex)                  {                      DotNetNuke.Services.Exceptions.Exceptions.LogException(ex);                  }              }
Magic Number,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,Preview,The following statement contains a magic number: if (portalIds.Any() && searchTypeIds.Any() &&                  (!string.IsNullOrEmpty(cleanedKeywords) || tags.Any()))              {                  var query = new SearchQuery                  {                      KeyWords = cleanedKeywords'                      Tags = tags'                      PortalIds = portalIds'                      SearchTypeIds = searchTypeIds'                      ModuleDefIds = moduleDefids'                      BeginModifiedTimeUtc = beginModifiedTimeUtc'                      PageIndex = 1'                      PageSize = 5'                      TitleSnippetLength = 40'                      BodySnippetLength = 100'                      CultureCode = culture'                      WildCardSearch = forceWild > 0                   };                    try                  {                      results = GetGroupedBasicViews(query' userSearchSource' PortalSettings.PortalId);                  }                  catch (Exception ex)                  {                      DotNetNuke.Services.Exceptions.Exceptions.LogException(ex);                  }              }
Magic Number,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,Search,The following statement contains a magic number: if (portalIds.Any() && searchTypeIds.Any() &&                   (!string.IsNullOrEmpty(cleanedKeywords) || tags.Any()))              {                  var query = new SearchQuery                      {                          KeyWords = cleanedKeywords'                          Tags = tags'                          PortalIds = portalIds'                          SearchTypeIds = searchTypeIds'                          ModuleDefIds = moduleDefids'                          BeginModifiedTimeUtc = beginModifiedTimeUtc'                          EndModifiedTimeUtc = beginModifiedTimeUtc > DateTime.MinValue ? DateTime.MaxValue : DateTime.MinValue'                          PageIndex = pageIndex'                          PageSize = pageSize'                          SortField = (SortFields) sortOption'                          TitleSnippetLength = 120'                          BodySnippetLength = 300'                          CultureCode = culture'                          WildCardSearch = IsWildCardEnabledForModule()                      };                    try                  {                      results = GetGroupedDetailViews(query' userSearchTypeId' out totalHits' out more).ToList();                  }                  catch (Exception ex)                  {                      DotNetNuke.Services.Exceptions.Exceptions.LogException(ex);                  }              }
Magic Number,DotNetNuke.Web.InternalServices,SearchServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\SearchServiceController.cs,Search,The following statement contains a magic number: if (portalIds.Any() && searchTypeIds.Any() &&                   (!string.IsNullOrEmpty(cleanedKeywords) || tags.Any()))              {                  var query = new SearchQuery                      {                          KeyWords = cleanedKeywords'                          Tags = tags'                          PortalIds = portalIds'                          SearchTypeIds = searchTypeIds'                          ModuleDefIds = moduleDefids'                          BeginModifiedTimeUtc = beginModifiedTimeUtc'                          EndModifiedTimeUtc = beginModifiedTimeUtc > DateTime.MinValue ? DateTime.MaxValue : DateTime.MinValue'                          PageIndex = pageIndex'                          PageSize = pageSize'                          SortField = (SortFields) sortOption'                          TitleSnippetLength = 120'                          BodySnippetLength = 300'                          CultureCode = culture'                          WildCardSearch = IsWildCardEnabledForModule()                      };                    try                  {                      results = GetGroupedDetailViews(query' userSearchTypeId' out totalHits' out more).ToList();                  }                  catch (Exception ex)                  {                      DotNetNuke.Services.Exceptions.Exceptions.LogException(ex);                  }              }
Magic Number,DotNetNuke.Web.InternalServices,FileUploadController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\FileUploadController.cs,UploadFile,The following statement contains a magic number: try              {                  var extension = Path.GetExtension(fileName).ValueOrEmpty().Replace("."' "");                  result.FileIconUrl = IconController.GetFileIconUrl(extension);                    if (!string.IsNullOrEmpty(filter) && !filter.ToLower().Contains(extension.ToLower()))                  {                      result.Message = GetLocalizedString("ExtensionNotAllowed");                      return result;                  }                    var folderManager = FolderManager.Instance;                    var effectivePortalId = isHostPortal ? Null.NullInteger : portalId;                    // Check if this is a User Folder                                  int userId;                  var folderInfo = folderManager.GetFolder(effectivePortalId' folder);                  if (IsUserFolder(folder' out userId))                  {                      var user = UserController.GetUserById(effectivePortalId' userId);                      if (user != null)                      {                          folderInfo = folderManager.GetUserFolder(user);                      }                  }                    if (!FolderPermissionController.HasFolderPermission(portalId' folder' "WRITE")                      && !FolderPermissionController.HasFolderPermission(portalId' folder' "ADD"))                  {                      result.Message = GetLocalizedString("NoPermission");                      return result;                  }                    IFileInfo file;                    if (!overwrite && FileManager.Instance.FileExists(folderInfo' fileName' true))                  {                      result.Message = GetLocalizedString("AlreadyExists");                      result.AlreadyExists = true;                      file = FileManager.Instance.GetFile(folderInfo' fileName' true);                      result.FileId = file.FileId;                  }                  else                  {                      file = FileManager.Instance.AddFile(folderInfo' fileName' stream' true' false'                                                          FileContentTypeManager.Instance.GetContentType(Path.GetExtension(fileName))'                                                          userInfo.UserID);                      if (extract && extension.ToLower() == "zip")                      {                          var destinationFolder = FolderManager.Instance.GetFolder(file.FolderId);                          var invalidFiles = new List<string>();                          var filesCount = FileManager.Instance.UnzipFile(file' destinationFolder' invalidFiles);                            var invalidFilesJson = invalidFiles.Count > 0                              ? string.Format("\"{0}\""' string.Join("\"'\""' invalidFiles))                              : string.Empty;                          result.Prompt = string.Format("{{\"invalidFiles\":[{0}]' \"totalCount\": {1}}}"' invalidFilesJson' filesCount);                      }                      result.FileId = file.FileId;                  }                    fileContent = FileManager.Instance.GetFileContent(file);                    var path = GetUrl(result.FileId);                  using (reader = new BinaryReader(fileContent))                  {                      Size size;                      if (IsImage(fileName))                      {                          try                          {                              size = ImageHeader.GetDimensions(reader);                          }                          catch (ArgumentException exc)                          {                              Logger.Warn("Unable to get image dimensions for image file"' exc);                              size = new Size(32' 32);                          }                      }                      else                      {                          size = new Size(32' 32);                      }                        result.Orientation = size.Orientation();                  }                    result.Path = result.FileId > 0 ? path : string.Empty;                  result.FileName = fileName;                    if (extract && extension.ToLower() == "zip")                  {                      FileManager.Instance.DeleteFile(file);                  }                    return result;              }              catch (InvalidFileExtensionException)              {                  result.Message = GetLocalizedString("ExtensionNotAllowed");                  return result;              }              catch (Exception exe)              {                  Logger.Error(exe);                  result.Message = exe.Message;                  return result;              }              finally              {                  if (reader != null)                  {                      reader.Close();                      reader.Dispose();                  }                  if (fileContent != null)                  {                      fileContent.Close();                      fileContent.Dispose();                  }              }
Magic Number,DotNetNuke.Web.InternalServices,FileUploadController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\FileUploadController.cs,UploadFile,The following statement contains a magic number: try              {                  var extension = Path.GetExtension(fileName).ValueOrEmpty().Replace("."' "");                  result.FileIconUrl = IconController.GetFileIconUrl(extension);                    if (!string.IsNullOrEmpty(filter) && !filter.ToLower().Contains(extension.ToLower()))                  {                      result.Message = GetLocalizedString("ExtensionNotAllowed");                      return result;                  }                    var folderManager = FolderManager.Instance;                    var effectivePortalId = isHostPortal ? Null.NullInteger : portalId;                    // Check if this is a User Folder                                  int userId;                  var folderInfo = folderManager.GetFolder(effectivePortalId' folder);                  if (IsUserFolder(folder' out userId))                  {                      var user = UserController.GetUserById(effectivePortalId' userId);                      if (user != null)                      {                          folderInfo = folderManager.GetUserFolder(user);                      }                  }                    if (!FolderPermissionController.HasFolderPermission(portalId' folder' "WRITE")                      && !FolderPermissionController.HasFolderPermission(portalId' folder' "ADD"))                  {                      result.Message = GetLocalizedString("NoPermission");                      return result;                  }                    IFileInfo file;                    if (!overwrite && FileManager.Instance.FileExists(folderInfo' fileName' true))                  {                      result.Message = GetLocalizedString("AlreadyExists");                      result.AlreadyExists = true;                      file = FileManager.Instance.GetFile(folderInfo' fileName' true);                      result.FileId = file.FileId;                  }                  else                  {                      file = FileManager.Instance.AddFile(folderInfo' fileName' stream' true' false'                                                          FileContentTypeManager.Instance.GetContentType(Path.GetExtension(fileName))'                                                          userInfo.UserID);                      if (extract && extension.ToLower() == "zip")                      {                          var destinationFolder = FolderManager.Instance.GetFolder(file.FolderId);                          var invalidFiles = new List<string>();                          var filesCount = FileManager.Instance.UnzipFile(file' destinationFolder' invalidFiles);                            var invalidFilesJson = invalidFiles.Count > 0                              ? string.Format("\"{0}\""' string.Join("\"'\""' invalidFiles))                              : string.Empty;                          result.Prompt = string.Format("{{\"invalidFiles\":[{0}]' \"totalCount\": {1}}}"' invalidFilesJson' filesCount);                      }                      result.FileId = file.FileId;                  }                    fileContent = FileManager.Instance.GetFileContent(file);                    var path = GetUrl(result.FileId);                  using (reader = new BinaryReader(fileContent))                  {                      Size size;                      if (IsImage(fileName))                      {                          try                          {                              size = ImageHeader.GetDimensions(reader);                          }                          catch (ArgumentException exc)                          {                              Logger.Warn("Unable to get image dimensions for image file"' exc);                              size = new Size(32' 32);                          }                      }                      else                      {                          size = new Size(32' 32);                      }                        result.Orientation = size.Orientation();                  }                    result.Path = result.FileId > 0 ? path : string.Empty;                  result.FileName = fileName;                    if (extract && extension.ToLower() == "zip")                  {                      FileManager.Instance.DeleteFile(file);                  }                    return result;              }              catch (InvalidFileExtensionException)              {                  result.Message = GetLocalizedString("ExtensionNotAllowed");                  return result;              }              catch (Exception exe)              {                  Logger.Error(exe);                  result.Message = exe.Message;                  return result;              }              finally              {                  if (reader != null)                  {                      reader.Close();                      reader.Dispose();                  }                  if (fileContent != null)                  {                      fileContent.Close();                      fileContent.Dispose();                  }              }
Magic Number,DotNetNuke.Web.InternalServices,FileUploadController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\FileUploadController.cs,UploadFile,The following statement contains a magic number: try              {                  var extension = Path.GetExtension(fileName).ValueOrEmpty().Replace("."' "");                  result.FileIconUrl = IconController.GetFileIconUrl(extension);                    if (!string.IsNullOrEmpty(filter) && !filter.ToLower().Contains(extension.ToLower()))                  {                      result.Message = GetLocalizedString("ExtensionNotAllowed");                      return result;                  }                    var folderManager = FolderManager.Instance;                    var effectivePortalId = isHostPortal ? Null.NullInteger : portalId;                    // Check if this is a User Folder                                  int userId;                  var folderInfo = folderManager.GetFolder(effectivePortalId' folder);                  if (IsUserFolder(folder' out userId))                  {                      var user = UserController.GetUserById(effectivePortalId' userId);                      if (user != null)                      {                          folderInfo = folderManager.GetUserFolder(user);                      }                  }                    if (!FolderPermissionController.HasFolderPermission(portalId' folder' "WRITE")                      && !FolderPermissionController.HasFolderPermission(portalId' folder' "ADD"))                  {                      result.Message = GetLocalizedString("NoPermission");                      return result;                  }                    IFileInfo file;                    if (!overwrite && FileManager.Instance.FileExists(folderInfo' fileName' true))                  {                      result.Message = GetLocalizedString("AlreadyExists");                      result.AlreadyExists = true;                      file = FileManager.Instance.GetFile(folderInfo' fileName' true);                      result.FileId = file.FileId;                  }                  else                  {                      file = FileManager.Instance.AddFile(folderInfo' fileName' stream' true' false'                                                          FileContentTypeManager.Instance.GetContentType(Path.GetExtension(fileName))'                                                          userInfo.UserID);                      if (extract && extension.ToLower() == "zip")                      {                          var destinationFolder = FolderManager.Instance.GetFolder(file.FolderId);                          var invalidFiles = new List<string>();                          var filesCount = FileManager.Instance.UnzipFile(file' destinationFolder' invalidFiles);                            var invalidFilesJson = invalidFiles.Count > 0                              ? string.Format("\"{0}\""' string.Join("\"'\""' invalidFiles))                              : string.Empty;                          result.Prompt = string.Format("{{\"invalidFiles\":[{0}]' \"totalCount\": {1}}}"' invalidFilesJson' filesCount);                      }                      result.FileId = file.FileId;                  }                    fileContent = FileManager.Instance.GetFileContent(file);                    var path = GetUrl(result.FileId);                  using (reader = new BinaryReader(fileContent))                  {                      Size size;                      if (IsImage(fileName))                      {                          try                          {                              size = ImageHeader.GetDimensions(reader);                          }                          catch (ArgumentException exc)                          {                              Logger.Warn("Unable to get image dimensions for image file"' exc);                              size = new Size(32' 32);                          }                      }                      else                      {                          size = new Size(32' 32);                      }                        result.Orientation = size.Orientation();                  }                    result.Path = result.FileId > 0 ? path : string.Empty;                  result.FileName = fileName;                    if (extract && extension.ToLower() == "zip")                  {                      FileManager.Instance.DeleteFile(file);                  }                    return result;              }              catch (InvalidFileExtensionException)              {                  result.Message = GetLocalizedString("ExtensionNotAllowed");                  return result;              }              catch (Exception exe)              {                  Logger.Error(exe);                  result.Message = exe.Message;                  return result;              }              finally              {                  if (reader != null)                  {                      reader.Close();                      reader.Dispose();                  }                  if (fileContent != null)                  {                      fileContent.Close();                      fileContent.Dispose();                  }              }
Magic Number,DotNetNuke.Web.InternalServices,FileUploadController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\FileUploadController.cs,UploadFile,The following statement contains a magic number: try              {                  var extension = Path.GetExtension(fileName).ValueOrEmpty().Replace("."' "");                  result.FileIconUrl = IconController.GetFileIconUrl(extension);                    if (!string.IsNullOrEmpty(filter) && !filter.ToLower().Contains(extension.ToLower()))                  {                      result.Message = GetLocalizedString("ExtensionNotAllowed");                      return result;                  }                    var folderManager = FolderManager.Instance;                    var effectivePortalId = isHostPortal ? Null.NullInteger : portalId;                    // Check if this is a User Folder                                  int userId;                  var folderInfo = folderManager.GetFolder(effectivePortalId' folder);                  if (IsUserFolder(folder' out userId))                  {                      var user = UserController.GetUserById(effectivePortalId' userId);                      if (user != null)                      {                          folderInfo = folderManager.GetUserFolder(user);                      }                  }                    if (!FolderPermissionController.HasFolderPermission(portalId' folder' "WRITE")                      && !FolderPermissionController.HasFolderPermission(portalId' folder' "ADD"))                  {                      result.Message = GetLocalizedString("NoPermission");                      return result;                  }                    IFileInfo file;                    if (!overwrite && FileManager.Instance.FileExists(folderInfo' fileName' true))                  {                      result.Message = GetLocalizedString("AlreadyExists");                      result.AlreadyExists = true;                      file = FileManager.Instance.GetFile(folderInfo' fileName' true);                      result.FileId = file.FileId;                  }                  else                  {                      file = FileManager.Instance.AddFile(folderInfo' fileName' stream' true' false'                                                          FileContentTypeManager.Instance.GetContentType(Path.GetExtension(fileName))'                                                          userInfo.UserID);                      if (extract && extension.ToLower() == "zip")                      {                          var destinationFolder = FolderManager.Instance.GetFolder(file.FolderId);                          var invalidFiles = new List<string>();                          var filesCount = FileManager.Instance.UnzipFile(file' destinationFolder' invalidFiles);                            var invalidFilesJson = invalidFiles.Count > 0                              ? string.Format("\"{0}\""' string.Join("\"'\""' invalidFiles))                              : string.Empty;                          result.Prompt = string.Format("{{\"invalidFiles\":[{0}]' \"totalCount\": {1}}}"' invalidFilesJson' filesCount);                      }                      result.FileId = file.FileId;                  }                    fileContent = FileManager.Instance.GetFileContent(file);                    var path = GetUrl(result.FileId);                  using (reader = new BinaryReader(fileContent))                  {                      Size size;                      if (IsImage(fileName))                      {                          try                          {                              size = ImageHeader.GetDimensions(reader);                          }                          catch (ArgumentException exc)                          {                              Logger.Warn("Unable to get image dimensions for image file"' exc);                              size = new Size(32' 32);                          }                      }                      else                      {                          size = new Size(32' 32);                      }                        result.Orientation = size.Orientation();                  }                    result.Path = result.FileId > 0 ? path : string.Empty;                  result.FileName = fileName;                    if (extract && extension.ToLower() == "zip")                  {                      FileManager.Instance.DeleteFile(file);                  }                    return result;              }              catch (InvalidFileExtensionException)              {                  result.Message = GetLocalizedString("ExtensionNotAllowed");                  return result;              }              catch (Exception exe)              {                  Logger.Error(exe);                  result.Message = exe.Message;                  return result;              }              finally              {                  if (reader != null)                  {                      reader.Close();                      reader.Dispose();                  }                  if (fileContent != null)                  {                      fileContent.Close();                      fileContent.Dispose();                  }              }
Magic Number,DotNetNuke.Web.InternalServices,ModuleServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ModuleServiceController.cs,MoveModule,The following statement contains a magic number: if (moduleOrder > 0)              {                  //DNN-7099: the deleted modules won't show in page' so when the module index calculated from client' it will lost the                   //index count of deleted modules and will cause order issue.                  var deletedModules = ModuleController.Instance.GetTabModules(postData.TabId).Values.Where(m => m.IsDeleted);                  foreach (var module in deletedModules)                  {                      if (module.ModuleOrder < moduleOrder && module.PaneName == postData.Pane)                      {                          moduleOrder += 2;                      }                  }              }
Magic Number,DotNetNuke.Web.InternalServices,NotificationsServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\NotificationsServiceController.cs,GetToasts,The following statement contains a magic number: return Request.CreateResponse(HttpStatusCode.OK' new { Success = true' Toasts = convertedObjects.Take(3) });
Magic Number,DotNetNuke.Web.InternalServices,MessagingServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\MessagingServiceController.cs,Search,The following statement contains a magic number: try              {                  var portalId = PortalController.GetEffectivePortalId(PortalSettings.PortalId);                  var isAdmin = UserInfo.IsSuperUser || UserInfo.IsInRole("Administrators");                  const int numResults = 10;                    // GetUsersAdvancedSearch doesn't accept a comma or a single quote in the query so we have to remove them for now. See issue 20224.                  q = q.Replace("'"' "").Replace("'"' "");                  if (q.Length == 0) return Request.CreateResponse<SearchResult>(HttpStatusCode.OK' null);                    var results = UserController.Instance.GetUsersBasicSearch(portalId' 0' numResults' "DisplayName"' true' "DisplayName"' q)                      .Select(user => new SearchResult                      {                          id = "user-" + user.UserID'                          name = user.DisplayName'                          iconfile = UserController.Instance.GetUserProfilePictureUrl(user.UserID' 32' 32)                      }).ToList();                    //Roles should be visible to Administrators or User in the Role.                  var roles = RoleController.Instance.GetRolesBasicSearch(portalId' numResults' q);                  results.AddRange(from roleInfo in roles                                      where                                          isAdmin ||                                          UserInfo.Social.Roles.SingleOrDefault(ur => ur.RoleID == roleInfo.RoleID && ur.IsOwner) != null                                      select new SearchResult                                      {                                          id = "role-" + roleInfo.RoleID'                                          name = roleInfo.RoleName'                                          iconfile = TestableGlobals.Instance.ResolveUrl(string.IsNullOrEmpty(roleInfo.IconFile)                                                      ? "~/images/no_avatar.gif"                                                      : PortalSettings.HomeDirectory.TrimEnd('/') + "/" + roleInfo.IconFile)                                      });                    return Request.CreateResponse(HttpStatusCode.OK' results.OrderBy(sr => sr.name));              }              catch (Exception exc)              {                  Logger.Error(exc);                  return Request.CreateErrorResponse(HttpStatusCode.InternalServerError' exc);              }
Magic Number,DotNetNuke.Web.InternalServices,MessagingServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\MessagingServiceController.cs,Search,The following statement contains a magic number: try              {                  var portalId = PortalController.GetEffectivePortalId(PortalSettings.PortalId);                  var isAdmin = UserInfo.IsSuperUser || UserInfo.IsInRole("Administrators");                  const int numResults = 10;                    // GetUsersAdvancedSearch doesn't accept a comma or a single quote in the query so we have to remove them for now. See issue 20224.                  q = q.Replace("'"' "").Replace("'"' "");                  if (q.Length == 0) return Request.CreateResponse<SearchResult>(HttpStatusCode.OK' null);                    var results = UserController.Instance.GetUsersBasicSearch(portalId' 0' numResults' "DisplayName"' true' "DisplayName"' q)                      .Select(user => new SearchResult                      {                          id = "user-" + user.UserID'                          name = user.DisplayName'                          iconfile = UserController.Instance.GetUserProfilePictureUrl(user.UserID' 32' 32)                      }).ToList();                    //Roles should be visible to Administrators or User in the Role.                  var roles = RoleController.Instance.GetRolesBasicSearch(portalId' numResults' q);                  results.AddRange(from roleInfo in roles                                      where                                          isAdmin ||                                          UserInfo.Social.Roles.SingleOrDefault(ur => ur.RoleID == roleInfo.RoleID && ur.IsOwner) != null                                      select new SearchResult                                      {                                          id = "role-" + roleInfo.RoleID'                                          name = roleInfo.RoleName'                                          iconfile = TestableGlobals.Instance.ResolveUrl(string.IsNullOrEmpty(roleInfo.IconFile)                                                      ? "~/images/no_avatar.gif"                                                      : PortalSettings.HomeDirectory.TrimEnd('/') + "/" + roleInfo.IconFile)                                      });                    return Request.CreateResponse(HttpStatusCode.OK' results.OrderBy(sr => sr.name));              }              catch (Exception exc)              {                  Logger.Error(exc);                  return Request.CreateErrorResponse(HttpStatusCode.InternalServerError' exc);              }
Magic Number,DotNetNuke.Web.InternalServices,MessagingServiceController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\MessagingServiceController.cs,Search,The following statement contains a magic number: try              {                  var portalId = PortalController.GetEffectivePortalId(PortalSettings.PortalId);                  var isAdmin = UserInfo.IsSuperUser || UserInfo.IsInRole("Administrators");                  const int numResults = 10;                    // GetUsersAdvancedSearch doesn't accept a comma or a single quote in the query so we have to remove them for now. See issue 20224.                  q = q.Replace("'"' "").Replace("'"' "");                  if (q.Length == 0) return Request.CreateResponse<SearchResult>(HttpStatusCode.OK' null);                    var results = UserController.Instance.GetUsersBasicSearch(portalId' 0' numResults' "DisplayName"' true' "DisplayName"' q)                      .Select(user => new SearchResult                      {                          id = "user-" + user.UserID'                          name = user.DisplayName'                          iconfile = UserController.Instance.GetUserProfilePictureUrl(user.UserID' 32' 32)                      }).ToList();                    //Roles should be visible to Administrators or User in the Role.                  var roles = RoleController.Instance.GetRolesBasicSearch(portalId' numResults' q);                  results.AddRange(from roleInfo in roles                                      where                                          isAdmin ||                                          UserInfo.Social.Roles.SingleOrDefault(ur => ur.RoleID == roleInfo.RoleID && ur.IsOwner) != null                                      select new SearchResult                                      {                                          id = "role-" + roleInfo.RoleID'                                          name = roleInfo.RoleName'                                          iconfile = TestableGlobals.Instance.ResolveUrl(string.IsNullOrEmpty(roleInfo.IconFile)                                                      ? "~/images/no_avatar.gif"                                                      : PortalSettings.HomeDirectory.TrimEnd('/') + "/" + roleInfo.IconFile)                                      });                    return Request.CreateResponse(HttpStatusCode.OK' results.OrderBy(sr => sr.name));              }              catch (Exception exc)              {                  Logger.Error(exc);                  return Request.CreateErrorResponse(HttpStatusCode.InternalServerError' exc);              }
Magic Number,DotNetNuke.Web.InternalServices,UserFileController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\UserFileController.cs,GetFileSize,The following statement contains a magic number: var size = sizeInBytes / 1024;
Magic Number,DotNetNuke.Web.InternalServices,UserFileController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\UserFileController.cs,GetFileSize,The following statement contains a magic number: var biggerThanAMegabyte = size > 1024;
Magic Number,DotNetNuke.Web.InternalServices,UserFileController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\UserFileController.cs,GetFileSize,The following statement contains a magic number: if (biggerThanAMegabyte)              {                  size = (size / 1024);              }
Magic Number,DotNetNuke.Web.UI.WebControls,DnnFileUploadOptions,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUploadOptions.cs,DnnFileUploadOptions,The following statement contains a magic number: Resources = new DnnFileUploadResources              {                  Title = Utilities.GetLocalizedString("FileUpload.Title.Text")'                  DecompressLabel = Utilities.GetLocalizedString("FileUpload.DecompressLabel.Text")'                  UploadToFolderLabel = Utilities.GetLocalizedString("FileUpload.UploadToFolderLabel.Text")'                  DragAndDropAreaTitle = Utilities.GetLocalizedString("FileUpload.DragAndDropAreaTitle.Text")'                  UploadFileMethod = Utilities.GetLocalizedString("FileUpload.UploadFileMethod.Text")'                  UploadFromWebMethod = Utilities.GetLocalizedString("FileUpload.UploadFromWebMethod.Text")'                  CloseButtonText = Utilities.GetLocalizedString("FileUpload.CloseButton.Text")'                  UploadFromWebButtonText = Utilities.GetLocalizedString("FileUpload.UploadFromWebButton.Text")'                  DecompressingFile = Utilities.GetLocalizedString("FileUpload.DecompressingFile.Text")'                  FileIsTooLarge = string.Format(Utilities.GetLocalizedString("FileUpload.FileIsTooLarge.Error") + " Mb"' (MaxFileSize / (1024 * 1024)).ToString(CultureInfo.InvariantCulture))'                  FileUploadCancelled = Utilities.GetLocalizedString("FileUpload.FileUploadCancelled.Error")'                  FileUploadFailed = Utilities.GetLocalizedString("FileUpload.FileUploadFailed.Error")'                  TooManyFiles = Utilities.GetLocalizedString("FileUpload.TooManyFiles.Error")'                  InvalidFileExtensions = Utilities.GetLocalizedString("FileUpload.InvalidFileExtensions.Error")'                  FileUploaded = Utilities.GetLocalizedString("FileUpload.FileUploaded.Text")'                  EmptyFileUpload = Utilities.GetLocalizedString("FileUpload.EmptyFileUpload.Error")'                  FileAlreadyExists = Utilities.GetLocalizedString("FileUpload.FileAlreadyExists.Error")'                  ErrorDialogTitle = Utilities.GetLocalizedString("FileUpload.ErrorDialogTitle.Text")'                  UploadStopped = Utilities.GetLocalizedString("FileUpload.UploadStopped.Text")'                  UrlTooltip = Utilities.GetLocalizedString("FileUpload.UrlTooltip.Text")'                  KeepButtonText = Utilities.GetLocalizedString("FileUpload.KeepButton.Text")'                  ReplaceButtonText = Utilities.GetLocalizedString("FileUpload.ReplaceButton.Text")'                  UnzipFilePromptTitle = Utilities.GetLocalizedString("FileUpload.UnzipFilePromptTitle.Text")'                  UnzipFileFailedPromptBody = Utilities.GetLocalizedString("FileUpload.UnzipFileFailedPromptBody.Text")'                  UnzipFileSuccessPromptBody = Utilities.GetLocalizedString("FileUpload.UnzipFileSuccessPromptBody.Text")              };
Magic Number,DotNetNuke.Web.UI.WebControls,DnnFileUploadOptions,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUploadOptions.cs,DnnFileUploadOptions,The following statement contains a magic number: Resources = new DnnFileUploadResources              {                  Title = Utilities.GetLocalizedString("FileUpload.Title.Text")'                  DecompressLabel = Utilities.GetLocalizedString("FileUpload.DecompressLabel.Text")'                  UploadToFolderLabel = Utilities.GetLocalizedString("FileUpload.UploadToFolderLabel.Text")'                  DragAndDropAreaTitle = Utilities.GetLocalizedString("FileUpload.DragAndDropAreaTitle.Text")'                  UploadFileMethod = Utilities.GetLocalizedString("FileUpload.UploadFileMethod.Text")'                  UploadFromWebMethod = Utilities.GetLocalizedString("FileUpload.UploadFromWebMethod.Text")'                  CloseButtonText = Utilities.GetLocalizedString("FileUpload.CloseButton.Text")'                  UploadFromWebButtonText = Utilities.GetLocalizedString("FileUpload.UploadFromWebButton.Text")'                  DecompressingFile = Utilities.GetLocalizedString("FileUpload.DecompressingFile.Text")'                  FileIsTooLarge = string.Format(Utilities.GetLocalizedString("FileUpload.FileIsTooLarge.Error") + " Mb"' (MaxFileSize / (1024 * 1024)).ToString(CultureInfo.InvariantCulture))'                  FileUploadCancelled = Utilities.GetLocalizedString("FileUpload.FileUploadCancelled.Error")'                  FileUploadFailed = Utilities.GetLocalizedString("FileUpload.FileUploadFailed.Error")'                  TooManyFiles = Utilities.GetLocalizedString("FileUpload.TooManyFiles.Error")'                  InvalidFileExtensions = Utilities.GetLocalizedString("FileUpload.InvalidFileExtensions.Error")'                  FileUploaded = Utilities.GetLocalizedString("FileUpload.FileUploaded.Text")'                  EmptyFileUpload = Utilities.GetLocalizedString("FileUpload.EmptyFileUpload.Error")'                  FileAlreadyExists = Utilities.GetLocalizedString("FileUpload.FileAlreadyExists.Error")'                  ErrorDialogTitle = Utilities.GetLocalizedString("FileUpload.ErrorDialogTitle.Text")'                  UploadStopped = Utilities.GetLocalizedString("FileUpload.UploadStopped.Text")'                  UrlTooltip = Utilities.GetLocalizedString("FileUpload.UrlTooltip.Text")'                  KeepButtonText = Utilities.GetLocalizedString("FileUpload.KeepButton.Text")'                  ReplaceButtonText = Utilities.GetLocalizedString("FileUpload.ReplaceButton.Text")'                  UnzipFilePromptTitle = Utilities.GetLocalizedString("FileUpload.UnzipFilePromptTitle.Text")'                  UnzipFileFailedPromptBody = Utilities.GetLocalizedString("FileUpload.UnzipFileFailedPromptBody.Text")'                  UnzipFileSuccessPromptBody = Utilities.GetLocalizedString("FileUpload.UnzipFileSuccessPromptBody.Text")              };
Magic Number,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterClientScript,The following statement contains a magic number: ClientResourceManager.RegisterScript(page' "~/Resources/Shared/scripts/dnn.WebResourceUrl.js"' FileOrder.Js.DefaultPriority + 2);
Magic Number,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterClientScript,The following statement contains a magic number: ClientResourceManager.RegisterScript(page' "~/Resources/Shared/scripts/dnn.jquery.extensions.js"' FileOrder.Js.DefaultPriority + 3);
Magic Number,DotNetNuke.Web.UI.WebControls,DnnFileUpload,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFileUpload.cs,RegisterClientScript,The following statement contains a magic number: ClientResourceManager.RegisterScript(page' "~/Resources/Shared/Components/FileUpload/dnn.FileUpload.js"' FileOrder.Js.DefaultPriority + 4);
Magic Number,DotNetNuke.Web.UI.WebControls,DnnFormPasswordItem,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFormPasswordItem.cs,CreateControlInternal,The following statement contains a magic number: _password = new TextBox()              {                  ID = ID + "_TextBox"'                  TextMode = TextBoxMode.Password'                  CssClass = TextBoxCssClass'                  MaxLength = 39' //ensure password cannot be cut if too long                  Text = Convert.ToString(Value) // Load from ControlState              };
Magic Number,DotNetNuke.Web.UI.WebControls,DnnFilePickerUploader,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFilePickerUploader.cs,OnLoad,The following statement contains a magic number: if (UrlUtils.InPopUp())              {                  FileUploadControl.Width = 630;                  FileUploadControl.Height = 400;              }
Magic Number,DotNetNuke.Web.UI.WebControls,DnnFilePickerUploader,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFilePickerUploader.cs,OnLoad,The following statement contains a magic number: if (UrlUtils.InPopUp())              {                  FileUploadControl.Width = 630;                  FileUploadControl.Height = 400;              }
Magic Number,DotNetNuke.Web.UI.WebControls,DnnMemberListControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnMemberListControl.cs,Render,The following statement contains a magic number: if (users.Rows.Count > 0)              {                  foreach (DataRow user in users.Rows)                  {                      //Row Header                      writer.Write(string.IsNullOrEmpty(AlternatingRowHeaderTemplate) || row%2 == 0 ? RowHeaderTemplate : AlternatingRowHeaderTemplate);                        var tokenReplace = new TokenReplace();                      var tokenKeyValues = new Dictionary<string' string>();                        foreach (var col in user.Table.Columns.Cast<DataColumn>().Where(col => !tokenKeyValues.ContainsKey(col.ColumnName)))                      {                          tokenKeyValues.Add(col.ColumnName' user[col.ColumnName].ToString());                      }                        var listItem = string.IsNullOrEmpty(AlternatingItemTemplate) || row%2 == 0 ? ItemTemplate : AlternatingItemTemplate;                      listItem = tokenReplace.ReplaceEnvironmentTokens(listItem' tokenKeyValues' "Member");                      writer.Write(listItem);                        //Row Footer                      writer.Write(string.IsNullOrEmpty(AlternatingRowFooterTemplate) || row%2 == 0 ? RowFooterTemplate : AlternatingRowFooterTemplate);                        row++;                  }              }
Magic Number,DotNetNuke.Web.UI.WebControls,DnnMemberListControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnMemberListControl.cs,Render,The following statement contains a magic number: if (users.Rows.Count > 0)              {                  foreach (DataRow user in users.Rows)                  {                      //Row Header                      writer.Write(string.IsNullOrEmpty(AlternatingRowHeaderTemplate) || row%2 == 0 ? RowHeaderTemplate : AlternatingRowHeaderTemplate);                        var tokenReplace = new TokenReplace();                      var tokenKeyValues = new Dictionary<string' string>();                        foreach (var col in user.Table.Columns.Cast<DataColumn>().Where(col => !tokenKeyValues.ContainsKey(col.ColumnName)))                      {                          tokenKeyValues.Add(col.ColumnName' user[col.ColumnName].ToString());                      }                        var listItem = string.IsNullOrEmpty(AlternatingItemTemplate) || row%2 == 0 ? ItemTemplate : AlternatingItemTemplate;                      listItem = tokenReplace.ReplaceEnvironmentTokens(listItem' tokenKeyValues' "Member");                      writer.Write(listItem);                        //Row Footer                      writer.Write(string.IsNullOrEmpty(AlternatingRowFooterTemplate) || row%2 == 0 ? RowFooterTemplate : AlternatingRowFooterTemplate);                        row++;                  }              }
Magic Number,DotNetNuke.Web.UI.WebControls,DnnMemberListControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnMemberListControl.cs,Render,The following statement contains a magic number: if (users.Rows.Count > 0)              {                  foreach (DataRow user in users.Rows)                  {                      //Row Header                      writer.Write(string.IsNullOrEmpty(AlternatingRowHeaderTemplate) || row%2 == 0 ? RowHeaderTemplate : AlternatingRowHeaderTemplate);                        var tokenReplace = new TokenReplace();                      var tokenKeyValues = new Dictionary<string' string>();                        foreach (var col in user.Table.Columns.Cast<DataColumn>().Where(col => !tokenKeyValues.ContainsKey(col.ColumnName)))                      {                          tokenKeyValues.Add(col.ColumnName' user[col.ColumnName].ToString());                      }                        var listItem = string.IsNullOrEmpty(AlternatingItemTemplate) || row%2 == 0 ? ItemTemplate : AlternatingItemTemplate;                      listItem = tokenReplace.ReplaceEnvironmentTokens(listItem' tokenKeyValues' "Member");                      writer.Write(listItem);                        //Row Footer                      writer.Write(string.IsNullOrEmpty(AlternatingRowFooterTemplate) || row%2 == 0 ? RowFooterTemplate : AlternatingRowFooterTemplate);                        row++;                  }              }
Magic Number,DotNetNuke.Web.UI.WebControls,DnnFormEditor,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFormEditor.cs,SetUpItems,The following statement contains a magic number: foreach (DnnFormItemBase item in items)              {                  if (encryptIds)                  {                      item.ID = (Host.GUID.Substring(0' 7) + item.ID + DateTime.Now.Day).GenerateHash();                  }                    parentControl.Controls.Add(item);              }
Magic Number,DotNetNuke.Web.UI.WebControls,DnnUrlControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnUrlControl.cs,DoChangeURL,The following statement contains a magic number: if (!String.IsNullOrEmpty(_Url))              {                  var objUrls = new UrlController();                  string TrackingUrl = _Url;                    _Urltype = Globals.GetURLType(_Url).ToString("g").Substring(0' 1);                  if (_Urltype == "U" && (_Url.StartsWith("~/" + PortalSettings.DefaultIconLocation' StringComparison.InvariantCultureIgnoreCase)))                  {                      _Urltype = "I";                  }                  ViewState["UrlType"] = _Urltype;                  if (_Urltype == "F")                  {                      if (_Url.ToLower().StartsWith("fileid="))                      {                          TrackingUrl = _Url;                          var objFile = FileManager.Instance.GetFile(int.Parse(_Url.Substring(7)));                          if (objFile != null)                          {                              _Url = objFile.Folder + objFile.FileName;                          }                      }                      else                      {                          //to handle legacy scenarios before the introduction of the FileServerHandler                          var fileName = Path.GetFileName(_Url);                          var folderPath = _Url.Substring(0' _Url.LastIndexOf(fileName));                          var folder = FolderManager.Instance.GetFolder(_objPortal.PortalID' folderPath);                          var fileId = -1;                          if (folder != null)                          {                              var file = FileManager.Instance.GetFile(folder' fileName);                              if (file != null)                              {                                  fileId = file.FileId;                              }                          }                          TrackingUrl = "FileID=" + fileId.ToString();                      }                  }                  if (_Urltype == "M")                  {                      if (_Url.ToLower().StartsWith("userid="))                      {                          UserInfo objUser = UserController.GetUserById(_objPortal.PortalID' int.Parse(_Url.Substring(7)));                          if (objUser != null)                          {                              _Url = objUser.Username;                          }                      }                  }                  UrlTrackingInfo objUrlTracking = objUrls.GetUrlTracking(_objPortal.PortalID' TrackingUrl' ModuleID);                  if (objUrlTracking != null)                  {                      chkNewWindow.Checked = objUrlTracking.NewWindow;                      chkTrack.Checked = objUrlTracking.TrackClicks;                      chkLog.Checked = objUrlTracking.LogActivity;                  }                  else //the url does not exist in the tracking table                  {                      chkTrack.Checked = false;                      chkLog.Checked = false;                  }                  ViewState["Url"] = _Url;              }              else              {                  if (!String.IsNullOrEmpty(_Urltype))                  {                      optType.ClearSelection();                      if (optType.Items.FindByValue(_Urltype) != null)                      {                          optType.Items.FindByValue(_Urltype).Selected = true;                      }                      else                      {                          optType.Items[0].Selected = true;                      }                  }                  else                  {                      if (optType.Items.Count > 0)                      {                          optType.ClearSelection();                          optType.Items[0].Selected = true;                      }                  }                  chkNewWindow.Checked = false; //Need check                  chkTrack.Checked = false; //Need check                  chkLog.Checked = false; //Need check              }
Magic Number,DotNetNuke.Web.UI.WebControls,DnnUrlControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnUrlControl.cs,DoChangeURL,The following statement contains a magic number: if (!String.IsNullOrEmpty(_Url))              {                  var objUrls = new UrlController();                  string TrackingUrl = _Url;                    _Urltype = Globals.GetURLType(_Url).ToString("g").Substring(0' 1);                  if (_Urltype == "U" && (_Url.StartsWith("~/" + PortalSettings.DefaultIconLocation' StringComparison.InvariantCultureIgnoreCase)))                  {                      _Urltype = "I";                  }                  ViewState["UrlType"] = _Urltype;                  if (_Urltype == "F")                  {                      if (_Url.ToLower().StartsWith("fileid="))                      {                          TrackingUrl = _Url;                          var objFile = FileManager.Instance.GetFile(int.Parse(_Url.Substring(7)));                          if (objFile != null)                          {                              _Url = objFile.Folder + objFile.FileName;                          }                      }                      else                      {                          //to handle legacy scenarios before the introduction of the FileServerHandler                          var fileName = Path.GetFileName(_Url);                          var folderPath = _Url.Substring(0' _Url.LastIndexOf(fileName));                          var folder = FolderManager.Instance.GetFolder(_objPortal.PortalID' folderPath);                          var fileId = -1;                          if (folder != null)                          {                              var file = FileManager.Instance.GetFile(folder' fileName);                              if (file != null)                              {                                  fileId = file.FileId;                              }                          }                          TrackingUrl = "FileID=" + fileId.ToString();                      }                  }                  if (_Urltype == "M")                  {                      if (_Url.ToLower().StartsWith("userid="))                      {                          UserInfo objUser = UserController.GetUserById(_objPortal.PortalID' int.Parse(_Url.Substring(7)));                          if (objUser != null)                          {                              _Url = objUser.Username;                          }                      }                  }                  UrlTrackingInfo objUrlTracking = objUrls.GetUrlTracking(_objPortal.PortalID' TrackingUrl' ModuleID);                  if (objUrlTracking != null)                  {                      chkNewWindow.Checked = objUrlTracking.NewWindow;                      chkTrack.Checked = objUrlTracking.TrackClicks;                      chkLog.Checked = objUrlTracking.LogActivity;                  }                  else //the url does not exist in the tracking table                  {                      chkTrack.Checked = false;                      chkLog.Checked = false;                  }                  ViewState["Url"] = _Url;              }              else              {                  if (!String.IsNullOrEmpty(_Urltype))                  {                      optType.ClearSelection();                      if (optType.Items.FindByValue(_Urltype) != null)                      {                          optType.Items.FindByValue(_Urltype).Selected = true;                      }                      else                      {                          optType.Items[0].Selected = true;                      }                  }                  else                  {                      if (optType.Items.Count > 0)                      {                          optType.ClearSelection();                          optType.Items[0].Selected = true;                      }                  }                  chkNewWindow.Checked = false; //Need check                  chkTrack.Checked = false; //Need check                  chkLog.Checked = false; //Need check              }
Magic Number,DotNetNuke.Web.UI,Utilities,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\Utilities.cs,ApplySkin,The following statement contains a magic number: try              {                  skinProperty = telerikControl.GetType().GetProperty("Skin");                  enableEmbeddedSkinsProperty = telerikControl.GetType().GetProperty("EnableEmbeddedSkins");                    if ((string.IsNullOrEmpty(controlName)))                  {                      controlName = telerikControl.GetType().BaseType.Name;                      if ((controlName.StartsWith("Rad") || controlName.StartsWith("Dnn")))                      {                          controlName = controlName.Substring(3);                      }                  }                      string skinVirtualFolder = "";                  if (PortalSettings.Current != null)                      skinVirtualFolder = PortalSettings.Current.ActiveTab.SkinPath.Replace('\\'' '/').Replace("//"' "/");                  else                      skinVirtualFolder = telerikControl.ResolveUrl("~/Portals/_default/skins/_default/Aphelia"); // developer skin Aphelia                    string skinName = "";                  string webControlSkinName = "";                  if (skinProperty != null)                  {                      var v = skinProperty.GetValue(telerikControl' null);                      if (v != null)                           webControlSkinName = v.ToString();                    }                  if (string.IsNullOrEmpty(webControlSkinName)) webControlSkinName = "default";                    if ((skinVirtualFolder.EndsWith("/")))                  {                      skinVirtualFolder = skinVirtualFolder.Substring(0' skinVirtualFolder.Length - 1);                  }                  int lastIndex = skinVirtualFolder.LastIndexOf("/");                  if ((lastIndex > -1 && skinVirtualFolder.Length > lastIndex))                  {                      skinName = skinVirtualFolder.Substring(skinVirtualFolder.LastIndexOf("/") + 1);                  }                    string systemWebControlSkin = string.Empty;                  if ((!string.IsNullOrEmpty(skinName) && !string.IsNullOrEmpty(skinVirtualFolder)))                  {  					systemWebControlSkin = HttpContext.Current.Server.MapPath(skinVirtualFolder);                      systemWebControlSkin = Path.Combine(systemWebControlSkin' "WebControlSkin");                      systemWebControlSkin = Path.Combine(systemWebControlSkin' skinName);                      systemWebControlSkin = Path.Combine(systemWebControlSkin' webControlSkinSubFolderName);                      systemWebControlSkin = Path.Combine(systemWebControlSkin' string.Format("{0}.{1}.css"' controlName' webControlSkinName));                        //Check if the selected skin has the webcontrol skin                      if ((!File.Exists(systemWebControlSkin)))                      {                          systemWebControlSkin = "";                      }                        //No skin' try default folder                      if ((string.IsNullOrEmpty(systemWebControlSkin)))                      {                          skinVirtualFolder = telerikControl.ResolveUrl("~/Portals/_default/Skins/_default");                          skinName = "Default";                            if ((skinVirtualFolder.EndsWith("/")))                          {                              skinVirtualFolder = skinVirtualFolder.Substring(0' skinVirtualFolder.Length - 1);                          }                            if ((!string.IsNullOrEmpty(skinName) && !string.IsNullOrEmpty(skinVirtualFolder)))                          {                              systemWebControlSkin = HttpContext.Current.Server.MapPath(skinVirtualFolder);                              systemWebControlSkin = Path.Combine(systemWebControlSkin' "WebControlSkin");                              systemWebControlSkin = Path.Combine(systemWebControlSkin' skinName);                              systemWebControlSkin = Path.Combine(systemWebControlSkin' webControlSkinSubFolderName);                              systemWebControlSkin = Path.Combine(systemWebControlSkin' string.Format("{0}.{1}.css"' controlName' webControlSkinName));                                if ((!File.Exists(systemWebControlSkin)))                              {                                  systemWebControlSkin = "";                              }                          }                      }                  }                    if ((!string.IsNullOrEmpty(systemWebControlSkin)))                  {                      string filePath = Path.Combine(skinVirtualFolder' "WebControlSkin");                      filePath = Path.Combine(filePath' skinName);                      filePath = Path.Combine(filePath' webControlSkinSubFolderName);                      filePath = Path.Combine(filePath' string.Format("{0}.{1}.css"' controlName' webControlSkinName));                      filePath = filePath.Replace('\\'' '/').Replace("//"' "/").TrimEnd('/');                                            if (HttpContext.Current != null && HttpContext.Current.Handler is Page)                      {                          ClientResourceManager.RegisterStyleSheet(HttpContext.Current.Handler as Page' filePath' FileOrder.Css.ResourceCss);                      }                        if (((skinProperty != null) && (enableEmbeddedSkinsProperty != null)))                      {                          skinApplied = true;                          skinProperty.SetValue(telerikControl' webControlSkinName' null);                          enableEmbeddedSkinsProperty.SetValue(telerikControl' false' null);                      }                  }              }              catch (Exception ex)              {                  Exceptions.LogException(ex);              }
Magic Number,DotNetNuke.Web.UI.WebControls.Internal,DnnCheckBoxList,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Internal\DnnCheckBoxList.cs,RegisterRequestResources,The following statement contains a magic number: if (Globals.Status == Globals.UpgradeStatus.None)              {                  var package = JavaScriptLibraryController.Instance.GetLibrary(l => l.LibraryName == "Selectize");                  if (package != null)                  {                      JavaScript.RequestRegistration("Selectize");                        var libraryPath =                          $"~/Resources/Libraries/{package.LibraryName}/{Globals.FormatVersion(package.Version' "00"' 3' "_")}/";                      ClientResourceManager.RegisterStyleSheet(Page' $"{libraryPath}selectize.css");                      ClientResourceManager.RegisterStyleSheet(Page' $"{libraryPath}selectize.default.css");                        var initScripts = $"$('#{ClientID}').selectize({{}});";                        Page.ClientScript.RegisterStartupScript(Page.GetType()' $"{ClientID}Sctipts"' initScripts' true);                  }              }
Magic Number,DotNetNuke.Web.UI.WebControls.Internal,DnnComboBox,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\Internal\DnnComboBox.cs,RegisterRequestResources,The following statement contains a magic number: if (Globals.Status == Globals.UpgradeStatus.None)              {                  var package = JavaScriptLibraryController.Instance.GetLibrary(l => l.LibraryName == "Selectize");                  if (package != null)                  {                      JavaScript.RequestRegistration("Selectize");                        var libraryPath =                          $"~/Resources/Libraries/{package.LibraryName}/{Globals.FormatVersion(package.Version' "00"' 3' "_")}/";                        ClientResourceManager.RegisterScript(Page' $"{libraryPath}dnn.combobox.js");                      ClientResourceManager.RegisterStyleSheet(Page' $"{libraryPath}selectize.css");                      ClientResourceManager.RegisterStyleSheet(Page' $"{libraryPath}selectize.default.css");                        var options = JsonConvert.SerializeObject(Options' Formatting.None'                                      new JsonSerializerSettings                                      {                                          NullValueHandling = NullValueHandling.Ignore                                      });                        var initScripts = $"$('#{ClientID}').dnnComboBox({options});";                        ScriptManager.RegisterStartupScript(Page' Page.GetType()' $"{ClientID}Sctipts"' initScripts' true);                  }              }
Missing Default,DotNetNuke.Web.Api,TraceWriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\Api\TraceWriter.cs,Log,The following switch statement is missing a default case: switch (rec.Level)                  {                      case TraceLevel.Debug:                          Logger.Debug(output);                          break;                      case TraceLevel.Info:                          Logger.Info(output);                          break;                      case TraceLevel.Warn:                          Logger.Warn(output);                          break;                      case TraceLevel.Error:                          Logger.Error(output);                          break;                      case TraceLevel.Fatal:                          Logger.Fatal(output);                          break;                  }
Missing Default,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,AddModule,The following switch statement is missing a default case: switch (dto.Position)                      {                          case "TOP":                          case "0":                              positionID = 0;                              break;                          case "BOTTOM":                          case "-1":                              positionID = -1;                              break;                      }
Missing Default,DotNetNuke.Web.InternalServices,ControlBarController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\ControlBarController.cs,DoAddExistingModule,The following switch statement is missing a default case: switch (moduleInfo.DesktopModule.Shareable)                      {                          case ModuleSharing.Unsupported:                              // Should never happen since the module should not be listed in the first place.                              throw new ApplicationException(string.Format("Module '{0}' does not support Shareable and should not be listed in Add Existing Module from a different source site"'                                                                           moduleInfo.DesktopModule.FriendlyName));                          case ModuleSharing.Supported:                              break;                          case ModuleSharing.Unknown:                              break;                      }
Missing Default,DotNetNuke.Web.InternalServices,FileUploadController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\FileUploadController.cs,PostFile,The following switch statement is missing a default case: switch (name.ToUpper())                              {                                  case "\"FOLDER\"":                                      folder = item.ReadAsStringAsync().Result ?? "";                                      break;                                    case "\"FILTER\"":                                      filter = item.ReadAsStringAsync().Result ?? "";                                      break;                                    case "\"OVERWRITE\"":                                      bool.TryParse(item.ReadAsStringAsync().Result' out overwrite);                                      break;                                    case "\"ISHOSTMENU\"":                                      bool.TryParse(item.ReadAsStringAsync().Result' out isHostMenu);                                      break;                                    case "\"EXTRACT\"":                                      bool.TryParse(item.ReadAsStringAsync().Result' out extract);                                      break;                                    case "\"POSTFILE\"":                                      fileName = item.Headers.ContentDisposition.FileName.Replace("\""' "");                                      if (fileName.IndexOf("\\"' StringComparison.Ordinal) != -1)                                      {                                          fileName = Path.GetFileName(fileName);                                      }                                      stream = item.ReadAsStreamAsync().Result;                                      break;                              }
Missing Default,DotNetNuke.Web.InternalServices,FileUploadController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\InternalServices\FileUploadController.cs,UploadFromLocal,The following switch statement is missing a default case: switch (name.ToUpper())                          {                              case "\"FOLDER\"":                                  folder = item.ReadAsStringAsync().Result ?? "";                                  break;                                case "\"FILTER\"":                                  filter = item.ReadAsStringAsync().Result ?? "";                                  break;                                case "\"OVERWRITE\"":                                  bool.TryParse(item.ReadAsStringAsync().Result' out overwrite);                                  break;                                case "\"ISHOSTPORTAL\"":                                  bool.TryParse(item.ReadAsStringAsync().Result' out isHostPortal);                                  break;                                case "\"EXTRACT\"":                                  bool.TryParse(item.ReadAsStringAsync().Result' out extract);                                  break;                                case "\"PORTALID\"":                                  if (userInfo.IsSuperUser)                                  {                                      int.TryParse(item.ReadAsStringAsync().Result' out portalId);                                  }                                  break;                                case "\"POSTFILE\"":                                  fileName = item.Headers.ContentDisposition.FileName.Replace("\""' "");                                  if (fileName.IndexOf("\\"' StringComparison.Ordinal) != -1)                                  {                                      fileName = Path.GetFileName(fileName);                                  }                                  if (Globals.FileEscapingRegex.Match(fileName).Success == false)                                  {                                      stream = item.ReadAsStreamAsync().Result;                                  }                                  break;                          }
Missing Default,DotNetNuke.Web.UI.WebControls,DnnRibbonBarTool,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnRibbonBarTool.cs,ControlPanelTool_OnClick,The following switch statement is missing a default case: switch (ToolInfo.ToolName)              {                  case "DeletePage":                      if ((HasToolPermissions("DeletePage")))                      {                          string url = TestableGlobals.Instance.NavigateURL(PortalSettings.ActiveTab.TabID' "Tab"' "action=delete");                          Page.Response.Redirect(url' true);                                              }                      break;                  case "CopyPermissionsToChildren":                      if ((HasToolPermissions("CopyPermissionsToChildren")))                      {                          TabController.CopyPermissionsToChildren(PortalSettings.ActiveTab' PortalSettings.ActiveTab.TabPermissions);                          Page.Response.Redirect(Page.Request.RawUrl);                      }                      break;                  case "CopyDesignToChildren":                      if ((HasToolPermissions("CopyDesignToChildren")))                      {                          TabController.CopyDesignToChildren(PortalSettings.ActiveTab' PortalSettings.ActiveTab.SkinSrc' PortalSettings.ActiveTab.ContainerSrc);                          Page.Response.Redirect(Page.Request.RawUrl);                      }                      break;                  case "ClearCache":                      if ((HasToolPermissions("ClearCache")))                      {                          ClearCache();  						ClientResourceManager.ClearCache();                          Page.Response.Redirect(Page.Request.RawUrl);                      }                      break;                  case "RecycleApp":                      if ((HasToolPermissions("RecycleApp")))                      {                          RestartApplication();                          Page.Response.Redirect(Page.Request.RawUrl);                      }                      break;              }
Missing Default,DotNetNuke.Web.UI.WebControls,DnnRibbonBarTool,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnRibbonBarTool.cs,EnableTool,The following switch statement is missing a default case: switch (ToolInfo.ToolName)              {                  case "DeletePage":                      if ((TabController.IsSpecialTab(TabController.CurrentPage.TabID' PortalSettings.PortalId)))                      {                          returnValue = false;                      }                      break;                  case "CopyDesignToChildren":                  case "CopyPermissionsToChildren":                      returnValue = ActiveTabHasChildren();                      if ((returnValue && ToolInfo.ToolName == "CopyPermissionsToChildren"))                      {                          if ((PortalSettings.ActiveTab.IsSuperTab))                          {                              returnValue = false;                          }                      }                      break;              }
Missing Default,DotNetNuke.Web.UI.WebControls,DnnUrlControl,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnUrlControl.cs,DoRenderTypeControls,The following switch statement is missing a default case: switch (optType.SelectedItem.Value)                  {                      case "N": //None                          URLRow.Visible = false;                          TabRow.Visible = false;                          FileRow.Visible = false;                          UserRow.Visible = false;                          ImagesRow.Visible = false;                          break;                      case "I": //System Image                          URLRow.Visible = false;                          TabRow.Visible = false;                          FileRow.Visible = false;                          UserRow.Visible = false;                          ImagesRow.Visible = true;                            cboImages.Items.Clear();                            string strImagesFolder = Path.Combine(Globals.ApplicationMapPath' PortalSettings.DefaultIconLocation.Replace('/'' '\\'));                          foreach (string strImage in Directory.GetFiles(strImagesFolder))                          {                              string img = strImage.Replace(strImagesFolder' "").Trim('/').Trim('\\');                              cboImages.Items.Add(new ListItem(img' string.Format("~/{0}/{1}"' PortalSettings.DefaultIconLocation' img).ToLower()));                          }                            ListItem selecteItem = cboImages.Items.FindByValue(_Url.ToLower());                          if (selecteItem != null)                          {                              selecteItem.Selected = true;                          }                          break;                        case "U": //Url                          URLRow.Visible = true;                          TabRow.Visible = false;                          FileRow.Visible = false;                          UserRow.Visible = false;                          ImagesRow.Visible = false;                          if (String.IsNullOrEmpty(txtUrl.Text))                          {                              txtUrl.Text = _Url;                          }                          if (String.IsNullOrEmpty(txtUrl.Text))                          {                              txtUrl.Text = "http://";                          }                          txtUrl.Visible = true;                            cmdSelect.Visible = true;                            cboUrls.Visible = false;                          cmdAdd.Visible = false;                          cmdDelete.Visible = false;                          break;                      case "T": //tab                          URLRow.Visible = false;                          TabRow.Visible = true;                          FileRow.Visible = false;                          UserRow.Visible = false;                          ImagesRow.Visible = false;                            cboTabs.IncludeAllTabTypes = false;                          cboTabs.IncludeActiveTab = IncludeActiveTab;                          cboTabs.IncludeDisabledTabs = true;                          cboTabs.DisabledNotSelectable = true;                          cboTabs.UndefinedItem = new ListItem(DynamicSharedConstants.Unspecified' string.Empty);                            if (!string.IsNullOrEmpty(_Url))                          {                              PortalSettings _settings = PortalController.Instance.GetCurrentPortalSettings();                              var tabId = Int32.Parse(_Url);                              var page = TabController.Instance.GetTab(tabId' _settings.PortalId);                              cboTabs.SelectedPage = page;                          }                          break;                      case "F": //file                          URLRow.Visible = false;                          TabRow.Visible = false;                          FileRow.Visible = true;                          UserRow.Visible = false;                          ImagesRow.Visible = false;                            //select folder                          //We Must check if selected folder has changed because of a property change (Secure' Database)                          string FileName = string.Empty;                          string FolderPath = string.Empty;                          string LastFileName = string.Empty;                          string LastFolderPath = string.Empty;                          //Let's try to remember last selection                          if (ViewState["LastFolderPath"] != null)                          {                              LastFolderPath = Convert.ToString(ViewState["LastFolderPath"]);                          }                          if (ViewState["LastFileName"] != null)                          {                              LastFileName = Convert.ToString(ViewState["LastFileName"]);                          }                          if (_Url != string.Empty)                          {                              //Let's use the new URL                              FileName = _Url.Substring(_Url.LastIndexOf("/") + 1);                              FolderPath = _Url.Replace(FileName' "");                          }                          else                          {                              //Use last settings                              FileName = LastFileName;                              FolderPath = LastFolderPath;                          }                            ctlFile.FilePath = FolderPath + FileName;                            txtUrl.Visible = false;                          break;                      case "M": //membership users                          URLRow.Visible = false;                          TabRow.Visible = false;                          FileRow.Visible = false;                          UserRow.Visible = true;                          ImagesRow.Visible = false;                          if (String.IsNullOrEmpty(txtUser.Text))                          {                              txtUser.Text = _Url;                          }                          break;                  }
Missing Default,DotNetNuke.Web.UI.WebControls,DnnFilePicker,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\WebControls\DnnFilePicker.cs,OnPreRender,The following switch statement is missing a default case: switch (Mode)  				{  					case FileControlMode.Normal:  						_pnlFile.Visible = true;  						_pnlUpload.Visible = false;  						_pnlRightDiv.Visible = true;  						ShowImage();    						if ((FolderPermissionController.HasFolderPermission(PortalId' _cboFolders.SelectedItem.Value' "ADD") || IsUserFolder(_cboFolders.SelectedItem.Value)) && ShowUpLoad)  						{  							ShowButton(_cmdUpload' "Upload");  						}  						break;    					case FileControlMode.UpLoadFile:  						_pnlFile.Visible = false;  						_pnlUpload.Visible = true;                          _pnlRightDiv.Visible = false;  						ShowButton(_cmdSave' "Save");  						ShowButton(_cmdCancel' "Cancel");  						break;  				}
Missing Default,DotNetNuke.Web.UI,RibbonBarManager,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\DotNetNuke.Web\UI\RibbonBarManager.cs,SaveTabInfoObject,The following switch statement is missing a default case: switch (invalidType)  				{  					case "EmptyTabName":  						throw new DotNetNukeException("Page name is required."' DotNetNukeErrorCode.PageNameRequired);  					case "InvalidTabName":  						throw new DotNetNukeException("Page name is invalid."' DotNetNukeErrorCode.PageNameInvalid);  				}
